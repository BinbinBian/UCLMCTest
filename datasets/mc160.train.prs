{'sentences': [{'string': ' Tom had to fix some things around the house.', 'parse': {'tree': '(ROOT (S (NP (NNP Tom)) (VP (VBD had) (S (VP (TO to) (VP (VB fix) (NP (DT some) (NNS things)) (PP (IN around) (NP (DT the) (NN house))))))) (. .)))', 'lemma': [(u'Tom', u'Tom', u'NNP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'fix', u'fix', u'VB'), (u'some', u'some', u'DT'), (u'things', u'thing', u'NNS'), (u'around', u'around', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tom', 'had', 'to', 'fix', 'some', 'things', 'around', 'the', 'house', '.']}, {'string': ' He had to fix the door.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (S (VP (TO to) (VP (VB fix) (NP (DT the) (NN door)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'fix', u'fix', u'VB'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'to', 'fix', 'the', 'door', '.']}, {'string': ' He had to fix the window.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (S (VP (TO to) (VP (VB fix) (NP (DT the) (NN window)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'fix', u'fix', u'VB'), (u'the', u'the', u'DT'), (u'window', u'window', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'to', 'fix', 'the', 'window', '.']}, {'string': ' But before he did anything he had to fix the toilet.', 'parse': {'tree': '(ROOT (S (CC But) (SBAR (IN before) (S (NP (PRP he)) (VP (VBD did) (NP (NN anything))))) (NP (PRP he)) (VP (VBD had) (S (VP (TO to) (VP (VB fix) (NP (DT the) (NN toilet)))))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'before', u'before', u'IN'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u'anything', u'anything', u'NN'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'fix', u'fix', u'VB'), (u'the', u'the', u'DT'), (u'toilet', u'toilet', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'before', 'he', 'did', 'anything', 'he', 'had', 'to', 'fix', 'the', 'toilet', '.']}, {'string': ' Tom called over his best friend Jim to help him.', 'parse': {'tree': '(ROOT (S (NP (NNP Tom)) (VP (VBD called) (PRT (RP over)) (NP (NP (PRP$ his) (JJS best) (NN friend)) (SBAR (S (NP (NNP Jim)) (VP (TO to) (VP (VB help) (NP (PRP him)))))))) (. .)))', 'lemma': [(u'Tom', u'Tom', u'NNP'), (u'called', u'call', u'VBD'), (u'over', u'over', u'RP'), (u'his', u'he', u'PRP$'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'Jim', u'Jim', u'NNP'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Tom', 'called', 'over', 'his', 'best', 'friend', 'Jim', 'to', 'help', 'him', '.']}, {'string': ' Jim brought with him his friends Molly and Holly.', 'parse': {'tree': '(ROOT (S (NP (NNP Jim)) (VP (VBD brought) (PP (IN with) (NP (PRP him))) (NP (NP (PRP$ his) (NNS friends)) (NP (NNP Molly) (CC and) (NNP Holly)))) (. .)))', 'lemma': [(u'Jim', u'Jim', u'NNP'), (u'brought', u'bring', u'VBD'), (u'with', u'with', u'IN'), (u'him', u'he', u'PRP'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'Molly', u'Molly', u'NNP'), (u'and', u'and', u'CC'), (u'Holly', u'Holly', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Jim', 'brought', 'with', 'him', 'his', 'friends', 'Molly', 'and', 'Holly', '.']}, {'string': " Tom thought that Jim was going to bring Dolly with him but he did n't.", 'parse': {'tree': "(ROOT (S (S (NP (NNP Tom)) (VP (VBD thought) (SBAR (IN that) (S (NP (NNP Jim)) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB bring) (NP (NP (NNP Dolly)) (PP (IN with) (NP (PRP him))))))))))))) (CC but) (S (NP (PRP he)) (VP (VBD did) (RB n't))) (. .)))", 'lemma': [(u'Tom', u'Tom', u'NNP'), (u'thought', u'think', u'VBD'), (u'that', u'that', u'IN'), (u'Jim', u'Jim', u'NNP'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'bring', u'bring', u'VB'), (u'Dolly', u'Dolly', u'NNP'), (u'with', u'with', u'IN'), (u'him', u'he', u'PRP'), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Tom', 'thought', 'that', 'Jim', 'was', 'going', 'to', 'bring', 'Dolly', 'with', 'him', 'but', 'he', 'did', "n't", '.']}, {'string': ' The four of them got to work right away.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (CD four)) (PP (IN of) (NP (PRP them)))) (VP (VBD got) (S (VP (TO to) (VP (VB work) (ADVP (RB right) (RB away)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'four', u'four', u'CD'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'work', u'work', u'VB'), (u'right', u'right', u'RB'), (u'away', u'away', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'four', 'of', 'them', 'got', 'to', 'work', 'right', 'away', '.']}, {'string': ' Fixing the toilet was easy.', 'parse': {'tree': '(ROOT (S (S (VP (VBG Fixing) (NP (DT the) (NN toilet)))) (VP (VBD was) (ADJP (JJ easy))) (. .)))', 'lemma': [(u'Fixing', u'fix', u'VBG'), (u'the', u'the', u'DT'), (u'toilet', u'toilet', u'NN'), (u'was', u'be', u'VBD'), (u'easy', u'easy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Fixing', 'the', 'toilet', 'was', 'easy', '.']}, {'string': ' Fixing the door was also easy but fixing the window was very hard.', 'parse': {'tree': '(ROOT (S (S (VP (VP (VBG Fixing) (SBAR (S (NP (DT the) (NN door)) (VP (VBD was) (ADVP (RB also)) (ADJP (JJ easy)))))) (CC but) (VP (VBG fixing) (NP (DT the) (NN window))))) (VP (VBD was) (ADJP (RB very) (JJ hard))) (. .)))', 'lemma': [(u'Fixing', u'fix', u'VBG'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'was', u'be', u'VBD'), (u'also', u'also', u'RB'), (u'easy', u'easy', u'JJ'), (u'but', u'but', u'CC'), (u'fixing', u'fix', u'VBG'), (u'the', u'the', u'DT'), (u'window', u'window', u'NN'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'hard', u'hard', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Fixing', 'the', 'door', 'was', 'also', 'easy', 'but', 'fixing', 'the', 'window', 'was', 'very', 'hard', '.']}, {'string': ' The window was stuck and could not be opened.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN window)) (VP (VP (VBD was) (VP (VBN stuck))) (CC and) (VP (MD could) (RB not) (VP (VB be) (VP (VBN opened))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'window', u'window', u'NN'), (u'was', u'be', u'VBD'), (u'stuck', u'stick', u'VBN'), (u'and', u'and', u'CC'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'be', u'be', u'VB'), (u'opened', u'open', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'window', 'was', 'stuck', 'and', 'could', 'not', 'be', 'opened', '.']}, {'string': ' They all pushed on the window really hard until finally it opened.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (DT all)) (VP (VBD pushed) (PP (IN on) (NP (NP (DT the) (NN window)) (ADJP (RB really) (JJ hard)))) (SBAR (IN until) (S (ADVP (RB finally)) (NP (PRP it)) (VP (VBD opened))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'all', u'all', u'DT'), (u'pushed', u'push', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'window', u'window', u'NN'), (u'really', u'really', u'RB'), (u'hard', u'hard', u'JJ'), (u'until', u'until', u'IN'), (u'finally', u'finally', u'RB'), (u'it', u'it', u'PRP'), (u'opened', u'open', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'all', 'pushed', 'on', 'the', 'window', 'really', 'hard', 'until', 'finally', 'it', 'opened', '.']}, {'string': ' Once the window was fixed the four of them made a delicious dinner and talked about all of the good work that they had done.', 'parse': {'tree': '(ROOT (S (SBAR (IN Once) (S (NP (DT the) (NN window)) (VP (VBD was) (VP (VBN fixed) (NP (NP (DT the) (CD four)) (PP (IN of) (NP (PRP them)))))))) (VP (VP (VBD made) (NP (DT a) (ADJP (JJ delicious)) (NN dinner))) (CC and) (VP (VBD talked) (PP (IN about) (NP (NP (DT all)) (PP (IN of) (NP (DT the) (JJ good) (NN work))))) (SBAR (IN that) (S (NP (PRP they)) (VP (VBD had) (VP (VBN done))))))) (. .)))', 'lemma': [(u'Once', u'once', u'IN'), (u'the', u'the', u'DT'), (u'window', u'window', u'NN'), (u'was', u'be', u'VBD'), (u'fixed', u'fix', u'VBN'), (u'the', u'the', u'DT'), (u'four', u'four', u'CD'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'made', u'make', u'VBD'), (u'a', u'a', u'DT'), (u'delicious', u'delicious', u'JJ'), (u'dinner', u'dinner', u'NN'), (u'and', u'and', u'CC'), (u'talked', u'talk', u'VBD'), (u'about', u'about', u'IN'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'good', u'good', u'JJ'), (u'work', u'work', u'NN'), (u'that', u'that', u'IN'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'done', u'do', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['Once', 'the', 'window', 'was', 'fixed', 'the', 'four', 'of', 'them', 'made', 'a', 'delicious', 'dinner', 'and', 'talked', 'about', 'all', 'of', 'the', 'good', 'work', 'that', 'they', 'had', 'done', '.']}, {'string': ' Tom was glad that he had such good friends to help him with his work.', 'parse': {'tree': '(ROOT (S (NP (NNP Tom)) (VP (VBD was) (ADJP (JJ glad)) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD had) (S (NP (JJ such) (JJ good) (NNS friends)) (VP (TO to) (VP (VB help) (NP (PRP him)) (PP (IN with) (NP (PRP$ his) (NN work)))))))))) (. .)))', 'lemma': [(u'Tom', u'Tom', u'NNP'), (u'was', u'be', u'VBD'), (u'glad', u'glad', u'JJ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'such', u'such', u'JJ'), (u'good', u'good', u'JJ'), (u'friends', u'friend', u'NNS'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'him', u'he', u'PRP'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'work', u'work', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tom', 'was', 'glad', 'that', 'he', 'had', 'such', 'good', 'friends', 'to', 'help', 'him', 'with', 'his', 'work', '.']}], 'questions': [{'question': {'string': ' What was the hardest thing for Tom and his friends to fix?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (JJS hardest) (NN thing)) (PP (IN for) (NP (NP (NNP Tom)) (CC and) (NP (PRP$ his) (NNS friends))))) (VP (TO to) (VP (VB fix)))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'hardest', u'hardest', u'JJS'), (u'thing', u'thing', u'NN'), (u'for', u'for', u'IN'), (u'Tom', u'Tom', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'to', u'to', u'TO'), (u'fix', u'fix', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'hardest', 'thing', 'for', 'Tom', 'and', 'his', 'friends', 'to', 'fix', '?']}, 'answers': [{'string': ' Door', 'parse': {'tree': '(ROOT (ADVP (NNP Door)))', 'lemma': [(u'Door', u'Door', u'NNP')]}, 'tokens': ['Door']}, {'string': ' House', 'parse': {'tree': '(ROOT (NP (NNP House)))', 'lemma': [(u'House', u'House', u'NNP')]}, 'tokens': ['House']}, {'string': ' Window', 'parse': {'tree': '(ROOT (NP (NNP Window)))', 'lemma': [(u'Window', u'Window', u'NNP')]}, 'tokens': ['Window']}, {'string': ' Toilet', 'parse': {'tree': '(ROOT (NP (NNP Toilet)))', 'lemma': [(u'Toilet', u'Toilet', u'NNP')]}, 'tokens': ['Toilet']}], 'mode': 0}, {'question': {'string': ' What did Tom need to fix first?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Tom)) (VP (VB need) (S (VP (TO to) (VP (VB fix) (ADVP (RB first))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Tom', u'Tom', u'NNP'), (u'need', u'need', u'VB'), (u'to', u'to', u'TO'), (u'fix', u'fix', u'VB'), (u'first', u'first', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Tom', 'need', 'to', 'fix', 'first', '?']}, 'answers': [{'string': ' Door', 'parse': {'tree': '(ROOT (ADVP (NNP Door)))', 'lemma': [(u'Door', u'Door', u'NNP')]}, 'tokens': ['Door']}, {'string': ' House', 'parse': {'tree': '(ROOT (NP (NNP House)))', 'lemma': [(u'House', u'House', u'NNP')]}, 'tokens': ['House']}, {'string': ' Window', 'parse': {'tree': '(ROOT (NP (NNP Window)))', 'lemma': [(u'Window', u'Window', u'NNP')]}, 'tokens': ['Window']}, {'string': ' Toilet', 'parse': {'tree': '(ROOT (NP (NNP Toilet)))', 'lemma': [(u'Toilet', u'Toilet', u'NNP')]}, 'tokens': ['Toilet']}], 'mode': 1}, {'question': {'string': " Jim did n't bring which person with him?", 'parse': {'tree': "(ROOT (S (NP (NNP Jim)) (VP (VBD did) (RB n't) (VP (VB bring) (NP (WDT which) (NN person)) (PP (IN with) (NP (PRP him))))) (. ?)))", 'lemma': [(u'Jim', u'Jim', u'NNP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'bring', u'bring', u'VB'), (u'which', u'which', u'WDT'), (u'person', u'person', u'NN'), (u'with', u'with', u'IN'), (u'him', u'he', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['Jim', 'did', "n't", 'bring', 'which', 'person', 'with', 'him', '?']}, 'answers': [{'string': ' Jim', 'parse': {'tree': '(ROOT (NP (NNP Jim)))', 'lemma': [(u'Jim', u'Jim', u'NNP')]}, 'tokens': ['Jim']}, {'string': ' Dolly', 'parse': {'tree': '(ROOT (ADVP (RB Dolly)))', 'lemma': [(u'Dolly', u'dolly', u'RB')]}, 'tokens': ['Dolly']}, {'string': ' Molly', 'parse': {'tree': '(ROOT (NP (NNP Molly)))', 'lemma': [(u'Molly', u'Molly', u'NNP')]}, 'tokens': ['Molly']}, {'string': ' Holly', 'parse': {'tree': '(ROOT (NP (NNP Holly)))', 'lemma': [(u'Holly', u'Holly', u'NNP')]}, 'tokens': ['Holly']}], 'mode': 0}, {'question': {'string': " Who was Tom 's best friend?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (NNP Tom) (POS 's)) (JJS best) (NN friend))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'Tom', u'Tom', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'Tom', "'s", 'best', 'friend', '?']}, 'answers': [{'string': ' Molly', 'parse': {'tree': '(ROOT (NP (NNP Molly)))', 'lemma': [(u'Molly', u'Molly', u'NNP')]}, 'tokens': ['Molly']}, {'string': ' Holly', 'parse': {'tree': '(ROOT (NP (NNP Holly)))', 'lemma': [(u'Holly', u'Holly', u'NNP')]}, 'tokens': ['Holly']}, {'string': ' Jim', 'parse': {'tree': '(ROOT (NP (NNP Jim)))', 'lemma': [(u'Jim', u'Jim', u'NNP')]}, 'tokens': ['Jim']}, {'string': ' Dolly', 'parse': {'tree': '(ROOT (ADVP (RB Dolly)))', 'lemma': [(u'Dolly', u'dolly', u'RB')]}, 'tokens': ['Dolly']}], 'mode': 1}]}
{'sentences': [{'string': ' Lisa has a pet cat named Whiskers.', 'parse': {'tree': '(ROOT (S (NP (NNP Lisa)) (VP (VBZ has) (NP (NP (DT a) (JJ pet) (NN cat)) (VP (VBN named) (NP (NNS Whiskers))))) (. .)))', 'lemma': [(u'Lisa', u'Lisa', u'NNP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'pet', u'pet', u'JJ'), (u'cat', u'cat', u'NN'), (u'named', u'name', u'VBN'), (u'Whiskers', u'whisker', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Lisa', 'has', 'a', 'pet', 'cat', 'named', 'Whiskers', '.']}, {'string': ' Whiskers is black with a white spot on her chest.', 'parse': {'tree': '(ROOT (S (NP (NNS Whiskers)) (VP (VBZ is) (ADJP (JJ black) (PP (IN with) (NP (NP (DT a) (JJ white) (NN spot)) (PP (IN on) (NP (PRP$ her) (NN chest))))))) (. .)))', 'lemma': [(u'Whiskers', u'whisker', u'NNS'), (u'is', u'be', u'VBZ'), (u'black', u'black', u'JJ'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'white', u'white', u'JJ'), (u'spot', u'spot', u'NN'), (u'on', u'on', u'IN'), (u'her', u'she', u'PRP$'), (u'chest', u'chest', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Whiskers', 'is', 'black', 'with', 'a', 'white', 'spot', 'on', 'her', 'chest', '.']}, {'string': ' Whiskers also has white paws that look like little white mittens.', 'parse': {'tree': '(ROOT (S (NP (NNS Whiskers)) (ADVP (RB also)) (VP (VBZ has) (NP (NP (JJ white) (NNS paws)) (SBAR (WHNP (WDT that)) (S (VP (VBP look) (PP (IN like) (NP (JJ little) (JJ white) (NNS mittens)))))))) (. .)))', 'lemma': [(u'Whiskers', u'whisker', u'NNS'), (u'also', u'also', u'RB'), (u'has', u'have', u'VBZ'), (u'white', u'white', u'JJ'), (u'paws', u'paw', u'NNS'), (u'that', u'that', u'WDT'), (u'look', u'look', u'VBP'), (u'like', u'like', u'IN'), (u'little', u'little', u'JJ'), (u'white', u'white', u'JJ'), (u'mittens', u'mitten', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Whiskers', 'also', 'has', 'white', 'paws', 'that', 'look', 'like', 'little', 'white', 'mittens', '.']}, {'string': ' Whiskers likes to sleep in the sun on her favorite chair.', 'parse': {'tree': '(ROOT (S (NP (NNS Whiskers)) (VP (VBZ likes) (S (VP (TO to) (VP (VB sleep) (PP (IN in) (NP (NP (DT the) (NN sun)) (PP (IN on) (NP (PRP$ her) (JJ favorite) (NN chair))))))))) (. .)))', 'lemma': [(u'Whiskers', u'whisker', u'NNS'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'sun', u'sun', u'NN'), (u'on', u'on', u'IN'), (u'her', u'she', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'chair', u'chair', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Whiskers', 'likes', 'to', 'sleep', 'in', 'the', 'sun', 'on', 'her', 'favorite', 'chair', '.']}, {'string': ' Whiskers also likes to drink creamy milk.', 'parse': {'tree': '(ROOT (S (NP (NNS Whiskers)) (ADVP (RB also)) (VP (VBZ likes) (S (VP (TO to) (VP (VB drink) (NP (JJ creamy) (NN milk)))))) (. .)))', 'lemma': [(u'Whiskers', u'whisker', u'NNS'), (u'also', u'also', u'RB'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'drink', u'drink', u'VB'), (u'creamy', u'creamy', u'JJ'), (u'milk', u'milk', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Whiskers', 'also', 'likes', 'to', 'drink', 'creamy', 'milk', '.']}, {'string': ' Lisa is excited because on Saturday, Whiskers turns two years old.', 'parse': {'tree': '(ROOT (S (NP (NNP Lisa)) (VP (VBZ is) (ADJP (JJ excited)) (SBAR (IN because) (S (PP (IN on) (NP (NNP Saturday))) (, ,) (NP (NNP Whiskers)) (VP (VBZ turns) (ADJP (NP (CD two) (NNS years)) (JJ old)))))) (. .)))', 'lemma': [(u'Lisa', u'Lisa', u'NNP'), (u'is', u'be', u'VBZ'), (u'excited', u'excited', u'JJ'), (u'because', u'because', u'IN'), (u'on', u'on', u'IN'), (u'Saturday', u'Saturday', u'NNP'), (u',', u',', u','), (u'Whiskers', u'Whiskers', u'NNP'), (u'turns', u'turn', u'VBZ'), (u'two', u'two', u'CD'), (u'years', u'year', u'NNS'), (u'old', u'old', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Lisa', 'is', 'excited', 'because', 'on', 'Saturday', ',', 'Whiskers', 'turns', 'two', 'years', 'old', '.']}, {'string': ' After school on Friday, Lisa rushes to the pet store.', 'parse': {'tree': '(ROOT (S (PP (IN After) (NP (NP (NN school)) (PP (IN on) (NP (NNP Friday))))) (, ,) (NP (NNP Lisa)) (VP (VBZ rushes) (PP (TO to) (NP (DT the) (JJ pet) (NN store)))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'school', u'school', u'NN'), (u'on', u'on', u'IN'), (u'Friday', u'Friday', u'NNP'), (u',', u',', u','), (u'Lisa', u'Lisa', u'NNP'), (u'rushes', u'rush', u'VBZ'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pet', u'pet', u'JJ'), (u'store', u'store', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'school', 'on', 'Friday', ',', 'Lisa', 'rushes', 'to', 'the', 'pet', 'store', '.']}, {'string': " She wants to buy Whiskers ' birthday presents.", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBZ wants) (S (VP (TO to) (VP (VB buy) (NP (NP (NNP Whiskers) (POS ')) (NN birthday) (NNS presents)))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'wants', u'want', u'VBZ'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'Whiskers', u'Whiskers', u'NNP'), (u"'", u"'", u'POS'), (u'birthday', u'birthday', u'NN'), (u'presents', u'present', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'wants', 'to', 'buy', 'Whiskers', "'", 'birthday', 'presents', '.']}, {'string': ' Last year, she gave Whiskers a play mouse and a blue feather.', 'parse': {'tree': '(ROOT (S (NP (JJ Last) (NN year)) (, ,) (NP (PRP she)) (VP (VBD gave) (NP (NNS Whiskers)) (NP (NP (DT a) (NN play) (NN mouse)) (CC and) (NP (DT a) (JJ blue) (NN feather)))) (. .)))', 'lemma': [(u'Last', u'last', u'JJ'), (u'year', u'year', u'NN'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'gave', u'give', u'VBD'), (u'Whiskers', u'whisker', u'NNS'), (u'a', u'a', u'DT'), (u'play', u'play', u'NN'), (u'mouse', u'mouse', u'NN'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'blue', u'blue', u'JJ'), (u'feather', u'feather', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Last', 'year', ',', 'she', 'gave', 'Whiskers', 'a', 'play', 'mouse', 'and', 'a', 'blue', 'feather', '.']}, {'string': ' For this birthday, Lisa is going to give Whiskers a red ball of yarn and a bowl with a picture of a cat on the side.', 'parse': {'tree': '(ROOT (S (PP (IN For) (NP (DT this) (NN birthday))) (, ,) (NP (NNP Lisa)) (VP (VBZ is) (VP (VBG going) (S (VP (TO to) (VP (VB give) (NP (NNS Whiskers)) (NP (NP (NP (DT a) (JJ red) (NN ball)) (PP (IN of) (NP (NN yarn)))) (CC and) (NP (NP (DT a) (NN bowl)) (PP (IN with) (NP (NP (DT a) (NN picture)) (PP (IN of) (NP (NP (DT a) (NN cat)) (PP (IN on) (NP (DT the) (NN side)))))))))))))) (. .)))', 'lemma': [(u'For', u'for', u'IN'), (u'this', u'this', u'DT'), (u'birthday', u'birthday', u'NN'), (u',', u',', u','), (u'Lisa', u'Lisa', u'NNP'), (u'is', u'be', u'VBZ'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'give', u'give', u'VB'), (u'Whiskers', u'whisker', u'NNS'), (u'a', u'a', u'DT'), (u'red', u'red', u'JJ'), (u'ball', u'ball', u'NN'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'bowl', u'bowl', u'NN'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'picture', u'picture', u'NN'), (u'of', u'of', u'IN'), (u'a', u'a', u'DT'), (u'cat', u'cat', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'side', u'side', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['For', 'this', 'birthday', ',', 'Lisa', 'is', 'going', 'to', 'give', 'Whiskers', 'a', 'red', 'ball', 'of', 'yarn', 'and', 'a', 'bowl', 'with', 'a', 'picture', 'of', 'a', 'cat', 'on', 'the', 'side', '.']}, {'string': ' The picture is of a black cat.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN picture)) (VP (VBZ is) (PP (IN of) (NP (DT a) (JJ black) (NN cat)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'picture', u'picture', u'NN'), (u'is', u'be', u'VBZ'), (u'of', u'of', u'IN'), (u'a', u'a', u'DT'), (u'black', u'black', u'JJ'), (u'cat', u'cat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'picture', 'is', 'of', 'a', 'black', 'cat', '.']}, {'string': ' It looks a lot like Whiskers.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBZ looks) (NP (NP (DT a) (NN lot)) (PP (IN like) (NP (NNP Whiskers))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'looks', u'look', u'VBZ'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'like', u'like', u'IN'), (u'Whiskers', u'Whiskers', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'looks', 'a', 'lot', 'like', 'Whiskers', '.']}], 'questions': [{'question': {'string': " What day is Whisker 's Birthday?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WDT What) (NN day)) (SQ (VBZ is) (NP (NP (NNP Whisker) (POS 's)) (NN Birthday))) (. ?)))", 'lemma': [(u'What', u'what', u'WDT'), (u'day', u'day', u'NN'), (u'is', u'be', u'VBZ'), (u'Whisker', u'Whisker', u'NNP'), (u"'s", u"'s", u'POS'), (u'Birthday', u'birthday', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'day', 'is', 'Whisker', "'s", 'Birthday', '?']}, 'answers': [{'string': ' Today', 'parse': {'tree': '(ROOT (NP (NNP Today)))', 'lemma': [(u'Today', u'Today', u'NNP')]}, 'tokens': ['Today']}, {'string': ' Last year', 'parse': {'tree': '(ROOT (NP (JJ Last) (NN year)))', 'lemma': [(u'Last', u'last', u'JJ'), (u'year', u'year', u'NN')]}, 'tokens': ['Last', 'year']}, {'string': ' Friday', 'parse': {'tree': '(ROOT (NP (NNP Friday)))', 'lemma': [(u'Friday', u'Friday', u'NNP')]}, 'tokens': ['Friday']}, {'string': ' Saturday', 'parse': {'tree': '(ROOT (NP (NNP Saturday)))', 'lemma': [(u'Saturday', u'Saturday', u'NNP')]}, 'tokens': ['Saturday']}], 'mode': 0}, {'question': {'string': ' What does Whiskers like to do?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNPS Whiskers)) (VP (VB like) (S (VP (TO to) (VP (VB do)))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Whiskers', u'Whiskers', u'NNPS'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Whiskers', 'like', 'to', 'do', '?']}, 'answers': [{'string': ' Sleep in the sun and drink creamy milk', 'parse': {'tree': '(ROOT (SINV (VP (VBP Sleep) (PP (IN in) (NP (DT the) (NN sun) (CC and) (NN drink)))) (NP (JJ creamy) (NN milk))))', 'lemma': [(u'Sleep', u'sleep', u'VBP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'sun', u'sun', u'NN'), (u'and', u'and', u'CC'), (u'drink', u'drink', u'NN'), (u'creamy', u'creamy', u'JJ'), (u'milk', u'milk', u'NN')]}, 'tokens': ['Sleep', 'in', 'the', 'sun', 'and', 'drink', 'creamy', 'milk']}, {'string': ' Play', 'parse': {'tree': '(ROOT (S (VP (VB Play))))', 'lemma': [(u'Play', u'play', u'VB')]}, 'tokens': ['Play']}, {'string': ' Drink', 'parse': {'tree': '(ROOT (NP (NN Drink)))', 'lemma': [(u'Drink', u'drink', u'NN')]}, 'tokens': ['Drink']}, {'string': ' Sleep', 'parse': {'tree': '(ROOT (NP (NNP Sleep)))', 'lemma': [(u'Sleep', u'Sleep', u'NNP')]}, 'tokens': ['Sleep']}], 'mode': 0}, {'question': {'string': ' What color is Whiskers?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBZ is) (NP (NNPS Whiskers))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'is', u'be', u'VBZ'), (u'Whiskers', u'Whiskers', u'NNPS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'is', 'Whiskers', '?']}, 'answers': [{'string': ' All white with a black spot', 'parse': {'tree': '(ROOT (NP (NP (DT All)) (NP (NP (JJ white)) (PP (IN with) (NP (DT a) (JJ black) (NN spot))))))', 'lemma': [(u'All', u'all', u'DT'), (u'white', u'white', u'JJ'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'black', u'black', u'JJ'), (u'spot', u'spot', u'NN')]}, 'tokens': ['All', 'white', 'with', 'a', 'black', 'spot']}, {'string': ' White', 'parse': {'tree': '(ROOT (NP (NNP White)))', 'lemma': [(u'White', u'White', u'NNP')]}, 'tokens': ['White']}, {'string': ' Black', 'parse': {'tree': '(ROOT (NP (NNP Black)))', 'lemma': [(u'Black', u'Black', u'NNP')]}, 'tokens': ['Black']}, {'string': ' Black with white paws and a white spot', 'parse': {'tree': '(ROOT (NP (NP (NNP Black)) (PP (IN with) (NP (NP (JJ white) (NNS paws)) (CC and) (NP (DT a) (JJ white) (NN spot))))))', 'lemma': [(u'Black', u'Black', u'NNP'), (u'with', u'with', u'IN'), (u'white', u'white', u'JJ'), (u'paws', u'paw', u'NNS'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'white', u'white', u'JJ'), (u'spot', u'spot', u'NN')]}, 'tokens': ['Black', 'with', 'white', 'paws', 'and', 'a', 'white', 'spot']}], 'mode': 0}, {'question': {'string': ' What does Lisa buy for Whiskers for this birthday?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Lisa)) (VP (VB buy) (PP (IN for) (NP (NP (NNP Whiskers)) (PP (IN for) (NP (DT this) (NN birthday))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Lisa', u'Lisa', u'NNP'), (u'buy', u'buy', u'VB'), (u'for', u'for', u'IN'), (u'Whiskers', u'Whiskers', u'NNP'), (u'for', u'for', u'IN'), (u'this', u'this', u'DT'), (u'birthday', u'birthday', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Lisa', 'buy', 'for', 'Whiskers', 'for', 'this', 'birthday', '?']}, 'answers': [{'string': ' A bowl with a cat on it', 'parse': {'tree': '(ROOT (NP (NP (DT A) (NN bowl)) (PP (IN with) (NP (NP (DT a) (NN cat)) (PP (IN on) (NP (PRP it)))))))', 'lemma': [(u'A', u'a', u'DT'), (u'bowl', u'bowl', u'NN'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'cat', u'cat', u'NN'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP')]}, 'tokens': ['A', 'bowl', 'with', 'a', 'cat', 'on', 'it']}, {'string': ' A play mouse', 'parse': {'tree': '(ROOT (NP (DT A) (NN play) (NN mouse)))', 'lemma': [(u'A', u'a', u'DT'), (u'play', u'play', u'NN'), (u'mouse', u'mouse', u'NN')]}, 'tokens': ['A', 'play', 'mouse']}, {'string': ' A red ball of yarn and a bowl with a cat on it', 'parse': {'tree': '(ROOT (FRAG (NP (NP (DT A) (JJ red) (NN ball)) (PP (IN of) (NP (NP (NN yarn)) (CC and) (NP (DT a) (NN bowl))))) (PP (IN with) (NP (DT a) (NN cat))) (PP (IN on) (NP (PRP it)))))', 'lemma': [(u'A', u'a', u'DT'), (u'red', u'red', u'JJ'), (u'ball', u'ball', u'NN'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'bowl', u'bowl', u'NN'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'cat', u'cat', u'NN'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP')]}, 'tokens': ['A', 'red', 'ball', 'of', 'yarn', 'and', 'a', 'bowl', 'with', 'a', 'cat', 'on', 'it']}, {'string': ' A blue feather', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (JJ blue) (NN feather))))', 'lemma': [(u'A', u'a', u'DT'), (u'blue', u'blue', u'JJ'), (u'feather', u'feather', u'NN')]}, 'tokens': ['A', 'blue', 'feather']}], 'mode': 0}]}
{'sentences': [{'string': ' Hawthorne rolled over in bed and looked around the room.', 'parse': {'tree': '(ROOT (S (NP (NN Hawthorne)) (VP (VP (VBD rolled) (PRT (RP over)) (PP (IN in) (NP (NN bed)))) (CC and) (VP (VBD looked) (PRT (RP around)) (NP (DT the) (NN room)))) (. .)))', 'lemma': [(u'Hawthorne', u'hawthorne', u'NN'), (u'rolled', u'roll', u'VBD'), (u'over', u'over', u'RP'), (u'in', u'in', u'IN'), (u'bed', u'bed', u'NN'), (u'and', u'and', u'CC'), (u'looked', u'look', u'VBD'), (u'around', u'around', u'RP'), (u'the', u'the', u'DT'), (u'room', u'room', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Hawthorne', 'rolled', 'over', 'in', 'bed', 'and', 'looked', 'around', 'the', 'room', '.']}, {'string': ' He let out a breath.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBP let) (PRT (RP out)) (NP (DT a) (NN breath))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'let', u'let', u'VBP'), (u'out', u'out', u'RP'), (u'a', u'a', u'DT'), (u'breath', u'breath', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'let', 'out', 'a', 'breath', '.']}, {'string': ' His eyes were half-closed as he shoved the covers back from his bed, and moved towards the door.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NNS eyes)) (VP (VBD were) (ADJP (JJ half-closed)) (SBAR (IN as) (S (NP (PRP he)) (VP (VP (VBD shoved) (NP (DT the) (NNS covers)) (PRT (RP back)) (PP (IN from) (NP (PRP$ his) (NN bed)))) (, ,) (CC and) (VP (VBD moved) (PP (IN towards) (NP (DT the) (NN door)))))))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'were', u'be', u'VBD'), (u'half-closed', u'half-closed', u'JJ'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'shoved', u'shove', u'VBD'), (u'the', u'the', u'DT'), (u'covers', u'cover', u'NNS'), (u'back', u'back', u'RP'), (u'from', u'from', u'IN'), (u'his', u'he', u'PRP$'), (u'bed', u'bed', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'moved', u'move', u'VBD'), (u'towards', u'towards', u'IN'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'eyes', 'were', 'half-closed', 'as', 'he', 'shoved', 'the', 'covers', 'back', 'from', 'his', 'bed', ',', 'and', 'moved', 'towards', 'the', 'door', '.']}, {'string': ' He knew that he had to check on Kate, if he did nothing else.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD knew) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD had) (S (VP (TO to) (VP (VB check) (PP (IN on) (NP (NNP Kate))) (, ,) (SBAR (IN if) (S (NP (PRP he)) (VP (VBD did) (S (NP (NN nothing)) (ADJP (RB else))))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'knew', u'know', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'check', u'check', u'VB'), (u'on', u'on', u'IN'), (u'Kate', u'Kate', u'NNP'), (u',', u',', u','), (u'if', u'if', u'IN'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u'nothing', u'nothing', u'NN'), (u'else', u'else', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'knew', 'that', 'he', 'had', 'to', 'check', 'on', 'Kate', ',', 'if', 'he', 'did', 'nothing', 'else', '.']}, {'string': ' She was ill, with a heart problem, and he worried about her all the time.', 'parse': {'tree': '(ROOT (S (S (NP (PRP She)) (VP (VBD was) (ADJP (JJ ill)) (, ,) (PP (IN with) (NP (DT a) (NN heart) (NN problem))))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD worried) (PP (IN about) (NP (PRP her))) (NP (PDT all) (DT the) (NN time)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'ill', u'ill', u'JJ'), (u',', u',', u','), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'heart', u'heart', u'NN'), (u'problem', u'problem', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'worried', u'worry', u'VBD'), (u'about', u'about', u'IN'), (u'her', u'she', u'PRP'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'was', 'ill', ',', 'with', 'a', 'heart', 'problem', ',', 'and', 'he', 'worried', 'about', 'her', 'all', 'the', 'time', '.']}, {'string': ' They both lived in a home for orphans, and he had since his parents had died, when he was the age of four.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (ADVP (DT both)) (VP (VBD lived) (PP (IN in) (NP (DT a) (NN home))) (PP (IN for) (NP (NNS orphans))))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD had) (SBAR (IN since) (S (NP (PRP$ his) (NNS parents)) (VP (VBD had) (VP (VBN died) (, ,) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBD was) (NP (NP (DT the) (NN age)) (PP (IN of) (NP (CD four))))))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'both', u'both', u'DT'), (u'lived', u'live', u'VBD'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'home', u'home', u'NN'), (u'for', u'for', u'IN'), (u'orphans', u'orphan', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'since', u'since', u'IN'), (u'his', u'he', u'PRP$'), (u'parents', u'parent', u'NNS'), (u'had', u'have', u'VBD'), (u'died', u'die', u'VBN'), (u',', u',', u','), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'age', u'age', u'NN'), (u'of', u'of', u'IN'), (u'four', u'four', u'CD'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'both', 'lived', 'in', 'a', 'home', 'for', 'orphans', ',', 'and', 'he', 'had', 'since', 'his', 'parents', 'had', 'died', ',', 'when', 'he', 'was', 'the', 'age', 'of', 'four', '.']}, {'string': ' He had taken care of Kate as if she were his sister ever since.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (VP (VBN taken) (NP (NP (NN care)) (PP (IN of) (NP (NNP Kate)))) (SBAR (RB as) (IN if) (S (NP (PRP she)) (VP (VBD were) (NP (PRP$ his) (NN sister)) (ADVP (RB ever) (IN since))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'taken', u'take', u'VBN'), (u'care', u'care', u'NN'), (u'of', u'of', u'IN'), (u'Kate', u'Kate', u'NNP'), (u'as', u'as', u'RB'), (u'if', u'if', u'IN'), (u'she', u'she', u'PRP'), (u'were', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'sister', u'sister', u'NN'), (u'ever', u'ever', u'RB'), (u'since', u'since', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'taken', 'care', 'of', 'Kate', 'as', 'if', 'she', 'were', 'his', 'sister', 'ever', 'since', '.']}, {'string': ' He wandered to her room sitting himself by her on her bed, shoving her hair from her face.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD wandered) (PP (TO to) (NP (PRP$ her) (NN room) (S (VP (VBG sitting) (NP (PRP himself)) (PP (IN by) (NP (PRP her))))))) (PP (IN on) (NP (PRP$ her) (NN bed))) (, ,) (S (VP (VBG shoving) (NP (PRP$ her) (NN hair)) (PP (IN from) (NP (PRP$ her) (NN face)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'wandered', u'wander', u'VBD'), (u'to', u'to', u'TO'), (u'her', u'she', u'PRP$'), (u'room', u'room', u'NN'), (u'sitting', u'sit', u'VBG'), (u'himself', u'himself', u'PRP'), (u'by', u'by', u'IN'), (u'her', u'she', u'PRP'), (u'on', u'on', u'IN'), (u'her', u'she', u'PRP$'), (u'bed', u'bed', u'NN'), (u',', u',', u','), (u'shoving', u'shove', u'VBG'), (u'her', u'she', u'PRP$'), (u'hair', u'hair', u'NN'), (u'from', u'from', u'IN'), (u'her', u'she', u'PRP$'), (u'face', u'face', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'wandered', 'to', 'her', 'room', 'sitting', 'himself', 'by', 'her', 'on', 'her', 'bed', ',', 'shoving', 'her', 'hair', 'from', 'her', 'face', '.']}, {'string': " She moved on the bed as he pulled her into his arms, `` Kate. ''", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBD moved) (PP (IN on) (NP (DT the) (NN bed))) (SBAR (IN as) (S (NP (PRP he)) (VP (VBD pulled) (NP (PRP her)) (PP (IN into) (NP (NP (PRP$ his) (NNS arms)) (, ,) (`` ``) (NP (NNP Kate)))))))) (. .) ('' '')))", 'lemma': [(u'She', u'she', u'PRP'), (u'moved', u'move', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'bed', u'bed', u'NN'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'pulled', u'pull', u'VBD'), (u'her', u'she', u'PRP'), (u'into', u'into', u'IN'), (u'his', u'he', u'PRP$'), (u'arms', u'arm', u'NNS'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Kate', u'Kate', u'NNP'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['She', 'moved', 'on', 'the', 'bed', 'as', 'he', 'pulled', 'her', 'into', 'his', 'arms', ',', '``', 'Kate', '.', "''"]}, {'string': " He said into her ear, `` It 's time to wake up. ''", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD said) (PP (IN into) (NP (PRP$ her) (NN ear))) (, ,) (`` ``) (S (NP (NP (PRP It) (POS 's)) (NN time)) (VP (TO to) (VP (VB wake) (PRT (RP up)))))) (. .) ('' '')))", 'lemma': [(u'He', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u'into', u'into', u'IN'), (u'her', u'she', u'PRP$'), (u'ear', u'ear', u'NN'), (u',', u',', u','), (u'``', u'``', u'``'), (u'It', u'it', u'PRP'), (u"'s", u"'s", u'POS'), (u'time', u'time', u'NN'), (u'to', u'to', u'TO'), (u'wake', u'wake', u'VB'), (u'up', u'up', u'RP'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['He', 'said', 'into', 'her', 'ear', ',', '``', 'It', "'s", 'time', 'to', 'wake', 'up', '.', "''"]}, {'string': ' He pressed a kiss to her head, and her eyes opened.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBD pressed) (NP (DT a) (NN kiss)) (PP (TO to) (NP (PRP$ her) (NN head))))) (, ,) (CC and) (S (NP (PRP$ her) (NNS eyes)) (VP (VBD opened))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'pressed', u'press', u'VBD'), (u'a', u'a', u'DT'), (u'kiss', u'kiss', u'NN'), (u'to', u'to', u'TO'), (u'her', u'she', u'PRP$'), (u'head', u'head', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'opened', u'open', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'pressed', 'a', 'kiss', 'to', 'her', 'head', ',', 'and', 'her', 'eyes', 'opened', '.']}, {'string': " `` Hawthy? ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Hawthy)) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Hawthy', u'hawthy', u'VB'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Hawthy', '?', "''"]}, {'string': ' She said, her nickname for him moving from her lips.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD said) (, ,) (S (NP (NP (PRP$ her) (NN nickname)) (PP (IN for) (NP (PRP him)))) (VP (VBG moving) (PP (IN from) (NP (PRP$ her) (NNS lips)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'her', u'she', u'PRP$'), (u'nickname', u'nickname', u'NN'), (u'for', u'for', u'IN'), (u'him', u'he', u'PRP'), (u'moving', u'move', u'VBG'), (u'from', u'from', u'IN'), (u'her', u'she', u'PRP$'), (u'lips', u'lip', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'said', ',', 'her', 'nickname', 'for', 'him', 'moving', 'from', 'her', 'lips', '.']}, {'string': " `` Yea. ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Yea)) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Yea', u'yea', u'VB'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Yea', '.', "''"]}, {'string': ' He moved her hair.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD moved) (NP (PRP$ her) (NN hair))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'moved', u'move', u'VBD'), (u'her', u'she', u'PRP$'), (u'hair', u'hair', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'moved', 'her', 'hair', '.']}, {'string': " `` I want to go outside today, '' she said, and he nodded in response.", 'parse': {'tree': "(ROOT (S (S (`` ``) (S (NP (PRP I)) (VP (VBP want) (S (VP (TO to) (VP (VB go) (NP (JJ outside) (NN today))))))) (, ,) ('' '') (NP (PRP she)) (VP (VBD said))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD nodded) (PP (IN in) (NP (NN response))))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'want', u'want', u'VBP'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'outside', u'outside', u'JJ'), (u'today', u'today', u'NN'), (u',', u',', u','), (u"''", u"''", u"''"), (u'she', u'she', u'PRP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'nodded', u'nod', u'VBD'), (u'in', u'in', u'IN'), (u'response', u'response', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'I', 'want', 'to', 'go', 'outside', 'today', ',', "''", 'she', 'said', ',', 'and', 'he', 'nodded', 'in', 'response', '.']}, {'string': " `` If you are up to it, I wo n't stop you '', he told her, and she smiled.", 'parse': {'tree': "(ROOT (S (`` ``) (SBAR (IN If) (S (NP (PRP you)) (VP (VBP are) (PRT (RP up)) (PP (TO to) (NP (PRP it)))))) (PRN (, ,) (S (NP (PRP I)) (VP (MD wo) (RB n't) (VP (VB stop) (NP (PRP you) ('' ''))))) (, ,)) (S (NP (PRP he)) (VP (VBD told) (NP (PRP her)))) (, ,) (CC and) (S (NP (PRP she)) (VP (VBD smiled))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'If', u'if', u'IN'), (u'you', u'you', u'PRP'), (u'are', u'be', u'VBP'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'it', u'it', u'PRP'), (u',', u',', u','), (u'I', u'I', u'PRP'), (u'wo', u'will', u'MD'), (u"n't", u'not', u'RB'), (u'stop', u'stop', u'VB'), (u'you', u'you', u'PRP'), (u"''", u"''", u"''"), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'told', u'tell', u'VBD'), (u'her', u'she', u'PRP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'she', u'she', u'PRP'), (u'smiled', u'smile', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'If', 'you', 'are', 'up', 'to', 'it', ',', 'I', 'wo', "n't", 'stop', 'you', "''", ',', 'he', 'told', 'her', ',', 'and', 'she', 'smiled', '.']}, {'string': " `` Thanks Hawthy '', she said.", 'parse': {'tree': "(ROOT (S (S (VP (`` ``) (VB Thanks) (ADVP (RB Hawthy)) ('' ''))) (, ,) (NP (PRP she)) (VP (VBD said)) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Thanks', u'thank', u'VB'), (u'Hawthy', u'hawthy', u'RB'), (u"''", u"''", u"''"), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'said', u'say', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Thanks', 'Hawthy', "''", ',', 'she', 'said', '.']}, {'string': " It was n't long until she fell back to sleep.", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (VBD was) (RB n't) (ADJP (JJ long)) (SBAR (IN until) (S (NP (PRP she)) (VP (VBD fell) (PRT (RP back)) (S (VP (TO to) (VP (VB sleep)))))))) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'long', u'long', u'JJ'), (u'until', u'until', u'IN'), (u'she', u'she', u'PRP'), (u'fell', u'fall', u'VBD'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', "n't", 'long', 'until', 'she', 'fell', 'back', 'to', 'sleep', '.']}], 'questions': [{'question': {'string': ' Where do the main characters live?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (DT the) (JJ main) (NNS characters)) (VP (VB live))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'do', u'do', u'VBP'), (u'the', u'the', u'DT'), (u'main', u'main', u'JJ'), (u'characters', u'character', u'NNS'), (u'live', u'live', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'do', 'the', 'main', 'characters', 'live', '?']}, 'answers': [{'string': ' A home for orphans.', 'parse': {'tree': '(ROOT (NP (NP (DT A) (NN home)) (PP (IN for) (NP (NNS orphans))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'home', u'home', u'NN'), (u'for', u'for', u'IN'), (u'orphans', u'orphan', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'home', 'for', 'orphans', '.']}, {'string': ' A house.', 'parse': {'tree': '(ROOT (NP (DT A) (NN house) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'house', '.']}, {'string': ' An Apartment.', 'parse': {'tree': '(ROOT (NP (DT An) (NN Apartment) (. .)))', 'lemma': [(u'An', u'a', u'DT'), (u'Apartment', u'apartment', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['An', 'Apartment', '.']}, {'string': ' A trailer park.', 'parse': {'tree': '(ROOT (NP (NP (DT A) (NN trailer)) (NP (NN park)) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'trailer', u'trailer', u'NN'), (u'park', u'park', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'trailer', 'park', '.']}], 'mode': 0}, {'question': {'string': " What is the girl 's name?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN girl) (POS 's)) (NN name))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'girl', u'girl', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'the', 'girl', "'s", 'name', '?']}, 'answers': [{'string': ' Patty', 'parse': {'tree': '(ROOT (NP (NNP Patty)))', 'lemma': [(u'Patty', u'Patty', u'NNP')]}, 'tokens': ['Patty']}, {'string': ' Katerina', 'parse': {'tree': '(ROOT (NP (NNP Katerina)))', 'lemma': [(u'Katerina', u'Katerina', u'NNP')]}, 'tokens': ['Katerina']}, {'string': ' Kate', 'parse': {'tree': '(ROOT (NP (NNP Kate)))', 'lemma': [(u'Kate', u'Kate', u'NNP')]}, 'tokens': ['Kate']}, {'string': ' Katherine', 'parse': {'tree': '(ROOT (NP (NNP Katherine)))', 'lemma': [(u'Katherine', u'Katherine', u'NNP')]}, 'tokens': ['Katherine']}], 'mode': 1}, {'question': {'string': ' What is wrong with the girl?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (ADJP (JJ wrong) (PP (IN with) (NP (DT the) (NN girl))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'wrong', u'wrong', u'JJ'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'girl', u'girl', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'wrong', 'with', 'the', 'girl', '?']}, 'answers': [{'string': ' She has the flu.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (DT the) (NN flu))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'the', u'the', u'DT'), (u'flu', u'flu', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'the', 'flu', '.']}, {'string': ' She has a heart problem.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (DT a) (NN heart) (NN problem))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'heart', u'heart', u'NN'), (u'problem', u'problem', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'a', 'heart', 'problem', '.']}, {'string': ' She has diabetes.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (NN diabetes))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'diabetes', u'diabetes', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'diabetes', '.']}, {'string': ' She has a cold.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (DT a) (NN cold))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'cold', u'cold', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'a', 'cold', '.']}], 'mode': 1}, {'question': {'string': " What is the boy 's name?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN boy) (POS 's)) (NN name))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'boy', u'boy', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'the', 'boy', "'s", 'name', '?']}, 'answers': [{'string': ' Hawthorne', 'parse': {'tree': '(ROOT (NP (NN Hawthorne)))', 'lemma': [(u'Hawthorne', u'hawthorne', u'NN')]}, 'tokens': ['Hawthorne']}, {'string': " Hawthorne 's", 'parse': {'tree': "(ROOT (S (NP (NN Hawthorne)) (VP (VBZ 's))))", 'lemma': [(u'Hawthorne', u'hawthorne', u'NN'), (u"'s", u'be', u'VBZ')]}, 'tokens': ['Hawthorne', "'s"]}, {'string': ' Hamlet', 'parse': {'tree': '(ROOT (NP (NNP Hamlet)))', 'lemma': [(u'Hamlet', u'Hamlet', u'NNP')]}, 'tokens': ['Hamlet']}, {'string': ' Jeremy', 'parse': {'tree': '(ROOT (NP (NNP Jeremy)))', 'lemma': [(u'Jeremy', u'Jeremy', u'NNP')]}, 'tokens': ['Jeremy']}], 'mode': 1}]}
{'sentences': [{'string': " One night I was at my friend 's house where he threw a party.", 'parse': {'tree': "(ROOT (S (NP (CD One) (NN night)) (NP (PRP I)) (VP (VBD was) (PP (IN at) (NP (NP (PRP$ my) (NN friend) (POS 's)) (NN house))) (SBAR (WHADVP (WRB where)) (S (NP (PRP he)) (VP (VBD threw) (NP (DT a) (NN party)))))) (. .)))", 'lemma': [(u'One', u'one', u'CD'), (u'night', u'night', u'NN'), (u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u'at', u'at', u'IN'), (u'my', u'my', u'PRP$'), (u'friend', u'friend', u'NN'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'where', u'where', u'WRB'), (u'he', u'he', u'PRP'), (u'threw', u'throw', u'VBD'), (u'a', u'a', u'DT'), (u'party', u'party', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'night', 'I', 'was', 'at', 'my', 'friend', "'s", 'house', 'where', 'he', 'threw', 'a', 'party', '.']}, {'string': ' We were enjoying our dinner at night when all of a sudden we heard a knock on the door.', 'parse': {'tree': '(ROOT (S (NP (PRP We)) (VP (VBD were) (VP (VBG enjoying) (NP (PRP$ our) (NN dinner)) (PP (IN at) (NP (NN night))) (SBAR (WHADVP (WRB when) (NP (NP (DT all)) (PP (IN of) (NP (DT a) (JJ sudden))))) (S (NP (PRP we)) (VP (VBD heard) (NP (DT a) (NN knock)) (PP (IN on) (NP (DT the) (NN door)))))))) (. .)))', 'lemma': [(u'We', u'we', u'PRP'), (u'were', u'be', u'VBD'), (u'enjoying', u'enjoy', u'VBG'), (u'our', u'we', u'PRP$'), (u'dinner', u'dinner', u'NN'), (u'at', u'at', u'IN'), (u'night', u'night', u'NN'), (u'when', u'when', u'WRB'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'a', u'a', u'DT'), (u'sudden', u'sudden', u'JJ'), (u'we', u'we', u'PRP'), (u'heard', u'hear', u'VBD'), (u'a', u'a', u'DT'), (u'knock', u'knock', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['We', 'were', 'enjoying', 'our', 'dinner', 'at', 'night', 'when', 'all', 'of', 'a', 'sudden', 'we', 'heard', 'a', 'knock', 'on', 'the', 'door', '.']}, {'string': ' I opened the door and saw this guy who had scar on his face.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VP (VBD opened) (NP (DT the) (NN door))) (CC and) (VP (VBD saw) (NP (NP (DT this) (NN guy)) (SBAR (WHNP (WP who)) (S (VP (VBD had) (VP (VBN scar) (PP (IN on) (NP (PRP$ his) (NN face)))))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'opened', u'open', u'VBD'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'and', u'and', u'CC'), (u'saw', u'see', u'VBD'), (u'this', u'this', u'DT'), (u'guy', u'guy', u'NN'), (u'who', u'who', u'WP'), (u'had', u'have', u'VBD'), (u'scar', u'scar', u'VBN'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'face', u'face', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'opened', 'the', 'door', 'and', 'saw', 'this', 'guy', 'who', 'had', 'scar', 'on', 'his', 'face', '.']}, {'string': " I asked my friend `` who is that guy? ''", 'parse': {'tree': "(ROOT (S (NP (PRP I)) (VP (VBD asked) (NP (NP (PRP$ my) (NN friend)) (`` ``) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (DT that) (NN guy))))))) (. ?) ('' '')))", 'lemma': [(u'I', u'I', u'PRP'), (u'asked', u'ask', u'VBD'), (u'my', u'my', u'PRP$'), (u'friend', u'friend', u'NN'), (u'``', u'``', u'``'), (u'who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'that', u'that', u'DT'), (u'guy', u'guy', u'NN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['I', 'asked', 'my', 'friend', '``', 'who', 'is', 'that', 'guy', '?', "''"]}, {'string': ', and he told me that it was his friend.', 'parse': {'tree': '(ROOT (PRN (, ,) (S (CC and) (NP (PRP he)) (VP (VBD told) (NP (PRP me)) (SBAR (IN that) (S (NP (PRP it)) (VP (VBD was) (NP (PRP$ his) (NN friend)))) (. .))))))', 'lemma': [(u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'told', u'tell', u'VBD'), (u'me', u'I', u'PRP'), (u'that', u'that', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': [',', 'and', 'he', 'told', 'me', 'that', 'it', 'was', 'his', 'friend', '.']}, {'string': " I did n't trust that guy because he looked very strange.", 'parse': {'tree': "(ROOT (S (NP (PRP I)) (VP (VBD did) (RB n't) (VP (VB trust) (NP (DT that) (NN guy)) (SBAR (IN because) (S (NP (PRP he)) (VP (VBD looked) (ADJP (RB very) (JJ strange))))))) (. .)))", 'lemma': [(u'I', u'I', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'trust', u'trust', u'VB'), (u'that', u'that', u'DT'), (u'guy', u'guy', u'NN'), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'looked', u'look', u'VBD'), (u'very', u'very', u'RB'), (u'strange', u'strange', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'did', "n't", 'trust', 'that', 'guy', 'because', 'he', 'looked', 'very', 'strange', '.']}, {'string': ' After we had dinner the strange guy asked my friend to come outside because he wanted to talk to him.', 'parse': {'tree': '(ROOT (S (SBAR (IN After) (S (NP (PRP we)) (VP (VBD had) (NP (NN dinner))))) (NP (DT the) (JJ strange) (NN guy)) (VP (VBD asked) (NP (PRP$ my) (NN friend) (S (VP (TO to) (VP (VB come) (ADVP (RB outside)) (SBAR (IN because) (S (NP (PRP he)) (VP (VBD wanted) (S (VP (TO to) (VP (VB talk) (PP (TO to) (NP (PRP him)))))))))))))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'we', u'we', u'PRP'), (u'had', u'have', u'VBD'), (u'dinner', u'dinner', u'NN'), (u'the', u'the', u'DT'), (u'strange', u'strange', u'JJ'), (u'guy', u'guy', u'NN'), (u'asked', u'ask', u'VBD'), (u'my', u'my', u'PRP$'), (u'friend', u'friend', u'NN'), (u'to', u'to', u'TO'), (u'come', u'come', u'VB'), (u'outside', u'outside', u'RB'), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'talk', u'talk', u'VB'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'we', 'had', 'dinner', 'the', 'strange', 'guy', 'asked', 'my', 'friend', 'to', 'come', 'outside', 'because', 'he', 'wanted', 'to', 'talk', 'to', 'him', '.']}, {'string': ' A few seconds later I heard a noise from outside and when I ran outside I saw that the strange guy was trying to beat my friend.', 'parse': {'tree': '(ROOT (S (S (ADVP (NP (DT A) (JJ few) (NNS seconds)) (RB later)) (NP (PRP I)) (VP (VBD heard) (NP (DT a) (NN noise)) (PP (IN from) (NP (RB outside))))) (CC and) (S (SBAR (WHADVP (WRB when)) (S (NP (PRP I)) (VP (VBD ran)))) (ADVP (RB outside)) (NP (PRP I)) (VP (VBD saw) (SBAR (IN that) (S (NP (DT the) (JJ strange) (NN guy)) (VP (VBD was) (VP (VBG trying) (S (VP (TO to) (VP (VB beat) (NP (PRP$ my) (NN friend))))))))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'few', u'few', u'JJ'), (u'seconds', u'seconds', u'NNS'), (u'later', u'later', u'RB'), (u'I', u'I', u'PRP'), (u'heard', u'hear', u'VBD'), (u'a', u'a', u'DT'), (u'noise', u'noise', u'NN'), (u'from', u'from', u'IN'), (u'outside', u'outside', u'RB'), (u'and', u'and', u'CC'), (u'when', u'when', u'WRB'), (u'I', u'I', u'PRP'), (u'ran', u'run', u'VBD'), (u'outside', u'outside', u'RB'), (u'I', u'I', u'PRP'), (u'saw', u'see', u'VBD'), (u'that', u'that', u'IN'), (u'the', u'the', u'DT'), (u'strange', u'strange', u'JJ'), (u'guy', u'guy', u'NN'), (u'was', u'be', u'VBD'), (u'trying', u'try', u'VBG'), (u'to', u'to', u'TO'), (u'beat', u'beat', u'VB'), (u'my', u'my', u'PRP$'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'few', 'seconds', 'later', 'I', 'heard', 'a', 'noise', 'from', 'outside', 'and', 'when', 'I', 'ran', 'outside', 'I', 'saw', 'that', 'the', 'strange', 'guy', 'was', 'trying', 'to', 'beat', 'my', 'friend', '.']}, {'string': ' I ran towards him and asked him to leave our house.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VP (VBD ran) (PP (IN towards) (NP (PRP him)))) (CC and) (VP (VBD asked) (S (NP (PRP him)) (VP (TO to) (VP (VB leave) (NP (PRP$ our) (NN house))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'ran', u'run', u'VBD'), (u'towards', u'towards', u'IN'), (u'him', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'asked', u'ask', u'VBD'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'leave', u'leave', u'VB'), (u'our', u'we', u'PRP$'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'ran', 'towards', 'him', 'and', 'asked', 'him', 'to', 'leave', 'our', 'house', '.']}, {'string': ' He left the house but after half an hour he came back and this time he was dressed up as superhero and he also had a sword.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBD left) (NP (DT the) (NN house)))) (CC but) (S (PP (IN after) (NP (PDT half) (DT an) (NN hour))) (S (NP (PRP he)) (VP (VBD came) (ADVP (RB back)))) (CC and) (S (NP (DT this) (NN time)) (NP (PRP he)) (VP (VBD was) (VP (VBN dressed) (PRT (RP up)) (PP (IN as) (NP (NN superhero))))))) (CC and) (S (NP (PRP he)) (ADVP (RB also)) (VP (VBD had) (NP (DT a) (NN sword)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'left', u'leave', u'VBD'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'but', u'but', u'CC'), (u'after', u'after', u'IN'), (u'half', u'half', u'PDT'), (u'an', u'a', u'DT'), (u'hour', u'hour', u'NN'), (u'he', u'he', u'PRP'), (u'came', u'come', u'VBD'), (u'back', u'back', u'RB'), (u'and', u'and', u'CC'), (u'this', u'this', u'DT'), (u'time', u'time', u'NN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'dressed', u'dress', u'VBN'), (u'up', u'up', u'RP'), (u'as', u'as', u'IN'), (u'superhero', u'superhero', u'NN'), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'also', u'also', u'RB'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'sword', u'sword', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'left', 'the', 'house', 'but', 'after', 'half', 'an', 'hour', 'he', 'came', 'back', 'and', 'this', 'time', 'he', 'was', 'dressed', 'up', 'as', 'superhero', 'and', 'he', 'also', 'had', 'a', 'sword', '.']}, {'string': ' As soon as I saw him I ran inside the house and called the cops.', 'parse': {'tree': '(ROOT (S (ADVP (RB As) (RB soon) (SBAR (IN as) (S (NP (PRP I)) (VP (VBD saw) (NP (PRP him)))))) (NP (PRP I)) (VP (VP (VBD ran) (PP (IN inside) (NP (DT the) (NN house)))) (CC and) (VP (VBD called) (NP (DT the) (NNS cops)))) (. .)))', 'lemma': [(u'As', u'as', u'RB'), (u'soon', u'soon', u'RB'), (u'as', u'as', u'IN'), (u'I', u'I', u'PRP'), (u'saw', u'see', u'VBD'), (u'him', u'he', u'PRP'), (u'I', u'I', u'PRP'), (u'ran', u'run', u'VBD'), (u'inside', u'inside', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'and', u'and', u'CC'), (u'called', u'call', u'VBD'), (u'the', u'the', u'DT'), (u'cops', u'cop', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['As', 'soon', 'as', 'I', 'saw', 'him', 'I', 'ran', 'inside', 'the', 'house', 'and', 'called', 'the', 'cops', '.']}, {'string': ' The cops came and the guy ran away as soon as he heard the cop car coming.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NNS cops)) (VP (VBD came))) (CC and) (S (NP (DT the) (NN guy)) (VP (VBD ran) (ADVP (RB away) (RB as) (RB soon)) (SBAR (IN as) (S (NP (PRP he)) (VP (VBD heard) (NP (NP (DT the) (NN cop) (NN car)) (VP (VBG coming)))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'cops', u'cop', u'NNS'), (u'came', u'come', u'VBD'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'guy', u'guy', u'NN'), (u'ran', u'run', u'VBD'), (u'away', u'away', u'RB'), (u'as', u'as', u'RB'), (u'soon', u'soon', u'RB'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'heard', u'hear', u'VBD'), (u'the', u'the', u'DT'), (u'cop', u'cop', u'NN'), (u'car', u'car', u'NN'), (u'coming', u'come', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'cops', 'came', 'and', 'the', 'guy', 'ran', 'away', 'as', 'soon', 'as', 'he', 'heard', 'the', 'cop', 'car', 'coming', '.']}, {'string': ' We never found out what happened to that guy after that day.', 'parse': {'tree': '(ROOT (S (NP (PRP We)) (ADVP (RB never)) (VP (VBD found) (PRT (RP out)) (SBAR (WHNP (WP what)) (S (VP (VBD happened) (PP (TO to) (NP (DT that) (NN guy))) (PP (IN after) (NP (DT that) (NN day))))))) (. .)))', 'lemma': [(u'We', u'we', u'PRP'), (u'never', u'never', u'RB'), (u'found', u'find', u'VBD'), (u'out', u'out', u'RP'), (u'what', u'what', u'WP'), (u'happened', u'happen', u'VBD'), (u'to', u'to', u'TO'), (u'that', u'that', u'DT'), (u'guy', u'guy', u'NN'), (u'after', u'after', u'IN'), (u'that', u'that', u'DT'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['We', 'never', 'found', 'out', 'what', 'happened', 'to', 'that', 'guy', 'after', 'that', 'day', '.']}], 'questions': [{'question': {'string': ' What was the strange guy doing with the friend?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (DT the) (JJ strange) (NN guy)) (VP (VBG doing) (PP (IN with) (NP (DT the) (NN friend))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'strange', u'strange', u'JJ'), (u'guy', u'guy', u'NN'), (u'doing', u'do', u'VBG'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'strange', 'guy', 'doing', 'with', 'the', 'friend', '?']}, 'answers': [{'string': ' enjoying a meal', 'parse': {'tree': '(ROOT (S (VP (VBG enjoying) (NP (DT a) (NN meal)))))', 'lemma': [(u'enjoying', u'enjoy', u'VBG'), (u'a', u'a', u'DT'), (u'meal', u'meal', u'NN')]}, 'tokens': ['enjoying', 'a', 'meal']}, {'string': ' talking about his job', 'parse': {'tree': '(ROOT (S (VP (VBG talking) (PP (IN about) (NP (PRP$ his) (NN job))))))', 'lemma': [(u'talking', u'talk', u'VBG'), (u'about', u'about', u'IN'), (u'his', u'he', u'PRP$'), (u'job', u'job', u'NN')]}, 'tokens': ['talking', 'about', 'his', 'job']}, {'string': ' talking to him', 'parse': {'tree': '(ROOT (S (VP (VBG talking) (PP (TO to) (NP (PRP him))))))', 'lemma': [(u'talking', u'talk', u'VBG'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP')]}, 'tokens': ['talking', 'to', 'him']}, {'string': ' trying to beat him', 'parse': {'tree': '(ROOT (S (VP (VBG trying) (S (VP (TO to) (VP (VB beat) (NP (PRP him))))))))', 'lemma': [(u'trying', u'try', u'VBG'), (u'to', u'to', u'TO'), (u'beat', u'beat', u'VB'), (u'him', u'he', u'PRP')]}, 'tokens': ['trying', 'to', 'beat', 'him']}], 'mode': 1}, {'question': {'string': ' Why did the strange guy run away?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (DT the) (JJ strange) (NN guy)) (VP (VB run) (PRT (RP away)))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'strange', u'strange', u'JJ'), (u'guy', u'guy', u'NN'), (u'run', u'run', u'VB'), (u'away', u'away', u'RP'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'the', 'strange', 'guy', 'run', 'away', '?']}, 'answers': [{'string': ' because he heard the cop car', 'parse': {'tree': '(ROOT (SBAR (IN because) (S (NP (PRP he)) (VP (VBD heard) (NP (DT the) (NN cop) (NN car))))))', 'lemma': [(u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'heard', u'hear', u'VBD'), (u'the', u'the', u'DT'), (u'cop', u'cop', u'NN'), (u'car', u'car', u'NN')]}, 'tokens': ['because', 'he', 'heard', 'the', 'cop', 'car']}, {'string': ' because he saw his friend', 'parse': {'tree': '(ROOT (SBAR (IN because) (S (NP (PRP he)) (VP (VBD saw) (NP (PRP$ his) (NN friend))))))', 'lemma': [(u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'saw', u'see', u'VBD'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN')]}, 'tokens': ['because', 'he', 'saw', 'his', 'friend']}, {'string': " because he did n't like the dinner", 'parse': {'tree': "(ROOT (SBAR (IN because) (S (NP (PRP he)) (VP (VBD did) (RB n't) (VP (VB like) (NP (DT the) (NN dinner)))))))", 'lemma': [(u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'the', u'the', u'DT'), (u'dinner', u'dinner', u'NN')]}, 'tokens': ['because', 'he', 'did', "n't", 'like', 'the', 'dinner']}, {'string': ' because it was getting late', 'parse': {'tree': '(ROOT (SBAR (IN because) (S (NP (PRP it)) (VP (VBD was) (VP (VBG getting) (ADVP (RB late)))))))', 'lemma': [(u'because', u'because', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'getting', u'get', u'VBG'), (u'late', u'late', u'RB')]}, 'tokens': ['because', 'it', 'was', 'getting', 'late']}], 'mode': 1}, {'question': {'string': ' Who was the strange guy dressed up as?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (DT the) (JJ strange) (NN guy)) (VP (VBN dressed) (ADVP (RB up) (RB as)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'strange', u'strange', u'JJ'), (u'guy', u'guy', u'NN'), (u'dressed', u'dress', u'VBN'), (u'up', u'up', u'RB'), (u'as', u'as', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'the', 'strange', 'guy', 'dressed', 'up', 'as', '?']}, 'answers': [{'string': ' a sword', 'parse': {'tree': '(ROOT (FRAG (DT a) (JJ sword)))', 'lemma': [(u'a', u'a', u'DT'), (u'sword', u'sword', u'JJ')]}, 'tokens': ['a', 'sword']}, {'string': ' a car', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN car))))', 'lemma': [(u'a', u'a', u'DT'), (u'car', u'car', u'NN')]}, 'tokens': ['a', 'car']}, {'string': ' a superhero', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN superhero))))', 'lemma': [(u'a', u'a', u'DT'), (u'superhero', u'superhero', u'NN')]}, 'tokens': ['a', 'superhero']}, {'string': ' a cop', 'parse': {'tree': '(ROOT (FRAG (DT a) (JJ cop)))', 'lemma': [(u'a', u'a', u'DT'), (u'cop', u'cop', u'JJ')]}, 'tokens': ['a', 'cop']}], 'mode': 1}, {'question': {'string': " What did they eat at the friend 's house?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (PRP they)) (VP (VB eat) (PP (IN at) (NP (NP (DT the) (NN friend) (POS 's)) (NN house))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'they', u'they', u'PRP'), (u'eat', u'eat', u'VB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'friend', u'friend', u'NN'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'they', 'eat', 'at', 'the', 'friend', "'s", 'house', '?']}, 'answers': [{'string': ' lunch', 'parse': {'tree': '(ROOT (NP (NN lunch)))', 'lemma': [(u'lunch', u'lunch', u'NN')]}, 'tokens': ['lunch']}, {'string': ' snack', 'parse': {'tree': '(ROOT (NP (NN snack)))', 'lemma': [(u'snack', u'snack', u'NN')]}, 'tokens': ['snack']}, {'string': ' breakfast', 'parse': {'tree': '(ROOT (NP (NN breakfast)))', 'lemma': [(u'breakfast', u'breakfast', u'NN')]}, 'tokens': ['breakfast']}, {'string': ' dinner', 'parse': {'tree': '(ROOT (NP (NN dinner)))', 'lemma': [(u'dinner', u'dinner', u'NN')]}, 'tokens': ['dinner']}], 'mode': 1}]}
{'sentences': [{'string': ' Two best friends lived in a small town.', 'parse': {'tree': '(ROOT (S (ADVP (NP (CD Two)) (RB best)) (NP (NNS friends)) (VP (VBD lived) (PP (IN in) (NP (DT a) (JJ small) (NN town)))) (. .)))', 'lemma': [(u'Two', u'two', u'CD'), (u'best', u'best', u'RB'), (u'friends', u'friend', u'NNS'), (u'lived', u'live', u'VBD'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'small', u'small', u'JJ'), (u'town', u'town', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Two', 'best', 'friends', 'lived', 'in', 'a', 'small', 'town', '.']}, {'string': ' They grew up together and did everything together.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD grew) (PRT (RP up)) (ADVP (RB together))) (CC and) (VP (VBD did) (NP (NN everything)) (ADVP (RB together)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'grew', u'grow', u'VBD'), (u'up', u'up', u'RP'), (u'together', u'together', u'RB'), (u'and', u'and', u'CC'), (u'did', u'do', u'VBD'), (u'everything', u'everything', u'NN'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'grew', 'up', 'together', 'and', 'did', 'everything', 'together', '.']}, {'string': ' One boy was named James, and he was a cute, fat kid who was always picked on.', 'parse': {'tree': '(ROOT (S (S (NP (CD One) (NN boy)) (VP (VBD was) (VP (VBN named) (NP (NNP James))))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD was) (NP (NP (DT a) (ADJP (JJ cute) (, ,) (JJ fat)) (NN kid)) (SBAR (WHNP (WP who)) (S (VP (VBD was) (ADVP (RB always)) (VP (VBN picked) (PRT (RP on))))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'boy', u'boy', u'NN'), (u'was', u'be', u'VBD'), (u'named', u'name', u'VBN'), (u'James', u'James', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'cute', u'cute', u'JJ'), (u',', u',', u','), (u'fat', u'fat', u'JJ'), (u'kid', u'kid', u'NN'), (u'who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'always', u'always', u'RB'), (u'picked', u'pick', u'VBN'), (u'on', u'on', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'boy', 'was', 'named', 'James', ',', 'and', 'he', 'was', 'a', 'cute', ',', 'fat', 'kid', 'who', 'was', 'always', 'picked', 'on', '.']}, {'string': ' And then the other boy was named Alex, and he was handsome and cool.', 'parse': {'tree': '(ROOT (S (S (CC And) (ADVP (RB then)) (NP (DT the) (JJ other) (NN boy)) (VP (VBD was) (VP (VBN named) (NP (NNP Alex))))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD was) (ADJP (JJ handsome) (CC and) (JJ cool)))) (. .)))', 'lemma': [(u'And', u'and', u'CC'), (u'then', u'then', u'RB'), (u'the', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'boy', u'boy', u'NN'), (u'was', u'be', u'VBD'), (u'named', u'name', u'VBN'), (u'Alex', u'Alex', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'handsome', u'handsome', u'JJ'), (u'and', u'and', u'CC'), (u'cool', u'cool', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['And', 'then', 'the', 'other', 'boy', 'was', 'named', 'Alex', ',', 'and', 'he', 'was', 'handsome', 'and', 'cool', '.']}, {'string': " They were opposites, but they did n't care.", 'parse': {'tree': "(ROOT (S (S (NP (PRP They)) (VP (VBD were) (ADJP (JJ opposites)))) (, ,) (CC but) (S (NP (PRP they)) (VP (VBD did) (RB n't) (VP (VB care)))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'opposites', u'opposites', u'JJ'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'they', u'they', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'care', u'care', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'opposites', ',', 'but', 'they', 'did', "n't", 'care', '.']}, {'string': ' Alex would always protect James from the bullies because James was weak.', 'parse': {'tree': '(ROOT (S (NP (NNP Alex)) (VP (MD would) (ADVP (RB always)) (VP (VB protect) (NP (NNP James)) (PP (IN from) (NP (DT the) (NN bullies))) (SBAR (IN because) (S (NP (NNP James)) (VP (VBD was) (ADJP (JJ weak))))))) (. .)))', 'lemma': [(u'Alex', u'Alex', u'NNP'), (u'would', u'would', u'MD'), (u'always', u'always', u'RB'), (u'protect', u'protect', u'VB'), (u'James', u'James', u'NNP'), (u'from', u'from', u'IN'), (u'the', u'the', u'DT'), (u'bullies', u'bully', u'NN'), (u'because', u'because', u'IN'), (u'James', u'James', u'NNP'), (u'was', u'be', u'VBD'), (u'weak', u'weak', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Alex', 'would', 'always', 'protect', 'James', 'from', 'the', 'bullies', 'because', 'James', 'was', 'weak', '.']}, {'string': " One day, James was being teased by the bullies, Gordon and Johnny, but Alex was n't there to save him.", 'parse': {'tree': "(ROOT (S (S (NP (CD One) (NN day)) (, ,) (NP (NNP James)) (VP (VBD was) (VP (VBG being) (VP (VBN teased) (PP (IN by) (NP (NP (DT the) (NN bullies)) (, ,) (NP (NNP Gordon)) (CC and) (NP (NNP Johnny)))))))) (, ,) (CC but) (S (NP (NNP Alex)) (VP (VBD was) (RB n't) (VP (NP (RB there)) (S (VP (TO to) (VP (VB save) (NP (PRP him)))))))) (. .)))", 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'James', u'James', u'NNP'), (u'was', u'be', u'VBD'), (u'being', u'be', u'VBG'), (u'teased', u'tease', u'VBN'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'bullies', u'bully', u'NN'), (u',', u',', u','), (u'Gordon', u'Gordon', u'NNP'), (u'and', u'and', u'CC'), (u'Johnny', u'Johnny', u'NNP'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'Alex', u'Alex', u'NNP'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'there', u'there', u'RB'), (u'to', u'to', u'TO'), (u'save', u'save', u'VB'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', ',', 'James', 'was', 'being', 'teased', 'by', 'the', 'bullies', ',', 'Gordon', 'and', 'Johnny', ',', 'but', 'Alex', 'was', "n't", 'there', 'to', 'save', 'him', '.']}, {'string': " James did n't know what to do and was scared.", 'parse': {'tree': "(ROOT (S (NP (NNP James)) (VP (VP (VBD did) (RB n't) (VP (VB know) (SBAR (WHNP (WP what)) (S (VP (TO to) (VP (VB do))))))) (CC and) (VP (VBD was) (ADJP (VBN scared)))) (. .)))", 'lemma': [(u'James', u'James', u'NNP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'know', u'know', u'VB'), (u'what', u'what', u'WP'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'and', u'and', u'CC'), (u'was', u'be', u'VBD'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'did', "n't", 'know', 'what', 'to', 'do', 'and', 'was', 'scared', '.']}, {'string': ' But then he remembered all of the times Alex stood up for him.', 'parse': {'tree': '(ROOT (S (CC But) (ADVP (RB then)) (NP (PRP he)) (VP (VBD remembered) (NP (NP (DT all)) (PP (IN of) (NP (NP (DT the) (NNS times)) (SBAR (S (NP (NNP Alex)) (VP (VBD stood) (PRT (RP up)) (PP (IN for) (NP (PRP him)))))))))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'then', u'then', u'RB'), (u'he', u'he', u'PRP'), (u'remembered', u'remember', u'VBD'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'times', u'time', u'NNS'), (u'Alex', u'Alex', u'NNP'), (u'stood', u'stand', u'VBD'), (u'up', u'up', u'RP'), (u'for', u'for', u'IN'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'then', 'he', 'remembered', 'all', 'of', 'the', 'times', 'Alex', 'stood', 'up', 'for', 'him', '.']}, {'string': ' James looked up to Alex and he thought of him as his hero.', 'parse': {'tree': '(ROOT (S (S (NP (NNP James)) (VP (VBD looked) (PRT (RP up)) (PP (TO to) (NP (NNP Alex))))) (CC and) (S (NP (PRP he)) (VP (VBD thought) (PP (IN of) (NP (PRP him))) (PP (IN as) (NP (PRP$ his) (NN hero))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'looked', u'look', u'VBD'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'Alex', u'Alex', u'NNP'), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'thought', u'think', u'VBD'), (u'of', u'of', u'IN'), (u'him', u'he', u'PRP'), (u'as', u'as', u'IN'), (u'his', u'he', u'PRP$'), (u'hero', u'hero', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'looked', 'up', 'to', 'Alex', 'and', 'he', 'thought', 'of', 'him', 'as', 'his', 'hero', '.']}, {'string': ' James wanted to protect himself and not have Alex always come to help.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBD wanted) (S (VP (TO to) (VP (VP (VB protect) (NP (PRP himself))) (CC and) (RB not) (VP (VB have) (NP (NP (NNP Alex)) (VP (ADVP (RB always)) (VBN come) (S (VP (TO to) (VP (VB help))))))))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'protect', u'protect', u'VB'), (u'himself', u'himself', u'PRP'), (u'and', u'and', u'CC'), (u'not', u'not', u'RB'), (u'have', u'have', u'VB'), (u'Alex', u'Alex', u'NNP'), (u'always', u'always', u'RB'), (u'come', u'come', u'VBN'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'wanted', 'to', 'protect', 'himself', 'and', 'not', 'have', 'Alex', 'always', 'come', 'to', 'help', '.']}, {'string': ' So this time, James got up and was brave.', 'parse': {'tree': '(ROOT (S (RB So) (NP (DT this) (NN time)) (, ,) (NP (NNP James)) (VP (VP (VBD got) (PRT (RP up))) (CC and) (VP (VBD was) (ADJP (JJ brave)))) (. .)))', 'lemma': [(u'So', u'so', u'RB'), (u'this', u'this', u'DT'), (u'time', u'time', u'NN'), (u',', u',', u','), (u'James', u'James', u'NNP'), (u'got', u'get', u'VBD'), (u'up', u'up', u'RP'), (u'and', u'and', u'CC'), (u'was', u'be', u'VBD'), (u'brave', u'brave', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'this', 'time', ',', 'James', 'got', 'up', 'and', 'was', 'brave', '.']}, {'string': " He stood up to Gordon and Johnny and told them that he was n't scared.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VP (VBD stood) (PRT (RP up)) (PP (TO to) (NP (NNP Gordon) (CC and) (NNP Johnny)))) (CC and) (VP (VBD told) (NP (PRP them)) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD was) (RB n't) (ADJP (VBN scared))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'stood', u'stand', u'VBD'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'Gordon', u'Gordon', u'NNP'), (u'and', u'and', u'CC'), (u'Johnny', u'Johnny', u'NNP'), (u'and', u'and', u'CC'), (u'told', u'tell', u'VBD'), (u'them', u'they', u'PRP'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'stood', 'up', 'to', 'Gordon', 'and', 'Johnny', 'and', 'told', 'them', 'that', 'he', 'was', "n't", 'scared', '.']}, {'string': " The bullies did n't know what to do and then gave up.", 'parse': {'tree': "(ROOT (S (NP (DT The) (NN bullies)) (VP (VP (VBD did) (RB n't) (VP (VB know) (SBAR (WHNP (WP what)) (S (VP (TO to) (VP (VB do))))))) (CC and) (VP (ADVP (RB then)) (VBD gave) (PRT (RP up)))) (. .)))", 'lemma': [(u'The', u'the', u'DT'), (u'bullies', u'bully', u'NN'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'know', u'know', u'VB'), (u'what', u'what', u'WP'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'gave', u'give', u'VBD'), (u'up', u'up', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'bullies', 'did', "n't", 'know', 'what', 'to', 'do', 'and', 'then', 'gave', 'up', '.']}, {'string': ' They went away to look for more fun things to do.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD went) (PRT (RP away)) (S (VP (TO to) (VP (VB look) (PP (IN for) (NP (JJR more) (NN fun) (NNS things))) (S (VP (TO to) (VP (VB do)))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'away', u'away', u'RP'), (u'to', u'to', u'TO'), (u'look', u'look', u'VB'), (u'for', u'for', u'IN'), (u'more', u'more', u'JJR'), (u'fun', u'fun', u'NN'), (u'things', u'thing', u'NNS'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'went', 'away', 'to', 'look', 'for', 'more', 'fun', 'things', 'to', 'do', '.']}, {'string': ' Alex saw the whole thing and was proud of James for being brave.', 'parse': {'tree': '(ROOT (S (NP (NNP Alex)) (VP (VP (VBD saw) (NP (DT the) (JJ whole) (NN thing))) (CC and) (VP (VBD was) (ADJP (JJ proud) (PP (IN of) (NP (NNP James)))) (PP (IN for) (S (VP (VBG being) (ADJP (JJ brave))))))) (. .)))', 'lemma': [(u'Alex', u'Alex', u'NNP'), (u'saw', u'see', u'VBD'), (u'the', u'the', u'DT'), (u'whole', u'whole', u'JJ'), (u'thing', u'thing', u'NN'), (u'and', u'and', u'CC'), (u'was', u'be', u'VBD'), (u'proud', u'proud', u'JJ'), (u'of', u'of', u'IN'), (u'James', u'James', u'NNP'), (u'for', u'for', u'IN'), (u'being', u'be', u'VBG'), (u'brave', u'brave', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Alex', 'saw', 'the', 'whole', 'thing', 'and', 'was', 'proud', 'of', 'James', 'for', 'being', 'brave', '.']}, {'string': ' Now James and Alex protect each other and stand up for each other.', 'parse': {'tree': '(ROOT (S (ADVP (RB Now)) (NP (NNP James) (CC and) (NNP Alex)) (VP (VP (VBP protect) (NP (DT each) (JJ other))) (CC and) (VP (VBP stand) (PRT (RP up)) (PP (IN for) (NP (DT each) (JJ other))))) (. .)))', 'lemma': [(u'Now', u'now', u'RB'), (u'James', u'James', u'NNP'), (u'and', u'and', u'CC'), (u'Alex', u'Alex', u'NNP'), (u'protect', u'protect', u'VBP'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'and', u'and', u'CC'), (u'stand', u'stand', u'VBP'), (u'up', u'up', u'RP'), (u'for', u'for', u'IN'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Now', 'James', 'and', 'Alex', 'protect', 'each', 'other', 'and', 'stand', 'up', 'for', 'each', 'other', '.']}, {'string': ' They still are the best of friends.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (RB still)) (VP (VBP are) (NP (NP (DT the) (JJS best)) (PP (IN of) (NP (NNS friends))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'still', u'still', u'RB'), (u'are', u'be', u'VBP'), (u'the', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'of', u'of', u'IN'), (u'friends', u'friend', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'still', 'are', 'the', 'best', 'of', 'friends', '.']}], 'questions': [{'question': {'string': ' Why was Alex proud of James?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD was) (NP (NP (NNP Alex) (NNP proud)) (PP (IN of) (NP (NNP James))))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'was', u'be', u'VBD'), (u'Alex', u'Alex', u'NNP'), (u'proud', u'proud', u'NNP'), (u'of', u'of', u'IN'), (u'James', u'James', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'was', 'Alex', 'proud', 'of', 'James', '?']}, 'answers': [{'string': ' Alex was proud because James was brave.', 'parse': {'tree': '(ROOT (S (NP (NNP Alex)) (VP (VBD was) (ADJP (JJ proud)) (SBAR (IN because) (S (NP (NNP James)) (VP (VBD was) (ADJP (JJ brave)))))) (. .)))', 'lemma': [(u'Alex', u'Alex', u'NNP'), (u'was', u'be', u'VBD'), (u'proud', u'proud', u'JJ'), (u'because', u'because', u'IN'), (u'James', u'James', u'NNP'), (u'was', u'be', u'VBD'), (u'brave', u'brave', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Alex', 'was', 'proud', 'because', 'James', 'was', 'brave', '.']}, {'string': ' He was proud because he was his hero.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (JJ proud)) (SBAR (IN because) (S (NP (PRP he)) (VP (VBD was) (NP (PRP$ his) (NN hero)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'proud', u'proud', u'JJ'), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'hero', u'hero', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'proud', 'because', 'he', 'was', 'his', 'hero', '.']}, {'string': ' He was proud because he was weak.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (JJ proud)) (SBAR (IN because) (S (NP (PRP he)) (VP (VBD was) (ADJP (JJ weak)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'proud', u'proud', u'JJ'), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'weak', u'weak', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'proud', 'because', 'he', 'was', 'weak', '.']}, {'string': ' He was proud because he was scared.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (JJ proud)) (SBAR (IN because) (S (NP (PRP he)) (VP (VBD was) (ADJP (VBN scared)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'proud', u'proud', u'JJ'), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'proud', 'because', 'he', 'was', 'scared', '.']}], 'mode': 1}, {'question': {'string': ' Who is the character that is fat and is being bullied?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (NN character)) (SBAR (WHNP (WDT that)) (S (VP (VP (VBZ is) (ADJP (JJ fat))) (CC and) (VP (VBZ is) (VP (VBG being) (VP (VBD bullied))))))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'character', u'character', u'NN'), (u'that', u'that', u'WDT'), (u'is', u'be', u'VBZ'), (u'fat', u'fat', u'JJ'), (u'and', u'and', u'CC'), (u'is', u'be', u'VBZ'), (u'being', u'be', u'VBG'), (u'bullied', u'bully', u'VBD'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'is', 'the', 'character', 'that', 'is', 'fat', 'and', 'is', 'being', 'bullied', '?']}, 'answers': [{'string': ' Alex', 'parse': {'tree': '(ROOT (NP (NNP Alex)))', 'lemma': [(u'Alex', u'Alex', u'NNP')]}, 'tokens': ['Alex']}, {'string': ' Gordon', 'parse': {'tree': '(ROOT (NP (NNP Gordon)))', 'lemma': [(u'Gordon', u'Gordon', u'NNP')]}, 'tokens': ['Gordon']}, {'string': ' Johnny', 'parse': {'tree': '(ROOT (NP (NNP Johnny)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP')]}, 'tokens': ['Johnny']}, {'string': ' James', 'parse': {'tree': '(ROOT (NP (NNP James)))', 'lemma': [(u'James', u'James', u'NNP')]}, 'tokens': ['James']}], 'mode': 1}, {'question': {'string': ' What did the bullies do after James stood up to them?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (DT the) (NN bullies)) (VP (VB do) (SBAR (IN after) (S (NP (NNP James)) (VP (VBD stood) (PRT (RP up)) (PP (TO to) (NP (PRP them)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'bullies', u'bully', u'NN'), (u'do', u'do', u'VB'), (u'after', u'after', u'IN'), (u'James', u'James', u'NNP'), (u'stood', u'stand', u'VBD'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'them', u'they', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'the', 'bullies', 'do', 'after', 'James', 'stood', 'up', 'to', 'them', '?']}, 'answers': [{'string': ' They wanted to be heroes. They were protecting themselves.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VBD wanted) (S (VP (TO to) (VP (VB be) (NP (NNS heroes)))))) (. .)) (NP (PRP They)) (VP (VBD were) (VP (VBG protecting) (NP (PRP themselves)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'heroes', u'hero', u'NNS'), (u'.', u'.', u'.'), (u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'protecting', u'protect', u'VBG'), (u'themselves', u'themselves', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'wanted', 'to', 'be', 'heroes', '.', 'They', 'were', 'protecting', 'themselves', '.']}, {'string': " The bullies did n't know what to do and gave up. They went away to look for more fun things.", 'parse': {'tree': "(ROOT (S (S (NP (DT The) (NN bullies)) (VP (VP (VBD did) (RB n't) (VP (VB know) (SBAR (WHNP (WP what)) (S (VP (TO to) (VP (VB do))))))) (CC and) (VP (VBD gave) (PRT (RP up)))) (. .)) (NP (PRP They)) (VP (VBD went) (PRT (RP away)) (S (VP (TO to) (VP (VB look) (PP (IN for) (NP (JJR more) (NN fun) (NNS things))))))) (. .)))", 'lemma': [(u'The', u'the', u'DT'), (u'bullies', u'bully', u'NN'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'know', u'know', u'VB'), (u'what', u'what', u'WP'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'and', u'and', u'CC'), (u'gave', u'give', u'VBD'), (u'up', u'up', u'RP'), (u'.', u'.', u'.'), (u'They', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'away', u'away', u'RP'), (u'to', u'to', u'TO'), (u'look', u'look', u'VB'), (u'for', u'for', u'IN'), (u'more', u'more', u'JJR'), (u'fun', u'fun', u'NN'), (u'things', u'thing', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'bullies', 'did', "n't", 'know', 'what', 'to', 'do', 'and', 'gave', 'up', '.', 'They', 'went', 'away', 'to', 'look', 'for', 'more', 'fun', 'things', '.']}, {'string': ' They were scared. They stood up for each other.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VBD were) (ADJP (VBN scared))) (. .)) (NP (PRP They)) (VP (VBD stood) (PRT (RP up)) (PP (IN for) (NP (DT each) (JJ other)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.'), (u'They', u'they', u'PRP'), (u'stood', u'stand', u'VBD'), (u'up', u'up', u'RP'), (u'for', u'for', u'IN'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'scared', '.', 'They', 'stood', 'up', 'for', 'each', 'other', '.']}, {'string': ' They were weak. They remembered all the times they were being protected.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VBD were) (ADJP (JJ weak))) (. .)) (NP (PRP They)) (VP (VBD remembered) (NP (NP (PDT all) (DT the) (NNS times)) (SBAR (S (NP (PRP they)) (VP (VBD were) (VP (VBG being) (VP (VBN protected)))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'weak', u'weak', u'JJ'), (u'.', u'.', u'.'), (u'They', u'they', u'PRP'), (u'remembered', u'remember', u'VBD'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'times', u'time', u'NNS'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'being', u'be', u'VBG'), (u'protected', u'protect', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'weak', '.', 'They', 'remembered', 'all', 'the', 'times', 'they', 'were', 'being', 'protected', '.']}], 'mode': 0}, {'question': {'string': ' Why did James stand up to the bullies?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NNP James)) (VP (VB stand) (PRT (RP up)) (PP (TO to) (NP (DT the) (NN bullies))))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'James', u'James', u'NNP'), (u'stand', u'stand', u'VB'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'bullies', u'bully', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'James', 'stand', 'up', 'to', 'the', 'bullies', '?']}, 'answers': [{'string': ' Because he was weak. He wanted to be the opposite.', 'parse': {'tree': '(ROOT (S (SBAR (IN Because) (S (NP (PRP he)) (VP (VBD was) (ADJP (JJ weak))) (. .))) (NP (PRP He)) (VP (VBD wanted) (S (VP (TO to) (VP (VB be) (NP (DT the) (NN opposite)))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'weak', u'weak', u'JJ'), (u'.', u'.', u'.'), (u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'the', u'the', u'DT'), (u'opposite', u'opposite', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'he', 'was', 'weak', '.', 'He', 'wanted', 'to', 'be', 'the', 'opposite', '.']}, {'string': " He wanted to protect himself. He did n't want Alex to always help him.", 'parse': {'tree': "(ROOT (S (S (NP (PRP He)) (VP (VBD wanted) (S (VP (TO to) (VP (VB protect) (NP (PRP himself)))))) (. .)) (NP (PRP He)) (VP (VBD did) (RB n't) (VP (VB want) (S (NP (NNP Alex)) (VP (TO to) (VP (ADVP (RB always)) (VB help) (NP (PRP him))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'protect', u'protect', u'VB'), (u'himself', u'himself', u'PRP'), (u'.', u'.', u'.'), (u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'want', u'want', u'VB'), (u'Alex', u'Alex', u'NNP'), (u'to', u'to', u'TO'), (u'always', u'always', u'RB'), (u'help', u'help', u'VB'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'wanted', 'to', 'protect', 'himself', '.', 'He', 'did', "n't", 'want', 'Alex', 'to', 'always', 'help', 'him', '.']}, {'string': ' Because they grew up together. They were best friends.', 'parse': {'tree': '(ROOT (S (SBAR (IN Because) (S (NP (PRP they)) (VP (VBD grew) (PRT (RP up)) (ADVP (RB together))) (. .))) (NP (PRP They)) (VP (VBD were) (NP (JJS best) (NNS friends))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'grew', u'grow', u'VBD'), (u'up', u'up', u'RP'), (u'together', u'together', u'RB'), (u'.', u'.', u'.'), (u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'best', u'best', u'JJS'), (u'friends', u'friend', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'they', 'grew', 'up', 'together', '.', 'They', 'were', 'best', 'friends', '.']}, {'string': ' He wanted to not be scared. He wanted someone to be proud of him.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBD wanted) (S (VP (TO to) (VP (RB not) (VB be) (VP (VBN scared)))))) (. .)) (NP (PRP He)) (VP (VBD wanted) (NP (NN someone)) (S (VP (TO to) (VP (VB be) (ADJP (JJ proud) (PP (IN of) (NP (PRP him)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'not', u'not', u'RB'), (u'be', u'be', u'VB'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.'), (u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'someone', u'someone', u'NN'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'proud', u'proud', u'JJ'), (u'of', u'of', u'IN'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'wanted', 'to', 'not', 'be', 'scared', '.', 'He', 'wanted', 'someone', 'to', 'be', 'proud', 'of', 'him', '.']}], 'mode': 0}]}
{'sentences': [{'string': ' One sunny day, Martha went on a walk through the park.', 'parse': {'tree': '(ROOT (S (NP (CD One) (JJ sunny) (NN day)) (, ,) (NP (NNP Martha)) (VP (VBD went) (PP (IN on) (NP (DT a) (NN walk))) (PP (IN through) (NP (DT the) (NN park)))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'sunny', u'sunny', u'JJ'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'Martha', u'Martha', u'NNP'), (u'went', u'go', u'VBD'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'walk', u'walk', u'NN'), (u'through', u'through', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'sunny', 'day', ',', 'Martha', 'went', 'on', 'a', 'walk', 'through', 'the', 'park', '.']}, {'string': ' While walking, she noticed something strange.', 'parse': {'tree': '(ROOT (S (SBAR (IN While) (S (VP (VBG walking)))) (, ,) (NP (PRP she)) (VP (VBD noticed) (S (NP (NN something)) (ADJP (JJ strange)))) (. .)))', 'lemma': [(u'While', u'while', u'IN'), (u'walking', u'walk', u'VBG'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'noticed', u'notice', u'VBD'), (u'something', u'something', u'NN'), (u'strange', u'strange', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['While', 'walking', ',', 'she', 'noticed', 'something', 'strange', '.']}, {'string': ' No one was outside.', 'parse': {'tree': '(ROOT (S (NP (DT No) (NN one)) (VP (VBD was) (ADVP (RB outside))) (. .)))', 'lemma': [(u'No', u'no', u'DT'), (u'one', u'one', u'NN'), (u'was', u'be', u'VBD'), (u'outside', u'outside', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['No', 'one', 'was', 'outside', '.']}, {'string': ' She was the only person at the park.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD was) (NP (NP (DT the) (JJ only) (NN person)) (PP (IN at) (NP (DT the) (NN park))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'only', u'only', u'JJ'), (u'person', u'person', u'NN'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'was', 'the', 'only', 'person', 'at', 'the', 'park', '.']}, {'string': " `` How strange, where is everyone? ''", 'parse': {'tree': "(ROOT (SBARQ (`` ``) (SBAR (WHADVP (WRB How)) (S (VP (VBZ strange)))) (, ,) (WHADVP (WRB where)) (SQ (VBZ is) (NP (NN everyone))) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'How', u'how', u'WRB'), (u'strange', u'strange', u'VBZ'), (u',', u',', u','), (u'where', u'where', u'WRB'), (u'is', u'be', u'VBZ'), (u'everyone', u'everyone', u'NN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'How', 'strange', ',', 'where', 'is', 'everyone', '?', "''"]}, {'string': ' she thought.', 'parse': {'tree': '(ROOT (S (NP (PRP she)) (VP (VBD thought)) (. .)))', 'lemma': [(u'she', u'she', u'PRP'), (u'thought', u'think', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['she', 'thought', '.']}, {'string': ' Martha looked everywhere.', 'parse': {'tree': '(ROOT (S (NP (NNP Martha)) (VP (VBD looked) (ADVP (RB everywhere))) (. .)))', 'lemma': [(u'Martha', u'Martha', u'NNP'), (u'looked', u'look', u'VBD'), (u'everywhere', u'everywhere', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Martha', 'looked', 'everywhere', '.']}, {'string': ' She looked inside the restrooms, under the benches, and even at the top of the slide.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD looked) (PP (IN inside) (NP (DT the) (NNS restrooms))) (, ,) (PP (PP (IN under) (NP (DT the) (NNS benches))) (, ,) (CC and) (RB even) (PP (IN at) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT the) (NN slide))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'looked', u'look', u'VBD'), (u'inside', u'inside', u'IN'), (u'the', u'the', u'DT'), (u'restrooms', u'restroom', u'NNS'), (u',', u',', u','), (u'under', u'under', u'IN'), (u'the', u'the', u'DT'), (u'benches', u'bench', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'even', u'even', u'RB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'slide', u'slide', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'looked', 'inside', 'the', 'restrooms', ',', 'under', 'the', 'benches', ',', 'and', 'even', 'at', 'the', 'top', 'of', 'the', 'slide', '.']}, {'string': ' She was confused.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD was) (VP (VBN confused))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'confused', u'confuse', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'was', 'confused', '.']}, {'string': ' Usually, she would see her friends playing with each other.', 'parse': {'tree': '(ROOT (S (ADVP (RB Usually)) (, ,) (NP (PRP she)) (VP (MD would) (VP (VB see) (NP (PRP$ her) (NNS friends)) (S (VP (VBG playing) (PP (IN with) (NP (DT each) (JJ other))))))) (. .)))', 'lemma': [(u'Usually', u'usually', u'RB'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'would', u'would', u'MD'), (u'see', u'see', u'VB'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'playing', u'play', u'VBG'), (u'with', u'with', u'IN'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Usually', ',', 'she', 'would', 'see', 'her', 'friends', 'playing', 'with', 'each', 'other', '.']}, {'string': ' She started walking again when one of her friends popped up, surprising her.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD started) (S (VP (VBG walking) (ADVP (RB again)) (SBAR (WHADVP (WRB when)) (S (NP (NP (CD one)) (PP (IN of) (NP (PRP$ her) (NNS friends)))) (VP (VBD popped) (PRT (RP up)) (, ,) (S (VP (VBG surprising) (NP (PRP her)))))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'started', u'start', u'VBD'), (u'walking', u'walk', u'VBG'), (u'again', u'again', u'RB'), (u'when', u'when', u'WRB'), (u'one', u'one', u'CD'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'popped', u'pop', u'VBD'), (u'up', u'up', u'RP'), (u',', u',', u','), (u'surprising', u'surprise', u'VBG'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'started', 'walking', 'again', 'when', 'one', 'of', 'her', 'friends', 'popped', 'up', ',', 'surprising', 'her', '.']}, {'string': " Her friend asked her, `` Why are you outside? ''", 'parse': {'tree': "(ROOT (S (NP (PRP$ Her) (NN friend)) (VP (VBD asked) (NP (NP (PRP her)) (, ,) (`` ``) (SBARQ (WHADVP (WRB Why)) (SQ (VBP are) (NP (PRP you)) (PP (IN outside))) (. ?)) ('' '')))))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'friend', u'friend', u'NN'), (u'asked', u'ask', u'VBD'), (u'her', u'she', u'PRP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Why', u'why', u'WRB'), (u'are', u'be', u'VBP'), (u'you', u'you', u'PRP'), (u'outside', u'outside', u'IN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Her', 'friend', 'asked', 'her', ',', '``', 'Why', 'are', 'you', 'outside', '?', "''"]}, {'string': ' Martha asked what she meant, and explained that she always came out to the park to play.', 'parse': {'tree': '(ROOT (S (NP (NNP Martha)) (VP (VBD asked) (SBAR (WHNP (WP what)) (S (NP (PRP she)) (VP (VP (VBD meant)) (, ,) (CC and) (VP (VBD explained) (SBAR (IN that) (S (NP (PRP she)) (VP (ADVP (RB always)) (VBD came) (PRT (RP out)) (PP (TO to) (NP (DT the) (NN park))) (S (VP (TO to) (VP (VB play)))))))))))) (. .)))', 'lemma': [(u'Martha', u'Martha', u'NNP'), (u'asked', u'ask', u'VBD'), (u'what', u'what', u'WP'), (u'she', u'she', u'PRP'), (u'meant', u'mean', u'VBD'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'explained', u'explain', u'VBD'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'always', u'always', u'RB'), (u'came', u'come', u'VBD'), (u'out', u'out', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Martha', 'asked', 'what', 'she', 'meant', ',', 'and', 'explained', 'that', 'she', 'always', 'came', 'out', 'to', 'the', 'park', 'to', 'play', '.']}, {'string': " Her friend then looked at her strangely and asked, `` Did n't Stephan invite you to his party? ''", 'parse': {'tree': "(ROOT (S (NP (PRP$ Her) (NN friend)) (ADVP (RB then)) (VP (VP (VBD looked) (PP (IN at) (NP (PRP$ her) (NN strangely)))) (CC and) (VP (VBD asked) (, ,) (`` ``) (SQ (VBD Did) (RB n't) (NP (NNP Stephan)) (VP (VB invite) (NP (PRP you)) (PP (TO to) (NP (PRP$ his) (NN party))))))) (. ?) ('' '')))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'friend', u'friend', u'NN'), (u'then', u'then', u'RB'), (u'looked', u'look', u'VBD'), (u'at', u'at', u'IN'), (u'her', u'she', u'PRP$'), (u'strangely', u'strangely', u'NN'), (u'and', u'and', u'CC'), (u'asked', u'ask', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'Stephan', u'Stephan', u'NNP'), (u'invite', u'invite', u'VB'), (u'you', u'you', u'PRP'), (u'to', u'to', u'TO'), (u'his', u'he', u'PRP$'), (u'party', u'party', u'NN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Her', 'friend', 'then', 'looked', 'at', 'her', 'strangely', 'and', 'asked', ',', '``', 'Did', "n't", 'Stephan', 'invite', 'you', 'to', 'his', 'party', '?', "''"]}, {'string': " Martha had n't known that Stephan was holding a party.", 'parse': {'tree': "(ROOT (S (NP (NNP Martha)) (VP (VBD had) (RB n't) (VP (VBN known) (SBAR (IN that) (S (NP (NNP Stephan)) (VP (VBD was) (VP (VBG holding) (NP (DT a) (NN party)))))))) (. .)))", 'lemma': [(u'Martha', u'Martha', u'NNP'), (u'had', u'have', u'VBD'), (u"n't", u'not', u'RB'), (u'known', u'know', u'VBN'), (u'that', u'that', u'IN'), (u'Stephan', u'Stephan', u'NNP'), (u'was', u'be', u'VBD'), (u'holding', u'hold', u'VBG'), (u'a', u'a', u'DT'), (u'party', u'party', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Martha', 'had', "n't", 'known', 'that', 'Stephan', 'was', 'holding', 'a', 'party', '.']}, {'string': " She was sad that he had n't invited her.", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBD was) (ADJP (JJ sad)) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD had) (RB n't) (VP (VBN invited) (NP (PRP her))))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'sad', u'sad', u'JJ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u"n't", u'not', u'RB'), (u'invited', u'invite', u'VBN'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'was', 'sad', 'that', 'he', 'had', "n't", 'invited', 'her', '.']}, {'string': ' She walked back home, upset.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD walked) (ADVP (RB back) (NN home)) (, ,) (S (ADJP (JJ upset)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'walked', u'walk', u'VBD'), (u'back', u'back', u'RB'), (u'home', u'home', u'NN'), (u',', u',', u','), (u'upset', u'upset', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'walked', 'back', 'home', ',', 'upset', '.']}], 'questions': [{'question': {'string': " Who did n't invite Martha to the party?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD did) (RB n't) (VP (VB invite) (NP (NNP Martha)) (PP (TO to) (NP (DT the) (NN party)))))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'invite', u'invite', u'VB'), (u'Martha', u'Martha', u'NNP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'party', u'party', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'did', "n't", 'invite', 'Martha', 'to', 'the', 'party', '?']}, 'answers': [{'string': ' The park', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN park))))', 'lemma': [(u'The', u'the', u'DT'), (u'park', u'park', u'NN')]}, 'tokens': ['The', 'park']}, {'string': ' No one', 'parse': {'tree': '(ROOT (FRAG (NP (RB No) (CD one))))', 'lemma': [(u'No', u'no', u'RB'), (u'one', u'one', u'CD')]}, 'tokens': ['No', 'one']}, {'string': ' Martha', 'parse': {'tree': '(ROOT (NP (NNP Martha)))', 'lemma': [(u'Martha', u'Martha', u'NNP')]}, 'tokens': ['Martha']}, {'string': ' Stephan', 'parse': {'tree': '(ROOT (NP (NNP Stephan)))', 'lemma': [(u'Stephan', u'Stephan', u'NNP')]}, 'tokens': ['Stephan']}], 'mode': 0}, {'question': {'string': ' Why was Martha confused?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD was) (NP (NNP Martha)) (VP (VBN confused))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'was', u'be', u'VBD'), (u'Martha', u'Martha', u'NNP'), (u'confused', u'confuse', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'was', 'Martha', 'confused', '?']}, 'answers': [{'string': " She did n't know who she was", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBD did) (RB n't) (VP (VB know) (SBAR (WHNP (WP who)) (S (NP (PRP she)) (VP (VBD was))))))))", 'lemma': [(u'She', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'know', u'know', u'VB'), (u'who', u'who', u'WP'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD')]}, 'tokens': ['She', 'did', "n't", 'know', 'who', 'she', 'was']}, {'string': " She did n't know where she was", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBD did) (RB n't) (VP (VB know) (SBAR (WHADVP (WRB where)) (S (NP (PRP she)) (VP (VBD was))))))))", 'lemma': [(u'She', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'know', u'know', u'VB'), (u'where', u'where', u'WRB'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD')]}, 'tokens': ['She', 'did', "n't", 'know', 'where', 'she', 'was']}, {'string': " She did n't know what time it was", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBD did) (RB n't) (VP (VB know) (SBAR (WHNP (WP what) (NN time)) (S (NP (PRP it)) (VP (VBD was))))))))", 'lemma': [(u'She', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'know', u'know', u'VB'), (u'what', u'what', u'WP'), (u'time', u'time', u'NN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD')]}, 'tokens': ['She', 'did', "n't", 'know', 'what', 'time', 'it', 'was']}, {'string': " She could n't find her friends", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (MD could) (RB n't) (VP (VB find) (NP (PRP$ her) (NNS friends))))))", 'lemma': [(u'She', u'she', u'PRP'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'find', u'find', u'VB'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS')]}, 'tokens': ['She', 'could', "n't", 'find', 'her', 'friends']}], 'mode': 0}, {'question': {'string': ' What kind of day was it?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (NN day)))) (SQ (VBD was) (NP (PRP it))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'kind', u'kind', u'NN'), (u'of', u'of', u'IN'), (u'day', u'day', u'NN'), (u'was', u'be', u'VBD'), (u'it', u'it', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'kind', 'of', 'day', 'was', 'it', '?']}, 'answers': [{'string': ' Sunny', 'parse': {'tree': '(ROOT (ADVP (RB Sunny)))', 'lemma': [(u'Sunny', u'sunny', u'RB')]}, 'tokens': ['Sunny']}, {'string': ' Windy', 'parse': {'tree': '(ROOT (NP (NNP Windy)))', 'lemma': [(u'Windy', u'Windy', u'NNP')]}, 'tokens': ['Windy']}, {'string': ' Rainy', 'parse': {'tree': '(ROOT (ADVP (RB Rainy)))', 'lemma': [(u'Rainy', u'rainy', u'RB')]}, 'tokens': ['Rainy']}, {'string': ' Cloudy', 'parse': {'tree': '(ROOT (ADVP (RB Cloudy)))', 'lemma': [(u'Cloudy', u'cloudy', u'RB')]}, 'tokens': ['Cloudy']}], 'mode': 1}, {'question': {'string': ' Where did Martha check first at the park?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Martha)) (VP (VB check) (ADVP (RB first)) (PP (IN at) (NP (DT the) (NN park))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'Martha', u'Martha', u'NNP'), (u'check', u'check', u'VB'), (u'first', u'first', u'RB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'Martha', 'check', 'first', 'at', 'the', 'park', '?']}, 'answers': [{'string': ' Under the benches', 'parse': {'tree': '(ROOT (PP (IN Under) (NP (DT the) (NNS benches))))', 'lemma': [(u'Under', u'under', u'IN'), (u'the', u'the', u'DT'), (u'benches', u'bench', u'NNS')]}, 'tokens': ['Under', 'the', 'benches']}, {'string': ' At her house', 'parse': {'tree': '(ROOT (PP (IN At) (NP (PRP$ her) (NN house))))', 'lemma': [(u'At', u'at', u'IN'), (u'her', u'she', u'PRP$'), (u'house', u'house', u'NN')]}, 'tokens': ['At', 'her', 'house']}, {'string': ' Restrooms', 'parse': {'tree': '(ROOT (NP (NNS Restrooms)))', 'lemma': [(u'Restrooms', u'restroom', u'NNS')]}, 'tokens': ['Restrooms']}, {'string': ' At the top of the slides', 'parse': {'tree': '(ROOT (PP (IN At) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT the) (NN slides))))))', 'lemma': [(u'At', u'at', u'IN'), (u'the', u'the', u'DT'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'slides', u'slide', u'NN')]}, 'tokens': ['At', 'the', 'top', 'of', 'the', 'slides']}], 'mode': 1}]}
{'sentences': [{'string': ' Sam woke up early.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBD woke) (ADVP (RB up) (RB early))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'woke', u'wake', u'VBD'), (u'up', u'up', u'RB'), (u'early', u'early', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'woke', 'up', 'early', '.']}, {'string': ' He wanted to play.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD wanted) (S (VP (TO to) (VP (VB play))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'wanted', 'to', 'play', '.']}, {'string': ' Mom said he could not play.', 'parse': {'tree': '(ROOT (S (NP (NN Mom)) (VP (VBD said) (SBAR (S (NP (PRP he)) (VP (MD could) (RB not) (VP (VB play)))))) (. .)))', 'lemma': [(u'Mom', u'mom', u'NN'), (u'said', u'say', u'VBD'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Mom', 'said', 'he', 'could', 'not', 'play', '.']}, {'string': ' It was time for breakfast.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (NP (NN time)) (PP (IN for) (NP (NN breakfast))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'time', u'time', u'NN'), (u'for', u'for', u'IN'), (u'breakfast', u'breakfast', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'time', 'for', 'breakfast', '.']}, {'string': ' Sam loves breakfast.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ loves) (NP (NN breakfast))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'loves', u'love', u'VBZ'), (u'breakfast', u'breakfast', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'loves', 'breakfast', '.']}, {'string': ' Sam loves breakfast because Sam loves cereal.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ loves) (NP (NN breakfast)) (SBAR (IN because) (S (NP (NNP Sam)) (VP (VBZ loves) (NP (NN cereal)))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'loves', u'love', u'VBZ'), (u'breakfast', u'breakfast', u'NN'), (u'because', u'because', u'IN'), (u'Sam', u'Sam', u'NNP'), (u'loves', u'love', u'VBZ'), (u'cereal', u'cereal', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'loves', 'breakfast', 'because', 'Sam', 'loves', 'cereal', '.']}, {'string': ' There is a lot of cereal in the kitchen.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBZ is) (NP (NP (DT a) (NN lot)) (PP (IN of) (NP (NP (NN cereal)) (PP (IN in) (NP (DT the) (NN kitchen))))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'of', u'of', u'IN'), (u'cereal', u'cereal', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'kitchen', u'kitchen', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'is', 'a', 'lot', 'of', 'cereal', 'in', 'the', 'kitchen', '.']}, {'string': " There are Cheerios, Fruit Loops, Friendly O 's, and Sharkies.", 'parse': {'tree': "(ROOT (S (NP (EX There)) (VP (VBP are) (NP (NP (NNPS Cheerios) (, ,) (NNP Fruit) (NNPS Loops)) (, ,) (NP (NNP Friendly) (NP (NNP O) (POS 's))) (, ,) (CC and) (NP (NNP Sharkies)))) (. .)))", 'lemma': [(u'There', u'there', u'EX'), (u'are', u'be', u'VBP'), (u'Cheerios', u'Cheerios', u'NNPS'), (u',', u',', u','), (u'Fruit', u'Fruit', u'NNP'), (u'Loops', u'Loops', u'NNPS'), (u',', u',', u','), (u'Friendly', u'Friendly', u'NNP'), (u'O', u'O', u'NNP'), (u"'s", u"'s", u'POS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Sharkies', u'Sharkies', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'are', 'Cheerios', ',', 'Fruit', 'Loops', ',', 'Friendly', 'O', "'s", ',', 'and', 'Sharkies', '.']}, {'string': " Sam loves Cheerios, Fruit Loops, Friendly O 's, and Sharkies.", 'parse': {'tree': "(ROOT (S (NP (NNP Sam)) (VP (VBZ loves) (NP (NP (NNPS Cheerios) (, ,) (NNP Fruit) (NNPS Loops)) (, ,) (NP (NNP Friendly) (NP (NNP O) (POS 's))) (, ,) (CC and) (NP (NNP Sharkies)))) (. .)))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'loves', u'love', u'VBZ'), (u'Cheerios', u'Cheerios', u'NNPS'), (u',', u',', u','), (u'Fruit', u'Fruit', u'NNP'), (u'Loops', u'Loops', u'NNPS'), (u',', u',', u','), (u'Friendly', u'Friendly', u'NNP'), (u'O', u'O', u'NNP'), (u"'s", u"'s", u'POS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Sharkies', u'Sharkies', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'loves', 'Cheerios', ',', 'Fruit', 'Loops', ',', 'Friendly', 'O', "'s", ',', 'and', 'Sharkies', '.']}, {'string': " His favorite cereal is Friendly-O 's.", 'parse': {'tree': "(ROOT (S (NP (PRP$ His) (JJ favorite) (NN cereal)) (VP (VBZ is) (NP (JJ Friendly-O) (NNS 's))) (. .)))", 'lemma': [(u'His', u'he', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'cereal', u'cereal', u'NN'), (u'is', u'be', u'VBZ'), (u'Friendly-O', u'friendly-o', u'JJ'), (u"'s", u"'", u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'favorite', 'cereal', 'is', 'Friendly-O', "'s", '.']}, {'string': " Sam loves Friendly-O 's because they look like smiley faces.", 'parse': {'tree': "(ROOT (S (NP (NNP Sam)) (VP (VBZ loves) (SBAR (S (NP (NNP Friendly-O)) (VP (VBZ 's) (SBAR (IN because) (S (NP (PRP they)) (VP (VBP look) (PP (IN like) (NP (JJ smiley) (NNS faces)))))))))) (. .)))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'loves', u'love', u'VBZ'), (u'Friendly-O', u'Friendly-O', u'NNP'), (u"'s", u'be', u'VBZ'), (u'because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'look', u'look', u'VBP'), (u'like', u'like', u'IN'), (u'smiley', u'smiley', u'JJ'), (u'faces', u'face', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'loves', 'Friendly-O', "'s", 'because', 'they', 'look', 'like', 'smiley', 'faces', '.']}, {'string': ' After Sam finishes breakfast Sam plays with Ralph.', 'parse': {'tree': '(ROOT (S (PP (IN After) (NP (NNP Sam) (NNS finishes))) (NP (NNP breakfast) (NNP Sam)) (VP (VBZ plays) (PP (IN with) (NP (NNP Ralph)))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'Sam', u'Sam', u'NNP'), (u'finishes', u'finish', u'NNS'), (u'breakfast', u'breakfast', u'NNP'), (u'Sam', u'Sam', u'NNP'), (u'plays', u'play', u'VBZ'), (u'with', u'with', u'IN'), (u'Ralph', u'Ralph', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'Sam', 'finishes', 'breakfast', 'Sam', 'plays', 'with', 'Ralph', '.']}, {'string': ' Ralph is a dog.', 'parse': {'tree': '(ROOT (S (NP (NNP Ralph)) (VP (VBZ is) (NP (DT a) (NN dog))) (. .)))', 'lemma': [(u'Ralph', u'Ralph', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ralph', 'is', 'a', 'dog', '.']}, {'string': ' Sam loves Ralph.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ loves) (NP (NNP Ralph))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'loves', u'love', u'VBZ'), (u'Ralph', u'Ralph', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'loves', 'Ralph', '.']}, {'string': ' Ralph likes to play.', 'parse': {'tree': '(ROOT (S (NP (NNP Ralph)) (VP (VBZ likes) (S (VP (TO to) (VP (VB play))))) (. .)))', 'lemma': [(u'Ralph', u'Ralph', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Ralph', 'likes', 'to', 'play', '.']}, {'string': ' Ralph likes to run.', 'parse': {'tree': '(ROOT (S (NP (NNP Ralph)) (VP (VBZ likes) (S (VP (TO to) (VP (VB run))))) (. .)))', 'lemma': [(u'Ralph', u'Ralph', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'run', u'run', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Ralph', 'likes', 'to', 'run', '.']}, {'string': ' Ralph likes to jump.', 'parse': {'tree': '(ROOT (S (NP (NNP Ralph)) (VP (VBZ likes) (S (VP (TO to) (VP (VB jump))))) (. .)))', 'lemma': [(u'Ralph', u'Ralph', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'jump', u'jump', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Ralph', 'likes', 'to', 'jump', '.']}, {'string': ' Sam loves Ralph because Ralph has floppy ears.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ loves) (NP (NNP Ralph)) (SBAR (IN because) (S (NP (NNP Ralph)) (VP (VBZ has) (NP (JJ floppy) (NNS ears)))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'loves', u'love', u'VBZ'), (u'Ralph', u'Ralph', u'NNP'), (u'because', u'because', u'IN'), (u'Ralph', u'Ralph', u'NNP'), (u'has', u'have', u'VBZ'), (u'floppy', u'floppy', u'JJ'), (u'ears', u'ear', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'loves', 'Ralph', 'because', 'Ralph', 'has', 'floppy', 'ears', '.']}, {'string': ' Sam loves Ralph because he licks him on the face.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ loves) (NP (NNP Ralph)) (SBAR (IN because) (S (NP (PRP he)) (VP (VBZ licks) (NP (PRP him)) (PP (IN on) (NP (DT the) (NN face))))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'loves', u'love', u'VBZ'), (u'Ralph', u'Ralph', u'NNP'), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'licks', u'lick', u'VBZ'), (u'him', u'he', u'PRP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'face', u'face', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'loves', 'Ralph', 'because', 'he', 'licks', 'him', 'on', 'the', 'face', '.']}, {'string': ' After Sam plays with Ralph he takes a bath.', 'parse': {'tree': '(ROOT (S (SBAR (IN After) (S (NP (NNP Sam)) (VP (VBZ plays) (PP (IN with) (NP (NNP Ralph)))))) (NP (PRP he)) (VP (VBZ takes) (NP (DT a) (NN bath))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'Sam', u'Sam', u'NNP'), (u'plays', u'play', u'VBZ'), (u'with', u'with', u'IN'), (u'Ralph', u'Ralph', u'NNP'), (u'he', u'he', u'PRP'), (u'takes', u'take', u'VBZ'), (u'a', u'a', u'DT'), (u'bath', u'bath', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'Sam', 'plays', 'with', 'Ralph', 'he', 'takes', 'a', 'bath', '.']}, {'string': ' Sam takes a bath because he has to get ready for school.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ takes) (NP (DT a) (NN bath)) (SBAR (IN because) (S (NP (PRP he)) (VP (VBZ has) (S (VP (TO to) (VP (VB get) (ADJP (JJ ready)) (PP (IN for) (NP (NN school)))))))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'takes', u'take', u'VBZ'), (u'a', u'a', u'DT'), (u'bath', u'bath', u'NN'), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'ready', u'ready', u'JJ'), (u'for', u'for', u'IN'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'takes', 'a', 'bath', 'because', 'he', 'has', 'to', 'get', 'ready', 'for', 'school', '.']}, {'string': ' Sam is happy to go to school.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ is) (ADJP (JJ happy) (S (VP (TO to) (VP (VB go) (PP (TO to) (NP (NN school)))))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'is', u'be', u'VBZ'), (u'happy', u'happy', u'JJ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'is', 'happy', 'to', 'go', 'to', 'school', '.']}, {'string': ' Sam can play with his friends at school.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (MD can) (VP (VB play) (PP (IN with) (NP (PRP$ his) (NNS friends))) (PP (IN at) (NP (NN school))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'can', u'can', u'MD'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'at', u'at', u'IN'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'can', 'play', 'with', 'his', 'friends', 'at', 'school', '.']}, {'string': ' When he is at school he can see Bill, John, and Katy.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP he)) (VP (VBZ is) (PP (IN at) (NP (NN school)))))) (NP (PRP he)) (VP (MD can) (VP (VB see) (NP (NNP Bill) (, ,) (NNP John) (, ,) (CC and) (NNP Katy)))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'at', u'at', u'IN'), (u'school', u'school', u'NN'), (u'he', u'he', u'PRP'), (u'can', u'can', u'MD'), (u'see', u'see', u'VB'), (u'Bill', u'Bill', u'NNP'), (u',', u',', u','), (u'John', u'John', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Katy', u'Katy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'he', 'is', 'at', 'school', 'he', 'can', 'see', 'Bill', ',', 'John', ',', 'and', 'Katy', '.']}, {'string': " Bill is Sam 's best friend.", 'parse': {'tree': "(ROOT (S (NP (NNP Bill)) (VP (VBZ is) (NP (NP (NNP Sam) (POS 's)) (JJS best) (NN friend))) (. .)))", 'lemma': [(u'Bill', u'Bill', u'NNP'), (u'is', u'be', u'VBZ'), (u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bill', 'is', 'Sam', "'s", 'best', 'friend', '.']}, {'string': ' John is the class cat.', 'parse': {'tree': '(ROOT (S (NP (NNP John)) (VP (VBZ is) (NP (DT the) (NN class) (NN cat))) (. .)))', 'lemma': [(u'John', u'John', u'NNP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'class', u'class', u'NN'), (u'cat', u'cat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['John', 'is', 'the', 'class', 'cat', '.']}, {'string': ' Katy is the class bird.', 'parse': {'tree': '(ROOT (S (NP (NNP Katy)) (VP (VBZ is) (NP (DT the) (NN class) (NN bird))) (. .)))', 'lemma': [(u'Katy', u'Katy', u'NNP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'class', u'class', u'NN'), (u'bird', u'bird', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Katy', 'is', 'the', 'class', 'bird', '.']}, {'string': ' Bill lives two houses down from Sam.', 'parse': {'tree': '(ROOT (S (NP (NNP Bill)) (VP (VBZ lives) (ADVP (NP (CD two) (NNS houses)) (RB down)) (PP (IN from) (NP (NNP Sam)))) (. .)))', 'lemma': [(u'Bill', u'Bill', u'NNP'), (u'lives', u'live', u'VBZ'), (u'two', u'two', u'CD'), (u'houses', u'house', u'NNS'), (u'down', u'down', u'RB'), (u'from', u'from', u'IN'), (u'Sam', u'Sam', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Bill', 'lives', 'two', 'houses', 'down', 'from', 'Sam', '.']}, {'string': ' Sam likes John the cat.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ likes) (S (NP (NNP John)) (NP (DT the) (NN cat)))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'likes', u'like', u'VBZ'), (u'John', u'John', u'NNP'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'likes', 'John', 'the', 'cat', '.']}, {'string': ' He has a fluffy tail.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (NP (DT a) (JJ fluffy) (NN tail))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'fluffy', u'fluffy', u'JJ'), (u'tail', u'tail', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'a', 'fluffy', 'tail', '.']}, {'string': ' Bill likes John the cat too.', 'parse': {'tree': '(ROOT (S (NP (NNP Bill)) (VP (VBZ likes) (NP (NNP John)) (ADVP (NP (DT the) (NN cat)) (RB too))) (. .)))', 'lemma': [(u'Bill', u'Bill', u'NNP'), (u'likes', u'like', u'VBZ'), (u'John', u'John', u'NNP'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Bill', 'likes', 'John', 'the', 'cat', 'too', '.']}, {'string': ' When Bill and Sam get to school they pet John.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Bill) (CC and) (NNP Sam)) (VP (VBP get) (PP (TO to) (NP (NN school)))))) (NP (PRP they)) (VP (VBZ pet) (NP (NNP John))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Bill', u'Bill', u'NNP'), (u'and', u'and', u'CC'), (u'Sam', u'Sam', u'NNP'), (u'get', u'get', u'VBP'), (u'to', u'to', u'TO'), (u'school', u'school', u'NN'), (u'they', u'they', u'PRP'), (u'pet', u'pet', u'VBZ'), (u'John', u'John', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Bill', 'and', 'Sam', 'get', 'to', 'school', 'they', 'pet', 'John', '.']}, {'string': ' Sam is ready to play at school.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBZ is) (ADJP (JJ ready) (S (VP (TO to) (VP (VB play) (PP (IN at) (NP (NN school)))))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'is', u'be', u'VBZ'), (u'ready', u'ready', u'JJ'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'at', u'at', u'IN'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'is', 'ready', 'to', 'play', 'at', 'school', '.']}, {'string': ' School is fun.', 'parse': {'tree': '(ROOT (S (NP (NNP School)) (VP (VBZ is) (NP (NN fun))) (. .)))', 'lemma': [(u'School', u'School', u'NNP'), (u'is', u'be', u'VBZ'), (u'fun', u'fun', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['School', 'is', 'fun', '.']}], 'questions': [{'question': {'string': ' Why did mom say Sam could not play?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NN mom)) (VP (VB say) (SBAR (S (NP (NNP Sam)) (VP (MD could) (RB not) (VP (VB play))))))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'mom', u'mom', u'NN'), (u'say', u'say', u'VB'), (u'Sam', u'Sam', u'NNP'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'play', u'play', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'mom', 'say', 'Sam', 'could', 'not', 'play', '?']}, 'answers': [{'string': ' It was time for a bath.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (NP (NN time)) (PP (IN for) (NP (DT a) (NN bath))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'time', u'time', u'NN'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'bath', u'bath', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'time', 'for', 'a', 'bath', '.']}, {'string': ' It was time to go to school.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (VP (NN time) (S (VP (TO to) (VP (VB go) (PP (TO to) (NP (NN school)))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'time', u'time', u'NN'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'time', 'to', 'go', 'to', 'school', '.']}, {'string': ' Sam had to pet the cat.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBD had) (S (VP (TO to) (VP (VB pet) (NP (DT the) (NN cat)))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'pet', u'pet', u'VB'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'had', 'to', 'pet', 'the', 'cat', '.']}, {'string': ' It was time for breakfast.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (NP (NN time)) (PP (IN for) (NP (NN breakfast))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'time', u'time', u'NN'), (u'for', u'for', u'IN'), (u'breakfast', u'breakfast', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'time', 'for', 'breakfast', '.']}], 'mode': 0}, {'question': {'string': " Who is Sam 's best friend?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (NNP Sam) (POS 's)) (JJS best) (NN friend))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'is', 'Sam', "'s", 'best', 'friend', '?']}, 'answers': [{'string': ' Katy', 'parse': {'tree': '(ROOT (NP (NNP Katy)))', 'lemma': [(u'Katy', u'Katy', u'NNP')]}, 'tokens': ['Katy']}, {'string': ' John', 'parse': {'tree': '(ROOT (NP (NNP John)))', 'lemma': [(u'John', u'John', u'NNP')]}, 'tokens': ['John']}, {'string': ' Bill', 'parse': {'tree': '(ROOT (NP (NNP Bill)))', 'lemma': [(u'Bill', u'Bill', u'NNP')]}, 'tokens': ['Bill']}, {'string': ' Ralph', 'parse': {'tree': '(ROOT (NP (NNP Ralph)))', 'lemma': [(u'Ralph', u'Ralph', u'NNP')]}, 'tokens': ['Ralph']}], 'mode': 1}, {'question': {'string': ' Why does Sam love Ralph?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBZ does) (NP (NNP Sam)) (VP (VB love) (NP (NNP Ralph)))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'does', u'do', u'VBZ'), (u'Sam', u'Sam', u'NNP'), (u'love', u'love', u'VB'), (u'Ralph', u'Ralph', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'does', 'Sam', 'love', 'Ralph', '?']}, 'answers': [{'string': ' Because Ralph licks him on the face and has floppy ears.', 'parse': {'tree': '(ROOT (S (NP (NNP Because) (NNP Ralph)) (VP (VP (VBZ licks) (NP (PRP him)) (PP (IN on) (NP (DT the) (NN face)))) (CC and) (VP (VBZ has) (NP (JJ floppy) (NNS ears)))) (. .)))', 'lemma': [(u'Because', u'Because', u'NNP'), (u'Ralph', u'Ralph', u'NNP'), (u'licks', u'lick', u'VBZ'), (u'him', u'he', u'PRP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'face', u'face', u'NN'), (u'and', u'and', u'CC'), (u'has', u'have', u'VBZ'), (u'floppy', u'floppy', u'JJ'), (u'ears', u'ear', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'Ralph', 'licks', 'him', 'on', 'the', 'face', 'and', 'has', 'floppy', 'ears', '.']}, {'string': ' Because Ralph likes to lick him on the face and play.', 'parse': {'tree': '(ROOT (S (NP (NNP Because) (NNP Ralph)) (VP (VBZ likes) (S (VP (TO to) (VP (VP (VB lick) (NP (PRP him)) (PP (IN on) (NP (DT the) (NN face)))) (CC and) (VP (VB play)))))) (. .)))', 'lemma': [(u'Because', u'Because', u'NNP'), (u'Ralph', u'Ralph', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'lick', u'lick', u'VB'), (u'him', u'he', u'PRP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'face', u'face', u'NN'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'Ralph', 'likes', 'to', 'lick', 'him', 'on', 'the', 'face', 'and', 'play', '.']}, {'string': ' Because Ralph likes to run and play.', 'parse': {'tree': '(ROOT (S (NP (NNP Because) (NNP Ralph)) (VP (VBZ likes) (S (VP (TO to) (VP (VB run) (CC and) (VB play))))) (. .)))', 'lemma': [(u'Because', u'Because', u'NNP'), (u'Ralph', u'Ralph', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'run', u'run', u'VB'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'Ralph', 'likes', 'to', 'run', 'and', 'play', '.']}, {'string': ' Because Ralph likes to jump and run.', 'parse': {'tree': '(ROOT (S (NP (NNP Because) (NNP Ralph)) (VP (VBZ likes) (S (VP (TO to) (VP (VB jump) (CC and) (VB run))))) (. .)))', 'lemma': [(u'Because', u'Because', u'NNP'), (u'Ralph', u'Ralph', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'jump', u'jump', u'VB'), (u'and', u'and', u'CC'), (u'run', u'run', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'Ralph', 'likes', 'to', 'jump', 'and', 'run', '.']}], 'mode': 0}, {'question': {'string': " What is Sam 's favorite cereal?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NNP Sam) (POS 's)) (JJ favorite) (NN cereal))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'favorite', u'favorite', u'JJ'), (u'cereal', u'cereal', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'Sam', "'s", 'favorite', 'cereal', '?']}, 'answers': [{'string': ' Fruit Loops', 'parse': {'tree': '(ROOT (NP (NNP Fruit) (NNPS Loops)))', 'lemma': [(u'Fruit', u'Fruit', u'NNP'), (u'Loops', u'Loops', u'NNPS')]}, 'tokens': ['Fruit', 'Loops']}, {'string': " Friendly O 's", 'parse': {'tree': "(ROOT (S (NP (NNP Friendly) (NNP O)) (VP (VBZ 's))))", 'lemma': [(u'Friendly', u'Friendly', u'NNP'), (u'O', u'O', u'NNP'), (u"'s", u'be', u'VBZ')]}, 'tokens': ['Friendly', 'O', "'s"]}, {'string': ' Cheerios', 'parse': {'tree': '(ROOT (INTJ (UH Cheerios)))', 'lemma': [(u'Cheerios', u'cheerios', u'UH')]}, 'tokens': ['Cheerios']}, {'string': ' Sharkies', 'parse': {'tree': '(ROOT (NP (NNS Sharkies)))', 'lemma': [(u'Sharkies', u'sharky', u'NNS')]}, 'tokens': ['Sharkies']}], 'mode': 1}]}
{'sentences': [{'string': ' In a quiet house there was a dog named Bentley.', 'parse': {'tree': '(ROOT (S (PP (IN In) (NP (DT a) (JJ quiet) (NN house))) (NP (EX there)) (VP (VBD was) (NP (NP (DT a) (NN dog)) (VP (VBN named) (NP (NNP Bentley))))) (. .)))', 'lemma': [(u'In', u'in', u'IN'), (u'a', u'a', u'DT'), (u'quiet', u'quiet', u'JJ'), (u'house', u'house', u'NN'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'named', u'name', u'VBN'), (u'Bentley', u'Bentley', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'a', 'quiet', 'house', 'there', 'was', 'a', 'dog', 'named', 'Bentley', '.']}, {'string': ' Bentley was a little brown puppy and he was always getting into trouble.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Bentley)) (VP (VBD was) (NP (DT a) (JJ little) (JJ brown) (NN puppy)))) (CC and) (S (NP (PRP he)) (VP (VBD was) (ADVP (RB always)) (VP (VBG getting) (PP (IN into) (NP (NN trouble)))))) (. .)))', 'lemma': [(u'Bentley', u'Bentley', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'brown', u'brown', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'always', u'always', u'RB'), (u'getting', u'get', u'VBG'), (u'into', u'into', u'IN'), (u'trouble', u'trouble', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bentley', 'was', 'a', 'little', 'brown', 'puppy', 'and', 'he', 'was', 'always', 'getting', 'into', 'trouble', '.']}, {'string': ' One day Bentley got outside and walked down the street.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day) (NN Bentley)) (VP (VP (VBD got) (ADVP (RB outside))) (CC and) (VP (VBD walked) (PRT (RP down)) (NP (DT the) (NN street)))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'Bentley', u'bentley', u'NN'), (u'got', u'get', u'VBD'), (u'outside', u'outside', u'RB'), (u'and', u'and', u'CC'), (u'walked', u'walk', u'VBD'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'street', u'street', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'Bentley', 'got', 'outside', 'and', 'walked', 'down', 'the', 'street', '.']}, {'string': ' He found a trash can and started to dig through it.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD found) (SBAR (S (NP (DT a) (NN trash)) (VP (VP (MD can)) (CC and) (VP (VBD started) (S (VP (TO to) (VP (VB dig) (PP (IN through) (NP (PRP it))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'found', u'find', u'VBD'), (u'a', u'a', u'DT'), (u'trash', u'trash', u'NN'), (u'can', u'can', u'MD'), (u'and', u'and', u'CC'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'dig', u'dig', u'VB'), (u'through', u'through', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'found', 'a', 'trash', 'can', 'and', 'started', 'to', 'dig', 'through', 'it', '.']}, {'string': ' A cat came also to see what Bentley was doing.', 'parse': {'tree': '(ROOT (S (NP (DT A) (NN cat)) (VP (VBD came) (ADVP (RB also)) (S (VP (TO to) (VP (VB see) (SBAR (WHNP (WP what)) (S (NP (NNP Bentley)) (VP (VBD was) (VP (VBG doing))))))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'cat', u'cat', u'NN'), (u'came', u'come', u'VBD'), (u'also', u'also', u'RB'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'what', u'what', u'WP'), (u'Bentley', u'Bentley', u'NNP'), (u'was', u'be', u'VBD'), (u'doing', u'do', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'cat', 'came', 'also', 'to', 'see', 'what', 'Bentley', 'was', 'doing', '.']}, {'string': " `` Excuse me, but what are you looking for? ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Excuse) (UCP (NP (PRP me)) (, ,) (CC but) (SBAR (WHNP (WP what)) (S (VP (VBP are) (S (NP (PRP you)) (VP (VBG looking) (PP (IN for))))))))) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Excuse', u'excuse', u'VB'), (u'me', u'I', u'PRP'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'what', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'you', u'you', u'PRP'), (u'looking', u'look', u'VBG'), (u'for', u'for', u'IN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Excuse', 'me', ',', 'but', 'what', 'are', 'you', 'looking', 'for', '?', "''"]}, {'string': ' asked the cat.', 'parse': {'tree': '(ROOT (S (VP (VBD asked) (NP (DT the) (NN cat))) (. .)))', 'lemma': [(u'asked', u'ask', u'VBD'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['asked', 'the', 'cat', '.']}, {'string': " `` Well, nothing important, '' Bentley told the cat.", 'parse': {'tree': "(ROOT (S (`` ``) (INTJ (UH Well)) (, ,) (NP (NN nothing) (JJ important)) (, ,) ('' '') (NP (NNP Bentley)) (VP (VBD told) (NP (DT the) (NN cat))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Well', u'well', u'UH'), (u',', u',', u','), (u'nothing', u'nothing', u'NN'), (u'important', u'important', u'JJ'), (u',', u',', u','), (u"''", u"''", u"''"), (u'Bentley', u'Bentley', u'NNP'), (u'told', u'tell', u'VBD'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Well', ',', 'nothing', 'important', ',', "''", 'Bentley', 'told', 'the', 'cat', '.']}, {'string': " `` I wanted to see if there was anything cool in there. ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP I)) (VP (VBD wanted) (S (VP (TO to) (VP (VB see) (SBAR (IN if) (S (NP (EX there)) (VP (VBD was) (ADJP (NN anything) (JJ cool)) (PP (IN in) (NP (RB there)))))))))) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'if', u'if', u'IN'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'anything', u'anything', u'NN'), (u'cool', u'cool', u'JJ'), (u'in', u'in', u'IN'), (u'there', u'there', u'RB'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'I', 'wanted', 'to', 'see', 'if', 'there', 'was', 'anything', 'cool', 'in', 'there', '.', "''"]}, {'string': ' The cat told Bentley that his name was Felix and asked if he could dig through the trash too.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN cat)) (VP (VBD told) (NP (NNP Bentley)) (SBAR (IN that) (S (NP (PRP$ his) (NN name)) (VP (VBD was) (VP (VBN Felix) (CC and) (VBN asked) (SBAR (IN if) (S (NP (PRP he)) (VP (MD could) (VP (VB dig) (PP (IN through) (NP (DT the) (NN trash))) (ADVP (RB too))))))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'told', u'tell', u'VBD'), (u'Bentley', u'Bentley', u'NNP'), (u'that', u'that', u'IN'), (u'his', u'he', u'PRP$'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Felix', u'felix', u'VBN'), (u'and', u'and', u'CC'), (u'asked', u'ask', u'VBN'), (u'if', u'if', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'dig', u'dig', u'VB'), (u'through', u'through', u'IN'), (u'the', u'the', u'DT'), (u'trash', u'trash', u'NN'), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'cat', 'told', 'Bentley', 'that', 'his', 'name', 'was', 'Felix', 'and', 'asked', 'if', 'he', 'could', 'dig', 'through', 'the', 'trash', 'too', '.']}, {'string': " `` Sure thing '' Bentley told the cat.", 'parse': {'tree': "(ROOT (S (NP (`` ``) (JJ Sure) (NN thing) ('' '') (NN Bentley)) (VP (VBD told) (NP (DT the) (NN cat))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Sure', u'sure', u'JJ'), (u'thing', u'thing', u'NN'), (u"''", u"''", u"''"), (u'Bentley', u'bentley', u'NN'), (u'told', u'tell', u'VBD'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Sure', 'thing', "''", 'Bentley', 'told', 'the', 'cat', '.']}, {'string': ' The two of them started to dig through the trash again.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (CD two)) (PP (IN of) (NP (PRP them)))) (VP (VBD started) (S (VP (TO to) (VP (VB dig) (PP (IN through) (NP (DT the) (NN trash))) (ADVP (RB again)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'two', u'two', u'CD'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'dig', u'dig', u'VB'), (u'through', u'through', u'IN'), (u'the', u'the', u'DT'), (u'trash', u'trash', u'NN'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'two', 'of', 'them', 'started', 'to', 'dig', 'through', 'the', 'trash', 'again', '.']}, {'string': " After a little bit the pair got bored and started to walk down the street going away from Bentley 's house.", 'parse': {'tree': "(ROOT (S (PP (IN After) (NP (DT a) (JJ little) (NN bit))) (NP (DT the) (NN pair)) (VP (VP (VBD got) (S (ADJP (JJ bored)))) (CC and) (VP (VBD started) (S (VP (TO to) (VP (VB walk) (PRT (RP down)) (NP (NP (DT the) (NN street)) (VP (VBG going) (PRT (RP away)) (PP (IN from) (NP (NP (NNP Bentley) (POS 's)) (NN house)))))))))) (. .)))", 'lemma': [(u'After', u'after', u'IN'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'bit', u'bit', u'NN'), (u'the', u'the', u'DT'), (u'pair', u'pair', u'NN'), (u'got', u'get', u'VBD'), (u'bored', u'bored', u'JJ'), (u'and', u'and', u'CC'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'walk', u'walk', u'VB'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'street', u'street', u'NN'), (u'going', u'go', u'VBG'), (u'away', u'away', u'RP'), (u'from', u'from', u'IN'), (u'Bentley', u'Bentley', u'NNP'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'a', 'little', 'bit', 'the', 'pair', 'got', 'bored', 'and', 'started', 'to', 'walk', 'down', 'the', 'street', 'going', 'away', 'from', 'Bentley', "'s", 'house', '.']}, {'string': ' They walked to a river and went to the edge of the water.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD walked) (PP (TO to) (NP (DT a) (NN river)))) (CC and) (VP (VBD went) (PP (TO to) (NP (NP (DT the) (NN edge)) (PP (IN of) (NP (DT the) (NN water))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'walked', u'walk', u'VBD'), (u'to', u'to', u'TO'), (u'a', u'a', u'DT'), (u'river', u'river', u'NN'), (u'and', u'and', u'CC'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'edge', u'edge', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'water', u'water', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'walked', 'to', 'a', 'river', 'and', 'went', 'to', 'the', 'edge', 'of', 'the', 'water', '.']}, {'string': ' They saw they were dirty because they had been digging in the trash so they went into the water to wash themselves.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD saw) (SBAR (S (NP (PRP they)) (VP (VBD were) (ADJP (JJ dirty)) (SBAR (IN because) (S (NP (PRP they)) (VP (VBD had) (VP (VBN been) (NP (NP (NN digging)) (PP (IN in) (NP (DT the) (NN trash)))) (SBAR (IN so) (S (NP (PRP they)) (VP (VBD went) (PP (IN into) (NP (DT the) (NN water))) (S (VP (TO to) (VP (VB wash) (NP (PRP themselves)))))))))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'saw', u'see', u'VBD'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'dirty', u'dirty', u'JJ'), (u'because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'digging', u'digging', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'trash', u'trash', u'NN'), (u'so', u'so', u'IN'), (u'they', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'water', u'water', u'NN'), (u'to', u'to', u'TO'), (u'wash', u'wash', u'VB'), (u'themselves', u'themselves', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'saw', 'they', 'were', 'dirty', 'because', 'they', 'had', 'been', 'digging', 'in', 'the', 'trash', 'so', 'they', 'went', 'into', 'the', 'water', 'to', 'wash', 'themselves', '.']}, {'string': " When they were clean they went back to Bentley 's house.", 'parse': {'tree': "(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP they)) (VP (VBD were) (ADJP (JJ clean))))) (NP (PRP they)) (VP (VBD went) (ADVP (RB back)) (PP (TO to) (NP (NP (NNP Bentley) (POS 's)) (NN house)))) (. .)))", 'lemma': [(u'When', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'clean', u'clean', u'JJ'), (u'they', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'back', u'back', u'RB'), (u'to', u'to', u'TO'), (u'Bentley', u'Bentley', u'NNP'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'they', 'were', 'clean', 'they', 'went', 'back', 'to', 'Bentley', "'s", 'house', '.']}, {'string': ' Inside the house they got water on everything because they were still wet.', 'parse': {'tree': '(ROOT (S (PP (IN Inside) (NP (DT the) (NN house))) (NP (PRP they)) (VP (VBD got) (NP (NN water)) (PP (IN on) (NP (NN everything))) (SBAR (IN because) (S (NP (PRP they)) (VP (VBD were) (ADVP (RB still)) (ADJP (JJ wet)))))) (. .)))', 'lemma': [(u'Inside', u'inside', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'they', u'they', u'PRP'), (u'got', u'get', u'VBD'), (u'water', u'water', u'NN'), (u'on', u'on', u'IN'), (u'everything', u'everything', u'NN'), (u'because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'still', u'still', u'RB'), (u'wet', u'wet', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Inside', 'the', 'house', 'they', 'got', 'water', 'on', 'everything', 'because', 'they', 'were', 'still', 'wet', '.']}, {'string': " Bentley 's human 's came home and were very upset that their house was now very wet.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Bentley) (POS 's)) (JJ human) (NNS 's)) (VP (VP (VBD came) (NP (NN home))) (CC and) (VP (VBD were) (ADJP (RB very) (JJ upset) (SBAR (IN that) (S (NP (PRP$ their) (NN house)) (VP (VBD was) (ADVP (RB now)) (ADJP (RB very) (JJ wet)))))))) (. .)))", 'lemma': [(u'Bentley', u'Bentley', u'NNP'), (u"'s", u"'s", u'POS'), (u'human', u'human', u'JJ'), (u"'s", u"'", u'NNS'), (u'came', u'come', u'VBD'), (u'home', u'home', u'NN'), (u'and', u'and', u'CC'), (u'were', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'upset', u'upset', u'JJ'), (u'that', u'that', u'IN'), (u'their', u'they', u'PRP$'), (u'house', u'house', u'NN'), (u'was', u'be', u'VBD'), (u'now', u'now', u'RB'), (u'very', u'very', u'RB'), (u'wet', u'wet', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Bentley', "'s", 'human', "'s", 'came', 'home', 'and', 'were', 'very', 'upset', 'that', 'their', 'house', 'was', 'now', 'very', 'wet', '.']}], 'questions': [{'question': {'string': " Why were Bentley 's human 's upset?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD were) (NP (NP (NP (NNP Bentley) (POS 's)) (NN human) (POS 's)) (NN upset))) (. ?)))", 'lemma': [(u'Why', u'why', u'WRB'), (u'were', u'be', u'VBD'), (u'Bentley', u'Bentley', u'NNP'), (u"'s", u"'s", u'POS'), (u'human', u'human', u'NN'), (u"'s", u"'s", u'POS'), (u'upset', u'upset', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'were', 'Bentley', "'s", 'human', "'s", 'upset', '?']}, 'answers': [{'string': ' They had been stuck in traffic', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD had) (VP (VBN been) (VP (VBN stuck) (PP (IN in) (NP (NN traffic))))))))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'stuck', u'stick', u'VBN'), (u'in', u'in', u'IN'), (u'traffic', u'traffic', u'NN')]}, 'tokens': ['They', 'had', 'been', 'stuck', 'in', 'traffic']}, {'string': ' The house was wet', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN house)) (VP (VBD was) (ADJP (JJ wet)))))', 'lemma': [(u'The', u'the', u'DT'), (u'house', u'house', u'NN'), (u'was', u'be', u'VBD'), (u'wet', u'wet', u'JJ')]}, 'tokens': ['The', 'house', 'was', 'wet']}, {'string': ' The door was open', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN door)) (VP (VBD was) (ADJP (JJ open)))))', 'lemma': [(u'The', u'the', u'DT'), (u'door', u'door', u'NN'), (u'was', u'be', u'VBD'), (u'open', u'open', u'JJ')]}, 'tokens': ['The', 'door', 'was', 'open']}, {'string': ' The animals ripped the sofa', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS animals)) (VP (VBD ripped) (NP (DT the) (NN sofa)))))', 'lemma': [(u'The', u'the', u'DT'), (u'animals', u'animal', u'NNS'), (u'ripped', u'rip', u'VBD'), (u'the', u'the', u'DT'), (u'sofa', u'sofa', u'NN')]}, 'tokens': ['The', 'animals', 'ripped', 'the', 'sofa']}], 'mode': 1}, {'question': {'string': ' What was the name of the cat Bentley met?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (DT the) (NN cat) (NN Bentley)))) (VP (VBN met))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'name', u'name', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'Bentley', u'bentley', u'NN'), (u'met', u'meet', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'name', 'of', 'the', 'cat', 'Bentley', 'met', '?']}, 'answers': [{'string': ' Bentley', 'parse': {'tree': '(ROOT (NP (NNP Bentley)))', 'lemma': [(u'Bentley', u'Bentley', u'NNP')]}, 'tokens': ['Bentley']}, {'string': ' Human', 'parse': {'tree': '(ROOT (NP (NNP Human)))', 'lemma': [(u'Human', u'Human', u'NNP')]}, 'tokens': ['Human']}, {'string': ' Felix', 'parse': {'tree': '(ROOT (NP (NNP Felix)))', 'lemma': [(u'Felix', u'Felix', u'NNP')]}, 'tokens': ['Felix']}, {'string': ' Puppy', 'parse': {'tree': '(ROOT (ADVP (RB Puppy)))', 'lemma': [(u'Puppy', u'puppy', u'RB')]}, 'tokens': ['Puppy']}], 'mode': 1}, {'question': {'string': ' What was Bentley digging in?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NNP Bentley) (NNP digging)) (PP (IN in))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'Bentley', u'Bentley', u'NNP'), (u'digging', u'digging', u'NNP'), (u'in', u'in', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'Bentley', 'digging', 'in', '?']}, 'answers': [{'string': ' River', 'parse': {'tree': '(ROOT (NP (NNP River)))', 'lemma': [(u'River', u'River', u'NNP')]}, 'tokens': ['River']}, {'string': ' Trash', 'parse': {'tree': '(ROOT (NP (NNP Trash)))', 'lemma': [(u'Trash', u'Trash', u'NNP')]}, 'tokens': ['Trash']}, {'string': ' Dirt', 'parse': {'tree': '(ROOT (NP (NNP Dirt)))', 'lemma': [(u'Dirt', u'Dirt', u'NNP')]}, 'tokens': ['Dirt']}, {'string': ' Street', 'parse': {'tree': '(ROOT (NP (NNP Street)))', 'lemma': [(u'Street', u'Street', u'NNP')]}, 'tokens': ['Street']}], 'mode': 1}, {'question': {'string': ' Where did the two animals go after digging in the trash?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (CD two) (NNS animals)) (VP (VB go) (PP (IN after) (NP (NP (NN digging)) (PP (IN in) (NP (DT the) (NN trash))))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'two', u'two', u'CD'), (u'animals', u'animal', u'NNS'), (u'go', u'go', u'VB'), (u'after', u'after', u'IN'), (u'digging', u'digging', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'trash', u'trash', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'the', 'two', 'animals', 'go', 'after', 'digging', 'in', 'the', 'trash', '?']}, 'answers': [{'string': ' The city', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN city))))', 'lemma': [(u'The', u'the', u'DT'), (u'city', u'city', u'NN')]}, 'tokens': ['The', 'city']}, {'string': ' River', 'parse': {'tree': '(ROOT (NP (NNP River)))', 'lemma': [(u'River', u'River', u'NNP')]}, 'tokens': ['River']}, {'string': ' Space', 'parse': {'tree': '(ROOT (NP (NNP Space)))', 'lemma': [(u'Space', u'Space', u'NNP')]}, 'tokens': ['Space']}, {'string': ' Home', 'parse': {'tree': '(ROOT (NP (NNP Home)))', 'lemma': [(u'Home', u'Home', u'NNP')]}, 'tokens': ['Home']}], 'mode': 0}]}
{'sentences': [{'string': ' Timmy liked to play games and play sports but more than anything he liked to collect things.', 'parse': {'tree': '(ROOT (S (NP (NNP Timmy)) (VP (VBD liked) (S (VP (TO to) (VP (VP (VB play) (NP (NNS games))) (CC and) (VP (VB play) (NP (NNS sports)) (PP (CC but) (PP (JJR more) (IN than) (NP (NP (NN anything)) (SBAR (S (NP (PRP he)) (VP (VBD liked) (S (VP (TO to) (VP (VB collect) (NP (NNS things)))))))))))))))) (. .)))', 'lemma': [(u'Timmy', u'Timmy', u'NNP'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'games', u'game', u'NNS'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'sports', u'sport', u'NNS'), (u'but', u'but', u'CC'), (u'more', u'more', u'JJR'), (u'than', u'than', u'IN'), (u'anything', u'anything', u'NN'), (u'he', u'he', u'PRP'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'collect', u'collect', u'VB'), (u'things', u'thing', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Timmy', 'liked', 'to', 'play', 'games', 'and', 'play', 'sports', 'but', 'more', 'than', 'anything', 'he', 'liked', 'to', 'collect', 'things', '.']}, {'string': ' He collected bottle caps.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD collected) (NP (NN bottle) (NNS caps))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'collected', u'collect', u'VBD'), (u'bottle', u'bottle', u'NN'), (u'caps', u'cap', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'collected', 'bottle', 'caps', '.']}, {'string': ' He collected sea shells.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD collected) (NP (NN sea) (NNS shells))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'collected', u'collect', u'VBD'), (u'sea', u'sea', u'NN'), (u'shells', u'shell', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'collected', 'sea', 'shells', '.']}, {'string': ' He collected baseball cards.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD collected) (NP (NN baseball) (NNS cards))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'collected', u'collect', u'VBD'), (u'baseball', u'baseball', u'NN'), (u'cards', u'card', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'collected', 'baseball', 'cards', '.']}, {'string': ' He has collected baseball cards the longest.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (VP (VBN collected) (NP (NP (NN baseball) (NNS cards)) (NP (DT the) (JJS longest))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'collected', u'collect', u'VBN'), (u'baseball', u'baseball', u'NN'), (u'cards', u'card', u'NNS'), (u'the', u'the', u'DT'), (u'longest', u'longest', u'JJS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'collected', 'baseball', 'cards', 'the', 'longest', '.']}, {'string': ' He likes to collect the thing that he has collected the longest the most.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ likes) (S (VP (TO to) (VP (VB collect) (NP (DT the) (NN thing)) (SBAR (IN that) (S (NP (PRP he)) (VP (VBZ has) (VP (VBN collected) (NP (NP (DT the) (JJS longest)) (NP (DT the) (JJS most))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'collect', u'collect', u'VB'), (u'the', u'the', u'DT'), (u'thing', u'thing', u'NN'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'collected', u'collect', u'VBN'), (u'the', u'the', u'DT'), (u'longest', u'longest', u'JJS'), (u'the', u'the', u'DT'), (u'most', u'most', u'JJS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'likes', 'to', 'collect', 'the', 'thing', 'that', 'he', 'has', 'collected', 'the', 'longest', 'the', 'most', '.']}, {'string': ' He once thought about collecting stamps but never did.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB once)) (VP (VP (VBD thought) (PP (IN about) (NP (VBG collecting) (NNS stamps)))) (CC but) (ADVP (RB never)) (VP (VBD did))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'once', u'once', u'RB'), (u'thought', u'think', u'VBD'), (u'about', u'about', u'IN'), (u'collecting', u'collect', u'VBG'), (u'stamps', u'stamp', u'NNS'), (u'but', u'but', u'CC'), (u'never', u'never', u'RB'), (u'did', u'do', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'once', 'thought', 'about', 'collecting', 'stamps', 'but', 'never', 'did', '.']}, {'string': ' His most expensive collection was not his favorite collection.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (ADJP (RBS most) (JJ expensive)) (NN collection)) (VP (VBD was) (RB not) (NP (PRP$ his) (JJ favorite) (NN collection))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'most', u'most', u'RBS'), (u'expensive', u'expensive', u'JJ'), (u'collection', u'collection', u'NN'), (u'was', u'be', u'VBD'), (u'not', u'not', u'RB'), (u'his', u'he', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'collection', u'collection', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'most', 'expensive', 'collection', 'was', 'not', 'his', 'favorite', 'collection', '.']}, {'string': ' Timmy spent the most money on his bottle cap collection.', 'parse': {'tree': '(ROOT (S (NP (NNP Timmy)) (VP (VBD spent) (NP (NP (DT the) (JJS most) (NN money)) (PP (IN on) (NP (PRP$ his) (NN bottle) (NN cap) (NN collection))))) (. .)))', 'lemma': [(u'Timmy', u'Timmy', u'NNP'), (u'spent', u'spend', u'VBD'), (u'the', u'the', u'DT'), (u'most', u'most', u'JJS'), (u'money', u'money', u'NN'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'bottle', u'bottle', u'NN'), (u'cap', u'cap', u'NN'), (u'collection', u'collection', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Timmy', 'spent', 'the', 'most', 'money', 'on', 'his', 'bottle', 'cap', 'collection', '.']}], 'questions': [{'question': {'string': ' Which item did Timmy like to collect the most?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT Which) (NN item)) (SQ (VBD did) (NP (NNP Timmy)) (VP (VB like) (S (VP (TO to) (VP (VB collect) (NP (DT the) (JJS most))))))) (. ?)))', 'lemma': [(u'Which', u'which', u'WDT'), (u'item', u'item', u'NN'), (u'did', u'do', u'VBD'), (u'Timmy', u'Timmy', u'NNP'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'collect', u'collect', u'VB'), (u'the', u'the', u'DT'), (u'most', u'most', u'JJS'), (u'?', u'?', u'.')]}, 'tokens': ['Which', 'item', 'did', 'Timmy', 'like', 'to', 'collect', 'the', 'most', '?']}, 'answers': [{'string': ' Baseball cards', 'parse': {'tree': '(ROOT (NP (NNP Baseball) (NNS cards)))', 'lemma': [(u'Baseball', u'Baseball', u'NNP'), (u'cards', u'card', u'NNS')]}, 'tokens': ['Baseball', 'cards']}, {'string': ' Bottle caps', 'parse': {'tree': '(ROOT (NP (JJ Bottle) (NNS caps)))', 'lemma': [(u'Bottle', u'bottle', u'JJ'), (u'caps', u'cap', u'NNS')]}, 'tokens': ['Bottle', 'caps']}, {'string': ' Sea shells', 'parse': {'tree': '(ROOT (NP (NNP Sea) (NNS shells)))', 'lemma': [(u'Sea', u'Sea', u'NNP'), (u'shells', u'shell', u'NNS')]}, 'tokens': ['Sea', 'shells']}, {'string': ' Stamps', 'parse': {'tree': '(ROOT (NP (NNS Stamps)))', 'lemma': [(u'Stamps', u'stamp', u'NNS')]}, 'tokens': ['Stamps']}], 'mode': 0}, {'question': {'string': " Which is Timmy 's most expensive collection?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Which)) (SQ (VBZ is) (NP (NP (NNP Timmy) (POS 's)) (ADJP (RBS most) (JJ expensive)) (NN collection))) (. ?)))", 'lemma': [(u'Which', u'which', u'WP'), (u'is', u'be', u'VBZ'), (u'Timmy', u'Timmy', u'NNP'), (u"'s", u"'s", u'POS'), (u'most', u'most', u'RBS'), (u'expensive', u'expensive', u'JJ'), (u'collection', u'collection', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Which', 'is', 'Timmy', "'s", 'most', 'expensive', 'collection', '?']}, 'answers': [{'string': ' Sea Shells', 'parse': {'tree': '(ROOT (NP (NNP Sea) (NNPS Shells)))', 'lemma': [(u'Sea', u'Sea', u'NNP'), (u'Shells', u'Shells', u'NNPS')]}, 'tokens': ['Sea', 'Shells']}, {'string': ' Baseball Cards', 'parse': {'tree': '(ROOT (NP (NNP Baseball) (NNP Cards)))', 'lemma': [(u'Baseball', u'Baseball', u'NNP'), (u'Cards', u'Cards', u'NNP')]}, 'tokens': ['Baseball', 'Cards']}, {'string': ' Stamps', 'parse': {'tree': '(ROOT (NP (NNS Stamps)))', 'lemma': [(u'Stamps', u'stamp', u'NNS')]}, 'tokens': ['Stamps']}, {'string': ' Bottle Cap', 'parse': {'tree': '(ROOT (NP (NNP Bottle) (NNP Cap)))', 'lemma': [(u'Bottle', u'Bottle', u'NNP'), (u'Cap', u'Cap', u'NNP')]}, 'tokens': ['Bottle', 'Cap']}], 'mode': 1}, {'question': {'string': ' Which item did Timmy not collect?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT Which) (NN item)) (SQ (VBD did) (NP (NNP Timmy)) (VP (RB not) (VB collect))) (. ?)))', 'lemma': [(u'Which', u'which', u'WDT'), (u'item', u'item', u'NN'), (u'did', u'do', u'VBD'), (u'Timmy', u'Timmy', u'NNP'), (u'not', u'not', u'RB'), (u'collect', u'collect', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Which', 'item', 'did', 'Timmy', 'not', 'collect', '?']}, 'answers': [{'string': ' Baseball cards', 'parse': {'tree': '(ROOT (NP (NNP Baseball) (NNS cards)))', 'lemma': [(u'Baseball', u'Baseball', u'NNP'), (u'cards', u'card', u'NNS')]}, 'tokens': ['Baseball', 'cards']}, {'string': ' Bottle caps', 'parse': {'tree': '(ROOT (NP (JJ Bottle) (NNS caps)))', 'lemma': [(u'Bottle', u'bottle', u'JJ'), (u'caps', u'cap', u'NNS')]}, 'tokens': ['Bottle', 'caps']}, {'string': ' Sea shells', 'parse': {'tree': '(ROOT (NP (NNP Sea) (NNS shells)))', 'lemma': [(u'Sea', u'Sea', u'NNP'), (u'shells', u'shell', u'NNS')]}, 'tokens': ['Sea', 'shells']}, {'string': ' Stamps', 'parse': {'tree': '(ROOT (NP (NNS Stamps)))', 'lemma': [(u'Stamps', u'stamp', u'NNS')]}, 'tokens': ['Stamps']}], 'mode': 1}, {'question': {'string': ' Timmy liked to do which of these things the most?', 'parse': {'tree': '(ROOT (S (NP (NNP Timmy)) (VP (VBD liked) (S (VP (TO to) (VP (VB do) (WHNP (WDT which))))) (PP (IN of) (NP (NP (DT these) (NNS things)) (NP (DT the) (JJS most))))) (. ?)))', 'lemma': [(u'Timmy', u'Timmy', u'NNP'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'which', u'which', u'WDT'), (u'of', u'of', u'IN'), (u'these', u'these', u'DT'), (u'things', u'thing', u'NNS'), (u'the', u'the', u'DT'), (u'most', u'most', u'JJS'), (u'?', u'?', u'.')]}, 'tokens': ['Timmy', 'liked', 'to', 'do', 'which', 'of', 'these', 'things', 'the', 'most', '?']}, 'answers': [{'string': ' Play games', 'parse': {'tree': '(ROOT (S (VP (VB Play) (NP (NNS games)))))', 'lemma': [(u'Play', u'play', u'VB'), (u'games', u'game', u'NNS')]}, 'tokens': ['Play', 'games']}, {'string': ' Play sports', 'parse': {'tree': '(ROOT (S (VP (VB Play) (NP (NNS sports)))))', 'lemma': [(u'Play', u'play', u'VB'), (u'sports', u'sport', u'NNS')]}, 'tokens': ['Play', 'sports']}, {'string': ' Collect things', 'parse': {'tree': '(ROOT (NP (JJ Collect) (NNS things)))', 'lemma': [(u'Collect', u'collect', u'JJ'), (u'things', u'thing', u'NNS')]}, 'tokens': ['Collect', 'things']}, {'string': ' Collect stamps', 'parse': {'tree': '(ROOT (NP (JJ Collect) (NNS stamps)))', 'lemma': [(u'Collect', u'collect', u'JJ'), (u'stamps', u'stamp', u'NNS')]}, 'tokens': ['Collect', 'stamps']}], 'mode': 1}]}
{'sentences': [{'string': ' In a far away land known as Board, there was a great man named Pawn.', 'parse': {'tree': '(ROOT (S (PP (IN In) (NP (NP (DT a) (ADVP (RB far) (RB away)) (NN land)) (VP (VBN known) (PP (IN as) (NP (NNP Board)))))) (, ,) (NP (EX there)) (VP (VBD was) (NP (NP (DT a) (JJ great) (NN man)) (VP (VBN named) (NP (NNP Pawn))))) (. .)))', 'lemma': [(u'In', u'in', u'IN'), (u'a', u'a', u'DT'), (u'far', u'far', u'RB'), (u'away', u'away', u'RB'), (u'land', u'land', u'NN'), (u'known', u'know', u'VBN'), (u'as', u'as', u'IN'), (u'Board', u'Board', u'NNP'), (u',', u',', u','), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'man', u'man', u'NN'), (u'named', u'name', u'VBN'), (u'Pawn', u'Pawn', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'a', 'far', 'away', 'land', 'known', 'as', 'Board', ',', 'there', 'was', 'a', 'great', 'man', 'named', 'Pawn', '.']}, {'string': ' This was a very odd land because the only thing to do was play chess.', 'parse': {'tree': '(ROOT (S (NP (DT This)) (VP (VBD was) (NP (NP (DT a) (ADJP (RB very) (JJ odd)) (NN land)) (SBAR (IN because) (S (NP (DT the) (JJ only) (NN thing) (S (VP (TO to) (VP (VB do))))) (VP (VBD was) (NP (NN play) (NN chess))))))) (. .)))', 'lemma': [(u'This', u'this', u'DT'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'odd', u'odd', u'JJ'), (u'land', u'land', u'NN'), (u'because', u'because', u'IN'), (u'the', u'the', u'DT'), (u'only', u'only', u'JJ'), (u'thing', u'thing', u'NN'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'was', u'be', u'VBD'), (u'play', u'play', u'NN'), (u'chess', u'chess', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['This', 'was', 'a', 'very', 'odd', 'land', 'because', 'the', 'only', 'thing', 'to', 'do', 'was', 'play', 'chess', '.']}, {'string': ' Pawn did not very much care for chess as he was very bored with it.', 'parse': {'tree': '(ROOT (S (NP (NNP Pawn)) (VP (VBD did) (RB not) (ADVP (RB very) (RB much)) (VP (VB care) (PP (IN for) (NP (NN chess))) (SBAR (IN as) (S (NP (PRP he)) (VP (VBD was) (ADJP (RB very) (VBN bored) (PP (IN with) (NP (PRP it))))))))) (. .)))', 'lemma': [(u'Pawn', u'Pawn', u'NNP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'very', u'very', u'RB'), (u'much', u'much', u'RB'), (u'care', u'care', u'VB'), (u'for', u'for', u'IN'), (u'chess', u'chess', u'NN'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'bored', u'bore', u'VBN'), (u'with', u'with', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Pawn', 'did', 'not', 'very', 'much', 'care', 'for', 'chess', 'as', 'he', 'was', 'very', 'bored', 'with', 'it', '.']}, {'string': " Another problem Pawn had was that he did n't like some of the other people in this land.", 'parse': {'tree': "(ROOT (S (NP (NP (DT Another) (NN problem)) (SBAR (S (NP (NNP Pawn)) (VP (VBD had))))) (VP (VBD was) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD did) (RB n't) (VP (VB like) (NP (NP (DT some)) (PP (IN of) (NP (NP (DT the) (JJ other) (NNS people)) (PP (IN in) (NP (DT this) (NN land))))))))))) (. .)))", 'lemma': [(u'Another', u'another', u'DT'), (u'problem', u'problem', u'NN'), (u'Pawn', u'Pawn', u'NNP'), (u'had', u'have', u'VBD'), (u'was', u'be', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'some', u'some', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'people', u'people', u'NNS'), (u'in', u'in', u'IN'), (u'this', u'this', u'DT'), (u'land', u'land', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Another', 'problem', 'Pawn', 'had', 'was', 'that', 'he', 'did', "n't", 'like', 'some', 'of', 'the', 'other', 'people', 'in', 'this', 'land', '.']}, {'string': ' They had names like Bishop, Queen, Rook, and Knight.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD had) (NP (NP (NNS names)) (PP (IN like) (NP (NNP Bishop) (, ,) (NNS Queen) (, ,) (NNP Rook) (, ,) (CC and) (NNP Knight))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'names', u'name', u'NNS'), (u'like', u'like', u'IN'), (u'Bishop', u'Bishop', u'NNP'), (u',', u',', u','), (u'Queen', u'queen', u'NNS'), (u',', u',', u','), (u'Rook', u'Rook', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Knight', u'Knight', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'had', 'names', 'like', 'Bishop', ',', 'Queen', ',', 'Rook', ',', 'and', 'Knight', '.']}, {'string': ' And most of all, there was King.', 'parse': {'tree': '(ROOT (S (CC And) (NP (NP (JJS most)) (PP (IN of) (NP (DT all)))) (, ,) (NP (EX there)) (VP (VBD was) (NP (NNP King))) (. .)))', 'lemma': [(u'And', u'and', u'CC'), (u'most', u'most', u'JJS'), (u'of', u'of', u'IN'), (u'all', u'all', u'DT'), (u',', u',', u','), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'King', u'King', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['And', 'most', 'of', 'all', ',', 'there', 'was', 'King', '.']}, {'string': ' He was the greatest person in Board.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (NP (NP (DT the) (JJS greatest) (NN person)) (PP (IN in) (NP (NNP Board))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'greatest', u'greatest', u'JJS'), (u'person', u'person', u'NN'), (u'in', u'in', u'IN'), (u'Board', u'Board', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'the', 'greatest', 'person', 'in', 'Board', '.']}, {'string': ' One day, during their normal battle, Pawn saw an opening to move to the far end of Board.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (, ,) (PP (IN during) (NP (PRP$ their) (JJ normal) (NN battle))) (, ,) (NP (NNP Pawn)) (VP (VBD saw) (NP (DT an) (NN opening) (S (VP (TO to) (VP (VB move) (PP (TO to) (NP (NP (DT the) (JJ far) (NN end)) (PP (IN of) (NP (NNP Board)))))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'during', u'during', u'IN'), (u'their', u'they', u'PRP$'), (u'normal', u'normal', u'JJ'), (u'battle', u'battle', u'NN'), (u',', u',', u','), (u'Pawn', u'Pawn', u'NNP'), (u'saw', u'see', u'VBD'), (u'an', u'a', u'DT'), (u'opening', u'opening', u'NN'), (u'to', u'to', u'TO'), (u'move', u'move', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'far', u'far', u'JJ'), (u'end', u'end', u'NN'), (u'of', u'of', u'IN'), (u'Board', u'Board', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', ',', 'during', 'their', 'normal', 'battle', ',', 'Pawn', 'saw', 'an', 'opening', 'to', 'move', 'to', 'the', 'far', 'end', 'of', 'Board', '.']}, {'string': ' He almost got hurt by Knight but he got away.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (ADVP (RB almost)) (VP (VBD got) (VP (VBN hurt) (PP (IN by) (NP (NNP Knight)))))) (CC but) (S (NP (PRP he)) (VP (VBD got) (PRT (RP away)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'almost', u'almost', u'RB'), (u'got', u'get', u'VBD'), (u'hurt', u'hurt', u'VBN'), (u'by', u'by', u'IN'), (u'Knight', u'Knight', u'NNP'), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'away', u'away', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'almost', 'got', 'hurt', 'by', 'Knight', 'but', 'he', 'got', 'away', '.']}, {'string': ' Amazingly, when he got to the other end he became as powerful as Queen.', 'parse': {'tree': '(ROOT (S (ADVP (RB Amazingly)) (, ,) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBD got) (PP (TO to) (NP (DT the) (JJ other) (NN end)))))) (NP (PRP he)) (VP (VBD became) (ADJP (RB as) (JJ powerful)) (PP (IN as) (NP (NNP Queen)))) (. .)))', 'lemma': [(u'Amazingly', u'amazingly', u'RB'), (u',', u',', u','), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'end', u'end', u'NN'), (u'he', u'he', u'PRP'), (u'became', u'become', u'VBD'), (u'as', u'as', u'RB'), (u'powerful', u'powerful', u'JJ'), (u'as', u'as', u'IN'), (u'Queen', u'Queen', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Amazingly', ',', 'when', 'he', 'got', 'to', 'the', 'other', 'end', 'he', 'became', 'as', 'powerful', 'as', 'Queen', '.']}, {'string': ' With this amazing power, Pawn chose to help keep King safe.', 'parse': {'tree': '(ROOT (S (PP (IN With) (NP (DT this) (JJ amazing) (NN power))) (, ,) (NP (NNP Pawn)) (VP (VBD chose) (S (VP (TO to) (VP (VB help) (S (VP (VB keep) (S (NP (NNP King)) (ADJP (JJ safe))))))))) (. .)))', 'lemma': [(u'With', u'with', u'IN'), (u'this', u'this', u'DT'), (u'amazing', u'amazing', u'JJ'), (u'power', u'power', u'NN'), (u',', u',', u','), (u'Pawn', u'Pawn', u'NNP'), (u'chose', u'choose', u'VBD'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'keep', u'keep', u'VB'), (u'King', u'King', u'NNP'), (u'safe', u'safe', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['With', 'this', 'amazing', 'power', ',', 'Pawn', 'chose', 'to', 'help', 'keep', 'King', 'safe', '.']}, {'string': ' All was well until Pawn woke up and knew that it was only a dream.', 'parse': {'tree': '(ROOT (S (NP (DT All)) (VP (VBD was) (ADVP (RB well)) (SBAR (IN until) (S (NP (NNP Pawn)) (VP (VP (VBD woke) (PRT (RP up))) (CC and) (VP (VBD knew) (SBAR (IN that) (S (NP (PRP it)) (VP (VBD was) (ADVP (RB only)) (NP (DT a) (NN dream)))))))))) (. .)))', 'lemma': [(u'All', u'all', u'DT'), (u'was', u'be', u'VBD'), (u'well', u'well', u'RB'), (u'until', u'until', u'IN'), (u'Pawn', u'Pawn', u'NNP'), (u'woke', u'wake', u'VBD'), (u'up', u'up', u'RP'), (u'and', u'and', u'CC'), (u'knew', u'know', u'VBD'), (u'that', u'that', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'only', u'only', u'RB'), (u'a', u'a', u'DT'), (u'dream', u'dream', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['All', 'was', 'well', 'until', 'Pawn', 'woke', 'up', 'and', 'knew', 'that', 'it', 'was', 'only', 'a', 'dream', '.']}, {'string': ' He was still Pawn.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADVP (RB still)) (NP (NNP Pawn))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'still', u'still', u'RB'), (u'Pawn', u'Pawn', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'still', 'Pawn', '.']}], 'questions': [{'question': {'string': ' Who almost hurt Pawn?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (ADVP (RB almost)) (VBD hurt) (NP (NNP Pawn)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'almost', u'almost', u'RB'), (u'hurt', u'hurt', u'VBD'), (u'Pawn', u'Pawn', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'almost', 'hurt', 'Pawn', '?']}, 'answers': [{'string': ' Pawn', 'parse': {'tree': '(ROOT (NP (NNP Pawn)))', 'lemma': [(u'Pawn', u'Pawn', u'NNP')]}, 'tokens': ['Pawn']}, {'string': ' Queen', 'parse': {'tree': '(ROOT (NP (NNP Queen)))', 'lemma': [(u'Queen', u'Queen', u'NNP')]}, 'tokens': ['Queen']}, {'string': ' King', 'parse': {'tree': '(ROOT (NP (NNP King)))', 'lemma': [(u'King', u'King', u'NNP')]}, 'tokens': ['King']}, {'string': ' Knight', 'parse': {'tree': '(ROOT (NP (NNP Knight)))', 'lemma': [(u'Knight', u'Knight', u'NNP')]}, 'tokens': ['Knight']}], 'mode': 1}, {'question': {'string': ' Who was the greatest person in Board?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (DT the) (JJS greatest) (NN person)) (PP (IN in) (NP (NNP Board))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'greatest', u'greatest', u'JJS'), (u'person', u'person', u'NN'), (u'in', u'in', u'IN'), (u'Board', u'Board', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'the', 'greatest', 'person', 'in', 'Board', '?']}, 'answers': [{'string': ' Pawn', 'parse': {'tree': '(ROOT (NP (NNP Pawn)))', 'lemma': [(u'Pawn', u'Pawn', u'NNP')]}, 'tokens': ['Pawn']}, {'string': ' Knight', 'parse': {'tree': '(ROOT (NP (NNP Knight)))', 'lemma': [(u'Knight', u'Knight', u'NNP')]}, 'tokens': ['Knight']}, {'string': ' Rook', 'parse': {'tree': '(ROOT (S (VP (VB Rook))))', 'lemma': [(u'Rook', u'rook', u'VB')]}, 'tokens': ['Rook']}, {'string': ' King', 'parse': {'tree': '(ROOT (NP (NNP King)))', 'lemma': [(u'King', u'King', u'NNP')]}, 'tokens': ['King']}], 'mode': 0}, {'question': {'string': ' Who did Pawn protect with his new power?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (NNP Pawn)) (VP (VB protect) (PP (IN with) (NP (PRP$ his) (JJ new) (NN power))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'did', u'do', u'VBD'), (u'Pawn', u'Pawn', u'NNP'), (u'protect', u'protect', u'VB'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'new', u'new', u'JJ'), (u'power', u'power', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'did', 'Pawn', 'protect', 'with', 'his', 'new', 'power', '?']}, 'answers': [{'string': ' Bishop', 'parse': {'tree': '(ROOT (NP (NNP Bishop)))', 'lemma': [(u'Bishop', u'Bishop', u'NNP')]}, 'tokens': ['Bishop']}, {'string': ' Rook', 'parse': {'tree': '(ROOT (S (VP (VB Rook))))', 'lemma': [(u'Rook', u'rook', u'VB')]}, 'tokens': ['Rook']}, {'string': ' Queen', 'parse': {'tree': '(ROOT (NP (NNP Queen)))', 'lemma': [(u'Queen', u'Queen', u'NNP')]}, 'tokens': ['Queen']}, {'string': ' King', 'parse': {'tree': '(ROOT (NP (NNP King)))', 'lemma': [(u'King', u'King', u'NNP')]}, 'tokens': ['King']}], 'mode': 1}, {'question': {'string': ' What was the only thing to do in Board?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (JJ only) (NN thing)) (S (VP (TO to) (VP (VB do) (PP (IN in) (NP (NNP Board)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'only', u'only', u'JJ'), (u'thing', u'thing', u'NN'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'in', u'in', u'IN'), (u'Board', u'Board', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'only', 'thing', 'to', 'do', 'in', 'Board', '?']}, 'answers': [{'string': ' help King', 'parse': {'tree': '(ROOT (S (VP (VB help) (NP (NNP King)))))', 'lemma': [(u'help', u'help', u'VB'), (u'King', u'King', u'NNP')]}, 'tokens': ['help', 'King']}, {'string': ' become Queen', 'parse': {'tree': '(ROOT (S (VP (VB become) (NP (NN Queen)))))', 'lemma': [(u'become', u'become', u'VB'), (u'Queen', u'queen', u'NN')]}, 'tokens': ['become', 'Queen']}, {'string': ' play chess', 'parse': {'tree': '(ROOT (S (VP (VB play) (NP (NN chess)))))', 'lemma': [(u'play', u'play', u'VB'), (u'chess', u'chess', u'NN')]}, 'tokens': ['play', 'chess']}, {'string': ' meet people', 'parse': {'tree': '(ROOT (S (VP (VB meet) (NP (NNS people)))))', 'lemma': [(u'meet', u'meet', u'VB'), (u'people', u'people', u'NNS')]}, 'tokens': ['meet', 'people']}], 'mode': 0}]}
{'sentences': [{'string': ' Jake wanted to eat an orange.', 'parse': {'tree': '(ROOT (S (NP (NNP Jake)) (VP (VBD wanted) (S (VP (TO to) (VP (VB eat) (NP (DT an) (NN orange)))))) (. .)))', 'lemma': [(u'Jake', u'Jake', u'NNP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'an', u'a', u'DT'), (u'orange', u'orange', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jake', 'wanted', 'to', 'eat', 'an', 'orange', '.']}, {'string': " He liked fruit, and the only fruits in the house were apples, which he did n't like, oranges, and strawberries, which made him itchy.", 'parse': {'tree': "(ROOT (S (S (NP (PRP He)) (VP (VBD liked) (NP (NN fruit)))) (, ,) (CC and) (S (NP (NP (DT the) (JJ only) (NNS fruits)) (PP (IN in) (NP (DT the) (NN house)))) (VP (VBD were) (NP (NP (NP (NNS apples)) (, ,) (SBAR (WHNP (WDT which)) (S (NP (PRP he)) (VP (VBD did) (RB n't) (VP (VB like)))))) (, ,) (NP (NNS oranges)) (, ,) (CC and) (NP (NP (NNS strawberries)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBD made) (NP (PRP him)) (ADVP (RB itchy))))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'liked', u'like', u'VBD'), (u'fruit', u'fruit', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'only', u'only', u'JJ'), (u'fruits', u'fruit', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'were', u'be', u'VBD'), (u'apples', u'apple', u'NNS'), (u',', u',', u','), (u'which', u'which', u'WDT'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u',', u',', u','), (u'oranges', u'orange', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'strawberries', u'strawberry', u'NNS'), (u',', u',', u','), (u'which', u'which', u'WDT'), (u'made', u'make', u'VBD'), (u'him', u'he', u'PRP'), (u'itchy', u'itchy', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'liked', 'fruit', ',', 'and', 'the', 'only', 'fruits', 'in', 'the', 'house', 'were', 'apples', ',', 'which', 'he', 'did', "n't", 'like', ',', 'oranges', ',', 'and', 'strawberries', ',', 'which', 'made', 'him', 'itchy', '.']}, {'string': ' But his mother had put oranges on top of the refrigerator.', 'parse': {'tree': '(ROOT (S (CC But) (NP (PRP$ his) (NN mother)) (VP (VBD had) (VP (VBN put) (NP (NNS oranges)) (PP (IN on) (NP (NP (NN top)) (PP (IN of) (NP (DT the) (NN refrigerator))))))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'had', u'have', u'VBD'), (u'put', u'put', u'VBN'), (u'oranges', u'orange', u'NNS'), (u'on', u'on', u'IN'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'refrigerator', u'refrigerator', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'his', 'mother', 'had', 'put', 'oranges', 'on', 'top', 'of', 'the', 'refrigerator', '.']}, {'string': " Jake could n't reach the top of the refrigerator.", 'parse': {'tree': "(ROOT (S (NP (NNP Jake)) (VP (MD could) (RB n't) (VP (VB reach) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT the) (NN refrigerator)))))) (. .)))", 'lemma': [(u'Jake', u'Jake', u'NNP'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'reach', u'reach', u'VB'), (u'the', u'the', u'DT'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'refrigerator', u'refrigerator', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jake', 'could', "n't", 'reach', 'the', 'top', 'of', 'the', 'refrigerator', '.']}, {'string': ' He got the stool that he used to reach things in the cupboards.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD got) (NP (DT the) (NN stool)) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD used) (S (VP (TO to) (VP (VB reach) (NP (NNS things)) (PP (IN in) (NP (DT the) (NNS cupboards)))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'the', u'the', u'DT'), (u'stool', u'stool', u'NN'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'used', u'use', u'VBD'), (u'to', u'to', u'TO'), (u'reach', u'reach', u'VB'), (u'things', u'thing', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'cupboards', u'cupboard', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'got', 'the', 'stool', 'that', 'he', 'used', 'to', 'reach', 'things', 'in', 'the', 'cupboards', '.']}, {'string': " But the stool was n't tall enough on its own.", 'parse': {'tree': "(ROOT (S (CC But) (NP (DT the) (NN stool)) (VP (VBD was) (RB n't) (ADJP (JJ tall) (RB enough)) (PP (IN on) (NP (PRP$ its) (JJ own)))) (. .)))", 'lemma': [(u'But', u'but', u'CC'), (u'the', u'the', u'DT'), (u'stool', u'stool', u'NN'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'tall', u'tall', u'JJ'), (u'enough', u'enough', u'RB'), (u'on', u'on', u'IN'), (u'its', u'its', u'PRP$'), (u'own', u'own', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'the', 'stool', 'was', "n't", 'tall', 'enough', 'on', 'its', 'own', '.']}, {'string': ' He thought if he stood on the edge of the kitchen sink he could reach the oranges.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD thought) (SBAR (IN if) (S (NP (PRP he)) (VP (VBD stood) (PP (IN on) (NP (NP (DT the) (NN edge)) (PP (IN of) (NP (DT the) (NN kitchen))))) (S (VP (VB sink) (SBAR (S (NP (PRP he)) (VP (MD could) (VP (VB reach) (NP (DT the) (NNS oranges)))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'thought', u'think', u'VBD'), (u'if', u'if', u'IN'), (u'he', u'he', u'PRP'), (u'stood', u'stand', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'edge', u'edge', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'kitchen', u'kitchen', u'NN'), (u'sink', u'sink', u'VB'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'reach', u'reach', u'VB'), (u'the', u'the', u'DT'), (u'oranges', u'orange', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'thought', 'if', 'he', 'stood', 'on', 'the', 'edge', 'of', 'the', 'kitchen', 'sink', 'he', 'could', 'reach', 'the', 'oranges', '.']}, {'string': ' -LRB- The kitchen sink was right next to the refrigerator -RRB-.', 'parse': {'tree': '(ROOT (S (-LRB- -LRB-) (NP (DT The) (NN kitchen) (NN sink)) (VP (VBD was) (ADVP (RB right) (JJ next)) (PP (TO to) (NP (DT the) (NN refrigerator)))) (-RRB- -RRB-) (. .)))', 'lemma': [(u'-LRB-', u'-lrb-', u'-LRB-'), (u'The', u'the', u'DT'), (u'kitchen', u'kitchen', u'NN'), (u'sink', u'sink', u'NN'), (u'was', u'be', u'VBD'), (u'right', u'right', u'RB'), (u'next', u'next', u'JJ'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'refrigerator', u'refrigerator', u'NN'), (u'-RRB-', u'-rrb-', u'-RRB-'), (u'.', u'.', u'.')]}, 'tokens': ['-LRB-', 'The', 'kitchen', 'sink', 'was', 'right', 'next', 'to', 'the', 'refrigerator', '-RRB-', '.']}, {'string': ' So he used the stool to get up to the edge of the sink, and then he stood on the edge of the sink to get the oranges.', 'parse': {'tree': '(ROOT (S (CC So) (S (NP (PRP he)) (VP (VBD used) (NP (DT the) (NN stool) (S (VP (TO to) (VP (VB get) (PRT (RP up)) (PP (TO to) (NP (NP (DT the) (NN edge)) (PP (IN of) (NP (DT the) (NN sink))))))))))) (, ,) (CC and) (S (ADVP (RB then)) (NP (PRP he)) (VP (VBD stood) (PP (IN on) (NP (NP (DT the) (NN edge)) (PP (IN of) (NP (DT the) (NN sink))))) (S (VP (TO to) (VP (VB get) (NP (DT the) (NNS oranges))))))) (. .)))', 'lemma': [(u'So', u'so', u'CC'), (u'he', u'he', u'PRP'), (u'used', u'use', u'VBD'), (u'the', u'the', u'DT'), (u'stool', u'stool', u'NN'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'edge', u'edge', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'sink', u'sink', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'he', u'he', u'PRP'), (u'stood', u'stand', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'edge', u'edge', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'sink', u'sink', u'NN'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'the', u'the', u'DT'), (u'oranges', u'orange', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'he', 'used', 'the', 'stool', 'to', 'get', 'up', 'to', 'the', 'edge', 'of', 'the', 'sink', ',', 'and', 'then', 'he', 'stood', 'on', 'the', 'edge', 'of', 'the', 'sink', 'to', 'get', 'the', 'oranges', '.']}, {'string': ' He took one out of the bag and then put the bag back on top of the refrigerator.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD took) (NP (CD one)) (PRT (RP out)) (PP (IN of) (NP (DT the) (NN bag)))) (CC and) (VP (ADVP (RB then)) (VBD put) (NP (DT the) (NN bag)) (PRT (RP back)) (PP (IN on) (NP (NP (NN top)) (PP (IN of) (NP (DT the) (NN refrigerator))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'took', u'take', u'VBD'), (u'one', u'one', u'CD'), (u'out', u'out', u'RP'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'bag', u'bag', u'NN'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'put', u'put', u'VBD'), (u'the', u'the', u'DT'), (u'bag', u'bag', u'NN'), (u'back', u'back', u'RP'), (u'on', u'on', u'IN'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'refrigerator', u'refrigerator', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'took', 'one', 'out', 'of', 'the', 'bag', 'and', 'then', 'put', 'the', 'bag', 'back', 'on', 'top', 'of', 'the', 'refrigerator', '.']}, {'string': ' Then he used the stool to climb back down again with his orange.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP he)) (VP (VBD used) (NP (DT the) (NN stool) (S (VP (TO to) (VP (VB climb) (ADVP (RB back) (RB down) (RB again)) (PP (IN with) (NP (PRP$ his) (NN orange)))))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'he', u'he', u'PRP'), (u'used', u'use', u'VBD'), (u'the', u'the', u'DT'), (u'stool', u'stool', u'NN'), (u'to', u'to', u'TO'), (u'climb', u'climb', u'VB'), (u'back', u'back', u'RB'), (u'down', u'down', u'RB'), (u'again', u'again', u'RB'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'orange', u'orange', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'he', 'used', 'the', 'stool', 'to', 'climb', 'back', 'down', 'again', 'with', 'his', 'orange', '.']}, {'string': ' He sat at the kitchen table, peeled the orange, and ate it.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD sat) (PP (IN at) (NP (NP (DT the) (NN kitchen) (NN table)) (, ,) (VP (VBN peeled) (NP (DT the) (NN orange))) (, ,)))) (CC and) (VP (VBD ate) (NP (PRP it)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'sat', u'sit', u'VBD'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'kitchen', u'kitchen', u'NN'), (u'table', u'table', u'NN'), (u',', u',', u','), (u'peeled', u'peel', u'VBN'), (u'the', u'the', u'DT'), (u'orange', u'orange', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'ate', u'eat', u'VBD'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'sat', 'at', 'the', 'kitchen', 'table', ',', 'peeled', 'the', 'orange', ',', 'and', 'ate', 'it', '.']}, {'string': ' Then he took all of the pieces of orange peel and threw them away in the yard waste.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP he)) (VP (VP (VBD took) (NP (NP (DT all)) (PP (IN of) (NP (NP (DT the) (NNS pieces)) (PP (IN of) (NP (JJ orange) (NN peel))))))) (CC and) (VP (VBD threw) (NP (PRP them)) (PRT (RP away)) (PP (IN in) (NP (DT the) (NN yard) (NN waste))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'he', u'he', u'PRP'), (u'took', u'take', u'VBD'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'pieces', u'piece', u'NNS'), (u'of', u'of', u'IN'), (u'orange', u'orange', u'JJ'), (u'peel', u'peel', u'NN'), (u'and', u'and', u'CC'), (u'threw', u'throw', u'VBD'), (u'them', u'they', u'PRP'), (u'away', u'away', u'RP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'yard', u'yard', u'NN'), (u'waste', u'waste', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'he', 'took', 'all', 'of', 'the', 'pieces', 'of', 'orange', 'peel', 'and', 'threw', 'them', 'away', 'in', 'the', 'yard', 'waste', '.']}], 'questions': [{'question': {'string': " Why does n't using the stool work at first?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VP (VBZ does) (S (VP (RB n't) (VBG using) (NP (DT the) (JJ stool) (NN work)) (PP (IN at) (NP (JJ first))))))) (. ?)))", 'lemma': [(u'Why', u'why', u'WRB'), (u'does', u'do', u'VBZ'), (u"n't", u'not', u'RB'), (u'using', u'use', u'VBG'), (u'the', u'the', u'DT'), (u'stool', u'stool', u'JJ'), (u'work', u'work', u'NN'), (u'at', u'at', u'IN'), (u'first', u'first', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'does', "n't", 'using', 'the', 'stool', 'work', 'at', 'first', '?']}, 'answers': [{'string': " It is n't tall enough", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (VBZ is) (RB n't) (ADJP (JJ tall) (RB enough)))))", 'lemma': [(u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u"n't", u'not', u'RB'), (u'tall', u'tall', u'JJ'), (u'enough', u'enough', u'RB')]}, 'tokens': ['It', 'is', "n't", 'tall', 'enough']}, {'string': " it 's in the cupboard", 'parse': {'tree': "(ROOT (S (NP (PRP it)) (VP (VBZ 's) (PP (IN in) (NP (DT the) (NN cupboard))))))", 'lemma': [(u'it', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'cupboard', u'cupboard', u'NN')]}, 'tokens': ['it', "'s", 'in', 'the', 'cupboard']}, {'string': " it does n't reach the edge of the sink", 'parse': {'tree': "(ROOT (S (NP (PRP it)) (VP (VBZ does) (RB n't) (VP (VB reach) (NP (NP (DT the) (NN edge)) (PP (IN of) (NP (DT the) (NN sink))))))))", 'lemma': [(u'it', u'it', u'PRP'), (u'does', u'do', u'VBZ'), (u"n't", u'not', u'RB'), (u'reach', u'reach', u'VB'), (u'the', u'the', u'DT'), (u'edge', u'edge', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'sink', u'sink', u'NN')]}, 'tokens': ['it', 'does', "n't", 'reach', 'the', 'edge', 'of', 'the', 'sink']}, {'string': ' Jake is too short to use the stool', 'parse': {'tree': '(ROOT (S (NP (NNP Jake)) (VP (VBZ is) (ADJP (RB too) (JJ short)) (S (VP (TO to) (VP (VB use) (NP (DT the) (NN stool))))))))', 'lemma': [(u'Jake', u'Jake', u'NNP'), (u'is', u'be', u'VBZ'), (u'too', u'too', u'RB'), (u'short', u'short', u'JJ'), (u'to', u'to', u'TO'), (u'use', u'use', u'VB'), (u'the', u'the', u'DT'), (u'stool', u'stool', u'NN')]}, 'tokens': ['Jake', 'is', 'too', 'short', 'to', 'use', 'the', 'stool']}], 'mode': 0}, {'question': {'string': " At the beginning of the story, why ca n't Jake get the oranges?", 'parse': {'tree': "(ROOT (SBARQ (PP (IN At) (NP (NP (DT the) (NN beginning)) (PP (IN of) (NP (DT the) (NN story))))) (, ,) (WHADVP (WRB why)) (SQ (MD ca) (RB n't) (NP (NNP Jake)) (VP (VB get) (NP (DT the) (NNS oranges)))) (. ?)))", 'lemma': [(u'At', u'at', u'IN'), (u'the', u'the', u'DT'), (u'beginning', u'beginning', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u',', u',', u','), (u'why', u'why', u'WRB'), (u'ca', u'can', u'MD'), (u"n't", u'not', u'RB'), (u'Jake', u'Jake', u'NNP'), (u'get', u'get', u'VB'), (u'the', u'the', u'DT'), (u'oranges', u'orange', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['At', 'the', 'beginning', 'of', 'the', 'story', ',', 'why', 'ca', "n't", 'Jake', 'get', 'the', 'oranges', '?']}, 'answers': [{'string': ' his mother told him not to', 'parse': {'tree': '(ROOT (S (NP (PRP$ his) (NN mother)) (VP (VBD told) (NP (PRP him)) (SBAR (RB not) (S (VP (TO to)))))))', 'lemma': [(u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'told', u'tell', u'VBD'), (u'him', u'he', u'PRP'), (u'not', u'not', u'RB'), (u'to', u'to', u'TO')]}, 'tokens': ['his', 'mother', 'told', 'him', 'not', 'to']}, {'string': " he does n't like them", 'parse': {'tree': "(ROOT (S (NP (PRP he)) (VP (VBZ does) (RB n't) (VP (VB like) (NP (PRP them))))))", 'lemma': [(u'he', u'he', u'PRP'), (u'does', u'do', u'VBZ'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'them', u'they', u'PRP')]}, 'tokens': ['he', 'does', "n't", 'like', 'them']}, {'string': ' they make him itchy', 'parse': {'tree': '(ROOT (S (NP (PRP they)) (VP (VBP make) (NP (PRP him)) (ADVP (RB itchy)))))', 'lemma': [(u'they', u'they', u'PRP'), (u'make', u'make', u'VBP'), (u'him', u'he', u'PRP'), (u'itchy', u'itchy', u'RB')]}, 'tokens': ['they', 'make', 'him', 'itchy']}, {'string': " They are on top of the refrigerator, where he ca n't reach", 'parse': {'tree': "(ROOT (S (NP (PRP They)) (VP (VBP are) (PP (IN on) (NP (NP (NN top)) (PP (IN of) (NP (NP (DT the) (NN refrigerator)) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (PRP he)) (VP (MD ca) (RB n't) (VP (VB reach))))))))))))", 'lemma': [(u'They', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'on', u'on', u'IN'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'refrigerator', u'refrigerator', u'NN'), (u',', u',', u','), (u'where', u'where', u'WRB'), (u'he', u'he', u'PRP'), (u'ca', u'can', u'MD'), (u"n't", u'not', u'RB'), (u'reach', u'reach', u'VB')]}, 'tokens': ['They', 'are', 'on', 'top', 'of', 'the', 'refrigerator', ',', 'where', 'he', 'ca', "n't", 'reach']}], 'mode': 0}, {'question': {'string': ' What fruit was not in the house?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN fruit)) (SQ (VBD was) (PP (RB not) (IN in) (NP (DT the) (NN house)))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'fruit', u'fruit', u'NN'), (u'was', u'be', u'VBD'), (u'not', u'not', u'RB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'fruit', 'was', 'not', 'in', 'the', 'house', '?']}, 'answers': [{'string': ' Bananas', 'parse': {'tree': '(ROOT (NP (NNS Bananas)))', 'lemma': [(u'Bananas', u'banana', u'NNS')]}, 'tokens': ['Bananas']}, {'string': ' Strawberries', 'parse': {'tree': '(ROOT (NP (NNS Strawberries)))', 'lemma': [(u'Strawberries', u'strawberry', u'NNS')]}, 'tokens': ['Strawberries']}, {'string': ' Apples', 'parse': {'tree': '(ROOT (NP (NNS Apples)))', 'lemma': [(u'Apples', u'apple', u'NNS')]}, 'tokens': ['Apples']}, {'string': ' Oranges', 'parse': {'tree': '(ROOT (NP (NNS Oranges)))', 'lemma': [(u'Oranges', u'orange', u'NNS')]}, 'tokens': ['Oranges']}], 'mode': 1}, {'question': {'string': ' What does Jake do with the orange once he has it?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Jake)) (VP (VB do) (PP (IN with) (NP (DT the) (NN orange))) (SBAR (IN once) (S (NP (PRP he)) (VP (VBZ has) (NP (PRP it))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Jake', u'Jake', u'NNP'), (u'do', u'do', u'VB'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'orange', u'orange', u'NN'), (u'once', u'once', u'IN'), (u'he', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'it', u'it', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Jake', 'do', 'with', 'the', 'orange', 'once', 'he', 'has', 'it', '?']}, 'answers': [{'string': ' Puts it back on top of the refrigerator', 'parse': {'tree': '(ROOT (S (VP (VB Puts) (NP (PRP it)) (ADVP (RB back)) (PP (IN on) (NP (NP (NN top)) (PP (IN of) (NP (DT the) (NN refrigerator))))))))', 'lemma': [(u'Puts', u'put', u'VB'), (u'it', u'it', u'PRP'), (u'back', u'back', u'RB'), (u'on', u'on', u'IN'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'refrigerator', u'refrigerator', u'NN')]}, 'tokens': ['Puts', 'it', 'back', 'on', 'top', 'of', 'the', 'refrigerator']}, {'string': ' Throws it away in the yard waste', 'parse': {'tree': '(ROOT (S (VP (VB Throws) (NP (PRP it)) (ADVP (RB away)) (PP (IN in) (NP (DT the) (NN yard) (NN waste))))))', 'lemma': [(u'Throws', u'throw', u'VB'), (u'it', u'it', u'PRP'), (u'away', u'away', u'RB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'yard', u'yard', u'NN'), (u'waste', u'waste', u'NN')]}, 'tokens': ['Throws', 'it', 'away', 'in', 'the', 'yard', 'waste']}, {'string': ' Puts it in the sink', 'parse': {'tree': '(ROOT (S (VP (VB Puts) (NP (PRP it)) (PP (IN in) (NP (DT the) (NN sink))))))', 'lemma': [(u'Puts', u'put', u'VB'), (u'it', u'it', u'PRP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'sink', u'sink', u'NN')]}, 'tokens': ['Puts', 'it', 'in', 'the', 'sink']}, {'string': ' Eats it', 'parse': {'tree': '(ROOT (SINV (VP (VBZ Eats)) (NP (PRP it))))', 'lemma': [(u'Eats', u'eat', u'VBZ'), (u'it', u'it', u'PRP')]}, 'tokens': ['Eats', 'it']}], 'mode': 1}]}
{'sentences': [{'string': ' Once upon a time there was a man who needed to write story.', 'parse': {'tree': '(ROOT (S (ADVP (RB Once) (PP (IN upon) (NP (DT a) (NN time)))) (NP (EX there)) (VP (VBD was) (NP (NP (DT a) (NN man)) (SBAR (WHNP (WP who)) (S (VP (VBD needed) (S (VP (TO to) (VP (VB write) (NP (NN story)))))))))) (. .)))', 'lemma': [(u'Once', u'once', u'RB'), (u'upon', u'upon', u'IN'), (u'a', u'a', u'DT'), (u'time', u'time', u'NN'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'man', u'man', u'NN'), (u'who', u'who', u'WP'), (u'needed', u'need', u'VBD'), (u'to', u'to', u'TO'), (u'write', u'write', u'VB'), (u'story', u'story', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Once', 'upon', 'a', 'time', 'there', 'was', 'a', 'man', 'who', 'needed', 'to', 'write', 'story', '.']}, {'string': ' His name was Mark.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN name)) (VP (VBD was) (NP (NNP Mark))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Mark', u'Mark', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'name', 'was', 'Mark', '.']}, {'string': " He had a bad case of writer 's block.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD had) (NP (NP (DT a) (JJ bad) (NN case)) (PP (IN of) (NP (NP (NN writer) (POS 's)) (NN block))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'bad', u'bad', u'JJ'), (u'case', u'case', u'NN'), (u'of', u'of', u'IN'), (u'writer', u'writer', u'NN'), (u"'s", u"'s", u'POS'), (u'block', u'block', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'a', 'bad', 'case', 'of', 'writer', "'s", 'block', '.']}, {'string': ' After a bit, he wrote a story about writing a story.', 'parse': {'tree': '(ROOT (S (PP (IN After) (NP (DT a) (NN bit))) (, ,) (NP (PRP he)) (VP (VBD wrote) (NP (DT a) (NN story)) (PP (IN about) (S (VP (VBG writing) (NP (DT a) (NN story)))))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'a', u'a', u'DT'), (u'bit', u'bit', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'wrote', u'write', u'VBD'), (u'a', u'a', u'DT'), (u'story', u'story', u'NN'), (u'about', u'about', u'IN'), (u'writing', u'write', u'VBG'), (u'a', u'a', u'DT'), (u'story', u'story', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'a', 'bit', ',', 'he', 'wrote', 'a', 'story', 'about', 'writing', 'a', 'story', '.']}, {'string': ' This may seem a bit odd.', 'parse': {'tree': '(ROOT (S (NP (DT This)) (VP (MD may) (VP (VB seem) (ADJP (NP (DT a) (RB bit)) (JJ odd)))) (. .)))', 'lemma': [(u'This', u'this', u'DT'), (u'may', u'may', u'MD'), (u'seem', u'seem', u'VB'), (u'a', u'a', u'DT'), (u'bit', u'bit', u'RB'), (u'odd', u'odd', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['This', 'may', 'seem', 'a', 'bit', 'odd', '.']}, {'string': ' Well, it was.', 'parse': {'tree': '(ROOT (S (INTJ (UH Well)) (, ,) (NP (PRP it)) (VP (VBD was)) (. .)))', 'lemma': [(u'Well', u'well', u'UH'), (u',', u',', u','), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Well', ',', 'it', 'was', '.']}, {'string': ' The important thing to know is that Mark wanted money.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ important) (NN thing) (S (VP (TO to) (VP (VB know))))) (VP (VBZ is) (SBAR (IN that) (S (NP (NNP Mark)) (VP (VBD wanted) (NP (NN money)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'important', u'important', u'JJ'), (u'thing', u'thing', u'NN'), (u'to', u'to', u'TO'), (u'know', u'know', u'VB'), (u'is', u'be', u'VBZ'), (u'that', u'that', u'IN'), (u'Mark', u'Mark', u'NNP'), (u'wanted', u'want', u'VBD'), (u'money', u'money', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'important', 'thing', 'to', 'know', 'is', 'that', 'Mark', 'wanted', 'money', '.']}, {'string': ' This was so he could show off for his girl, Wendy.', 'parse': {'tree': '(ROOT (S (NP (DT This)) (VP (VBD was) (SBAR (IN so) (S (NP (PRP he)) (VP (MD could) (VP (VB show) (PRT (RP off)) (PP (IN for) (NP (NP (PRP$ his) (NN girl)) (, ,) (NP (NNP Wendy))))))))) (. .)))', 'lemma': [(u'This', u'this', u'DT'), (u'was', u'be', u'VBD'), (u'so', u'so', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'show', u'show', u'VB'), (u'off', u'off', u'RP'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'girl', u'girl', u'NN'), (u',', u',', u','), (u'Wendy', u'Wendy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['This', 'was', 'so', 'he', 'could', 'show', 'off', 'for', 'his', 'girl', ',', 'Wendy', '.']}, {'string': ' Wendy had two living parents named Greg and Gail.', 'parse': {'tree': '(ROOT (S (NP (NNP Wendy)) (VP (VBD had) (NP (NP (CD two) (VBG living) (NNS parents)) (VP (VBN named) (NP (NNP Greg) (CC and) (NNP Gail))))) (. .)))', 'lemma': [(u'Wendy', u'Wendy', u'NNP'), (u'had', u'have', u'VBD'), (u'two', u'two', u'CD'), (u'living', u'live', u'VBG'), (u'parents', u'parent', u'NNS'), (u'named', u'name', u'VBN'), (u'Greg', u'Greg', u'NNP'), (u'and', u'and', u'CC'), (u'Gail', u'Gail', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Wendy', 'had', 'two', 'living', 'parents', 'named', 'Greg', 'and', 'Gail', '.']}, {'string': ' The exciting thing about Mark writing these stories, was that he could write whatever he wanted to.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (JJ exciting) (NN thing)) (PP (IN about) (NP (NP (NNP Mark)) (VP (VBG writing) (NP (DT these) (NNS stories)))))) (, ,) (VP (VBD was) (SBAR (IN that) (S (NP (PRP he)) (VP (MD could) (VP (VB write) (SBAR (WHNP (WDT whatever)) (S (NP (PRP he)) (VP (VBD wanted) (PP (TO to)))))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'exciting', u'exciting', u'JJ'), (u'thing', u'thing', u'NN'), (u'about', u'about', u'IN'), (u'Mark', u'Mark', u'NNP'), (u'writing', u'write', u'VBG'), (u'these', u'these', u'DT'), (u'stories', u'story', u'NNS'), (u',', u',', u','), (u'was', u'be', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'write', u'write', u'VB'), (u'whatever', u'whatever', u'WDT'), (u'he', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'exciting', 'thing', 'about', 'Mark', 'writing', 'these', 'stories', ',', 'was', 'that', 'he', 'could', 'write', 'whatever', 'he', 'wanted', 'to', '.']}, {'string': ' He could have written about bears.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (MD could) (VP (VB have) (VP (VBN written) (PP (IN about) (NP (NNS bears)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'have', u'have', u'VB'), (u'written', u'write', u'VBN'), (u'about', u'about', u'IN'), (u'bears', u'bear', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'could', 'have', 'written', 'about', 'bears', '.']}, {'string': ' Or it could have been his best friend Error.', 'parse': {'tree': '(ROOT (S (CC Or) (NP (PRP it)) (VP (MD could) (VP (VB have) (VP (VBN been) (NP (PRP$ his) (JJS best) (NN friend) (NN Error))))) (. .)))', 'lemma': [(u'Or', u'or', u'CC'), (u'it', u'it', u'PRP'), (u'could', u'could', u'MD'), (u'have', u'have', u'VB'), (u'been', u'be', u'VBN'), (u'his', u'he', u'PRP$'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'Error', u'error', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Or', 'it', 'could', 'have', 'been', 'his', 'best', 'friend', 'Error', '.']}, {'string': ' There were so many choices for Mark.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD were) (ADVP (RB so)) (NP (NP (JJ many) (NNS choices)) (PP (IN for) (NP (NNP Mark))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'many', u'many', u'JJ'), (u'choices', u'choice', u'NNS'), (u'for', u'for', u'IN'), (u'Mark', u'Mark', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'were', 'so', 'many', 'choices', 'for', 'Mark', '.']}, {'string': ' He was very happy.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (RB very) (JJ happy))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'very', 'happy', '.']}, {'string': ' He was happy because he was almost done writing the story.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (JJ happy)) (SBAR (IN because) (S (NP (PRP he)) (VP (VBD was) (ADVP (RB almost)) (VP (VBN done) (S (VP (VBG writing) (NP (DT the) (NN story))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'happy', u'happy', u'JJ'), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'almost', u'almost', u'RB'), (u'done', u'do', u'VBN'), (u'writing', u'write', u'VBG'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'happy', 'because', 'he', 'was', 'almost', 'done', 'writing', 'the', 'story', '.']}, {'string': ' Wendy, had she known about the writing would have been sad that Mark spent so much time thinking of odd stories.', 'parse': {'tree': '(ROOT (S (NP (NNP Wendy)) (PRN (, ,) (SINV (VBD had) (NP (PRP she)) (VP (VBN known) (PP (IN about) (NP (DT the) (NN writing)))))) (VP (MD would) (VP (VB have) (VP (VBN been) (ADJP (JJ sad)) (SBAR (IN that) (S (NP (NNP Mark)) (VP (VBD spent) (ADVP (RB so) (RB much)) (NP (NN time)) (S (VP (VBG thinking) (PP (IN of) (NP (JJ odd) (NNS stories))))))))))) (. .)))', 'lemma': [(u'Wendy', u'Wendy', u'NNP'), (u',', u',', u','), (u'had', u'have', u'VBD'), (u'she', u'she', u'PRP'), (u'known', u'know', u'VBN'), (u'about', u'about', u'IN'), (u'the', u'the', u'DT'), (u'writing', u'writing', u'NN'), (u'would', u'would', u'MD'), (u'have', u'have', u'VB'), (u'been', u'be', u'VBN'), (u'sad', u'sad', u'JJ'), (u'that', u'that', u'IN'), (u'Mark', u'Mark', u'NNP'), (u'spent', u'spend', u'VBD'), (u'so', u'so', u'RB'), (u'much', u'much', u'RB'), (u'time', u'time', u'NN'), (u'thinking', u'think', u'VBG'), (u'of', u'of', u'IN'), (u'odd', u'odd', u'JJ'), (u'stories', u'story', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Wendy', ',', 'had', 'she', 'known', 'about', 'the', 'writing', 'would', 'have', 'been', 'sad', 'that', 'Mark', 'spent', 'so', 'much', 'time', 'thinking', 'of', 'odd', 'stories', '.']}], 'questions': [{'question': {'string': ' How did Mark feel?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (NNP Mark)) (VP (VB feel))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'did', u'do', u'VBD'), (u'Mark', u'Mark', u'NNP'), (u'feel', u'feel', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'did', 'Mark', 'feel', '?']}, 'answers': [{'string': ' name', 'parse': {'tree': '(ROOT (NP (NN name)))', 'lemma': [(u'name', u'name', u'NN')]}, 'tokens': ['name']}, {'string': ' block', 'parse': {'tree': '(ROOT (S (VP (VB block))))', 'lemma': [(u'block', u'block', u'VB')]}, 'tokens': ['block']}, {'string': ' happy', 'parse': {'tree': '(ROOT (ADJP (JJ happy)))', 'lemma': [(u'happy', u'happy', u'JJ')]}, 'tokens': ['happy']}, {'string': ' off', 'parse': {'tree': '(ROOT (ADVP (RB off)))', 'lemma': [(u'off', u'off', u'RB')]}, 'tokens': ['off']}], 'mode': 0}, {'question': {'string': " Who was Wendy 's dad?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (NNP Wendy) (POS 's)) (NN dad))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'Wendy', u'Wendy', u'NNP'), (u"'s", u"'s", u'POS'), (u'dad', u'dad', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'Wendy', "'s", 'dad', '?']}, 'answers': [{'string': ' Error', 'parse': {'tree': '(ROOT (NP (NNP Error)))', 'lemma': [(u'Error', u'Error', u'NNP')]}, 'tokens': ['Error']}, {'string': ' Wendy', 'parse': {'tree': '(ROOT (NP (NNP Wendy)))', 'lemma': [(u'Wendy', u'Wendy', u'NNP')]}, 'tokens': ['Wendy']}, {'string': ' Greg', 'parse': {'tree': '(ROOT (NP (NNP Greg)))', 'lemma': [(u'Greg', u'Greg', u'NNP')]}, 'tokens': ['Greg']}, {'string': ' Mark', 'parse': {'tree': '(ROOT (NP (NNP Mark)))', 'lemma': [(u'Mark', u'Mark', u'NNP')]}, 'tokens': ['Mark']}], 'mode': 1}, {'question': {'string': ' What did Mark have to write?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Mark)) (VP (VB have) (S (VP (TO to) (VP (VB write)))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Mark', u'Mark', u'NNP'), (u'have', u'have', u'VB'), (u'to', u'to', u'TO'), (u'write', u'write', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Mark', 'have', 'to', 'write', '?']}, 'answers': [{'string': ' very', 'parse': {'tree': '(ROOT (ADJP (JJ very)))', 'lemma': [(u'very', u'very', u'JJ')]}, 'tokens': ['very']}, {'string': ' story', 'parse': {'tree': '(ROOT (NP (NN story)))', 'lemma': [(u'story', u'story', u'NN')]}, 'tokens': ['story']}, {'string': ' case', 'parse': {'tree': '(ROOT (NP (NN case)))', 'lemma': [(u'case', u'case', u'NN')]}, 'tokens': ['case']}, {'string': ' could', 'parse': {'tree': '(ROOT (FRAG (VP (MD could))))', 'lemma': [(u'could', u'could', u'MD')]}, 'tokens': ['could']}], 'mode': 0}, {'question': {'string': ' What did Mark want?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Mark)) (VP (VB want))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Mark', u'Mark', u'NNP'), (u'want', u'want', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Mark', 'want', '?']}, 'answers': [{'string': ' story', 'parse': {'tree': '(ROOT (NP (NN story)))', 'lemma': [(u'story', u'story', u'NN')]}, 'tokens': ['story']}, {'string': ' money', 'parse': {'tree': '(ROOT (NP (NN money)))', 'lemma': [(u'money', u'money', u'NN')]}, 'tokens': ['money']}, {'string': ' odd', 'parse': {'tree': '(ROOT (ADJP (JJ odd)))', 'lemma': [(u'odd', u'odd', u'JJ')]}, 'tokens': ['odd']}, {'string': ' bears', 'parse': {'tree': '(ROOT (NP (NNS bears)))', 'lemma': [(u'bears', u'bear', u'NNS')]}, 'tokens': ['bears']}], 'mode': 1}]}
{'sentences': [{'string': ' James is going to the baseball field with his friend Tommy.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBZ is) (VP (VBG going) (PP (TO to) (NP (DT the) (NN baseball) (NN field))) (PP (IN with) (NP (PRP$ his) (NN friend) (NN Tommy))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'is', u'be', u'VBZ'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'baseball', u'baseball', u'NN'), (u'field', u'field', u'NN'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'Tommy', u'tommy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'is', 'going', 'to', 'the', 'baseball', 'field', 'with', 'his', 'friend', 'Tommy', '.']}, {'string': ' James has to practice because baseball season starts in a week.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBZ has) (S (VP (TO to) (VP (VB practice) (SBAR (IN because) (S (NP (NN baseball) (NN season)) (VP (VBZ starts) (PP (IN in) (NP (DT a) (NN week)))))))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'has', u'have', u'VBZ'), (u'to', u'to', u'TO'), (u'practice', u'practice', u'VB'), (u'because', u'because', u'IN'), (u'baseball', u'baseball', u'NN'), (u'season', u'season', u'NN'), (u'starts', u'start', u'VBZ'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'week', u'week', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'has', 'to', 'practice', 'because', 'baseball', 'season', 'starts', 'in', 'a', 'week', '.']}, {'string': ' He wants to be a good player when the season starts.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ wants) (S (VP (TO to) (VP (VB be) (NP (NP (DT a) (JJ good) (NN player)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN season)) (VP (VBZ starts))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'wants', u'want', u'VBZ'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'player', u'player', u'NN'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'season', u'season', u'NN'), (u'starts', u'start', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'wants', 'to', 'be', 'a', 'good', 'player', 'when', 'the', 'season', 'starts', '.']}, {'string': ' James has been lazy in practicing so he is not very good at baseball right now.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBZ has) (VP (VBN been) (ADJP (JJ lazy) (PP (IN in) (S (VP (VBG practicing) (SBAR (IN so) (S (NP (PRP he)) (VP (VBZ is) (RB not) (ADJP (RB very) (JJ good) (PP (IN at) (NP (NN baseball)))) (ADVP (RB right) (RB now))))))))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'has', u'have', u'VBZ'), (u'been', u'be', u'VBN'), (u'lazy', u'lazy', u'JJ'), (u'in', u'in', u'IN'), (u'practicing', u'practice', u'VBG'), (u'so', u'so', u'IN'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'not', u'not', u'RB'), (u'very', u'very', u'RB'), (u'good', u'good', u'JJ'), (u'at', u'at', u'IN'), (u'baseball', u'baseball', u'NN'), (u'right', u'right', u'RB'), (u'now', u'now', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'has', 'been', 'lazy', 'in', 'practicing', 'so', 'he', 'is', 'not', 'very', 'good', 'at', 'baseball', 'right', 'now', '.']}, {'string': ' He has to make up for it by playing baseball for 5 hours every day for a week.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (S (VP (TO to) (VP (VB make) (PRT (RP up)) (PP (IN for) (NP (PRP it))) (PP (IN by) (S (VP (VBG playing) (NP (NN baseball)) (PP (IN for) (NP (NP (CD 5) (NNS hours)) (NP (DT every) (NN day)))) (PP (IN for) (NP (DT a) (NN week)))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'up', u'up', u'RP'), (u'for', u'for', u'IN'), (u'it', u'it', u'PRP'), (u'by', u'by', u'IN'), (u'playing', u'play', u'VBG'), (u'baseball', u'baseball', u'NN'), (u'for', u'for', u'IN'), (u'5', u'5', u'CD'), (u'hours', u'hour', u'NNS'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'week', u'week', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'to', 'make', 'up', 'for', 'it', 'by', 'playing', 'baseball', 'for', '5', 'hours', 'every', 'day', 'for', 'a', 'week', '.']}, {'string': ' James thinks this is enough practice for him to catch up and be a good player when the season starts.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBZ thinks) (SBAR (S (NP (DT this)) (VP (VBZ is) (NP (NP (JJ enough) (NN practice)) (PP (IN for) (NP (PRP him))) (S (VP (TO to) (VP (VP (VB catch) (PRT (RP up))) (CC and) (VP (VB be) (NP (NP (DT a) (JJ good) (NN player)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN season)) (VP (VBZ starts)))))))))))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'thinks', u'think', u'VBZ'), (u'this', u'this', u'DT'), (u'is', u'be', u'VBZ'), (u'enough', u'enough', u'JJ'), (u'practice', u'practice', u'NN'), (u'for', u'for', u'IN'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'catch', u'catch', u'VB'), (u'up', u'up', u'RP'), (u'and', u'and', u'CC'), (u'be', u'be', u'VB'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'player', u'player', u'NN'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'season', u'season', u'NN'), (u'starts', u'start', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'thinks', 'this', 'is', 'enough', 'practice', 'for', 'him', 'to', 'catch', 'up', 'and', 'be', 'a', 'good', 'player', 'when', 'the', 'season', 'starts', '.']}, {'string': ' So James and Tommy practice every day.', 'parse': {'tree': '(ROOT (S (CC So) (NP (NNP James) (CC and) (NNP Tommy)) (VP (VB practice) (NP (DT every) (NN day))) (. .)))', 'lemma': [(u'So', u'so', u'CC'), (u'James', u'James', u'NNP'), (u'and', u'and', u'CC'), (u'Tommy', u'Tommy', u'NNP'), (u'practice', u'practice', u'VB'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'James', 'and', 'Tommy', 'practice', 'every', 'day', '.']}, {'string': ' They throw the ball around.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP throw) (NP (DT the) (NN ball)) (ADVP (RB around))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'throw', u'throw', u'VBP'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'around', u'around', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'throw', 'the', 'ball', 'around', '.']}, {'string': ' They practice batting and they practice fielding.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VB practice) (ADJP (NN batting)))) (CC and) (S (NP (PRP they)) (NP (NN practice) (NN fielding))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'practice', u'practice', u'VB'), (u'batting', u'batting', u'NN'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'practice', u'practice', u'NN'), (u'fielding', u'fielding', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'practice', 'batting', 'and', 'they', 'practice', 'fielding', '.']}, {'string': ' Tommy begins to see that James is getting better every day.', 'parse': {'tree': '(ROOT (S (NP (NNP Tommy)) (VP (VBZ begins) (S (VP (TO to) (VP (VB see) (SBAR (IN that) (S (NP (NNP James)) (VP (VBZ is) (VP (VBG getting) (NP (RBR better) (DT every) (NN day)))))))))) (. .)))', 'lemma': [(u'Tommy', u'Tommy', u'NNP'), (u'begins', u'begin', u'VBZ'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'that', u'that', u'IN'), (u'James', u'James', u'NNP'), (u'is', u'be', u'VBZ'), (u'getting', u'get', u'VBG'), (u'better', u'better', u'RBR'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tommy', 'begins', 'to', 'see', 'that', 'James', 'is', 'getting', 'better', 'every', 'day', '.']}, {'string': " He says `` I do not believe it, James, but I think you are going to be pretty good when the season starts! ''", 'parse': {'tree': "(ROOT (S (S (NP (PRP He)) (VP (VBZ says) (S (`` ``) (NP (PRP I)) (VP (VBP do) (RB not) (VP (VB believe) (NP (NP (PRP it)) (, ,) (NP (NNP James)))))))) (, ,) (CC but) (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (PRP you)) (VP (VBP are) (VP (VBG going) (S (VP (TO to) (VP (VB be) (ADJP (RB pretty) (JJ good)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN season)) (VP (VBZ starts))))))))))))) (. !) ('' '')))", 'lemma': [(u'He', u'he', u'PRP'), (u'says', u'say', u'VBZ'), (u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'do', u'do', u'VBP'), (u'not', u'not', u'RB'), (u'believe', u'believe', u'VB'), (u'it', u'it', u'PRP'), (u',', u',', u','), (u'James', u'James', u'NNP'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'I', u'I', u'PRP'), (u'think', u'think', u'VBP'), (u'you', u'you', u'PRP'), (u'are', u'be', u'VBP'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'pretty', u'pretty', u'RB'), (u'good', u'good', u'JJ'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'season', u'season', u'NN'), (u'starts', u'start', u'VBZ'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['He', 'says', '``', 'I', 'do', 'not', 'believe', 'it', ',', 'James', ',', 'but', 'I', 'think', 'you', 'are', 'going', 'to', 'be', 'pretty', 'good', 'when', 'the', 'season', 'starts', '!', "''"]}, {'string': ' Usually a week is not enough time to get pretty good at baseball but James is practicing so much he is fitting a month of practice into one week.', 'parse': {'tree': '(ROOT (S (S (ADVP (RB Usually)) (NP (DT a) (NN week)) (VP (VBZ is) (RB not) (NP (JJ enough) (NN time) (S (VP (TO to) (VP (VB get) (ADJP (RB pretty) (JJ good)) (PP (IN at) (NP (NN baseball))))))))) (CC but) (S (NP (NNP James)) (VP (VBZ is) (VP (VBG practicing) (ADVP (RB so) (RB much) (SBAR (S (NP (PRP he)) (VP (VBZ is) (VP (VBG fitting) (NP (NP (DT a) (NN month)) (PP (IN of) (NP (NN practice)))) (PP (IN into) (NP (CD one) (NN week))))))))))) (. .)))', 'lemma': [(u'Usually', u'usually', u'RB'), (u'a', u'a', u'DT'), (u'week', u'week', u'NN'), (u'is', u'be', u'VBZ'), (u'not', u'not', u'RB'), (u'enough', u'enough', u'JJ'), (u'time', u'time', u'NN'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'pretty', u'pretty', u'RB'), (u'good', u'good', u'JJ'), (u'at', u'at', u'IN'), (u'baseball', u'baseball', u'NN'), (u'but', u'but', u'CC'), (u'James', u'James', u'NNP'), (u'is', u'be', u'VBZ'), (u'practicing', u'practice', u'VBG'), (u'so', u'so', u'RB'), (u'much', u'much', u'RB'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'fitting', u'fit', u'VBG'), (u'a', u'a', u'DT'), (u'month', u'month', u'NN'), (u'of', u'of', u'IN'), (u'practice', u'practice', u'NN'), (u'into', u'into', u'IN'), (u'one', u'one', u'CD'), (u'week', u'week', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Usually', 'a', 'week', 'is', 'not', 'enough', 'time', 'to', 'get', 'pretty', 'good', 'at', 'baseball', 'but', 'James', 'is', 'practicing', 'so', 'much', 'he', 'is', 'fitting', 'a', 'month', 'of', 'practice', 'into', 'one', 'week', '.']}, {'string': ' Then James has a setback.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (NNP James)) (VP (VBZ has) (NP (DT a) (NN setback))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'James', u'James', u'NNP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'setback', u'setback', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'James', 'has', 'a', 'setback', '.']}, {'string': ' His glove rips during practice.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN glove)) (VP (VBZ rips) (PP (IN during) (NP (NN practice)))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'glove', u'glove', u'NN'), (u'rips', u'rip', u'VBZ'), (u'during', u'during', u'IN'), (u'practice', u'practice', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'glove', 'rips', 'during', 'practice', '.']}, {'string': " He ca n't keep playing with a broken glove!", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (MD ca) (RB n't) (VP (VB keep) (S (VP (VBG playing) (PP (IN with) (NP (DT a) (JJ broken) (NN glove))))))) (. !)))", 'lemma': [(u'He', u'he', u'PRP'), (u'ca', u'can', u'MD'), (u"n't", u'not', u'RB'), (u'keep', u'keep', u'VB'), (u'playing', u'play', u'VBG'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'broken', u'broken', u'JJ'), (u'glove', u'glove', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['He', 'ca', "n't", 'keep', 'playing', 'with', 'a', 'broken', 'glove', '!']}, {'string': ' So Tommy and James go around town collecting bottles to trade in for five cents for each bottle.', 'parse': {'tree': '(ROOT (S (IN So) (NP (NNP Tommy) (CC and) (NNP James)) (VP (VBP go) (PP (IN around) (NP (NP (NN town)) (VP (VBG collecting) (NP (NNS bottles)) (S (VP (TO to) (VP (VB trade) (PP (IN in) (IN for) (NP (NP (CD five) (NNS cents)) (PP (IN for) (NP (DT each) (NN bottle)))))))))))) (. .)))', 'lemma': [(u'So', u'so', u'IN'), (u'Tommy', u'Tommy', u'NNP'), (u'and', u'and', u'CC'), (u'James', u'James', u'NNP'), (u'go', u'go', u'VBP'), (u'around', u'around', u'IN'), (u'town', u'town', u'NN'), (u'collecting', u'collect', u'VBG'), (u'bottles', u'bottle', u'NNS'), (u'to', u'to', u'TO'), (u'trade', u'trade', u'VB'), (u'in', u'in', u'IN'), (u'for', u'for', u'IN'), (u'five', u'five', u'CD'), (u'cents', u'cent', u'NNS'), (u'for', u'for', u'IN'), (u'each', u'each', u'DT'), (u'bottle', u'bottle', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'Tommy', 'and', 'James', 'go', 'around', 'town', 'collecting', 'bottles', 'to', 'trade', 'in', 'for', 'five', 'cents', 'for', 'each', 'bottle', '.']}, {'string': ' James misses a day of practicing but they find enough bottles to turn in for thirty dollars.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBZ misses) (NP (NP (DT a) (NN day)) (PP (IN of) (S (VP (VBG practicing) (SBAR (CC but) (S (NP (PRP they)) (VP (VBP find) (S (NP (JJ enough) (NNS bottles)) (VP (TO to) (VP (VB turn) (PRT (RP in)) (PP (IN for) (NP (CD thirty) (NNS dollars)))))))))))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'misses', u'miss', u'VBZ'), (u'a', u'a', u'DT'), (u'day', u'day', u'NN'), (u'of', u'of', u'IN'), (u'practicing', u'practice', u'VBG'), (u'but', u'but', u'CC'), (u'they', u'they', u'PRP'), (u'find', u'find', u'VBP'), (u'enough', u'enough', u'JJ'), (u'bottles', u'bottle', u'NNS'), (u'to', u'to', u'TO'), (u'turn', u'turn', u'VB'), (u'in', u'in', u'RP'), (u'for', u'for', u'IN'), (u'thirty', u'thirty', u'CD'), (u'dollars', u'dollar', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'misses', 'a', 'day', 'of', 'practicing', 'but', 'they', 'find', 'enough', 'bottles', 'to', 'turn', 'in', 'for', 'thirty', 'dollars', '.']}, {'string': ' This is enough money for James to buy a new glove!', 'parse': {'tree': '(ROOT (S (NP (DT This)) (VP (VBZ is) (NP (NP (JJ enough) (NN money)) (PP (IN for) (NP (NNP James))) (S (VP (TO to) (VP (VB buy) (NP (DT a) (JJ new) (NN glove))))))) (. !)))', 'lemma': [(u'This', u'this', u'DT'), (u'is', u'be', u'VBZ'), (u'enough', u'enough', u'JJ'), (u'money', u'money', u'NN'), (u'for', u'for', u'IN'), (u'James', u'James', u'NNP'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'a', u'a', u'DT'), (u'new', u'new', u'JJ'), (u'glove', u'glove', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['This', 'is', 'enough', 'money', 'for', 'James', 'to', 'buy', 'a', 'new', 'glove', '!']}, {'string': ' So James buys a new glove and he and Tommy go back to the field and practice some more.', 'parse': {'tree': '(ROOT (S (IN So) (NP (NNP James)) (VP (VBZ buys) (S (NP (NP (DT a) (JJ new) (NN glove)) (CC and) (NP (NP (PRP he)) (CC and) (NP (NNP Tommy)))) (VP (VP (VB go) (PRT (RP back)) (PP (TO to) (NP (DT the) (NN field)))) (CC and) (VP (VB practice) (NP (DT some) (JJR more)))))) (. .)))', 'lemma': [(u'So', u'so', u'IN'), (u'James', u'James', u'NNP'), (u'buys', u'buy', u'VBZ'), (u'a', u'a', u'DT'), (u'new', u'new', u'JJ'), (u'glove', u'glove', u'NN'), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'Tommy', u'Tommy', u'NNP'), (u'go', u'go', u'VB'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'field', u'field', u'NN'), (u'and', u'and', u'CC'), (u'practice', u'practice', u'VB'), (u'some', u'some', u'DT'), (u'more', u'more', u'JJR'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'James', 'buys', 'a', 'new', 'glove', 'and', 'he', 'and', 'Tommy', 'go', 'back', 'to', 'the', 'field', 'and', 'practice', 'some', 'more', '.']}, {'string': ' By the time the season comes James is one of the best players on his team.', 'parse': {'tree': '(ROOT (S (PP (IN By) (NP (DT the) (NN time))) (NP (DT the) (NN season)) (VP (VBZ comes) (SBAR (S (NP (NNP James)) (VP (VBZ is) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (JJS best) (NNS players)) (PP (IN on) (NP (PRP$ his) (NN team)))))))))) (. .)))', 'lemma': [(u'By', u'by', u'IN'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u'the', u'the', u'DT'), (u'season', u'season', u'NN'), (u'comes', u'come', u'VBZ'), (u'James', u'James', u'NNP'), (u'is', u'be', u'VBZ'), (u'one', u'one', u'CD'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'players', u'player', u'NNS'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'team', u'team', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['By', 'the', 'time', 'the', 'season', 'comes', 'James', 'is', 'one', 'of', 'the', 'best', 'players', 'on', 'his', 'team', '.']}], 'questions': [{'question': {'string': ' How long does James have to play every day for a week to be good at baseball?', 'parse': {'tree': '(ROOT (SBARQ (WHADJP (WRB How) (JJ long)) (SQ (VBZ does) (NP (NNP James)) (VP (VB have) (S (VP (TO to) (VP (VB play) (NP (NP (DT every) (NN day)) (PP (IN for) (NP (DT a) (NN week))))))) (S (VP (TO to) (VP (VB be) (ADJP (JJ good) (PP (IN at) (NP (NN baseball))))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'long', u'long', u'JJ'), (u'does', u'do', u'VBZ'), (u'James', u'James', u'NNP'), (u'have', u'have', u'VB'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'week', u'week', u'NN'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'good', u'good', u'JJ'), (u'at', u'at', u'IN'), (u'baseball', u'baseball', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'long', 'does', 'James', 'have', 'to', 'play', 'every', 'day', 'for', 'a', 'week', 'to', 'be', 'good', 'at', 'baseball', '?']}, 'answers': [{'string': ' 2 hours', 'parse': {'tree': '(ROOT (X (NP (CD 2) (NNS hours))))', 'lemma': [(u'2', u'2', u'CD'), (u'hours', u'hour', u'NNS')]}, 'tokens': ['2', 'hours']}, {'string': ' 1 hour', 'parse': {'tree': '(ROOT (NP (CD 1) (NN hour)))', 'lemma': [(u'1', u'1', u'CD'), (u'hour', u'hour', u'NN')]}, 'tokens': ['1', 'hour']}, {'string': ' 7 hours', 'parse': {'tree': '(ROOT (X (NP (CD 7) (NNS hours))))', 'lemma': [(u'7', u'7', u'CD'), (u'hours', u'hour', u'NNS')]}, 'tokens': ['7', 'hours']}, {'string': ' 5 hours', 'parse': {'tree': '(ROOT (X (NP (CD 5) (NNS hours))))', 'lemma': [(u'5', u'5', u'CD'), (u'hours', u'hour', u'NNS')]}, 'tokens': ['5', 'hours']}], 'mode': 0}, {'question': {'string': ' what does James do when his glove rips?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP what)) (SQ (VBZ does) (NP (NNP James)) (VP (VB do) (SBAR (WHADVP (WRB when)) (S (NP (PRP$ his) (NN glove)) (VP (VBZ rips)))))) (. ?)))', 'lemma': [(u'what', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'James', u'James', u'NNP'), (u'do', u'do', u'VB'), (u'when', u'when', u'WRB'), (u'his', u'he', u'PRP$'), (u'glove', u'glove', u'NN'), (u'rips', u'rip', u'VBZ'), (u'?', u'?', u'.')]}, 'tokens': ['what', 'does', 'James', 'do', 'when', 'his', 'glove', 'rips', '?']}, 'answers': [{'string': ' he gives up', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBZ gives) (PRT (RP up)))))', 'lemma': [(u'he', u'he', u'PRP'), (u'gives', u'give', u'VBZ'), (u'up', u'up', u'RP')]}, 'tokens': ['he', 'gives', 'up']}, {'string': " he borrows his brother 's glove", 'parse': {'tree': "(ROOT (S (NP (PRP he)) (VP (VBZ borrows) (NP (NP (PRP$ his) (NN brother) (POS 's)) (NN glove)))))", 'lemma': [(u'he', u'he', u'PRP'), (u'borrows', u'borrow', u'VBZ'), (u'his', u'he', u'PRP$'), (u'brother', u'brother', u'NN'), (u"'s", u"'s", u'POS'), (u'glove', u'glove', u'NN')]}, 'tokens': ['he', 'borrows', 'his', 'brother', "'s", 'glove']}, {'string': ' he looks for a way to make money', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBZ looks) (PP (IN for) (NP (DT a) (NN way) (S (VP (TO to) (VP (VB make) (NP (NN money))))))))))', 'lemma': [(u'he', u'he', u'PRP'), (u'looks', u'look', u'VBZ'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'way', u'way', u'NN'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'money', u'money', u'NN')]}, 'tokens': ['he', 'looks', 'for', 'a', 'way', 'to', 'make', 'money']}, {'string': ' he gets mad and yells', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VP (VBZ gets) (ADJP (JJ mad))) (CC and) (VP (VBZ yells)))))', 'lemma': [(u'he', u'he', u'PRP'), (u'gets', u'get', u'VBZ'), (u'mad', u'mad', u'JJ'), (u'and', u'and', u'CC'), (u'yells', u'yell', u'VBZ')]}, 'tokens': ['he', 'gets', 'mad', 'and', 'yells']}], 'mode': 0}, {'question': {'string': ' What does James need to practice?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP James)) (VP (VB need) (S (VP (TO to) (VP (VB practice)))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'James', u'James', u'NNP'), (u'need', u'need', u'VB'), (u'to', u'to', u'TO'), (u'practice', u'practice', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'James', 'need', 'to', 'practice', '?']}, 'answers': [{'string': ' music', 'parse': {'tree': '(ROOT (NP (NN music)))', 'lemma': [(u'music', u'music', u'NN')]}, 'tokens': ['music']}, {'string': ' hockey', 'parse': {'tree': '(ROOT (NP (NN hockey)))', 'lemma': [(u'hockey', u'hockey', u'NN')]}, 'tokens': ['hockey']}, {'string': ' football', 'parse': {'tree': '(ROOT (NP (NN football)))', 'lemma': [(u'football', u'football', u'NN')]}, 'tokens': ['football']}, {'string': ' baseball', 'parse': {'tree': '(ROOT (NP (NN baseball)))', 'lemma': [(u'baseball', u'baseball', u'NN')]}, 'tokens': ['baseball']}], 'mode': 1}, {'question': {'string': " What is James ' friend 's name?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (NNP James) (POS ')) (NN friend) (POS 's)) (NN name))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'James', u'James', u'NNP'), (u"'", u"'", u'POS'), (u'friend', u'friend', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'James', "'", 'friend', "'s", 'name', '?']}, 'answers': [{'string': ' Harry', 'parse': {'tree': '(ROOT (NP (NNP Harry)))', 'lemma': [(u'Harry', u'Harry', u'NNP')]}, 'tokens': ['Harry']}, {'string': ' Tommy', 'parse': {'tree': '(ROOT (NP (NNP Tommy)))', 'lemma': [(u'Tommy', u'Tommy', u'NNP')]}, 'tokens': ['Tommy']}, {'string': ' Arnold', 'parse': {'tree': '(ROOT (NP (NNP Arnold)))', 'lemma': [(u'Arnold', u'Arnold', u'NNP')]}, 'tokens': ['Arnold']}, {'string': ' Mikey', 'parse': {'tree': '(ROOT (ADVP (RB Mikey)))', 'lemma': [(u'Mikey', u'mikey', u'RB')]}, 'tokens': ['Mikey']}], 'mode': 1}]}
{'sentences': [{'string': ' Flying a kite can be dangerous.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Flying)) (NP (DT a) (NN kite))) (VP (MD can) (VP (VB be) (ADJP (JJ dangerous)))) (. .)))', 'lemma': [(u'Flying', u'Flying', u'NNP'), (u'a', u'a', u'DT'), (u'kite', u'kite', u'NN'), (u'can', u'can', u'MD'), (u'be', u'be', u'VB'), (u'dangerous', u'dangerous', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Flying', 'a', 'kite', 'can', 'be', 'dangerous', '.']}, {'string': ' When I was eight years old I went to the park with my dad to fly my new kite.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP I)) (VP (VBD was) (ADJP (NP (CD eight) (NNS years)) (JJ old))))) (NP (PRP I)) (VP (VBD went) (PP (TO to) (NP (DT the) (NN park))) (PP (IN with) (NP (PRP$ my) (NN dad) (S (VP (TO to) (VP (VB fly) (NP (PRP$ my) (JJ new) (NN kite)))))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u'eight', u'eight', u'CD'), (u'years', u'year', u'NNS'), (u'old', u'old', u'JJ'), (u'I', u'I', u'PRP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'with', u'with', u'IN'), (u'my', u'my', u'PRP$'), (u'dad', u'dad', u'NN'), (u'to', u'to', u'TO'), (u'fly', u'fly', u'VB'), (u'my', u'my', u'PRP$'), (u'new', u'new', u'JJ'), (u'kite', u'kite', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'I', 'was', 'eight', 'years', 'old', 'I', 'went', 'to', 'the', 'park', 'with', 'my', 'dad', 'to', 'fly', 'my', 'new', 'kite', '.']}, {'string': ' We stood on the top of a hill and tried to catch the wind.', 'parse': {'tree': '(ROOT (S (NP (PRP We)) (VP (VP (VBD stood) (PP (IN on) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT a) (NN hill)))))) (CC and) (VP (VBD tried) (S (VP (TO to) (VP (VB catch) (NP (DT the) (NN wind))))))) (. .)))', 'lemma': [(u'We', u'we', u'PRP'), (u'stood', u'stand', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'a', u'a', u'DT'), (u'hill', u'hill', u'NN'), (u'and', u'and', u'CC'), (u'tried', u'try', u'VBD'), (u'to', u'to', u'TO'), (u'catch', u'catch', u'VB'), (u'the', u'the', u'DT'), (u'wind', u'wind', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['We', 'stood', 'on', 'the', 'top', 'of', 'a', 'hill', 'and', 'tried', 'to', 'catch', 'the', 'wind', '.']}, {'string': ' It took us almost half an hour, but we finally got the kite into the air.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBD took) (NP (PRP us)) (NP (QP (RB almost) (PDT half) (DT an) (NN hour))))) (, ,) (CC but) (S (NP (PRP we)) (ADVP (RB finally)) (VP (VBD got) (NP (DT the) (NN kite)) (PP (IN into) (NP (DT the) (NN air))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'took', u'take', u'VBD'), (u'us', u'we', u'PRP'), (u'almost', u'almost', u'RB'), (u'half', u'half', u'PDT'), (u'an', u'a', u'DT'), (u'hour', u'hour', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'we', u'we', u'PRP'), (u'finally', u'finally', u'RB'), (u'got', u'get', u'VBD'), (u'the', u'the', u'DT'), (u'kite', u'kite', u'NN'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'air', u'air', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'took', 'us', 'almost', 'half', 'an', 'hour', ',', 'but', 'we', 'finally', 'got', 'the', 'kite', 'into', 'the', 'air', '.']}, {'string': ' As it lifted into the sky, the kite caught the edge of my jacket and I was pulled up into the wind with the kite.', 'parse': {'tree': '(ROOT (S (S (SBAR (IN As) (S (NP (PRP it)) (VP (VBD lifted) (PP (IN into) (NP (DT the) (NN sky)))))) (, ,) (NP (DT the) (NN kite)) (VP (VBD caught) (NP (NP (DT the) (NN edge)) (PP (IN of) (NP (PRP$ my) (NN jacket)))))) (CC and) (S (NP (PRP I)) (VP (VBD was) (VP (VBN pulled) (PRT (RP up)) (PP (IN into) (NP (NP (DT the) (NN wind)) (PP (IN with) (NP (DT the) (NN kite)))))))) (. .)))', 'lemma': [(u'As', u'as', u'IN'), (u'it', u'it', u'PRP'), (u'lifted', u'lift', u'VBD'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'sky', u'sky', u'NN'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'kite', u'kite', u'NN'), (u'caught', u'catch', u'VBD'), (u'the', u'the', u'DT'), (u'edge', u'edge', u'NN'), (u'of', u'of', u'IN'), (u'my', u'my', u'PRP$'), (u'jacket', u'jacket', u'NN'), (u'and', u'and', u'CC'), (u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u'pulled', u'pull', u'VBN'), (u'up', u'up', u'RP'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'wind', u'wind', u'NN'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'kite', u'kite', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['As', 'it', 'lifted', 'into', 'the', 'sky', ',', 'the', 'kite', 'caught', 'the', 'edge', 'of', 'my', 'jacket', 'and', 'I', 'was', 'pulled', 'up', 'into', 'the', 'wind', 'with', 'the', 'kite', '.']}, {'string': ' I flew higher and higher into the air until I my dad looked like an ant on the ground.', 'parse': {'tree': '(ROOT (S (S (NP (PRP I)) (VP (VBD flew) (PP (ADVP (JJR higher) (CC and) (JJR higher)) (IN into) (NP (DT the) (NN air))) (PP (IN until) (NP (PRP I))))) (NP (PRP$ my) (NN dad)) (VP (VBD looked) (PP (IN like) (NP (DT an) (NN ant))) (PP (IN on) (NP (DT the) (NN ground)))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'flew', u'fly', u'VBD'), (u'higher', u'higher', u'JJR'), (u'and', u'and', u'CC'), (u'higher', u'higher', u'JJR'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'air', u'air', u'NN'), (u'until', u'until', u'IN'), (u'I', u'I', u'PRP'), (u'my', u'my', u'PRP$'), (u'dad', u'dad', u'NN'), (u'looked', u'look', u'VBD'), (u'like', u'like', u'IN'), (u'an', u'a', u'DT'), (u'ant', u'ant', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'ground', u'ground', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'flew', 'higher', 'and', 'higher', 'into', 'the', 'air', 'until', 'I', 'my', 'dad', 'looked', 'like', 'an', 'ant', 'on', 'the', 'ground', '.']}, {'string': ' The park was beautiful from up high, and I could see our car getting smaller.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NN park)) (VP (VBD was) (ADJP (JJ beautiful) (PP (IN from) (ADVP (RB up) (JJ high)))))) (, ,) (CC and) (S (NP (PRP I)) (VP (MD could) (VP (VB see) (NP (PRP$ our) (NN car)) (S (VP (VBG getting) (NP (JJR smaller))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'park', u'park', u'NN'), (u'was', u'be', u'VBD'), (u'beautiful', u'beautiful', u'JJ'), (u'from', u'from', u'IN'), (u'up', u'up', u'RB'), (u'high', u'high', u'JJ'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'I', u'I', u'PRP'), (u'could', u'could', u'MD'), (u'see', u'see', u'VB'), (u'our', u'we', u'PRP$'), (u'car', u'car', u'NN'), (u'getting', u'get', u'VBG'), (u'smaller', u'smaller', u'JJR'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'park', 'was', 'beautiful', 'from', 'up', 'high', ',', 'and', 'I', 'could', 'see', 'our', 'car', 'getting', 'smaller', '.']}, {'string': ' I flew all the way out of the city and over the lake.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD flew) (NP (PDT all) (DT the) (NN way)) (PRT (RP out)) (PP (PP (IN of) (NP (DT the) (NN city))) (CC and) (PP (IN over) (NP (DT the) (NN lake))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'flew', u'fly', u'VBD'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'way', u'way', u'NN'), (u'out', u'out', u'RP'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN'), (u'and', u'and', u'CC'), (u'over', u'over', u'IN'), (u'the', u'the', u'DT'), (u'lake', u'lake', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'flew', 'all', 'the', 'way', 'out', 'of', 'the', 'city', 'and', 'over', 'the', 'lake', '.']}, {'string': ' Eventually, the wind started to die down and I fell closer to the water.', 'parse': {'tree': '(ROOT (S (ADVP (RB Eventually)) (, ,) (S (NP (DT the) (NN wind)) (VP (VBD started) (S (VP (TO to) (VP (VB die) (PRT (RP down))))))) (CC and) (S (NP (PRP I)) (VP (VBD fell) (ADVP (RBR closer)) (PP (TO to) (NP (DT the) (NN water))))) (. .)))', 'lemma': [(u'Eventually', u'eventually', u'RB'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'wind', u'wind', u'NN'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'die', u'die', u'VB'), (u'down', u'down', u'RP'), (u'and', u'and', u'CC'), (u'I', u'I', u'PRP'), (u'fell', u'fall', u'VBD'), (u'closer', u'closer', u'RBR'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'water', u'water', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Eventually', ',', 'the', 'wind', 'started', 'to', 'die', 'down', 'and', 'I', 'fell', 'closer', 'to', 'the', 'water', '.']}, {'string': ' I called out to some people on a boat and they sailed over so I could land on their boat.', 'parse': {'tree': '(ROOT (S (S (NP (PRP I)) (VP (VBD called) (PRT (RP out)) (PP (TO to) (NP (DT some) (NNS people))) (PP (IN on) (NP (DT a) (NN boat))))) (CC and) (S (NP (PRP they)) (VP (VBD sailed) (PRT (RP over)) (SBAR (IN so) (S (NP (PRP I)) (VP (MD could) (VP (VB land) (PP (IN on) (NP (PRP$ their) (NN boat))))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'called', u'call', u'VBD'), (u'out', u'out', u'RP'), (u'to', u'to', u'TO'), (u'some', u'some', u'DT'), (u'people', u'people', u'NNS'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'boat', u'boat', u'NN'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'sailed', u'sail', u'VBD'), (u'over', u'over', u'RP'), (u'so', u'so', u'IN'), (u'I', u'I', u'PRP'), (u'could', u'could', u'MD'), (u'land', u'land', u'VB'), (u'on', u'on', u'IN'), (u'their', u'they', u'PRP$'), (u'boat', u'boat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'called', 'out', 'to', 'some', 'people', 'on', 'a', 'boat', 'and', 'they', 'sailed', 'over', 'so', 'I', 'could', 'land', 'on', 'their', 'boat', '.']}, {'string': ' I told them about my adventure and they sailed me back to land, where my dad picked me up.', 'parse': {'tree': '(ROOT (S (S (NP (PRP I)) (VP (VBD told) (NP (PRP them)) (PP (IN about) (NP (PRP$ my) (NN adventure))))) (CC and) (S (NP (PRP they)) (VP (VBD sailed) (NP (PRP me)) (PRT (RP back)) (S (VP (TO to) (VP (VB land)))) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (PRP$ my) (NN dad)) (VP (VBD picked) (NP (PRP me)) (PRT (RP up))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'told', u'tell', u'VBD'), (u'them', u'they', u'PRP'), (u'about', u'about', u'IN'), (u'my', u'my', u'PRP$'), (u'adventure', u'adventure', u'NN'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'sailed', u'sail', u'VBD'), (u'me', u'I', u'PRP'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'land', u'land', u'VB'), (u',', u',', u','), (u'where', u'where', u'WRB'), (u'my', u'my', u'PRP$'), (u'dad', u'dad', u'NN'), (u'picked', u'pick', u'VBD'), (u'me', u'I', u'PRP'), (u'up', u'up', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'told', 'them', 'about', 'my', 'adventure', 'and', 'they', 'sailed', 'me', 'back', 'to', 'land', ',', 'where', 'my', 'dad', 'picked', 'me', 'up', '.']}, {'string': ' He took me out for ice cream and we went home.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBD took) (NP (PRP me)) (PRT (RP out)) (PP (IN for) (NP (NN ice) (NN cream))))) (CC and) (S (NP (PRP we)) (VP (VBD went) (NP (NN home)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'took', u'take', u'VBD'), (u'me', u'I', u'PRP'), (u'out', u'out', u'RP'), (u'for', u'for', u'IN'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'and', u'and', u'CC'), (u'we', u'we', u'PRP'), (u'went', u'go', u'VBD'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'took', 'me', 'out', 'for', 'ice', 'cream', 'and', 'we', 'went', 'home', '.']}], 'questions': [{'question': {'string': ' Who was the main character flying a kite with?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (DT the) (JJ main) (NN character)) (VP (VBG flying) (NP (DT a) (NN kite)) (PP (IN with)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'main', u'main', u'JJ'), (u'character', u'character', u'NN'), (u'flying', u'fly', u'VBG'), (u'a', u'a', u'DT'), (u'kite', u'kite', u'NN'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'the', 'main', 'character', 'flying', 'a', 'kite', 'with', '?']}, 'answers': [{'string': ' Her father', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ Her) (NN father))))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'father', u'father', u'NN')]}, 'tokens': ['Her', 'father']}, {'string': ' Her aunt', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ Her) (NN aunt))))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'aunt', u'aunt', u'NN')]}, 'tokens': ['Her', 'aunt']}, {'string': ' Her mother', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ Her) (NN mother))))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'mother', u'mother', u'NN')]}, 'tokens': ['Her', 'mother']}, {'string': ' Her brother', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ Her) (NN brother))))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'brother', u'brother', u'NN')]}, 'tokens': ['Her', 'brother']}], 'mode': 1}, {'question': {'string': ' How does the main character feel about her kite adventure?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBZ does) (NP (DT the) (JJ main) (NN character)) (VP (VB feel) (PP (IN about) (NP (PRP$ her) (NN kite) (NN adventure))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'does', u'do', u'VBZ'), (u'the', u'the', u'DT'), (u'main', u'main', u'JJ'), (u'character', u'character', u'NN'), (u'feel', u'feel', u'VB'), (u'about', u'about', u'IN'), (u'her', u'she', u'PRP$'), (u'kite', u'kite', u'NN'), (u'adventure', u'adventure', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'does', 'the', 'main', 'character', 'feel', 'about', 'her', 'kite', 'adventure', '?']}, 'answers': [{'string': ' Sad.', 'parse': {'tree': '(ROOT (S (VP (VB Sad)) (. .)))', 'lemma': [(u'Sad', u'sad', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Sad', '.']}, {'string': ' Interested by the sights', 'parse': {'tree': '(ROOT (VP (VBN Interested) (PP (IN by) (NP (DT the) (NNS sights)))))', 'lemma': [(u'Interested', u'interest', u'VBN'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'sights', u'sight', u'NNS')]}, 'tokens': ['Interested', 'by', 'the', 'sights']}, {'string': ' Very scared.', 'parse': {'tree': '(ROOT (FRAG (ADJP (RB Very) (VBN scared)) (. .)))', 'lemma': [(u'Very', u'very', u'RB'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['Very', 'scared', '.']}, {'string': ' Bored.', 'parse': {'tree': '(ROOT (S (VP (VBN Bored)) (. .)))', 'lemma': [(u'Bored', u'bore', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['Bored', '.']}], 'mode': 0}, {'question': {'string': ' Why does the main character say it can be dangerous to fly a kite?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBZ does) (NP (DT the) (JJ main) (NN character)) (VP (VB say) (SBAR (S (NP (PRP it)) (VP (MD can) (VP (VB be) (ADJP (JJ dangerous) (S (VP (TO to) (VP (VB fly) (NP (DT a) (NN kite)))))))))))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'does', u'do', u'VBZ'), (u'the', u'the', u'DT'), (u'main', u'main', u'JJ'), (u'character', u'character', u'NN'), (u'say', u'say', u'VB'), (u'it', u'it', u'PRP'), (u'can', u'can', u'MD'), (u'be', u'be', u'VB'), (u'dangerous', u'dangerous', u'JJ'), (u'to', u'to', u'TO'), (u'fly', u'fly', u'VB'), (u'a', u'a', u'DT'), (u'kite', u'kite', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'does', 'the', 'main', 'character', 'say', 'it', 'can', 'be', 'dangerous', 'to', 'fly', 'a', 'kite', '?']}, 'answers': [{'string': ' Because the kite has sharp edges.', 'parse': {'tree': '(ROOT (FRAG (SBAR (IN Because) (S (NP (DT the) (NN kite)) (VP (VBZ has) (NP (JJ sharp) (NNS edges))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'the', u'the', u'DT'), (u'kite', u'kite', u'NN'), (u'has', u'have', u'VBZ'), (u'sharp', u'sharp', u'JJ'), (u'edges', u'edge', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'the', 'kite', 'has', 'sharp', 'edges', '.']}, {'string': ' Because the kite string got twisted around her.', 'parse': {'tree': '(ROOT (S (PP (IN Because) (NP (DT the) (NN kite))) (NP (NN string)) (VP (VBD got) (ADJP (JJ twisted)) (PP (IN around) (NP (PRP her)))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'the', u'the', u'DT'), (u'kite', u'kite', u'NN'), (u'string', u'string', u'NN'), (u'got', u'get', u'VBD'), (u'twisted', u'twisted', u'JJ'), (u'around', u'around', u'IN'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'the', 'kite', 'string', 'got', 'twisted', 'around', 'her', '.']}, {'string': ' Because she got caught on the kite and pulled up into the air.', 'parse': {'tree': '(ROOT (S (SBAR (IN Because) (S (NP (PRP she)) (VP (VBD got)))) (VP (VP (VBD caught) (PP (IN on) (NP (DT the) (NN kite)))) (CC and) (VP (VBD pulled) (PRT (RP up)) (PP (IN into) (NP (DT the) (NN air))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'she', u'she', u'PRP'), (u'got', u'get', u'VBD'), (u'caught', u'catch', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'kite', u'kite', u'NN'), (u'and', u'and', u'CC'), (u'pulled', u'pull', u'VBD'), (u'up', u'up', u'RP'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'air', u'air', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'she', 'got', 'caught', 'on', 'the', 'kite', 'and', 'pulled', 'up', 'into', 'the', 'air', '.']}, {'string': ' Because she ran too fast with the kite and fell down.', 'parse': {'tree': '(ROOT (FRAG (SBAR (IN Because) (S (NP (PRP she)) (VP (VP (VBD ran) (ADVP (RB too) (RB fast)) (PP (IN with) (NP (DT the) (NN kite)))) (CC and) (VP (VBD fell) (PRT (RP down)))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'she', u'she', u'PRP'), (u'ran', u'run', u'VBD'), (u'too', u'too', u'RB'), (u'fast', u'fast', u'RB'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'kite', u'kite', u'NN'), (u'and', u'and', u'CC'), (u'fell', u'fall', u'VBD'), (u'down', u'down', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'she', 'ran', 'too', 'fast', 'with', 'the', 'kite', 'and', 'fell', 'down', '.']}], 'mode': 0}, {'question': {'string': ' What does the main character say her dad looks like on the ground?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (DT the) (JJ main) (NN character)) (VP (VB say) (NP (PRP$ her) (NN dad) (NNS looks)) (PP (IN like) (PP (IN on) (NP (DT the) (NN ground)))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'the', u'the', u'DT'), (u'main', u'main', u'JJ'), (u'character', u'character', u'NN'), (u'say', u'say', u'VB'), (u'her', u'she', u'PRP$'), (u'dad', u'dad', u'NN'), (u'looks', u'look', u'NNS'), (u'like', u'like', u'IN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'ground', u'ground', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'the', 'main', 'character', 'say', 'her', 'dad', 'looks', 'like', 'on', 'the', 'ground', '?']}, 'answers': [{'string': ' A black dot', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (JJ black) (NN dot))))', 'lemma': [(u'A', u'a', u'DT'), (u'black', u'black', u'JJ'), (u'dot', u'dot', u'NN')]}, 'tokens': ['A', 'black', 'dot']}, {'string': ' A bear', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (NN bear))))', 'lemma': [(u'A', u'a', u'DT'), (u'bear', u'bear', u'NN')]}, 'tokens': ['A', 'bear']}, {'string': ' An ant', 'parse': {'tree': '(ROOT (FRAG (NP (DT An) (NN ant))))', 'lemma': [(u'An', u'a', u'DT'), (u'ant', u'ant', u'NN')]}, 'tokens': ['An', 'ant']}, {'string': ' Nothing', 'parse': {'tree': '(ROOT (NP (NN Nothing)))', 'lemma': [(u'Nothing', u'nothing', u'NN')]}, 'tokens': ['Nothing']}], 'mode': 1}]}
{'sentences': [{'string': ' Once upon a time there was a cute brown puppy.', 'parse': {'tree': '(ROOT (S (ADVP (RB Once) (PP (IN upon) (NP (DT a) (NN time)))) (NP (EX there)) (VP (VBD was) (NP (DT a) (ADJP (JJ cute)) (JJ brown) (NN puppy))) (. .)))', 'lemma': [(u'Once', u'once', u'RB'), (u'upon', u'upon', u'IN'), (u'a', u'a', u'DT'), (u'time', u'time', u'NN'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'cute', u'cute', u'JJ'), (u'brown', u'brown', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Once', 'upon', 'a', 'time', 'there', 'was', 'a', 'cute', 'brown', 'puppy', '.']}, {'string': ' He was a very happy puppy.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (NP (DT a) (ADJP (RB very) (JJ happy)) (NN puppy))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'happy', u'happy', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'a', 'very', 'happy', 'puppy', '.']}, {'string': ' His name was Rudy.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN name)) (VP (VBD was) (ADJP (JJ Rudy))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Rudy', u'rudy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'name', 'was', 'Rudy', '.']}, {'string': ' Rudy had a best friend.', 'parse': {'tree': '(ROOT (S (NP (NNP Rudy)) (VP (VBD had) (NP (DT a) (JJS best) (NN friend))) (. .)))', 'lemma': [(u'Rudy', u'Rudy', u'NNP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rudy', 'had', 'a', 'best', 'friend', '.']}, {'string': ' His name was Thomas.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN name)) (VP (VBD was) (NP (NNP Thomas))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Thomas', u'Thomas', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'name', 'was', 'Thomas', '.']}, {'string': ' Thomas had a nice dad named Rick.', 'parse': {'tree': '(ROOT (S (NP (NNP Thomas)) (VP (VBD had) (NP (NP (DT a) (JJ nice) (NN dad)) (VP (VBN named) (NP (NNP Rick))))) (. .)))', 'lemma': [(u'Thomas', u'Thomas', u'NNP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'nice', u'nice', u'JJ'), (u'dad', u'dad', u'NN'), (u'named', u'name', u'VBN'), (u'Rick', u'Rick', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Thomas', 'had', 'a', 'nice', 'dad', 'named', 'Rick', '.']}, {'string': ' Thomas and Rudy had been friends for almost a year.', 'parse': {'tree': '(ROOT (S (NP (NNP Thomas) (CC and) (NNP Rudy)) (VP (VBD had) (VP (VBN been) (NP (NP (NNS friends)) (PP (IN for) (NP (RB almost) (DT a) (NN year)))))) (. .)))', 'lemma': [(u'Thomas', u'Thomas', u'NNP'), (u'and', u'and', u'CC'), (u'Rudy', u'Rudy', u'NNP'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'friends', u'friend', u'NNS'), (u'for', u'for', u'IN'), (u'almost', u'almost', u'RB'), (u'a', u'a', u'DT'), (u'year', u'year', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Thomas', 'and', 'Rudy', 'had', 'been', 'friends', 'for', 'almost', 'a', 'year', '.']}, {'string': ' Rudy and Thomas loved to play in the big back yard.', 'parse': {'tree': '(ROOT (S (NP (NNP Rudy) (CC and) (NNP Thomas)) (VP (VBD loved) (S (VP (TO to) (VP (VB play) (PP (IN in) (NP (DT the) (JJ big) (JJ back) (NN yard))))))) (. .)))', 'lemma': [(u'Rudy', u'Rudy', u'NNP'), (u'and', u'and', u'CC'), (u'Thomas', u'Thomas', u'NNP'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'big', u'big', u'JJ'), (u'back', u'back', u'JJ'), (u'yard', u'yard', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rudy', 'and', 'Thomas', 'loved', 'to', 'play', 'in', 'the', 'big', 'back', 'yard', '.']}, {'string': ' Sometimes, Thomas would ask his friend Jacob to come to the back yard and play with them.', 'parse': {'tree': '(ROOT (S (ADVP (RB Sometimes)) (, ,) (NP (NNP Thomas)) (VP (MD would) (VP (VB ask) (NP (PRP$ his) (NN friend) (NNP Jacob)) (S (VP (TO to) (VP (VP (VB come) (PP (TO to) (NP (DT the) (JJ back) (NN yard)))) (CC and) (VP (VB play) (PP (IN with) (NP (PRP them))))))))) (. .)))', 'lemma': [(u'Sometimes', u'sometimes', u'RB'), (u',', u',', u','), (u'Thomas', u'Thomas', u'NNP'), (u'would', u'would', u'MD'), (u'ask', u'ask', u'VB'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'Jacob', u'Jacob', u'NNP'), (u'to', u'to', u'TO'), (u'come', u'come', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'back', u'back', u'JJ'), (u'yard', u'yard', u'NN'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'them', u'they', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Sometimes', ',', 'Thomas', 'would', 'ask', 'his', 'friend', 'Jacob', 'to', 'come', 'to', 'the', 'back', 'yard', 'and', 'play', 'with', 'them', '.']}, {'string': ' Jacob would always bring his puppy too.', 'parse': {'tree': '(ROOT (S (NP (NNP Jacob)) (VP (MD would) (ADVP (RB always)) (VP (VB bring) (NP (PRP$ his) (NN puppy)) (ADVP (RB too)))) (. .)))', 'lemma': [(u'Jacob', u'Jacob', u'NNP'), (u'would', u'would', u'MD'), (u'always', u'always', u'RB'), (u'bring', u'bring', u'VB'), (u'his', u'he', u'PRP$'), (u'puppy', u'puppy', u'NN'), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Jacob', 'would', 'always', 'bring', 'his', 'puppy', 'too', '.']}, {'string': " Jacob 's puppy was named Sally.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Jacob) (POS 's)) (NN puppy)) (VP (VBD was) (VP (VBN named) (NP (NNP Sally)))) (. .)))", 'lemma': [(u'Jacob', u'Jacob', u'NNP'), (u"'s", u"'s", u'POS'), (u'puppy', u'puppy', u'NN'), (u'was', u'be', u'VBD'), (u'named', u'name', u'VBN'), (u'Sally', u'Sally', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Jacob', "'s", 'puppy', 'was', 'named', 'Sally', '.']}, {'string': ' Thomas and Jacob would run around the back yard and Rudy and Sally chased them and barked.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Thomas) (CC and) (NNP Jacob)) (VP (MD would) (VP (VB run) (PRT (RP around)) (NP (DT the) (JJ back) (NN yard))))) (CC and) (S (NP (NNP Rudy) (CC and) (NNP Sally)) (VP (VP (VBD chased) (NP (PRP them))) (CC and) (VP (VBD barked)))) (. .)))', 'lemma': [(u'Thomas', u'Thomas', u'NNP'), (u'and', u'and', u'CC'), (u'Jacob', u'Jacob', u'NNP'), (u'would', u'would', u'MD'), (u'run', u'run', u'VB'), (u'around', u'around', u'RP'), (u'the', u'the', u'DT'), (u'back', u'back', u'JJ'), (u'yard', u'yard', u'NN'), (u'and', u'and', u'CC'), (u'Rudy', u'Rudy', u'NNP'), (u'and', u'and', u'CC'), (u'Sally', u'Sally', u'NNP'), (u'chased', u'chase', u'VBD'), (u'them', u'they', u'PRP'), (u'and', u'and', u'CC'), (u'barked', u'bark', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Thomas', 'and', 'Jacob', 'would', 'run', 'around', 'the', 'back', 'yard', 'and', 'Rudy', 'and', 'Sally', 'chased', 'them', 'and', 'barked', '.']}, {'string': ' They all had so much fun playing together.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (DT all)) (VP (VBD had) (NP (NP (ADJP (RB so) (JJ much)) (NN fun)) (VP (VBG playing) (ADVP (RB together))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'all', u'all', u'DT'), (u'had', u'have', u'VBD'), (u'so', u'so', u'RB'), (u'much', u'much', u'JJ'), (u'fun', u'fun', u'NN'), (u'playing', u'play', u'VBG'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'all', 'had', 'so', 'much', 'fun', 'playing', 'together', '.']}, {'string': ' One day, Thomas told Rudy that tomorrow would be a very special day.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (, ,) (NP (NNP Thomas)) (VP (VBD told) (NP (NNP Rudy)) (SBAR (IN that) (S (NP (NN tomorrow)) (VP (MD would) (VP (VB be) (NP (DT a) (ADJP (RB very) (JJ special)) (NN day))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'Thomas', u'Thomas', u'NNP'), (u'told', u'tell', u'VBD'), (u'Rudy', u'Rudy', u'NNP'), (u'that', u'that', u'IN'), (u'tomorrow', u'tomorrow', u'NN'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'special', u'special', u'JJ'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', ',', 'Thomas', 'told', 'Rudy', 'that', 'tomorrow', 'would', 'be', 'a', 'very', 'special', 'day', '.']}, {'string': " It would be Rudy 's birthday.", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (MD would) (VP (VB be) (NP (NP (NNP Rudy) (POS 's)) (NN birthday)))) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'Rudy', u'Rudy', u'NNP'), (u"'s", u"'s", u'POS'), (u'birthday', u'birthday', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'would', 'be', 'Rudy', "'s", 'birthday', '.']}, {'string': ' Rudy was very excited.', 'parse': {'tree': '(ROOT (S (NP (NNP Rudy)) (VP (VBD was) (ADJP (RB very) (JJ excited))) (. .)))', 'lemma': [(u'Rudy', u'Rudy', u'NNP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'excited', u'excited', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Rudy', 'was', 'very', 'excited', '.']}, {'string': ' The next day came and Thomas threw a birthday party for Rudy.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (JJ next) (NN day)) (VP (VBD came))) (CC and) (S (NP (NNP Thomas)) (VP (VBD threw) (NP (DT a) (NN birthday) (NN party)) (PP (IN for) (NP (NNP Rudy))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u'came', u'come', u'VBD'), (u'and', u'and', u'CC'), (u'Thomas', u'Thomas', u'NNP'), (u'threw', u'throw', u'VBD'), (u'a', u'a', u'DT'), (u'birthday', u'birthday', u'NN'), (u'party', u'party', u'NN'), (u'for', u'for', u'IN'), (u'Rudy', u'Rudy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'next', 'day', 'came', 'and', 'Thomas', 'threw', 'a', 'birthday', 'party', 'for', 'Rudy', '.']}, {'string': " All of Rudy 's friends were there and they had presents for him.", 'parse': {'tree': "(ROOT (S (S (NP (NP (DT All)) (PP (IN of) (NP (NP (NNP Rudy) (POS 's)) (NNS friends)))) (VP (VBD were) (ADVP (RB there)))) (CC and) (S (NP (PRP they)) (VP (VBD had) (NP (NP (NNS presents)) (PP (IN for) (NP (PRP him)))))) (. .)))", 'lemma': [(u'All', u'all', u'DT'), (u'of', u'of', u'IN'), (u'Rudy', u'Rudy', u'NNP'), (u"'s", u"'s", u'POS'), (u'friends', u'friend', u'NNS'), (u'were', u'be', u'VBD'), (u'there', u'there', u'RB'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'presents', u'present', u'NNS'), (u'for', u'for', u'IN'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['All', 'of', 'Rudy', "'s", 'friends', 'were', 'there', 'and', 'they', 'had', 'presents', 'for', 'him', '.']}, {'string': ' Jacob brought Rudy a new ball and Sally brought him a bone.', 'parse': {'tree': '(ROOT (S (NP (NNP Jacob)) (VP (VBD brought) (NP (NP (NNP Rudy)) (SBAR (S (NP (NP (DT a) (JJ new) (NN ball)) (CC and) (NP (NNP Sally))) (VP (VBD brought) (S (NP (PRP him)) (NP (DT a) (NN bone)))))))) (. .)))', 'lemma': [(u'Jacob', u'Jacob', u'NNP'), (u'brought', u'bring', u'VBD'), (u'Rudy', u'Rudy', u'NNP'), (u'a', u'a', u'DT'), (u'new', u'new', u'JJ'), (u'ball', u'ball', u'NN'), (u'and', u'and', u'CC'), (u'Sally', u'Sally', u'NNP'), (u'brought', u'bring', u'VBD'), (u'him', u'he', u'PRP'), (u'a', u'a', u'DT'), (u'bone', u'bone', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jacob', 'brought', 'Rudy', 'a', 'new', 'ball', 'and', 'Sally', 'brought', 'him', 'a', 'bone', '.']}, {'string': ' There was one more present for Rudy to open.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD was) (ADJP (NP (CD one)) (RBR more) (JJ present)) (PP (IN for) (NP (NNP Rudy))) (S (VP (TO to) (VP (VB open))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'one', u'one', u'CD'), (u'more', u'more', u'RBR'), (u'present', u'present', u'JJ'), (u'for', u'for', u'IN'), (u'Rudy', u'Rudy', u'NNP'), (u'to', u'to', u'TO'), (u'open', u'open', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'was', 'one', 'more', 'present', 'for', 'Rudy', 'to', 'open', '.']}, {'string': ' When he opened the gift from Thomas, Rudy was so exited that he jumped and barked.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP he)) (VP (VBD opened) (NP (DT the) (NN gift)) (PP (IN from) (NP (NNP Thomas)))))) (, ,) (NP (NNP Rudy)) (VP (VBD was) (ADJP (RB so) (JJ exited)) (SBAR (IN that) (S (NP (PRP he)) (VP (VP (VBD jumped)) (CC and) (VP (VBD barked)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'opened', u'open', u'VBD'), (u'the', u'the', u'DT'), (u'gift', u'gift', u'NN'), (u'from', u'from', u'IN'), (u'Thomas', u'Thomas', u'NNP'), (u',', u',', u','), (u'Rudy', u'Rudy', u'NNP'), (u'was', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'exited', u'exited', u'JJ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'jumped', u'jump', u'VBD'), (u'and', u'and', u'CC'), (u'barked', u'bark', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'he', 'opened', 'the', 'gift', 'from', 'Thomas', ',', 'Rudy', 'was', 'so', 'exited', 'that', 'he', 'jumped', 'and', 'barked', '.']}, {'string': ' It was a new red collar with a shiny name tag on it.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (NP (DT a) (JJ new) (JJ red) (NN collar)) (PP (IN with) (NP (NP (DT a) (JJ shiny) (NN name) (NN tag)) (PP (IN on) (NP (PRP it))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'new', u'new', u'JJ'), (u'red', u'red', u'JJ'), (u'collar', u'collar', u'NN'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'shiny', u'shiny', u'JJ'), (u'name', u'name', u'NN'), (u'tag', u'tag', u'NN'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'a', 'new', 'red', 'collar', 'with', 'a', 'shiny', 'name', 'tag', 'on', 'it', '.']}, {'string': ' It was the best gift Rudy had ever been given.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (NP (DT the) (JJS best) (NN gift)) (SBAR (S (NP (NNP Rudy)) (VP (VBD had) (ADVP (RB ever)) (VP (VBN been) (VP (VBN given)))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'gift', u'gift', u'NN'), (u'Rudy', u'Rudy', u'NNP'), (u'had', u'have', u'VBD'), (u'ever', u'ever', u'RB'), (u'been', u'be', u'VBN'), (u'given', u'give', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'the', 'best', 'gift', 'Rudy', 'had', 'ever', 'been', 'given', '.']}], 'questions': [{'question': {'string': ' What color was the cute puppy?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBD was) (NP (DT the) (ADJP (JJ cute)) (NN puppy))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'cute', u'cute', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'was', 'the', 'cute', 'puppy', '?']}, 'answers': [{'string': ' brown', 'parse': {'tree': '(ROOT (INTJ (UH brown)))', 'lemma': [(u'brown', u'brown', u'UH')]}, 'tokens': ['brown']}, {'string': ' yellow', 'parse': {'tree': '(ROOT (ADJP (JJ yellow)))', 'lemma': [(u'yellow', u'yellow', u'JJ')]}, 'tokens': ['yellow']}, {'string': ' black', 'parse': {'tree': '(ROOT (ADJP (JJ black)))', 'lemma': [(u'black', u'black', u'JJ')]}, 'tokens': ['black']}, {'string': ' white', 'parse': {'tree': '(ROOT (ADJP (JJ white)))', 'lemma': [(u'white', u'white', u'JJ')]}, 'tokens': ['white']}], 'mode': 1}, {'question': {'string': ' What was the best gift Rudy had ever been given?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (JJS best) (NN gift)) (SBAR (S (NP (NNP Rudy)) (VP (VBD had) (ADVP (RB ever)) (VP (VBN been) (VP (VBN given)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'gift', u'gift', u'NN'), (u'Rudy', u'Rudy', u'NNP'), (u'had', u'have', u'VBD'), (u'ever', u'ever', u'RB'), (u'been', u'be', u'VBN'), (u'given', u'give', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'best', 'gift', 'Rudy', 'had', 'ever', 'been', 'given', '?']}, 'answers': [{'string': ' a red collar with a name tag', 'parse': {'tree': '(ROOT (NP (NP (DT a) (JJ red) (NN collar)) (PP (IN with) (NP (DT a) (NN name) (NN tag)))))', 'lemma': [(u'a', u'a', u'DT'), (u'red', u'red', u'JJ'), (u'collar', u'collar', u'NN'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'name', u'name', u'NN'), (u'tag', u'tag', u'NN')]}, 'tokens': ['a', 'red', 'collar', 'with', 'a', 'name', 'tag']}, {'string': ' a toy', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN toy))))', 'lemma': [(u'a', u'a', u'DT'), (u'toy', u'toy', u'NN')]}, 'tokens': ['a', 'toy']}, {'string': ' a bone', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN bone))))', 'lemma': [(u'a', u'a', u'DT'), (u'bone', u'bone', u'NN')]}, 'tokens': ['a', 'bone']}, {'string': ' a ball', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN ball))))', 'lemma': [(u'a', u'a', u'DT'), (u'ball', u'ball', u'NN')]}, 'tokens': ['a', 'ball']}], 'mode': 0}, {'question': {'string': ' Where did Rudy and Thomas love to play?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Rudy) (CC and) (NNP Thomas)) (VP (VB love) (S (VP (TO to) (VP (VB play)))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'Rudy', u'Rudy', u'NNP'), (u'and', u'and', u'CC'), (u'Thomas', u'Thomas', u'NNP'), (u'love', u'love', u'VB'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'Rudy', 'and', 'Thomas', 'love', 'to', 'play', '?']}, 'answers': [{'string': ' the back yard', 'parse': {'tree': '(ROOT (NP (DT the) (NN back) (NN yard)))', 'lemma': [(u'the', u'the', u'DT'), (u'back', u'back', u'NN'), (u'yard', u'yard', u'NN')]}, 'tokens': ['the', 'back', 'yard']}, {'string': ' at the park', 'parse': {'tree': '(ROOT (PP (IN at) (NP (DT the) (NN park))))', 'lemma': [(u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN')]}, 'tokens': ['at', 'the', 'park']}, {'string': ' in the garden', 'parse': {'tree': '(ROOT (PP (IN in) (NP (DT the) (NN garden))))', 'lemma': [(u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'garden', u'garden', u'NN')]}, 'tokens': ['in', 'the', 'garden']}, {'string': ' in the house', 'parse': {'tree': '(ROOT (PP (IN in) (NP (DT the) (NN house))))', 'lemma': [(u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN')]}, 'tokens': ['in', 'the', 'house']}], 'mode': 1}, {'question': {'string': " What was the name of Rudy 's best friend?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (NNP Rudy) (POS 's)) (JJS best) (NN friend))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'name', u'name', u'NN'), (u'of', u'of', u'IN'), (u'Rudy', u'Rudy', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'name', 'of', 'Rudy', "'s", 'best', 'friend', '?']}, 'answers': [{'string': ' Sally', 'parse': {'tree': '(ROOT (NP (NNP Sally)))', 'lemma': [(u'Sally', u'Sally', u'NNP')]}, 'tokens': ['Sally']}, {'string': ' Jacob', 'parse': {'tree': '(ROOT (NP (NNP Jacob)))', 'lemma': [(u'Jacob', u'Jacob', u'NNP')]}, 'tokens': ['Jacob']}, {'string': ' Thomas', 'parse': {'tree': '(ROOT (NP (NNP Thomas)))', 'lemma': [(u'Thomas', u'Thomas', u'NNP')]}, 'tokens': ['Thomas']}, {'string': ' Rick', 'parse': {'tree': '(ROOT (NP (NNP Rick)))', 'lemma': [(u'Rick', u'Rick', u'NNP')]}, 'tokens': ['Rick']}], 'mode': 0}]}
{'sentences': [{'string': ' John bought a new puppy.', 'parse': {'tree': '(ROOT (S (NP (NNP John)) (VP (VBD bought) (NP (DT a) (JJ new) (NN puppy))) (. .)))', 'lemma': [(u'John', u'John', u'NNP'), (u'bought', u'buy', u'VBD'), (u'a', u'a', u'DT'), (u'new', u'new', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['John', 'bought', 'a', 'new', 'puppy', '.']}, {'string': ' He named the new puppy Spike.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD named) (NP (DT the) (JJ new) (NN puppy) (NN Spike))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'named', u'name', u'VBD'), (u'the', u'the', u'DT'), (u'new', u'new', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'Spike', u'spike', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'named', 'the', 'new', 'puppy', 'Spike', '.']}, {'string': ' Spike was a good dog and minded John.', 'parse': {'tree': '(ROOT (S (NP (NNP Spike)) (VP (VBD was) (NP (NP (DT a) (JJ good) (NN dog)) (CC and) (NP (NNP minded) (NNP John)))) (. .)))', 'lemma': [(u'Spike', u'Spike', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'dog', u'dog', u'NN'), (u'and', u'and', u'CC'), (u'minded', u'minded', u'NNP'), (u'John', u'John', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Spike', 'was', 'a', 'good', 'dog', 'and', 'minded', 'John', '.']}, {'string': ' John took Spike to the pond behind his house.', 'parse': {'tree': '(ROOT (S (NP (NNP John)) (VP (VBD took) (NP (NNP Spike)) (PP (TO to) (NP (DT the) (NN pond))) (PP (IN behind) (NP (PRP$ his) (NN house)))) (. .)))', 'lemma': [(u'John', u'John', u'NNP'), (u'took', u'take', u'VBD'), (u'Spike', u'Spike', u'NNP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'behind', u'behind', u'IN'), (u'his', u'he', u'PRP$'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['John', 'took', 'Spike', 'to', 'the', 'pond', 'behind', 'his', 'house', '.']}, {'string': ' Spike loved playing in the water.', 'parse': {'tree': '(ROOT (S (NP (NNP Spike)) (VP (VBD loved) (S (VP (VBG playing) (PP (IN in) (NP (DT the) (NN water)))))) (. .)))', 'lemma': [(u'Spike', u'Spike', u'NNP'), (u'loved', u'love', u'VBD'), (u'playing', u'play', u'VBG'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'water', u'water', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Spike', 'loved', 'playing', 'in', 'the', 'water', '.']}, {'string': ' John would throw the frisbee to Spike.', 'parse': {'tree': '(ROOT (S (NP (NNP John)) (VP (MD would) (VP (VB throw) (NP (DT the) (NN frisbee)) (PP (TO to) (NP (NNP Spike))))) (. .)))', 'lemma': [(u'John', u'John', u'NNP'), (u'would', u'would', u'MD'), (u'throw', u'throw', u'VB'), (u'the', u'the', u'DT'), (u'frisbee', u'frisbee', u'NN'), (u'to', u'to', u'TO'), (u'Spike', u'Spike', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['John', 'would', 'throw', 'the', 'frisbee', 'to', 'Spike', '.']}, {'string': ' He would also throw a bone to Spike.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (MD would) (ADVP (RB also)) (VP (VB throw) (NP (DT a) (NN bone)) (PP (TO to) (NP (NNP Spike))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'also', u'also', u'RB'), (u'throw', u'throw', u'VB'), (u'a', u'a', u'DT'), (u'bone', u'bone', u'NN'), (u'to', u'to', u'TO'), (u'Spike', u'Spike', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'would', 'also', 'throw', 'a', 'bone', 'to', 'Spike', '.']}, {'string': ' Spike loved running.', 'parse': {'tree': '(ROOT (S (NP (NNP Spike)) (VP (VBD loved) (S (VP (VBG running)))) (. .)))', 'lemma': [(u'Spike', u'Spike', u'NNP'), (u'loved', u'love', u'VBD'), (u'running', u'run', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['Spike', 'loved', 'running', '.']}, {'string': ' Jessica came to the pond to visit John.', 'parse': {'tree': '(ROOT (S (NP (NNP Jessica)) (VP (VBD came) (PP (TO to) (NP (DT the) (NN pond))) (S (VP (TO to) (VP (VB visit) (NP (NNP John)))))) (. .)))', 'lemma': [(u'Jessica', u'Jessica', u'NNP'), (u'came', u'come', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'to', u'to', u'TO'), (u'visit', u'visit', u'VB'), (u'John', u'John', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Jessica', 'came', 'to', 'the', 'pond', 'to', 'visit', 'John', '.']}, {'string': ' Jessica and Tom always played with John.', 'parse': {'tree': '(ROOT (S (NP (NNP Jessica) (CC and) (NNP Tom)) (ADVP (RB always)) (VP (VBD played) (PP (IN with) (NP (NNP John)))) (. .)))', 'lemma': [(u'Jessica', u'Jessica', u'NNP'), (u'and', u'and', u'CC'), (u'Tom', u'Tom', u'NNP'), (u'always', u'always', u'RB'), (u'played', u'play', u'VBD'), (u'with', u'with', u'IN'), (u'John', u'John', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Jessica', 'and', 'Tom', 'always', 'played', 'with', 'John', '.']}, {'string': " Jessica was John 's best friend.", 'parse': {'tree': "(ROOT (S (NP (NNP Jessica)) (VP (VBD was) (NP (NP (NNP John) (POS 's)) (JJS best) (NN friend))) (. .)))", 'lemma': [(u'Jessica', u'Jessica', u'NNP'), (u'was', u'be', u'VBD'), (u'John', u'John', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jessica', 'was', 'John', "'s", 'best', 'friend', '.']}, {'string': ' They both loved Spike and Spike loved them.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (DT both) (VP (VBD loved) (SBAR (S (NP (NNP Spike) (CC and) (NNP Spike)) (VP (VBD loved) (NP (PRP them)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'both', u'both', u'DT'), (u'loved', u'love', u'VBD'), (u'Spike', u'Spike', u'NNP'), (u'and', u'and', u'CC'), (u'Spike', u'Spike', u'NNP'), (u'loved', u'love', u'VBD'), (u'them', u'they', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'both', 'loved', 'Spike', 'and', 'Spike', 'loved', 'them', '.']}, {'string': ' Jessica brought lunch to the pond.', 'parse': {'tree': '(ROOT (S (NP (NNP Jessica)) (VP (VBD brought) (NP (NN lunch)) (PP (TO to) (NP (DT the) (NN pond)))) (. .)))', 'lemma': [(u'Jessica', u'Jessica', u'NNP'), (u'brought', u'bring', u'VBD'), (u'lunch', u'lunch', u'NN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jessica', 'brought', 'lunch', 'to', 'the', 'pond', '.']}, {'string': ' She also brought colas to the pond.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (ADVP (RB also)) (VP (VBD brought) (NP (NNS colas)) (PP (TO to) (NP (DT the) (NN pond)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'also', u'also', u'RB'), (u'brought', u'bring', u'VBD'), (u'colas', u'cola', u'NNS'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'also', 'brought', 'colas', 'to', 'the', 'pond', '.']}, {'string': ' They ate and Spike sat by them being a good dog.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VBD ate))) (CC and) (S (NP (NNP Spike)) (VP (VBD sat) (PP (IN by) (S (NP (PRP them)) (VP (VBG being) (NP (DT a) (JJ good) (NN dog))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'ate', u'eat', u'VBD'), (u'and', u'and', u'CC'), (u'Spike', u'Spike', u'NNP'), (u'sat', u'sit', u'VBD'), (u'by', u'by', u'IN'), (u'them', u'they', u'PRP'), (u'being', u'be', u'VBG'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'ate', 'and', 'Spike', 'sat', 'by', 'them', 'being', 'a', 'good', 'dog', '.']}, {'string': ' When they were done eating they packed their lunch up.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP they)) (VP (VBD were) (VP (VBN done) (S (VP (VBG eating) (NP (PRP they)))))))) (VP (VBD packed) (NP (PRP$ their) (NN lunch)) (PRT (RP up))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'done', u'do', u'VBN'), (u'eating', u'eat', u'VBG'), (u'they', u'they', u'PRP'), (u'packed', u'pack', u'VBD'), (u'their', u'they', u'PRP$'), (u'lunch', u'lunch', u'NN'), (u'up', u'up', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'they', 'were', 'done', 'eating', 'they', 'packed', 'their', 'lunch', 'up', '.']}, {'string': ' They put Spike on his leash and they went home.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VBD put) (NP (NP (NNP Spike)) (PP (IN on) (NP (PRP$ his) (NN leash)))))) (CC and) (S (NP (PRP they)) (VP (VBD went) (NP (NN home)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'put', u'put', u'VBD'), (u'Spike', u'Spike', u'NNP'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'leash', u'leash', u'NN'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'put', 'Spike', 'on', 'his', 'leash', 'and', 'they', 'went', 'home', '.']}], 'questions': [{'question': {'string': ' What did Jessica bring to the pond?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Jessica)) (VP (VB bring) (PP (TO to) (NP (DT the) (NN pond))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Jessica', u'Jessica', u'NNP'), (u'bring', u'bring', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Jessica', 'bring', 'to', 'the', 'pond', '?']}, 'answers': [{'string': ' Lunch and colas', 'parse': {'tree': '(ROOT (NP (NN Lunch) (CC and) (NNS colas)))', 'lemma': [(u'Lunch', u'lunch', u'NN'), (u'and', u'and', u'CC'), (u'colas', u'cola', u'NNS')]}, 'tokens': ['Lunch', 'and', 'colas']}, {'string': ' Spike', 'parse': {'tree': '(ROOT (NP (NNP Spike)))', 'lemma': [(u'Spike', u'Spike', u'NNP')]}, 'tokens': ['Spike']}, {'string': ' Bone', 'parse': {'tree': '(ROOT (NP (NNP Bone)))', 'lemma': [(u'Bone', u'Bone', u'NNP')]}, 'tokens': ['Bone']}, {'string': ' Frisbee', 'parse': {'tree': '(ROOT (NP (NNP Frisbee)))', 'lemma': [(u'Frisbee', u'Frisbee', u'NNP')]}, 'tokens': ['Frisbee']}], 'mode': 0}, {'question': {'string': " What is John 's puppy 's name?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (NNP John) (POS 's)) (NN puppy) (POS 's)) (NN name))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'John', u'John', u'NNP'), (u"'s", u"'s", u'POS'), (u'puppy', u'puppy', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'John', "'s", 'puppy', "'s", 'name', '?']}, 'answers': [{'string': ' Pond', 'parse': {'tree': '(ROOT (NP (NNP Pond)))', 'lemma': [(u'Pond', u'Pond', u'NNP')]}, 'tokens': ['Pond']}, {'string': ' Jessica', 'parse': {'tree': '(ROOT (NP (NNP Jessica)))', 'lemma': [(u'Jessica', u'Jessica', u'NNP')]}, 'tokens': ['Jessica']}, {'string': ' John', 'parse': {'tree': '(ROOT (NP (NNP John)))', 'lemma': [(u'John', u'John', u'NNP')]}, 'tokens': ['John']}, {'string': ' Spike', 'parse': {'tree': '(ROOT (NP (NNP Spike)))', 'lemma': [(u'Spike', u'Spike', u'NNP')]}, 'tokens': ['Spike']}], 'mode': 1}, {'question': {'string': ' What did John throw to Spike?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP John)) (VP (VB throw) (PP (TO to) (NP (NNP Spike))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'John', u'John', u'NNP'), (u'throw', u'throw', u'VB'), (u'to', u'to', u'TO'), (u'Spike', u'Spike', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'John', 'throw', 'to', 'Spike', '?']}, 'answers': [{'string': ' Leash', 'parse': {'tree': '(ROOT (NP (NNP Leash)))', 'lemma': [(u'Leash', u'Leash', u'NNP')]}, 'tokens': ['Leash']}, {'string': ' Frisbee and Bone', 'parse': {'tree': '(ROOT (NP (NP (NNP Frisbee)) (CC and) (NP (NNP Bone))))', 'lemma': [(u'Frisbee', u'Frisbee', u'NNP'), (u'and', u'and', u'CC'), (u'Bone', u'Bone', u'NNP')]}, 'tokens': ['Frisbee', 'and', 'Bone']}, {'string': ' Colas', 'parse': {'tree': '(ROOT (NP (NNS Colas)))', 'lemma': [(u'Colas', u'cola', u'NNS')]}, 'tokens': ['Colas']}, {'string': ' Lunch', 'parse': {'tree': '(ROOT (NP (NNP Lunch)))', 'lemma': [(u'Lunch', u'Lunch', u'NNP')]}, 'tokens': ['Lunch']}], 'mode': 0}, {'question': {'string': " Who was John 's best friend?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (NNP John) (POS 's)) (JJS best) (NN friend))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'John', u'John', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'John', "'s", 'best', 'friend', '?']}, 'answers': [{'string': ' Spike', 'parse': {'tree': '(ROOT (NP (NNP Spike)))', 'lemma': [(u'Spike', u'Spike', u'NNP')]}, 'tokens': ['Spike']}, {'string': ' Jessica', 'parse': {'tree': '(ROOT (NP (NNP Jessica)))', 'lemma': [(u'Jessica', u'Jessica', u'NNP')]}, 'tokens': ['Jessica']}, {'string': ' Tom', 'parse': {'tree': '(ROOT (NP (NNP Tom)))', 'lemma': [(u'Tom', u'Tom', u'NNP')]}, 'tokens': ['Tom']}, {'string': ' Thomas', 'parse': {'tree': '(ROOT (NP (NNP Thomas)))', 'lemma': [(u'Thomas', u'Thomas', u'NNP')]}, 'tokens': ['Thomas']}], 'mode': 1}]}
{'sentences': [{'string': ' Here begins the story of the life of Tim.', 'parse': {'tree': '(ROOT (S (NP (RB Here)) (VP (VBZ begins) (NP (NP (DT the) (NN story)) (PP (IN of) (NP (NP (DT the) (NN life)) (PP (IN of) (NP (NNP Tim))))))) (. .)))', 'lemma': [(u'Here', u'here', u'RB'), (u'begins', u'begin', u'VBZ'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'life', u'life', u'NN'), (u'of', u'of', u'IN'), (u'Tim', u'Tim', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Here', 'begins', 'the', 'story', 'of', 'the', 'life', 'of', 'Tim', '.']}, {'string': " Tim 's father was Frank.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Tim) (POS 's)) (NN father)) (VP (VBD was) (NP (NNP Frank))) (. .)))", 'lemma': [(u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN'), (u'was', u'be', u'VBD'), (u'Frank', u'Frank', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', "'s", 'father', 'was', 'Frank', '.']}, {'string': " Frank 's father was Jim.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Frank) (POS 's)) (NN father)) (VP (VBD was) (NP (NNP Jim))) (. .)))", 'lemma': [(u'Frank', u'Frank', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN'), (u'was', u'be', u'VBD'), (u'Jim', u'Jim', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Frank', "'s", 'father', 'was', 'Jim', '.']}, {'string': " Jim 's father was Greg.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Jim) (POS 's)) (NN father)) (VP (VBD was) (NP (NNP Greg))) (. .)))", 'lemma': [(u'Jim', u'Jim', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN'), (u'was', u'be', u'VBD'), (u'Greg', u'Greg', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Jim', "'s", 'father', 'was', 'Greg', '.']}, {'string': " And Greg 's father was Mark.", 'parse': {'tree': "(ROOT (S (CC And) (NP (NP (NNP Greg) (POS 's)) (NN father)) (VP (VBD was) (NP (NNP Mark))) (. .)))", 'lemma': [(u'And', u'and', u'CC'), (u'Greg', u'Greg', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN'), (u'was', u'be', u'VBD'), (u'Mark', u'Mark', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['And', 'Greg', "'s", 'father', 'was', 'Mark', '.']}, {'string': ' These 5 men had ruled Markton for the last 100 years.', 'parse': {'tree': '(ROOT (S (NP (DT These) (CD 5) (NNS men)) (VP (VBD had) (VP (VBN ruled) (NP (NP (NNP Markton)) (PP (IN for) (NP (DT the) (JJ last) (CD 100) (NNS years)))))) (. .)))', 'lemma': [(u'These', u'these', u'DT'), (u'5', u'5', u'CD'), (u'men', u'man', u'NNS'), (u'had', u'have', u'VBD'), (u'ruled', u'rule', u'VBN'), (u'Markton', u'Markton', u'NNP'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'last', u'last', u'JJ'), (u'100', u'100', u'CD'), (u'years', u'year', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['These', '5', 'men', 'had', 'ruled', 'Markton', 'for', 'the', 'last', '100', 'years', '.']}, {'string': ' For the last 20 years, Tim had been the ruler.', 'parse': {'tree': '(ROOT (S (PP (IN For) (NP (DT the) (JJ last) (CD 20) (NNS years))) (, ,) (NP (NNP Tim)) (VP (VBD had) (VP (VBN been) (NP (DT the) (NN ruler)))) (. .)))', 'lemma': [(u'For', u'for', u'IN'), (u'the', u'the', u'DT'), (u'last', u'last', u'JJ'), (u'20', u'20', u'CD'), (u'years', u'year', u'NNS'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'the', u'the', u'DT'), (u'ruler', u'ruler', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['For', 'the', 'last', '20', 'years', ',', 'Tim', 'had', 'been', 'the', 'ruler', '.']}, {'string': ' When Frank died, Tim became the ruler.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Frank)) (VP (VBD died)))) (, ,) (NP (NNP Tim)) (VP (VBD became) (NP (DT the) (NN ruler))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Frank', u'Frank', u'NNP'), (u'died', u'die', u'VBD'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u'became', u'become', u'VBD'), (u'the', u'the', u'DT'), (u'ruler', u'ruler', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Frank', 'died', ',', 'Tim', 'became', 'the', 'ruler', '.']}, {'string': ' In these last 20 years, Tim brought lots of good luck to his people.', 'parse': {'tree': '(ROOT (S (PP (IN In) (NP (DT these) (JJ last) (CD 20) (NNS years))) (, ,) (NP (NNP Tim)) (VP (VBD brought) (NP (NP (NNS lots)) (PP (IN of) (NP (JJ good) (NN luck)))) (PP (TO to) (NP (PRP$ his) (NNS people)))) (. .)))', 'lemma': [(u'In', u'in', u'IN'), (u'these', u'these', u'DT'), (u'last', u'last', u'JJ'), (u'20', u'20', u'CD'), (u'years', u'year', u'NNS'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u'brought', u'bring', u'VBD'), (u'lots', u'lot', u'NNS'), (u'of', u'of', u'IN'), (u'good', u'good', u'JJ'), (u'luck', u'luck', u'NN'), (u'to', u'to', u'TO'), (u'his', u'he', u'PRP$'), (u'people', u'people', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'these', 'last', '20', 'years', ',', 'Tim', 'brought', 'lots', 'of', 'good', 'luck', 'to', 'his', 'people', '.']}, {'string': ' They had never eaten so well.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD had) (ADVP (RB never)) (VP (VBN eaten) (ADVP (RB so) (RB well)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'never', u'never', u'RB'), (u'eaten', u'eat', u'VBN'), (u'so', u'so', u'RB'), (u'well', u'well', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'had', 'never', 'eaten', 'so', 'well', '.']}, {'string': ' Most of his people ate 3 meals a day.', 'parse': {'tree': '(ROOT (S (NP (NP (JJS Most)) (PP (IN of) (NP (PRP$ his) (NNS people)))) (VP (VBD ate) (NP (NP (CD 3) (NNS meals)) (NP (DT a) (NN day)))) (. .)))', 'lemma': [(u'Most', u'most', u'JJS'), (u'of', u'of', u'IN'), (u'his', u'he', u'PRP$'), (u'people', u'people', u'NNS'), (u'ate', u'eat', u'VBD'), (u'3', u'3', u'CD'), (u'meals', u'meal', u'NNS'), (u'a', u'a', u'DT'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Most', 'of', 'his', 'people', 'ate', '3', 'meals', 'a', 'day', '.']}, {'string': ' Recently, Tim had been having trouble with a band of troublemakers led by Horace.', 'parse': {'tree': '(ROOT (S (ADVP (RB Recently)) (, ,) (NP (NNP Tim)) (VP (VBD had) (VP (VBN been) (VP (VBG having) (NP (NP (NN trouble)) (PP (IN with) (NP (NP (DT a) (NN band)) (PP (IN of) (NP (NP (NNS troublemakers)) (VP (VBN led) (PP (IN by) (NP (NNP Horace)))))))))))) (. .)))', 'lemma': [(u'Recently', u'recently', u'RB'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'having', u'have', u'VBG'), (u'trouble', u'trouble', u'NN'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'band', u'band', u'NN'), (u'of', u'of', u'IN'), (u'troublemakers', u'troublemaker', u'NNS'), (u'led', u'lead', u'VBN'), (u'by', u'by', u'IN'), (u'Horace', u'Horace', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Recently', ',', 'Tim', 'had', 'been', 'having', 'trouble', 'with', 'a', 'band', 'of', 'troublemakers', 'led', 'by', 'Horace', '.']}, {'string': ' Tim chose to do whatever he could to get rid of Horace.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD chose) (S (VP (TO to) (VP (VB do) (SBAR (WHNP (WDT whatever)) (S (NP (PRP he)) (VP (MD could) (S (VP (TO to) (VP (VB get) (ADJP (JJ rid)) (PP (IN of) (NP (NNP Horace))))))))))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'chose', u'choose', u'VBD'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'whatever', u'whatever', u'WDT'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'rid', u'rid', u'JJ'), (u'of', u'of', u'IN'), (u'Horace', u'Horace', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'chose', 'to', 'do', 'whatever', 'he', 'could', 'to', 'get', 'rid', 'of', 'Horace', '.']}, {'string': ' So, he got Assassin to get rid of Horace.', 'parse': {'tree': '(ROOT (S (ADVP (RB So)) (, ,) (NP (PRP he)) (VP (VBD got) (S (NP (NNP Assassin)) (VP (TO to) (VP (VB get) (ADJP (JJ rid)) (PP (IN of) (NP (NNP Horace))))))) (. .)))', 'lemma': [(u'So', u'so', u'RB'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'Assassin', u'Assassin', u'NNP'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'rid', u'rid', u'JJ'), (u'of', u'of', u'IN'), (u'Horace', u'Horace', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['So', ',', 'he', 'got', 'Assassin', 'to', 'get', 'rid', 'of', 'Horace', '.']}, {'string': " One night Assassin sneaked into Horace 's bedroom and did away with him.", 'parse': {'tree': "(ROOT (S (NP (CD One) (NN night)) (NP (NNP Assassin)) (VP (VP (VBD sneaked) (PP (IN into) (NP (NP (NNP Horace) (POS 's)) (NN bedroom)))) (CC and) (VP (VBD did) (PRT (RP away)) (PP (IN with) (NP (PRP him))))) (. .)))", 'lemma': [(u'One', u'one', u'CD'), (u'night', u'night', u'NN'), (u'Assassin', u'Assassin', u'NNP'), (u'sneaked', u'sneak', u'VBD'), (u'into', u'into', u'IN'), (u'Horace', u'Horace', u'NNP'), (u"'s", u"'s", u'POS'), (u'bedroom', u'bedroom', u'NN'), (u'and', u'and', u'CC'), (u'did', u'do', u'VBD'), (u'away', u'away', u'RP'), (u'with', u'with', u'IN'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'night', 'Assassin', 'sneaked', 'into', 'Horace', "'s", 'bedroom', 'and', 'did', 'away', 'with', 'him', '.']}, {'string': ' With the bad man gone, all the people had a giant party and sang a song about the greatness of their ruler.', 'parse': {'tree': '(ROOT (S (PP (IN With) (NP (NP (DT the) (JJ bad) (NN man)) (VP (VBN gone)))) (, ,) (NP (PDT all) (DT the) (NNS people)) (VP (VP (VBD had) (NP (DT a) (JJ giant) (NN party))) (CC and) (VP (VBD sang) (NP (DT a) (NN song)) (PP (IN about) (NP (NP (DT the) (NN greatness)) (PP (IN of) (NP (PRP$ their) (NN ruler))))))) (. .)))', 'lemma': [(u'With', u'with', u'IN'), (u'the', u'the', u'DT'), (u'bad', u'bad', u'JJ'), (u'man', u'man', u'NN'), (u'gone', u'go', u'VBN'), (u',', u',', u','), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'people', u'people', u'NNS'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'giant', u'giant', u'JJ'), (u'party', u'party', u'NN'), (u'and', u'and', u'CC'), (u'sang', u'sing', u'VBD'), (u'a', u'a', u'DT'), (u'song', u'song', u'NN'), (u'about', u'about', u'IN'), (u'the', u'the', u'DT'), (u'greatness', u'greatness', u'NN'), (u'of', u'of', u'IN'), (u'their', u'they', u'PRP$'), (u'ruler', u'ruler', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['With', 'the', 'bad', 'man', 'gone', ',', 'all', 'the', 'people', 'had', 'a', 'giant', 'party', 'and', 'sang', 'a', 'song', 'about', 'the', 'greatness', 'of', 'their', 'ruler', '.']}], 'questions': [{'question': {'string': ' Who did the people sing about?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (DT the) (NNS people)) (VP (VB sing) (PRT (RP about)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'people', u'people', u'NNS'), (u'sing', u'sing', u'VB'), (u'about', u'about', u'RP'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'did', 'the', 'people', 'sing', 'about', '?']}, 'answers': [{'string': ' Mark', 'parse': {'tree': '(ROOT (NP (NNP Mark)))', 'lemma': [(u'Mark', u'Mark', u'NNP')]}, 'tokens': ['Mark']}, {'string': ' Horace', 'parse': {'tree': '(ROOT (NP (NNP Horace)))', 'lemma': [(u'Horace', u'Horace', u'NNP')]}, 'tokens': ['Horace']}, {'string': ' Assassin', 'parse': {'tree': '(ROOT (NP (NNP Assassin)))', 'lemma': [(u'Assassin', u'Assassin', u'NNP')]}, 'tokens': ['Assassin']}, {'string': ' Tim', 'parse': {'tree': '(ROOT (NP (NNP Tim)))', 'lemma': [(u'Tim', u'Tim', u'NNP')]}, 'tokens': ['Tim']}], 'mode': 0}, {'question': {'string': " Who was Tim 's grandfather?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (NNP Tim) (POS 's)) (NN grandfather))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandfather', u'grandfather', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'Tim', "'s", 'grandfather', '?']}, 'answers': [{'string': ' Greg', 'parse': {'tree': '(ROOT (NP (NNP Greg)))', 'lemma': [(u'Greg', u'Greg', u'NNP')]}, 'tokens': ['Greg']}, {'string': ' Jim', 'parse': {'tree': '(ROOT (NP (NNP Jim)))', 'lemma': [(u'Jim', u'Jim', u'NNP')]}, 'tokens': ['Jim']}, {'string': ' Frank', 'parse': {'tree': '(ROOT (NP (NNP Frank)))', 'lemma': [(u'Frank', u'Frank', u'NNP')]}, 'tokens': ['Frank']}, {'string': ' Horace', 'parse': {'tree': '(ROOT (NP (NNP Horace)))', 'lemma': [(u'Horace', u'Horace', u'NNP')]}, 'tokens': ['Horace']}], 'mode': 0}, {'question': {'string': ' How many years has Tim ruled?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS years)) (SQ (VBZ has) (NP (NNP Tim)) (VP (VBN ruled))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'many', u'many', u'JJ'), (u'years', u'year', u'NNS'), (u'has', u'have', u'VBZ'), (u'Tim', u'Tim', u'NNP'), (u'ruled', u'rule', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'many', 'years', 'has', 'Tim', 'ruled', '?']}, 'answers': [{'string': ' 20', 'parse': {'tree': '(ROOT (FRAG (NP (CD 20))))', 'lemma': [(u'20', u'20', u'CD')]}, 'tokens': ['20']}, {'string': ' 3', 'parse': {'tree': '(ROOT (FRAG (NP (CD 3))))', 'lemma': [(u'3', u'3', u'CD')]}, 'tokens': ['3']}, {'string': ' 100', 'parse': {'tree': '(ROOT (FRAG (NP (CD 100))))', 'lemma': [(u'100', u'100', u'CD')]}, 'tokens': ['100']}, {'string': ' 5', 'parse': {'tree': '(ROOT (FRAG (NP (CD 5))))', 'lemma': [(u'5', u'5', u'CD')]}, 'tokens': ['5']}], 'mode': 1}, {'question': {'string': " Who was Jim 's father", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NP (NNP Jim) (POS 's)) (NN father)))))", 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'Jim', u'Jim', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN')]}, 'tokens': ['Who', 'was', 'Jim', "'s", 'father']}, 'answers': [{'string': ' Mark', 'parse': {'tree': '(ROOT (NP (NNP Mark)))', 'lemma': [(u'Mark', u'Mark', u'NNP')]}, 'tokens': ['Mark']}, {'string': ' Tim', 'parse': {'tree': '(ROOT (NP (NNP Tim)))', 'lemma': [(u'Tim', u'Tim', u'NNP')]}, 'tokens': ['Tim']}, {'string': ' Markton', 'parse': {'tree': '(ROOT (NP (NNP Markton)))', 'lemma': [(u'Markton', u'Markton', u'NNP')]}, 'tokens': ['Markton']}, {'string': ' Greg', 'parse': {'tree': '(ROOT (NP (NNP Greg)))', 'lemma': [(u'Greg', u'Greg', u'NNP')]}, 'tokens': ['Greg']}], 'mode': 1}]}
{'sentences': [{'string': ' Today, Anne is hungry.', 'parse': {'tree': '(ROOT (S (NP (NN Today)) (, ,) (NP (NNP Anne)) (VP (VBZ is) (ADJP (JJ hungry))) (. .)))', 'lemma': [(u'Today', u'today', u'NN'), (u',', u',', u','), (u'Anne', u'Anne', u'NNP'), (u'is', u'be', u'VBZ'), (u'hungry', u'hungry', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Today', ',', 'Anne', 'is', 'hungry', '.']}, {'string': ' She wants to eat somewhere in town.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ wants) (S (VP (TO to) (VP (VB eat) (ADVP (RB somewhere)) (PP (IN in) (NP (NN town))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'wants', u'want', u'VBZ'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'somewhere', u'somewhere', u'RB'), (u'in', u'in', u'IN'), (u'town', u'town', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'wants', 'to', 'eat', 'somewhere', 'in', 'town', '.']}, {'string': ' There is a popular diner in town.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBZ is) (NP (NP (DT a) (JJ popular) (NN diner)) (PP (IN in) (NP (NN town))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'popular', u'popular', u'JJ'), (u'diner', u'diner', u'NN'), (u'in', u'in', u'IN'), (u'town', u'town', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'is', 'a', 'popular', 'diner', 'in', 'town', '.']}, {'string': ' She goes there and asks them if she can get fries and a chocolate milkshake.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VP (VBZ goes) (ADVP (RB there))) (CC and) (VP (VBZ asks) (NP (PRP them)) (SBAR (IN if) (S (NP (PRP she)) (VP (MD can) (VP (VB get) (NP (NP (NNS fries)) (CC and) (NP (DT a) (NN chocolate) (NN milkshake))))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'goes', u'go', u'VBZ'), (u'there', u'there', u'RB'), (u'and', u'and', u'CC'), (u'asks', u'ask', u'VBZ'), (u'them', u'they', u'PRP'), (u'if', u'if', u'IN'), (u'she', u'she', u'PRP'), (u'can', u'can', u'MD'), (u'get', u'get', u'VB'), (u'fries', u'fries', u'NNS'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'chocolate', u'chocolate', u'NN'), (u'milkshake', u'milkshake', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'goes', 'there', 'and', 'asks', 'them', 'if', 'she', 'can', 'get', 'fries', 'and', 'a', 'chocolate', 'milkshake', '.']}, {'string': ' Her friends come into the diner and sit with her.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (NNS friends)) (VP (VP (VBP come) (PP (IN into) (NP (DT the) (NN diner)))) (CC and) (VP (VBP sit) (PP (IN with) (NP (PRP her))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'come', u'come', u'VBP'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'diner', u'diner', u'NN'), (u'and', u'and', u'CC'), (u'sit', u'sit', u'VBP'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'friends', 'come', 'into', 'the', 'diner', 'and', 'sit', 'with', 'her', '.']}, {'string': ' Their names are Jane, Jake and Dave.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Their) (NNS names)) (VP (VBP are) (NP (NNP Jane) (, ,) (NNP Jake) (CC and) (NNP Dave))) (. .)))', 'lemma': [(u'Their', u'they', u'PRP$'), (u'names', u'name', u'NNS'), (u'are', u'be', u'VBP'), (u'Jane', u'Jane', u'NNP'), (u',', u',', u','), (u'Jake', u'Jake', u'NNP'), (u'and', u'and', u'CC'), (u'Dave', u'Dave', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Their', 'names', 'are', 'Jane', ',', 'Jake', 'and', 'Dave', '.']}, {'string': ' All of them are 15 years old.', 'parse': {'tree': '(ROOT (S (NP (NP (DT All)) (PP (IN of) (NP (PRP them)))) (VP (VBP are) (ADJP (NP (CD 15) (NNS years)) (JJ old))) (. .)))', 'lemma': [(u'All', u'all', u'DT'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'15', u'15', u'CD'), (u'years', u'year', u'NNS'), (u'old', u'old', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['All', 'of', 'them', 'are', '15', 'years', 'old', '.']}, {'string': ' Jake gets a big cheeseburger with onions.', 'parse': {'tree': '(ROOT (S (NP (NNP Jake)) (VP (VBZ gets) (NP (DT a) (JJ big) (NN cheeseburger)) (PP (IN with) (NP (NNS onions)))) (. .)))', 'lemma': [(u'Jake', u'Jake', u'NNP'), (u'gets', u'get', u'VBZ'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'cheeseburger', u'cheeseburger', u'NN'), (u'with', u'with', u'IN'), (u'onions', u'onion', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Jake', 'gets', 'a', 'big', 'cheeseburger', 'with', 'onions', '.']}, {'string': ' Jane wants a vanilla ice cream cone with sprinkles.', 'parse': {'tree': '(ROOT (S (NP (NNP Jane)) (VP (VBZ wants) (NP (NP (DT a) (NN vanilla) (NN ice) (NN cream) (NN cone)) (PP (IN with) (NP (NNP sprinkles))))) (. .)))', 'lemma': [(u'Jane', u'Jane', u'NNP'), (u'wants', u'want', u'VBZ'), (u'a', u'a', u'DT'), (u'vanilla', u'vanilla', u'NN'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cone', u'cone', u'NN'), (u'with', u'with', u'IN'), (u'sprinkles', u'sprinkles', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Jane', 'wants', 'a', 'vanilla', 'ice', 'cream', 'cone', 'with', 'sprinkles', '.']}, {'string': " Dave does n't eat anything.", 'parse': {'tree': "(ROOT (S (NP (NNP Dave)) (VP (VBZ does) (RB n't) (VP (VB eat) (NP (NN anything)))) (. .)))", 'lemma': [(u'Dave', u'Dave', u'NNP'), (u'does', u'do', u'VBZ'), (u"n't", u'not', u'RB'), (u'eat', u'eat', u'VB'), (u'anything', u'anything', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Dave', 'does', "n't", 'eat', 'anything', '.']}, {'string': ' He talks with them instead.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ talks) (PP (IN with) (NP (PRP them))) (ADVP (RB instead))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'talks', u'talk', u'VBZ'), (u'with', u'with', u'IN'), (u'them', u'they', u'PRP'), (u'instead', u'instead', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'talks', 'with', 'them', 'instead', '.']}, {'string': " After they finish eating, they go back to Jane 's house to hang out and play games.", 'parse': {'tree': "(ROOT (S (SBAR (IN After) (S (NP (PRP they)) (VP (VBP finish) (S (VP (VBG eating)))))) (, ,) (NP (PRP they)) (VP (VBP go) (PRT (RP back)) (PP (TO to) (NP (NP (NNP Jane) (POS 's)) (NN house) (S (VP (TO to) (VP (VP (VB hang) (PRT (RP out))) (CC and) (VP (VB play) (NP (NNS games))))))))) (. .)))", 'lemma': [(u'After', u'after', u'IN'), (u'they', u'they', u'PRP'), (u'finish', u'finish', u'VBP'), (u'eating', u'eat', u'VBG'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'go', u'go', u'VBP'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'Jane', u'Jane', u'NNP'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'to', u'to', u'TO'), (u'hang', u'hang', u'VB'), (u'out', u'out', u'RP'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'games', u'game', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'they', 'finish', 'eating', ',', 'they', 'go', 'back', 'to', 'Jane', "'s", 'house', 'to', 'hang', 'out', 'and', 'play', 'games', '.']}, {'string': ' Dave wins most of the puzzle games.', 'parse': {'tree': '(ROOT (S (NP (NNP Dave)) (VP (VBZ wins) (NP (NP (JJS most)) (PP (IN of) (NP (DT the) (NN puzzle) (NNS games))))) (. .)))', 'lemma': [(u'Dave', u'Dave', u'NNP'), (u'wins', u'win', u'VBZ'), (u'most', u'most', u'JJS'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'puzzle', u'puzzle', u'NN'), (u'games', u'game', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Dave', 'wins', 'most', 'of', 'the', 'puzzle', 'games', '.']}, {'string': ' Jane beats them at a few.', 'parse': {'tree': '(ROOT (S (NP (NNP Jane)) (VP (VBZ beats) (NP (PRP them)) (PP (IN at) (NP (DT a) (JJ few)))) (. .)))', 'lemma': [(u'Jane', u'Jane', u'NNP'), (u'beats', u'beat', u'VBZ'), (u'them', u'they', u'PRP'), (u'at', u'at', u'IN'), (u'a', u'a', u'DT'), (u'few', u'few', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Jane', 'beats', 'them', 'at', 'a', 'few', '.']}, {'string': " They 're racing games.", 'parse': {'tree': "(ROOT (S (NP (PRP They)) (VP (VBP 're) (VP (VBG racing) (NP (NNS games)))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u"'re", u'be', u'VBP'), (u'racing', u'race', u'VBG'), (u'games', u'game', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', "'re", 'racing', 'games', '.']}, {'string': ' Dave leaves after an hour.', 'parse': {'tree': '(ROOT (S (NP (NNP Dave)) (VP (VBZ leaves) (PP (IN after) (NP (DT an) (NN hour)))) (. .)))', 'lemma': [(u'Dave', u'Dave', u'NNP'), (u'leaves', u'leave', u'VBZ'), (u'after', u'after', u'IN'), (u'an', u'a', u'DT'), (u'hour', u'hour', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Dave', 'leaves', 'after', 'an', 'hour', '.']}, {'string': ' He needs to go do his reading homework.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ needs) (S (VP (TO to) (VP (VB go) (VP (VB do) (NP (PRP$ his) (NN reading) (NN homework))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'needs', u'need', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'do', u'do', u'VB'), (u'his', u'he', u'PRP$'), (u'reading', u'reading', u'NN'), (u'homework', u'homework', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'needs', 'to', 'go', 'do', 'his', 'reading', 'homework', '.']}, {'string': " Jake and Anne leave that evening because it 's a school night.", 'parse': {'tree': "(ROOT (S (NP (NNP Jake) (CC and) (NNP Anne)) (VP (VBP leave) (NP (DT that) (NN evening)) (SBAR (IN because) (S (NP (PRP it)) (VP (VBZ 's) (NP (DT a) (NN school) (NN night)))))) (. .)))", 'lemma': [(u'Jake', u'Jake', u'NNP'), (u'and', u'and', u'CC'), (u'Anne', u'Anne', u'NNP'), (u'leave', u'leave', u'VBP'), (u'that', u'that', u'DT'), (u'evening', u'evening', u'NN'), (u'because', u'because', u'IN'), (u'it', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'school', u'school', u'NN'), (u'night', u'night', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jake', 'and', 'Anne', 'leave', 'that', 'evening', 'because', 'it', "'s", 'a', 'school', 'night', '.']}, {'string': ' They all promise to meet up again the next day to hang out after school.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (DT all)) (VP (VBP promise) (S (VP (TO to) (VP (VB meet) (ADVP (RB up) (RB again)) (NP (DT the) (JJ next) (NN day) (S (VP (TO to) (VP (VB hang) (PRT (RP out)) (PP (IN after) (NP (NN school))))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'all', u'all', u'DT'), (u'promise', u'promise', u'VBP'), (u'to', u'to', u'TO'), (u'meet', u'meet', u'VB'), (u'up', u'up', u'RB'), (u'again', u'again', u'RB'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u'to', u'to', u'TO'), (u'hang', u'hang', u'VB'), (u'out', u'out', u'RP'), (u'after', u'after', u'IN'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'all', 'promise', 'to', 'meet', 'up', 'again', 'the', 'next', 'day', 'to', 'hang', 'out', 'after', 'school', '.']}], 'questions': [{'question': {'string': ' What games did Jane beat the others at?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NNS games)) (SQ (VBD did) (NP (NNP Jane)) (VP (VB beat) (NP (DT the) (NNS others)) (PP (IN at)))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'games', u'game', u'NNS'), (u'did', u'do', u'VBD'), (u'Jane', u'Jane', u'NNP'), (u'beat', u'beat', u'VB'), (u'the', u'the', u'DT'), (u'others', u'other', u'NNS'), (u'at', u'at', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'games', 'did', 'Jane', 'beat', 'the', 'others', 'at', '?']}, 'answers': [{'string': ' racing games', 'parse': {'tree': '(ROOT (NP (NN racing) (NNS games)))', 'lemma': [(u'racing', u'racing', u'NN'), (u'games', u'game', u'NNS')]}, 'tokens': ['racing', 'games']}, {'string': ' cooking games', 'parse': {'tree': '(ROOT (NP (JJ cooking) (NNS games)))', 'lemma': [(u'cooking', u'cooking', u'JJ'), (u'games', u'game', u'NNS')]}, 'tokens': ['cooking', 'games']}, {'string': ' puzzle games', 'parse': {'tree': '(ROOT (S (VP (VB puzzle) (NP (NNS games)))))', 'lemma': [(u'puzzle', u'puzzle', u'VB'), (u'games', u'game', u'NNS')]}, 'tokens': ['puzzle', 'games']}, {'string': ' battle games', 'parse': {'tree': '(ROOT (NP (NN battle) (NNS games)))', 'lemma': [(u'battle', u'battle', u'NN'), (u'games', u'game', u'NNS')]}, 'tokens': ['battle', 'games']}], 'mode': 0}, {'question': {'string': ' What does Jake eat at the diner?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Jake)) (VP (VB eat) (PP (IN at) (NP (DT the) (NN diner))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Jake', u'Jake', u'NNP'), (u'eat', u'eat', u'VB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'diner', u'diner', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Jake', 'eat', 'at', 'the', 'diner', '?']}, 'answers': [{'string': ' a cheeseburger with onions', 'parse': {'tree': '(ROOT (NP (NP (DT a) (NN cheeseburger)) (PP (IN with) (NP (NNS onions)))))', 'lemma': [(u'a', u'a', u'DT'), (u'cheeseburger', u'cheeseburger', u'NN'), (u'with', u'with', u'IN'), (u'onions', u'onion', u'NNS')]}, 'tokens': ['a', 'cheeseburger', 'with', 'onions']}, {'string': ' an onion ring basket', 'parse': {'tree': '(ROOT (S (NP (DT an) (NN onion)) (VP (VBP ring) (NP (NN basket)))))', 'lemma': [(u'an', u'a', u'DT'), (u'onion', u'onion', u'NN'), (u'ring', u'ring', u'VBP'), (u'basket', u'basket', u'NN')]}, 'tokens': ['an', 'onion', 'ring', 'basket']}, {'string': ' fish and chips', 'parse': {'tree': '(ROOT (NP (NN fish) (CC and) (NNS chips)))', 'lemma': [(u'fish', u'fish', u'NN'), (u'and', u'and', u'CC'), (u'chips', u'chip', u'NNS')]}, 'tokens': ['fish', 'and', 'chips']}, {'string': ' a cheese sandwich', 'parse': {'tree': '(ROOT (NP (DT a) (NN cheese) (NN sandwich)))', 'lemma': [(u'a', u'a', u'DT'), (u'cheese', u'cheese', u'NN'), (u'sandwich', u'sandwich', u'NN')]}, 'tokens': ['a', 'cheese', 'sandwich']}], 'mode': 1}, {'question': {'string': " Why does Dave leave Jane 's house after only an hour?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBZ does) (NP (NNP Dave)) (VP (VB leave) (NP (NP (NNP Jane) (POS 's)) (NN house)) (PP (IN after) (NP (QP (RB only) (DT an) (NN hour)))))) (. ?)))", 'lemma': [(u'Why', u'why', u'WRB'), (u'does', u'do', u'VBZ'), (u'Dave', u'Dave', u'NNP'), (u'leave', u'leave', u'VB'), (u'Jane', u'Jane', u'NNP'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'after', u'after', u'IN'), (u'only', u'only', u'RB'), (u'an', u'a', u'DT'), (u'hour', u'hour', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'does', 'Dave', 'leave', 'Jane', "'s", 'house', 'after', 'only', 'an', 'hour', '?']}, 'answers': [{'string': ' he has to do his reading homework', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBZ has) (S (VP (TO to) (VP (VB do) (NP (PRP$ his) (NN reading) (NN homework))))))))', 'lemma': [(u'he', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'his', u'he', u'PRP$'), (u'reading', u'reading', u'NN'), (u'homework', u'homework', u'NN')]}, 'tokens': ['he', 'has', 'to', 'do', 'his', 'reading', 'homework']}, {'string': ' he has piano practice', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBZ has) (NP (NN piano) (NN practice)))))', 'lemma': [(u'he', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'piano', u'piano', u'NN'), (u'practice', u'practice', u'NN')]}, 'tokens': ['he', 'has', 'piano', 'practice']}, {'string': " the others do n't like him", 'parse': {'tree': "(ROOT (S (NP (DT the) (NNS others)) (VP (VBP do) (RB n't) (VP (VB like) (NP (PRP him))))))", 'lemma': [(u'the', u'the', u'DT'), (u'others', u'other', u'NNS'), (u'do', u'do', u'VBP'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'him', u'he', u'PRP')]}, 'tokens': ['the', 'others', 'do', "n't", 'like', 'him']}, {'string': ' his mother is waiting for him', 'parse': {'tree': '(ROOT (S (NP (PRP$ his) (NN mother)) (VP (VBZ is) (VP (VBG waiting) (PP (IN for) (NP (PRP him)))))))', 'lemma': [(u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'is', u'be', u'VBZ'), (u'waiting', u'wait', u'VBG'), (u'for', u'for', u'IN'), (u'him', u'he', u'PRP')]}, 'tokens': ['his', 'mother', 'is', 'waiting', 'for', 'him']}], 'mode': 0}, {'question': {'string': ' What did they promise to do the next day?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (PRP they)) (VP (VB promise) (S (VP (TO to) (VP (VB do) (NP (DT the) (JJ next) (NN day))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'they', u'they', u'PRP'), (u'promise', u'promise', u'VB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'they', 'promise', 'to', 'do', 'the', 'next', 'day', '?']}, 'answers': [{'string': " hang out at Jane 's house", 'parse': {'tree': "(ROOT (S (VP (VB hang) (PRT (RP out)) (PP (IN at) (NP (NP (NNP Jane) (POS 's)) (NN house))))))", 'lemma': [(u'hang', u'hang', u'VB'), (u'out', u'out', u'RP'), (u'at', u'at', u'IN'), (u'Jane', u'Jane', u'NNP'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN')]}, 'tokens': ['hang', 'out', 'at', 'Jane', "'s", 'house']}, {'string': ' hang out during school', 'parse': {'tree': '(ROOT (S (VP (VB hang) (PRT (RP out)) (PP (IN during) (NP (NN school))))))', 'lemma': [(u'hang', u'hang', u'VB'), (u'out', u'out', u'RP'), (u'during', u'during', u'IN'), (u'school', u'school', u'NN')]}, 'tokens': ['hang', 'out', 'during', 'school']}, {'string': ' hang out at the diner', 'parse': {'tree': '(ROOT (S (VP (VB hang) (PRT (RP out)) (PP (IN at) (NP (DT the) (NN diner))))))', 'lemma': [(u'hang', u'hang', u'VB'), (u'out', u'out', u'RP'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'diner', u'diner', u'NN')]}, 'tokens': ['hang', 'out', 'at', 'the', 'diner']}, {'string': ' hang out after school', 'parse': {'tree': '(ROOT (S (VP (VB hang) (PRT (RP out)) (PP (IN after) (NP (NN school))))))', 'lemma': [(u'hang', u'hang', u'VB'), (u'out', u'out', u'RP'), (u'after', u'after', u'IN'), (u'school', u'school', u'NN')]}, 'tokens': ['hang', 'out', 'after', 'school']}], 'mode': 1}]}
{'sentences': [{'string': ' The first grade class went on a bus to visit a farm.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ first) (NN grade) (NN class)) (VP (VBD went) (PP (IN on) (NP (DT a) (NN bus))) (S (VP (TO to) (VP (VB visit) (NP (DT a) (NN farm)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'first', u'first', u'JJ'), (u'grade', u'grade', u'NN'), (u'class', u'class', u'NN'), (u'went', u'go', u'VBD'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'bus', u'bus', u'NN'), (u'to', u'to', u'TO'), (u'visit', u'visit', u'VB'), (u'a', u'a', u'DT'), (u'farm', u'farm', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'first', 'grade', 'class', 'went', 'on', 'a', 'bus', 'to', 'visit', 'a', 'farm', '.']}, {'string': ' The farm was a long ways from their school.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN farm)) (VP (VBD was) (NP (NP (DT a) (JJ long) (NNS ways)) (PP (IN from) (NP (PRP$ their) (NN school))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'farm', u'farm', u'NN'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'long', u'long', u'JJ'), (u'ways', u'way', u'NNS'), (u'from', u'from', u'IN'), (u'their', u'they', u'PRP$'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'farm', 'was', 'a', 'long', 'ways', 'from', 'their', 'school', '.']}, {'string': ' The farm was also far away from any other farms or houses.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN farm)) (VP (VBD was) (ADVP (RB also)) (ADVP (RB far) (RB away)) (PP (IN from) (NP (DT any) (JJ other) (NNS farms) (CC or) (NNS houses)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'farm', u'farm', u'NN'), (u'was', u'be', u'VBD'), (u'also', u'also', u'RB'), (u'far', u'far', u'RB'), (u'away', u'away', u'RB'), (u'from', u'from', u'IN'), (u'any', u'any', u'DT'), (u'other', u'other', u'JJ'), (u'farms', u'farm', u'NNS'), (u'or', u'or', u'CC'), (u'houses', u'house', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'farm', 'was', 'also', 'far', 'away', 'from', 'any', 'other', 'farms', 'or', 'houses', '.']}, {'string': ' The farmers who lived there were the Nixon family.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (NNS farmers)) (SBAR (WHNP (WP who)) (S (VP (VBD lived) (ADVP (RB there)))))) (VP (VBD were) (NP (DT the) (NNP Nixon) (NN family))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'farmers', u'farmer', u'NNS'), (u'who', u'who', u'WP'), (u'lived', u'live', u'VBD'), (u'there', u'there', u'RB'), (u'were', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'Nixon', u'Nixon', u'NNP'), (u'family', u'family', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'farmers', 'who', 'lived', 'there', 'were', 'the', 'Nixon', 'family', '.']}, {'string': ' They grew corn.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD grew) (NP (NN corn))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'grew', u'grow', u'VBD'), (u'corn', u'corn', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'grew', 'corn', '.']}, {'string': ' Sometimes when the weather was right, they would plant wheat, too.', 'parse': {'tree': '(ROOT (S (SBAR (ADVP (RB Sometimes)) (WHADVP (WRB when)) (S (NP (DT the) (NN weather)) (VP (VBD was) (ADJP (JJ right))))) (, ,) (NP (PRP they)) (VP (MD would) (VP (VB plant) (NP (NN wheat)) (, ,) (ADVP (RB too)))) (. .)))', 'lemma': [(u'Sometimes', u'sometimes', u'RB'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'weather', u'weather', u'NN'), (u'was', u'be', u'VBD'), (u'right', u'right', u'JJ'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'plant', u'plant', u'VB'), (u'wheat', u'wheat', u'NN'), (u',', u',', u','), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Sometimes', 'when', 'the', 'weather', 'was', 'right', ',', 'they', 'would', 'plant', 'wheat', ',', 'too', '.']}, {'string': ' The fields were so large that the class could not see where they ended.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS fields)) (VP (VBD were) (ADJP (RB so) (JJ large)) (SBAR (IN that) (S (NP (DT the) (NN class)) (VP (MD could) (RB not) (VP (VB see) (SBAR (WHADVP (WRB where)) (S (NP (PRP they)) (VP (VBD ended))))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'fields', u'field', u'NNS'), (u'were', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'large', u'large', u'JJ'), (u'that', u'that', u'IN'), (u'the', u'the', u'DT'), (u'class', u'class', u'NN'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'see', u'see', u'VB'), (u'where', u'where', u'WRB'), (u'they', u'they', u'PRP'), (u'ended', u'end', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'fields', 'were', 'so', 'large', 'that', 'the', 'class', 'could', 'not', 'see', 'where', 'they', 'ended', '.']}, {'string': ' Mr. Nixon gave all of the children a long ride in the fields on his tractor.', 'parse': {'tree': '(ROOT (S (NP (NNP Mr.) (NNP Nixon)) (VP (VBD gave) (NP (NP (DT all)) (PP (IN of) (NP (DT the) (NNS children)))) (NP (NP (DT a) (JJ long) (NN ride)) (PP (IN in) (NP (NP (DT the) (NNS fields)) (PP (IN on) (NP (PRP$ his) (NN tractor))))))) (. .)))', 'lemma': [(u'Mr.', u'Mr.', u'NNP'), (u'Nixon', u'Nixon', u'NNP'), (u'gave', u'give', u'VBD'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'children', u'child', u'NNS'), (u'a', u'a', u'DT'), (u'long', u'long', u'JJ'), (u'ride', u'ride', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'fields', u'field', u'NNS'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'tractor', u'tractor', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Mr.', 'Nixon', 'gave', 'all', 'of', 'the', 'children', 'a', 'long', 'ride', 'in', 'the', 'fields', 'on', 'his', 'tractor', '.']}, {'string': ' The Nixon family also had a lot of farm animals.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNP Nixon) (NN family)) (ADVP (RB also)) (VP (VBD had) (NP (NP (DT a) (NN lot)) (PP (IN of) (NP (NN farm) (NNS animals))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'Nixon', u'Nixon', u'NNP'), (u'family', u'family', u'NN'), (u'also', u'also', u'RB'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'of', u'of', u'IN'), (u'farm', u'farm', u'NN'), (u'animals', u'animal', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'Nixon', 'family', 'also', 'had', 'a', 'lot', 'of', 'farm', 'animals', '.']}, {'string': ' In the red barn next to their home, they kept a few cows and horses.', 'parse': {'tree': '(ROOT (S (PP (IN In) (NP (NP (DT the) (JJ red) (NN barn)) (ADVP (JJ next) (PP (TO to) (NP (PRP$ their) (NN home)))))) (, ,) (NP (PRP they)) (VP (VBD kept) (NP (DT a) (JJ few) (NNS cows) (CC and) (NNS horses))) (. .)))', 'lemma': [(u'In', u'in', u'IN'), (u'the', u'the', u'DT'), (u'red', u'red', u'JJ'), (u'barn', u'barn', u'NN'), (u'next', u'next', u'JJ'), (u'to', u'to', u'TO'), (u'their', u'they', u'PRP$'), (u'home', u'home', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'kept', u'keep', u'VBD'), (u'a', u'a', u'DT'), (u'few', u'few', u'JJ'), (u'cows', u'cow', u'NNS'), (u'and', u'and', u'CC'), (u'horses', u'horse', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'the', 'red', 'barn', 'next', 'to', 'their', 'home', ',', 'they', 'kept', 'a', 'few', 'cows', 'and', 'horses', '.']}, {'string': ' Everyone fed hay to some of the cows.', 'parse': {'tree': '(ROOT (S (NP (NN Everyone)) (VP (VBD fed) (NP (NN hay)) (PP (TO to) (NP (NP (DT some)) (PP (IN of) (NP (DT the) (NNS cows)))))) (. .)))', 'lemma': [(u'Everyone', u'everyone', u'NN'), (u'fed', u'feed', u'VBD'), (u'hay', u'hay', u'NN'), (u'to', u'to', u'TO'), (u'some', u'some', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'cows', u'cow', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Everyone', 'fed', 'hay', 'to', 'some', 'of', 'the', 'cows', '.']}, {'string': ' The farmers got milk from their cows.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS farmers)) (VP (VBD got) (NP (NN milk)) (PP (IN from) (NP (PRP$ their) (NNS cows)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'farmers', u'farmer', u'NNS'), (u'got', u'get', u'VBD'), (u'milk', u'milk', u'NN'), (u'from', u'from', u'IN'), (u'their', u'they', u'PRP$'), (u'cows', u'cow', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'farmers', 'got', 'milk', 'from', 'their', 'cows', '.']}, {'string': ' Some of the class got small bottles of fresh milk to take home with them.', 'parse': {'tree': '(ROOT (S (NP (NP (DT Some)) (PP (IN of) (NP (DT the) (NN class)))) (VP (VBD got) (NP (NP (JJ small) (NNS bottles)) (PP (IN of) (NP (JJ fresh) (NN milk)))) (S (VP (TO to) (VP (VB take) (NP (NN home)) (PP (IN with) (NP (PRP them))))))) (. .)))', 'lemma': [(u'Some', u'some', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'class', u'class', u'NN'), (u'got', u'get', u'VBD'), (u'small', u'small', u'JJ'), (u'bottles', u'bottle', u'NNS'), (u'of', u'of', u'IN'), (u'fresh', u'fresh', u'JJ'), (u'milk', u'milk', u'NN'), (u'to', u'to', u'TO'), (u'take', u'take', u'VB'), (u'home', u'home', u'NN'), (u'with', u'with', u'IN'), (u'them', u'they', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Some', 'of', 'the', 'class', 'got', 'small', 'bottles', 'of', 'fresh', 'milk', 'to', 'take', 'home', 'with', 'them', '.']}, {'string': ' All the kids got to ride on the big brown horses the Nixons had.', 'parse': {'tree': '(ROOT (S (S (NP (PDT All) (DT the) (NNS kids)) (VP (VBD got) (S (VP (TO to) (VP (VB ride) (PP (IN on) (NP (DT the) (JJ big) (JJ brown) (NNS horses)))))))) (NP (DT the) (NNPS Nixons)) (VP (VBD had)) (. .)))', 'lemma': [(u'All', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'kids', u'kid', u'NNS'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'ride', u'ride', u'VB'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'big', u'big', u'JJ'), (u'brown', u'brown', u'JJ'), (u'horses', u'horse', u'NNS'), (u'the', u'the', u'DT'), (u'Nixons', u'Nixons', u'NNPS'), (u'had', u'have', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['All', 'the', 'kids', 'got', 'to', 'ride', 'on', 'the', 'big', 'brown', 'horses', 'the', 'Nixons', 'had', '.']}, {'string': ' They went up into the nearby hills, where they could look down on the farm below.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD went) (PRT (RP up)) (PP (IN into) (NP (DT the) (JJ nearby) (NNS hills))) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (PRP they)) (VP (MD could) (VP (VB look) (PRT (RP down)) (PP (IN on) (NP (DT the) (NN farm))) (ADVP (RB below))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'up', u'up', u'RP'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'nearby', u'nearby', u'JJ'), (u'hills', u'hill', u'NNS'), (u',', u',', u','), (u'where', u'where', u'WRB'), (u'they', u'they', u'PRP'), (u'could', u'could', u'MD'), (u'look', u'look', u'VB'), (u'down', u'down', u'RP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'farm', u'farm', u'NN'), (u'below', u'below', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'went', 'up', 'into', 'the', 'nearby', 'hills', ',', 'where', 'they', 'could', 'look', 'down', 'on', 'the', 'farm', 'below', '.']}, {'string': ' Around the farmyard there were many goats and chickens, who wandered around as they wished.', 'parse': {'tree': '(ROOT (S (PP (IN Around) (NP (DT the) (NN farmyard))) (NP (EX there)) (VP (VBD were) (NP (NP (JJ many) (NNS goats) (CC and) (NNS chickens)) (, ,) (SBAR (WHNP (WP who)) (S (VP (VBD wandered) (PRT (RP around)) (SBAR (IN as) (S (NP (PRP they)) (VP (VBD wished))))))))) (. .)))', 'lemma': [(u'Around', u'around', u'IN'), (u'the', u'the', u'DT'), (u'farmyard', u'farmyard', u'NN'), (u'there', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'many', u'many', u'JJ'), (u'goats', u'goat', u'NNS'), (u'and', u'and', u'CC'), (u'chickens', u'chicken', u'NNS'), (u',', u',', u','), (u'who', u'who', u'WP'), (u'wandered', u'wander', u'VBD'), (u'around', u'around', u'RP'), (u'as', u'as', u'IN'), (u'they', u'they', u'PRP'), (u'wished', u'wish', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Around', 'the', 'farmyard', 'there', 'were', 'many', 'goats', 'and', 'chickens', ',', 'who', 'wandered', 'around', 'as', 'they', 'wished', '.']}, {'string': ' The Nixon children liked to play with their goats, feed them peanut shells and pet them, like the first grade kids did with their dogs and cats.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNP Nixon) (NNS children)) (VP (VBD liked) (S (VP (TO to) (VP (VP (VB play) (PP (IN with) (NP (PRP$ their) (NNS goats)))) (, ,) (VP (VB feed) (S (NP (PRP them)) (NP (NN peanut) (NNS shells)))) (CC and) (VP (VB pet) (NP (PRP them)))))) (, ,) (SBAR (IN like) (S (NP (DT the) (JJ first) (NN grade) (NNS kids)) (VP (VBD did) (PP (IN with) (NP (PRP$ their) (NNS dogs) (CC and) (NNS cats))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'Nixon', u'Nixon', u'NNP'), (u'children', u'child', u'NNS'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'their', u'they', u'PRP$'), (u'goats', u'goat', u'NNS'), (u',', u',', u','), (u'feed', u'feed', u'VB'), (u'them', u'they', u'PRP'), (u'peanut', u'peanut', u'NN'), (u'shells', u'shell', u'NNS'), (u'and', u'and', u'CC'), (u'pet', u'pet', u'VB'), (u'them', u'they', u'PRP'), (u',', u',', u','), (u'like', u'like', u'IN'), (u'the', u'the', u'DT'), (u'first', u'first', u'JJ'), (u'grade', u'grade', u'NN'), (u'kids', u'kid', u'NNS'), (u'did', u'do', u'VBD'), (u'with', u'with', u'IN'), (u'their', u'they', u'PRP$'), (u'dogs', u'dog', u'NNS'), (u'and', u'and', u'CC'), (u'cats', u'cat', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'Nixon', 'children', 'liked', 'to', 'play', 'with', 'their', 'goats', ',', 'feed', 'them', 'peanut', 'shells', 'and', 'pet', 'them', ',', 'like', 'the', 'first', 'grade', 'kids', 'did', 'with', 'their', 'dogs', 'and', 'cats', '.']}, {'string': ' The smallest tried to bump the children with their hard heads and tiny horns!', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJS smallest)) (VP (VBD tried) (S (VP (TO to) (VP (VB bump) (NP (DT the) (NNS children)) (PP (IN with) (NP (NP (PRP$ their) (JJ hard) (NNS heads)) (CC and) (NP (JJ tiny) (NNS horns)))))))) (. !)))', 'lemma': [(u'The', u'the', u'DT'), (u'smallest', u'smallest', u'JJS'), (u'tried', u'try', u'VBD'), (u'to', u'to', u'TO'), (u'bump', u'bump', u'VB'), (u'the', u'the', u'DT'), (u'children', u'child', u'NNS'), (u'with', u'with', u'IN'), (u'their', u'they', u'PRP$'), (u'hard', u'hard', u'JJ'), (u'heads', u'head', u'NNS'), (u'and', u'and', u'CC'), (u'tiny', u'tiny', u'JJ'), (u'horns', u'horn', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['The', 'smallest', 'tried', 'to', 'bump', 'the', 'children', 'with', 'their', 'hard', 'heads', 'and', 'tiny', 'horns', '!']}, {'string': ' When it was almost dark, the school kids got back on the bus to go home.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP it)) (VP (VBD was) (ADJP (RB almost) (JJ dark))))) (, ,) (NP (DT the) (NN school) (NNS kids)) (VP (VBD got) (ADVP (RB back)) (PP (IN on) (NP (DT the) (NN bus))) (S (VP (TO to) (VP (VB go) (NP (NN home)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'almost', u'almost', u'RB'), (u'dark', u'dark', u'JJ'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'school', u'school', u'NN'), (u'kids', u'kid', u'NNS'), (u'got', u'get', u'VBD'), (u'back', u'back', u'RB'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'bus', u'bus', u'NN'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'it', 'was', 'almost', 'dark', ',', 'the', 'school', 'kids', 'got', 'back', 'on', 'the', 'bus', 'to', 'go', 'home', '.']}, {'string': ' They were a little sad to leave the fun life of the farm children.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (ADJP (NP (DT a) (RB little)) (JJ sad)) (S (VP (TO to) (VP (VB leave) (NP (NP (DT the) (NN fun) (NN life)) (PP (IN of) (NP (DT the) (NN farm) (NNS children)))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'little', u'little', u'RB'), (u'sad', u'sad', u'JJ'), (u'to', u'to', u'TO'), (u'leave', u'leave', u'VB'), (u'the', u'the', u'DT'), (u'fun', u'fun', u'NN'), (u'life', u'life', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'farm', u'farm', u'NN'), (u'children', u'child', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'a', 'little', 'sad', 'to', 'leave', 'the', 'fun', 'life', 'of', 'the', 'farm', 'children', '.']}, {'string': ' But they brought back stories for all the rest of the school to hear.', 'parse': {'tree': '(ROOT (S (CC But) (NP (PRP they)) (VP (VBD brought) (PRT (RP back)) (NP (NP (NNS stories)) (PP (IN for) (NP (NP (PDT all) (DT the) (NN rest)) (PP (IN of) (NP (DT the) (NN school)))))) (S (VP (TO to) (VP (VB hear))))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'they', u'they', u'PRP'), (u'brought', u'bring', u'VBD'), (u'back', u'back', u'RP'), (u'stories', u'story', u'NNS'), (u'for', u'for', u'IN'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'rest', u'rest', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'school', u'school', u'NN'), (u'to', u'to', u'TO'), (u'hear', u'hear', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'they', 'brought', 'back', 'stories', 'for', 'all', 'the', 'rest', 'of', 'the', 'school', 'to', 'hear', '.']}], 'questions': [{'question': {'string': ' What did some of the class get to take home, other than stories?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NP (DT some)) (PP (IN of) (NP (DT the) (NN class)))) (VP (VB get) (S (VP (TO to) (VP (VB take) (NP (NP (NN home)) (, ,) (NP (NP (JJ other)) (PP (IN than) (NP (NNS stories)))))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'some', u'some', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'class', u'class', u'NN'), (u'get', u'get', u'VB'), (u'to', u'to', u'TO'), (u'take', u'take', u'VB'), (u'home', u'home', u'NN'), (u',', u',', u','), (u'other', u'other', u'JJ'), (u'than', u'than', u'IN'), (u'stories', u'story', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'some', 'of', 'the', 'class', 'get', 'to', 'take', 'home', ',', 'other', 'than', 'stories', '?']}, 'answers': [{'string': ' corn', 'parse': {'tree': '(ROOT (NP (NN corn)))', 'lemma': [(u'corn', u'corn', u'NN')]}, 'tokens': ['corn']}, {'string': ' peanuts', 'parse': {'tree': '(ROOT (NP (NNS peanuts)))', 'lemma': [(u'peanuts', u'peanut', u'NNS')]}, 'tokens': ['peanuts']}, {'string': ' chickens', 'parse': {'tree': '(ROOT (NP (NNS chickens)))', 'lemma': [(u'chickens', u'chicken', u'NNS')]}, 'tokens': ['chickens']}, {'string': ' milk', 'parse': {'tree': '(ROOT (NP (NN milk)))', 'lemma': [(u'milk', u'milk', u'NN')]}, 'tokens': ['milk']}], 'mode': 1}, {'question': {'string': ' What animals tried to bump the children with their heads?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NNS animals)) (SQ (VP (VBD tried) (S (VP (TO to) (VP (VB bump) (NP (DT the) (NNS children)) (PP (IN with) (NP (PRP$ their) (NNS heads)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'animals', u'animal', u'NNS'), (u'tried', u'try', u'VBD'), (u'to', u'to', u'TO'), (u'bump', u'bump', u'VB'), (u'the', u'the', u'DT'), (u'children', u'child', u'NNS'), (u'with', u'with', u'IN'), (u'their', u'they', u'PRP$'), (u'heads', u'head', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'animals', 'tried', 'to', 'bump', 'the', 'children', 'with', 'their', 'heads', '?']}, 'answers': [{'string': ' chickens', 'parse': {'tree': '(ROOT (NP (NNS chickens)))', 'lemma': [(u'chickens', u'chicken', u'NNS')]}, 'tokens': ['chickens']}, {'string': ' goats', 'parse': {'tree': '(ROOT (NP (NNS goats)))', 'lemma': [(u'goats', u'goat', u'NNS')]}, 'tokens': ['goats']}, {'string': ' cows', 'parse': {'tree': '(ROOT (NP (NNS cows)))', 'lemma': [(u'cows', u'cow', u'NNS')]}, 'tokens': ['cows']}, {'string': ' sheep', 'parse': {'tree': '(ROOT (NP (NN sheep)))', 'lemma': [(u'sheep', u'sheep', u'NN')]}, 'tokens': ['sheep']}], 'mode': 0}, {'question': {'string': ' What did the Nixon family grow on their farm?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (DT the) (NNP Nixon) (NN family)) (VP (VB grow) (PP (IN on) (NP (PRP$ their) (NN farm))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'Nixon', u'Nixon', u'NNP'), (u'family', u'family', u'NN'), (u'grow', u'grow', u'VB'), (u'on', u'on', u'IN'), (u'their', u'they', u'PRP$'), (u'farm', u'farm', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'the', 'Nixon', 'family', 'grow', 'on', 'their', 'farm', '?']}, 'answers': [{'string': ' corn and wheat', 'parse': {'tree': '(ROOT (NP (NN corn) (CC and) (NN wheat)))', 'lemma': [(u'corn', u'corn', u'NN'), (u'and', u'and', u'CC'), (u'wheat', u'wheat', u'NN')]}, 'tokens': ['corn', 'and', 'wheat']}, {'string': ' vegetables', 'parse': {'tree': '(ROOT (NP (NNS vegetables)))', 'lemma': [(u'vegetables', u'vegetable', u'NNS')]}, 'tokens': ['vegetables']}, {'string': ' peanuts', 'parse': {'tree': '(ROOT (NP (NNS peanuts)))', 'lemma': [(u'peanuts', u'peanut', u'NNS')]}, 'tokens': ['peanuts']}, {'string': ' apples and oranges', 'parse': {'tree': '(ROOT (NP (NNS apples) (CC and) (NNS oranges)))', 'lemma': [(u'apples', u'apple', u'NNS'), (u'and', u'and', u'CC'), (u'oranges', u'orange', u'NNS')]}, 'tokens': ['apples', 'and', 'oranges']}], 'mode': 0}, {'question': {'string': " What animals stayed in the Nixons ' barn?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WDT What) (NNS animals)) (SQ (VP (VBD stayed) (PP (IN in) (NP (NP (DT the) (NNPS Nixons) (POS ')) (NN barn))))) (. ?)))", 'lemma': [(u'What', u'what', u'WDT'), (u'animals', u'animal', u'NNS'), (u'stayed', u'stay', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'Nixons', u'Nixons', u'NNPS'), (u"'", u"'", u'POS'), (u'barn', u'barn', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'animals', 'stayed', 'in', 'the', 'Nixons', "'", 'barn', '?']}, 'answers': [{'string': ' cows and horses', 'parse': {'tree': '(ROOT (NP (NNS cows) (CC and) (NNS horses)))', 'lemma': [(u'cows', u'cow', u'NNS'), (u'and', u'and', u'CC'), (u'horses', u'horse', u'NNS')]}, 'tokens': ['cows', 'and', 'horses']}, {'string': ' sheep and hogs', 'parse': {'tree': '(ROOT (NP (NN sheep) (CC and) (NNS hogs)))', 'lemma': [(u'sheep', u'sheep', u'NN'), (u'and', u'and', u'CC'), (u'hogs', u'hog', u'NNS')]}, 'tokens': ['sheep', 'and', 'hogs']}, {'string': ' goats and chickens', 'parse': {'tree': '(ROOT (NP (NNS goats) (CC and) (NNS chickens)))', 'lemma': [(u'goats', u'goat', u'NNS'), (u'and', u'and', u'CC'), (u'chickens', u'chicken', u'NNS')]}, 'tokens': ['goats', 'and', 'chickens']}, {'string': ' dogs and cats', 'parse': {'tree': '(ROOT (NP (NNS dogs) (CC and) (NNS cats)))', 'lemma': [(u'dogs', u'dog', u'NNS'), (u'and', u'and', u'CC'), (u'cats', u'cat', u'NNS')]}, 'tokens': ['dogs', 'and', 'cats']}], 'mode': 1}]}
{'sentences': [{'string': ' I used to be afraid of butterflies!', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD used) (S (VP (TO to) (VP (VB be) (ADJP (JJ afraid) (PP (IN of) (NP (NNS butterflies)))))))) (. !)))', 'lemma': [(u'I', u'I', u'PRP'), (u'used', u'use', u'VBD'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'afraid', u'afraid', u'JJ'), (u'of', u'of', u'IN'), (u'butterflies', u'butterfly', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['I', 'used', 'to', 'be', 'afraid', 'of', 'butterflies', '!']}, {'string': ' It is true!', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBZ is) (ADJP (JJ true))) (. !)))', 'lemma': [(u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'true', u'true', u'JJ'), (u'!', u'!', u'.')]}, 'tokens': ['It', 'is', 'true', '!']}, {'string': ' Once, my mom took me to Seattle.', 'parse': {'tree': '(ROOT (S (ADVP (RB Once)) (, ,) (NP (PRP$ my) (NN mom)) (VP (VBD took) (NP (PRP me)) (PP (TO to) (NP (NNP Seattle)))) (. .)))', 'lemma': [(u'Once', u'once', u'RB'), (u',', u',', u','), (u'my', u'my', u'PRP$'), (u'mom', u'mom', u'NN'), (u'took', u'take', u'VBD'), (u'me', u'I', u'PRP'), (u'to', u'to', u'TO'), (u'Seattle', u'Seattle', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Once', ',', 'my', 'mom', 'took', 'me', 'to', 'Seattle', '.']}, {'string': ' There, we went to a special place.', 'parse': {'tree': '(ROOT (S (ADVP (RB There)) (, ,) (NP (PRP we)) (VP (VBD went) (PP (TO to) (NP (DT a) (JJ special) (NN place)))) (. .)))', 'lemma': [(u'There', u'there', u'RB'), (u',', u',', u','), (u'we', u'we', u'PRP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'a', u'a', u'DT'), (u'special', u'special', u'JJ'), (u'place', u'place', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', ',', 'we', 'went', 'to', 'a', 'special', 'place', '.']}, {'string': ' We went to the zoo!', 'parse': {'tree': '(ROOT (S (NP (PRP We)) (VP (VBD went) (PP (TO to) (NP (DT the) (NN zoo)))) (. !)))', 'lemma': [(u'We', u'we', u'PRP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'zoo', u'zoo', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['We', 'went', 'to', 'the', 'zoo', '!']}, {'string': ' I saw lots of animals at the zoo.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (NNS lots)) (PP (IN of) (NP (NNS animals)))) (PP (IN at) (NP (DT the) (NN zoo)))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'saw', u'see', u'VBD'), (u'lots', u'lot', u'NNS'), (u'of', u'of', u'IN'), (u'animals', u'animal', u'NNS'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'zoo', u'zoo', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'saw', 'lots', 'of', 'animals', 'at', 'the', 'zoo', '.']}, {'string': ' I saw bears.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NNS bears))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'saw', u'see', u'VBD'), (u'bears', u'bear', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'saw', 'bears', '.']}, {'string': ' I saw tigers.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NNS tigers))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'saw', u'see', u'VBD'), (u'tigers', u'tiger', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'saw', 'tigers', '.']}, {'string': ' I saw apes.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NNS apes))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'saw', u'see', u'VBD'), (u'apes', u'ape', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'saw', 'apes', '.']}, {'string': ' I saw monkeys.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NNS monkeys))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'saw', u'see', u'VBD'), (u'monkeys', u'monkey', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'saw', 'monkeys', '.']}, {'string': ' I saw snakes.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NNS snakes))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'saw', u'see', u'VBD'), (u'snakes', u'snake', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'saw', 'snakes', '.']}, {'string': ' I loved seeing all these animals.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD loved) (S (VP (VBG seeing) (NP (PDT all) (DT these) (NNS animals))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'loved', u'love', u'VBD'), (u'seeing', u'see', u'VBG'), (u'all', u'all', u'PDT'), (u'these', u'these', u'DT'), (u'animals', u'animal', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'loved', 'seeing', 'all', 'these', 'animals', '.']}, {'string': ' They made me happy.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD made) (S (NP (PRP me)) (ADJP (JJ happy)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'made', u'make', u'VBD'), (u'me', u'I', u'PRP'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'made', 'me', 'happy', '.']}, {'string': " We even saw one place where there were giant bugs and they did n't even scare me.", 'parse': {'tree': "(ROOT (S (NP (PRP We)) (ADVP (RB even)) (VP (VBD saw) (NP (NP (CD one) (NN place)) (SBAR (WHADVP (WRB where)) (S (S (NP (EX there)) (VP (VBD were) (NP (JJ giant) (NNS bugs)))) (CC and) (S (NP (PRP they)) (VP (VBD did) (RB n't) (ADVP (RB even)) (VP (VB scare) (NP (PRP me))))))))) (. .)))", 'lemma': [(u'We', u'we', u'PRP'), (u'even', u'even', u'RB'), (u'saw', u'see', u'VBD'), (u'one', u'one', u'CD'), (u'place', u'place', u'NN'), (u'where', u'where', u'WRB'), (u'there', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'giant', u'giant', u'JJ'), (u'bugs', u'bug', u'NNS'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'even', u'even', u'RB'), (u'scare', u'scare', u'VB'), (u'me', u'I', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['We', 'even', 'saw', 'one', 'place', 'where', 'there', 'were', 'giant', 'bugs', 'and', 'they', 'did', "n't", 'even', 'scare', 'me', '.']}, {'string': ' In fact, I like bugs.', 'parse': {'tree': '(ROOT (S (PP (IN In) (NP (NN fact))) (, ,) (NP (PRP I)) (VP (VBP like) (NP (NNS bugs))) (. .)))', 'lemma': [(u'In', u'in', u'IN'), (u'fact', u'fact', u'NN'), (u',', u',', u','), (u'I', u'I', u'PRP'), (u'like', u'like', u'VBP'), (u'bugs', u'bug', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'fact', ',', 'I', 'like', 'bugs', '.']}, {'string': ' But there was one place where you walked inside a big room where there were lots of plants and butterflies flying all over the place.', 'parse': {'tree': '(ROOT (S (CC But) (NP (EX there)) (VP (VBD was) (NP (NP (CD one) (NN place)) (SBAR (WHADVP (WRB where)) (S (NP (PRP you)) (VP (VBD walked) (PP (IN inside) (NP (DT a) (JJ big) (NN room))) (SBAR (WHADVP (WRB where)) (S (NP (EX there)) (VP (VBD were) (NP (NP (NNS lots)) (PP (IN of) (NP (NNS plants) (CC and) (NNS butterflies))) (VP (VBG flying) (NP (NP (DT all)) (PP (IN over) (NP (DT the) (NN place)))))))))))))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'one', u'one', u'CD'), (u'place', u'place', u'NN'), (u'where', u'where', u'WRB'), (u'you', u'you', u'PRP'), (u'walked', u'walk', u'VBD'), (u'inside', u'inside', u'IN'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'room', u'room', u'NN'), (u'where', u'where', u'WRB'), (u'there', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'lots', u'lot', u'NNS'), (u'of', u'of', u'IN'), (u'plants', u'plant', u'NNS'), (u'and', u'and', u'CC'), (u'butterflies', u'butterfly', u'NNS'), (u'flying', u'fly', u'VBG'), (u'all', u'all', u'DT'), (u'over', u'over', u'IN'), (u'the', u'the', u'DT'), (u'place', u'place', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'there', 'was', 'one', 'place', 'where', 'you', 'walked', 'inside', 'a', 'big', 'room', 'where', 'there', 'were', 'lots', 'of', 'plants', 'and', 'butterflies', 'flying', 'all', 'over', 'the', 'place', '.']}, {'string': ' You could buy sugar water to feed them and they could land on you.', 'parse': {'tree': '(ROOT (S (S (NP (PRP You)) (VP (MD could) (VP (VB buy) (NP (NN sugar) (NN water)) (S (VP (TO to) (VP (VB feed) (NP (PRP them)))))))) (CC and) (S (NP (PRP they)) (VP (MD could) (VP (VB land) (PP (IN on) (NP (PRP you)))))) (. .)))', 'lemma': [(u'You', u'you', u'PRP'), (u'could', u'could', u'MD'), (u'buy', u'buy', u'VB'), (u'sugar', u'sugar', u'NN'), (u'water', u'water', u'NN'), (u'to', u'to', u'TO'), (u'feed', u'feed', u'VB'), (u'them', u'they', u'PRP'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'could', u'could', u'MD'), (u'land', u'land', u'VB'), (u'on', u'on', u'IN'), (u'you', u'you', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['You', 'could', 'buy', 'sugar', 'water', 'to', 'feed', 'them', 'and', 'they', 'could', 'land', 'on', 'you', '.']}, {'string': ' My mom and brother were so excited to go in, but I was scared.', 'parse': {'tree': '(ROOT (S (S (NP (PRP$ My) (NN mom) (CC and) (NN brother)) (VP (VBD were) (ADJP (RB so) (JJ excited) (S (VP (TO to) (VP (VB go) (PRT (RP in)))))))) (, ,) (CC but) (S (NP (PRP I)) (VP (VBD was) (ADJP (VBN scared)))) (. .)))', 'lemma': [(u'My', u'my', u'PRP$'), (u'mom', u'mom', u'NN'), (u'and', u'and', u'CC'), (u'brother', u'brother', u'NN'), (u'were', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'excited', u'excited', u'JJ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'in', u'in', u'RP'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['My', 'mom', 'and', 'brother', 'were', 'so', 'excited', 'to', 'go', 'in', ',', 'but', 'I', 'was', 'scared', '.']}, {'string': " I was n't sure that I wanted to be in the room with butterflies flying everywhere.", 'parse': {'tree': "(ROOT (S (NP (PRP I)) (VP (VBD was) (RB n't) (ADJP (JJ sure)) (SBAR (IN that) (S (NP (PRP I)) (VP (VBD wanted) (S (VP (TO to) (VP (VB be) (PP (IN in) (NP (DT the) (NN room))) (PP (IN with) (NP (NP (NNS butterflies)) (VP (VBG flying) (ADVP (RB everywhere)))))))))))) (. .)))", 'lemma': [(u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'sure', u'sure', u'JJ'), (u'that', u'that', u'IN'), (u'I', u'I', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'room', u'room', u'NN'), (u'with', u'with', u'IN'), (u'butterflies', u'butterfly', u'NNS'), (u'flying', u'fly', u'VBG'), (u'everywhere', u'everywhere', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'was', "n't", 'sure', 'that', 'I', 'wanted', 'to', 'be', 'in', 'the', 'room', 'with', 'butterflies', 'flying', 'everywhere', '.']}, {'string': ' My mom said I would be okay.', 'parse': {'tree': '(ROOT (S (NP (PRP$ My) (NN mom)) (VP (VBD said) (SBAR (S (NP (PRP I)) (VP (MD would) (VP (VB be) (ADJP (JJ okay))))))) (. .)))', 'lemma': [(u'My', u'my', u'PRP$'), (u'mom', u'mom', u'NN'), (u'said', u'say', u'VBD'), (u'I', u'I', u'PRP'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'okay', u'okay', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['My', 'mom', 'said', 'I', 'would', 'be', 'okay', '.']}, {'string': ' My brother said I would be okay.', 'parse': {'tree': '(ROOT (S (NP (PRP$ My) (NN brother)) (VP (VBD said) (SBAR (S (NP (PRP I)) (VP (MD would) (VP (VB be) (ADJP (JJ okay))))))) (. .)))', 'lemma': [(u'My', u'my', u'PRP$'), (u'brother', u'brother', u'NN'), (u'said', u'say', u'VBD'), (u'I', u'I', u'PRP'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'okay', u'okay', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['My', 'brother', 'said', 'I', 'would', 'be', 'okay', '.']}, {'string': ' They said butterflies were nice and beautiful.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD said) (SBAR (S (NP (NNS butterflies)) (VP (VBD were) (ADJP (JJ nice) (CC and) (JJ beautiful)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'said', u'say', u'VBD'), (u'butterflies', u'butterfly', u'NNS'), (u'were', u'be', u'VBD'), (u'nice', u'nice', u'JJ'), (u'and', u'and', u'CC'), (u'beautiful', u'beautiful', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'said', 'butterflies', 'were', 'nice', 'and', 'beautiful', '.']}, {'string': ' They said they would not hurt me.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD said) (SBAR (S (NP (PRP they)) (VP (MD would) (RB not) (VP (VB hurt) (NP (PRP me))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'said', u'say', u'VBD'), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'not', u'not', u'RB'), (u'hurt', u'hurt', u'VB'), (u'me', u'I', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'said', 'they', 'would', 'not', 'hurt', 'me', '.']}, {'string': ' So I went in the room.', 'parse': {'tree': '(ROOT (S (IN So) (NP (PRP I)) (VP (VBD went) (PP (IN in) (NP (DT the) (NN room)))) (. .)))', 'lemma': [(u'So', u'so', u'IN'), (u'I', u'I', u'PRP'), (u'went', u'go', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'room', u'room', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'I', 'went', 'in', 'the', 'room', '.']}, {'string': ' Guess what?', 'parse': {'tree': '(ROOT (S (VP (VB Guess) (FRAG (SBARQ (WHNP (WP what)) (. ?))))))', 'lemma': [(u'Guess', u'guess', u'VB'), (u'what', u'what', u'WP'), (u'?', u'?', u'.')]}, 'tokens': ['Guess', 'what', '?']}, {'string': ' I was so scared when one landed on me that I went screaming for the door!', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD was) (ADJP (RB so) (JJ scared)) (SBAR (WHADVP (WRB when)) (S (NP (PRP one)) (VP (VBD landed) (PP (IN on) (NP (PRP me))) (SBAR (IN that) (S (NP (PRP I)) (VP (VBD went) (S (VP (VBG screaming) (PP (IN for) (NP (DT the) (NN door)))))))))))) (. !)))', 'lemma': [(u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'scared', u'scared', u'JJ'), (u'when', u'when', u'WRB'), (u'one', u'one', u'PRP'), (u'landed', u'land', u'VBD'), (u'on', u'on', u'IN'), (u'me', u'I', u'PRP'), (u'that', u'that', u'IN'), (u'I', u'I', u'PRP'), (u'went', u'go', u'VBD'), (u'screaming', u'scream', u'VBG'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['I', 'was', 'so', 'scared', 'when', 'one', 'landed', 'on', 'me', 'that', 'I', 'went', 'screaming', 'for', 'the', 'door', '!']}, {'string': ' The man watching the door to make sure butterflies did not escape or get hurt yelled at me to stop.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (NN man)) (VP (VBG watching) (NP (DT the) (NN door) (S (VP (TO to) (VP (VB make) (ADJP (JJ sure) (SBAR (S (NP (NNS butterflies)) (VP (VBD did) (RB not) (VP (VB escape) (CC or) (VB get) (NP (NN hurt))))))))))))) (VP (VBD yelled) (PP (IN at) (NP (PRP me))) (S (VP (TO to) (VP (VB stop))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'man', u'man', u'NN'), (u'watching', u'watch', u'VBG'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'sure', u'sure', u'JJ'), (u'butterflies', u'butterfly', u'NNS'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'escape', u'escape', u'VB'), (u'or', u'or', u'CC'), (u'get', u'get', u'VB'), (u'hurt', u'hurt', u'NN'), (u'yelled', u'yell', u'VBD'), (u'at', u'at', u'IN'), (u'me', u'I', u'PRP'), (u'to', u'to', u'TO'), (u'stop', u'stop', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'man', 'watching', 'the', 'door', 'to', 'make', 'sure', 'butterflies', 'did', 'not', 'escape', 'or', 'get', 'hurt', 'yelled', 'at', 'me', 'to', 'stop', '.']}, {'string': ' He was mad at me for running out and not caring about the butterflies.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (JJ mad) (PP (IN at) (NP (PRP me)))) (PP (IN for) (S (VP (VP (VBG running) (PRT (RP out))) (CC and) (RB not) (VP (VBG caring) (PP (IN about) (NP (DT the) (NNS butterflies)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'mad', u'mad', u'JJ'), (u'at', u'at', u'IN'), (u'me', u'I', u'PRP'), (u'for', u'for', u'IN'), (u'running', u'run', u'VBG'), (u'out', u'out', u'RP'), (u'and', u'and', u'CC'), (u'not', u'not', u'RB'), (u'caring', u'care', u'VBG'), (u'about', u'about', u'IN'), (u'the', u'the', u'DT'), (u'butterflies', u'butterfly', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'mad', 'at', 'me', 'for', 'running', 'out', 'and', 'not', 'caring', 'about', 'the', 'butterflies', '.']}, {'string': ' I said I was sorry, but I was scared.', 'parse': {'tree': '(ROOT (S (S (NP (PRP I)) (VP (VBD said) (SBAR (S (NP (PRP I)) (VP (VBD was) (ADJP (JJ sorry))))))) (, ,) (CC but) (S (NP (PRP I)) (VP (VBD was) (ADJP (VBN scared)))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'said', u'say', u'VBD'), (u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u'sorry', u'sorry', u'JJ'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'said', 'I', 'was', 'sorry', ',', 'but', 'I', 'was', 'scared', '.']}, {'string': ' He checked me for butterflies and then let me get out of there!', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD checked) (NP (PRP me)) (PP (IN for) (NP (NNS butterflies)))) (CC and) (RB then) (VP (VB let) (S (NP (PRP me)) (VP (VB get) (PRT (RP out)) (PP (IN of) (NP (RB there))))))) (. !)))', 'lemma': [(u'He', u'he', u'PRP'), (u'checked', u'check', u'VBD'), (u'me', u'I', u'PRP'), (u'for', u'for', u'IN'), (u'butterflies', u'butterfly', u'NNS'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'let', u'let', u'VB'), (u'me', u'I', u'PRP'), (u'get', u'get', u'VB'), (u'out', u'out', u'RP'), (u'of', u'of', u'IN'), (u'there', u'there', u'RB'), (u'!', u'!', u'.')]}, 'tokens': ['He', 'checked', 'me', 'for', 'butterflies', 'and', 'then', 'let', 'me', 'get', 'out', 'of', 'there', '!']}, {'string': ' I stayed outside and my mom and my brother enjoyed the butterflies.', 'parse': {'tree': '(ROOT (S (S (NP (PRP I)) (VP (VBD stayed) (ADVP (RB outside)))) (CC and) (S (NP (NP (PRP$ my) (NN mom)) (CC and) (NP (PRP$ my) (NN brother))) (VP (VBD enjoyed) (NP (DT the) (NNS butterflies)))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'stayed', u'stay', u'VBD'), (u'outside', u'outside', u'RB'), (u'and', u'and', u'CC'), (u'my', u'my', u'PRP$'), (u'mom', u'mom', u'NN'), (u'and', u'and', u'CC'), (u'my', u'my', u'PRP$'), (u'brother', u'brother', u'NN'), (u'enjoyed', u'enjoy', u'VBD'), (u'the', u'the', u'DT'), (u'butterflies', u'butterfly', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'stayed', 'outside', 'and', 'my', 'mom', 'and', 'my', 'brother', 'enjoyed', 'the', 'butterflies', '.']}, {'string': ' Since then, they would tease me about being afraid.', 'parse': {'tree': '(ROOT (S (PP (IN Since) (NP (RB then))) (, ,) (NP (PRP they)) (VP (MD would) (VP (VB tease) (NP (PRP me)) (PP (IN about) (S (VP (VBG being) (ADJP (JJ afraid))))))) (. .)))', 'lemma': [(u'Since', u'since', u'IN'), (u'then', u'then', u'RB'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'tease', u'tease', u'VB'), (u'me', u'I', u'PRP'), (u'about', u'about', u'IN'), (u'being', u'be', u'VBG'), (u'afraid', u'afraid', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Since', 'then', ',', 'they', 'would', 'tease', 'me', 'about', 'being', 'afraid', '.']}, {'string': ' They would try and get me to not be afraid.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (MD would) (VP (VB try) (CC and) (VB get) (NP (PRP me)) (S (VP (TO to) (RB not) (VP (VB be) (ADJP (JJ afraid))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'try', u'try', u'VB'), (u'and', u'and', u'CC'), (u'get', u'get', u'VB'), (u'me', u'I', u'PRP'), (u'to', u'to', u'TO'), (u'not', u'not', u'RB'), (u'be', u'be', u'VB'), (u'afraid', u'afraid', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'would', 'try', 'and', 'get', 'me', 'to', 'not', 'be', 'afraid', '.']}, {'string': ' Last year for my birthday, mom bought me a butterfly book.', 'parse': {'tree': '(ROOT (S (NP (JJ Last) (NN year)) (PP (IN for) (NP (PRP$ my) (NN birthday))) (, ,) (NP (NN mom)) (VP (VBD bought) (S (NP (PRP me)) (NP (DT a) (NN butterfly) (NN book)))) (. .)))', 'lemma': [(u'Last', u'last', u'JJ'), (u'year', u'year', u'NN'), (u'for', u'for', u'IN'), (u'my', u'my', u'PRP$'), (u'birthday', u'birthday', u'NN'), (u',', u',', u','), (u'mom', u'mom', u'NN'), (u'bought', u'buy', u'VBD'), (u'me', u'I', u'PRP'), (u'a', u'a', u'DT'), (u'butterfly', u'butterfly', u'NN'), (u'book', u'book', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Last', 'year', 'for', 'my', 'birthday', ',', 'mom', 'bought', 'me', 'a', 'butterfly', 'book', '.']}, {'string': ' She bought one for my brother, too.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD bought) (NP (CD one)) (PP (IN for) (NP (PRP$ my) (NN brother))) (, ,) (ADVP (RB too))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'bought', u'buy', u'VBD'), (u'one', u'one', u'CD'), (u'for', u'for', u'IN'), (u'my', u'my', u'PRP$'), (u'brother', u'brother', u'NN'), (u',', u',', u','), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'bought', 'one', 'for', 'my', 'brother', ',', 'too', '.']}, {'string': ' I tried really hard to not be afraid and to go out into the yard and find butterflies with my brother.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD tried) (ADJP (RB really) (JJ hard) (S (VP (TO to) (VP (RB not) (VP (VP (VB be) (ADJP (JJ afraid))) (CC and) (VP (TO to) (VP (VB go) (PRT (RP out)) (PP (IN into) (NP (DT the) (NN yard)))))) (CC and) (VP (VB find) (NP (NNS butterflies)) (PP (IN with) (NP (PRP$ my) (NN brother))))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'tried', u'try', u'VBD'), (u'really', u'really', u'RB'), (u'hard', u'hard', u'JJ'), (u'to', u'to', u'TO'), (u'not', u'not', u'RB'), (u'be', u'be', u'VB'), (u'afraid', u'afraid', u'JJ'), (u'and', u'and', u'CC'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'out', u'out', u'RP'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'yard', u'yard', u'NN'), (u'and', u'and', u'CC'), (u'find', u'find', u'VB'), (u'butterflies', u'butterfly', u'NNS'), (u'with', u'with', u'IN'), (u'my', u'my', u'PRP$'), (u'brother', u'brother', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'tried', 'really', 'hard', 'to', 'not', 'be', 'afraid', 'and', 'to', 'go', 'out', 'into', 'the', 'yard', 'and', 'find', 'butterflies', 'with', 'my', 'brother', '.']}, {'string': ' It became really fun to do.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD became) (NP (RB really) (NN fun) (S (VP (TO to) (VP (VB do)))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'became', u'become', u'VBD'), (u'really', u'really', u'RB'), (u'fun', u'fun', u'NN'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'became', 'really', 'fun', 'to', 'do', '.']}, {'string': ' Once, a butterfly landed on me and I laughed.', 'parse': {'tree': '(ROOT (S (ADVP (RB Once)) (, ,) (S (NP (DT a) (NN butterfly)) (VP (VBD landed) (PP (IN on) (NP (PRP me))))) (CC and) (S (NP (PRP I)) (VP (VBD laughed))) (. .)))', 'lemma': [(u'Once', u'once', u'RB'), (u',', u',', u','), (u'a', u'a', u'DT'), (u'butterfly', u'butterfly', u'NN'), (u'landed', u'land', u'VBD'), (u'on', u'on', u'IN'), (u'me', u'I', u'PRP'), (u'and', u'and', u'CC'), (u'I', u'I', u'PRP'), (u'laughed', u'laugh', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Once', ',', 'a', 'butterfly', 'landed', 'on', 'me', 'and', 'I', 'laughed', '.']}, {'string': ' I liked it.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD liked) (NP (PRP it))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'liked', u'like', u'VBD'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'liked', 'it', '.']}, {'string': ' It tickled me.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD tickled) (NP (PRP me))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'tickled', u'tickle', u'VBD'), (u'me', u'I', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'tickled', 'me', '.']}, {'string': ' It did not hurt me.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD did) (RB not) (VP (VB hurt) (NP (PRP me)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'hurt', u'hurt', u'VB'), (u'me', u'I', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'did', 'not', 'hurt', 'me', '.']}, {'string': ' Now, I like butterflies!', 'parse': {'tree': '(ROOT (S (ADVP (RB Now)) (, ,) (NP (PRP I)) (VP (VBP like) (NP (NNS butterflies))) (. !)))', 'lemma': [(u'Now', u'now', u'RB'), (u',', u',', u','), (u'I', u'I', u'PRP'), (u'like', u'like', u'VBP'), (u'butterflies', u'butterfly', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['Now', ',', 'I', 'like', 'butterflies', '!']}], 'questions': [{'question': {'string': ' Where did the child go when he saw the butterflies?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NN child)) (VP (VB go) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBD saw) (NP (DT the) (NNS butterflies))))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'child', u'child', u'NN'), (u'go', u'go', u'VB'), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'saw', u'see', u'VBD'), (u'the', u'the', u'DT'), (u'butterflies', u'butterfly', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'the', 'child', 'go', 'when', 'he', 'saw', 'the', 'butterflies', '?']}, 'answers': [{'string': ' To the movie', 'parse': {'tree': '(ROOT (PP (TO To) (NP (DT the) (NN movie))))', 'lemma': [(u'To', u'to', u'TO'), (u'the', u'the', u'DT'), (u'movie', u'movie', u'NN')]}, 'tokens': ['To', 'the', 'movie']}, {'string': ' To school', 'parse': {'tree': '(ROOT (PP (TO To) (NP (NN school))))', 'lemma': [(u'To', u'to', u'TO'), (u'school', u'school', u'NN')]}, 'tokens': ['To', 'school']}, {'string': ' In the car', 'parse': {'tree': '(ROOT (PP (IN In) (NP (DT the) (NN car))))', 'lemma': [(u'In', u'in', u'IN'), (u'the', u'the', u'DT'), (u'car', u'car', u'NN')]}, 'tokens': ['In', 'the', 'car']}, {'string': ' To the zoo in Seattle', 'parse': {'tree': '(ROOT (PP (TO To) (NP (NP (DT the) (NN zoo)) (PP (IN in) (NP (NNP Seattle))))))', 'lemma': [(u'To', u'to', u'TO'), (u'the', u'the', u'DT'), (u'zoo', u'zoo', u'NN'), (u'in', u'in', u'IN'), (u'Seattle', u'Seattle', u'NNP')]}, 'tokens': ['To', 'the', 'zoo', 'in', 'Seattle']}], 'mode': 0}, {'question': {'string': ' What kind of animals were at the zoo?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (NNS animals)))) (SQ (VP (VBD were) (PP (IN at) (NP (DT the) (NN zoo))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'kind', u'kind', u'NN'), (u'of', u'of', u'IN'), (u'animals', u'animal', u'NNS'), (u'were', u'be', u'VBD'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'zoo', u'zoo', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'kind', 'of', 'animals', 'were', 'at', 'the', 'zoo', '?']}, 'answers': [{'string': ' deer, worms and cats', 'parse': {'tree': '(ROOT (NP (NP (NNS deer)) (, ,) (NP (NNS worms) (CC and) (NNS cats))))', 'lemma': [(u'deer', u'deer', u'NNS'), (u',', u',', u','), (u'worms', u'worm', u'NNS'), (u'and', u'and', u'CC'), (u'cats', u'cat', u'NNS')]}, 'tokens': ['deer', ',', 'worms', 'and', 'cats']}, {'string': ' wolves, ants and giraffe', 'parse': {'tree': '(ROOT (FRAG (INTJ (UH wolves)) (, ,) (NP (NNS ants) (CC and) (NN giraffe))))', 'lemma': [(u'wolves', u'wolves', u'UH'), (u',', u',', u','), (u'ants', u'ant', u'NNS'), (u'and', u'and', u'CC'), (u'giraffe', u'giraffe', u'NN')]}, 'tokens': ['wolves', ',', 'ants', 'and', 'giraffe']}, {'string': ' tigers, bears and snakes', 'parse': {'tree': '(ROOT (NP (NP (NNS tigers)) (, ,) (NP (NNS bears) (CC and) (NNS snakes))))', 'lemma': [(u'tigers', u'tiger', u'NNS'), (u',', u',', u','), (u'bears', u'bear', u'NNS'), (u'and', u'and', u'CC'), (u'snakes', u'snake', u'NNS')]}, 'tokens': ['tigers', ',', 'bears', 'and', 'snakes']}, {'string': ' penguins, zebras and crocodiles', 'parse': {'tree': '(ROOT (NP (NP (NNS penguins)) (, ,) (NP (NNS zebras) (CC and) (NNS crocodiles))))', 'lemma': [(u'penguins', u'penguin', u'NNS'), (u',', u',', u','), (u'zebras', u'zebra', u'NNS'), (u'and', u'and', u'CC'), (u'crocodiles', u'crocodile', u'NNS')]}, 'tokens': ['penguins', ',', 'zebras', 'and', 'crocodiles']}], 'mode': 0}, {'question': {'string': ' What did mom get the child to learn about butterflies?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NN mom)) (VP (VB get) (NP (DT the) (NN child) (S (VP (TO to) (VP (VB learn) (PP (IN about) (NP (NNS butterflies))))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'mom', u'mom', u'NN'), (u'get', u'get', u'VB'), (u'the', u'the', u'DT'), (u'child', u'child', u'NN'), (u'to', u'to', u'TO'), (u'learn', u'learn', u'VB'), (u'about', u'about', u'IN'), (u'butterflies', u'butterfly', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'mom', 'get', 'the', 'child', 'to', 'learn', 'about', 'butterflies', '?']}, 'answers': [{'string': ' a book', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN book))))', 'lemma': [(u'a', u'a', u'DT'), (u'book', u'book', u'NN')]}, 'tokens': ['a', 'book']}, {'string': ' an ice cream', 'parse': {'tree': '(ROOT (NP (DT an) (NN ice) (NN cream)))', 'lemma': [(u'an', u'a', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN')]}, 'tokens': ['an', 'ice', 'cream']}, {'string': ' a zoo', 'parse': {'tree': '(ROOT (FRAG (DT a) (JJ zoo)))', 'lemma': [(u'a', u'a', u'DT'), (u'zoo', u'zoo', u'JJ')]}, 'tokens': ['a', 'zoo']}, {'string': ' a movie', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN movie))))', 'lemma': [(u'a', u'a', u'DT'), (u'movie', u'movie', u'NN')]}, 'tokens': ['a', 'movie']}], 'mode': 1}, {'question': {'string': ' What is the child afraid of?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (NN child)) (ADJP (JJ afraid) (PP (IN of)))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'child', u'child', u'NN'), (u'afraid', u'afraid', u'JJ'), (u'of', u'of', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'the', 'child', 'afraid', 'of', '?']}, 'answers': [{'string': ' tigers', 'parse': {'tree': '(ROOT (NP (NNS tigers)))', 'lemma': [(u'tigers', u'tiger', u'NNS')]}, 'tokens': ['tigers']}, {'string': ' brother', 'parse': {'tree': '(ROOT (NP (NN brother)))', 'lemma': [(u'brother', u'brother', u'NN')]}, 'tokens': ['brother']}, {'string': ' butterflies', 'parse': {'tree': '(ROOT (NP (NNS butterflies)))', 'lemma': [(u'butterflies', u'butterfly', u'NNS')]}, 'tokens': ['butterflies']}, {'string': ' bears', 'parse': {'tree': '(ROOT (NP (NNS bears)))', 'lemma': [(u'bears', u'bear', u'NNS')]}, 'tokens': ['bears']}], 'mode': 1}]}
{'sentences': [{'string': ' There once was a woman named Mary.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (ADVP (RB once)) (VP (VBD was) (NP (NP (DT a) (NN woman)) (VP (VBN named) (NP (NNP Mary))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'once', u'once', u'RB'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'woman', u'woman', u'NN'), (u'named', u'name', u'VBN'), (u'Mary', u'Mary', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'once', 'was', 'a', 'woman', 'named', 'Mary', '.']}, {'string': " Mary 's best friend was a dog named Buddy.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Mary) (POS 's)) (JJS best) (NN friend)) (VP (VBD was) (NP (NP (DT a) (NN dog)) (VP (VBN named) (NP (NNP Buddy))))) (. .)))", 'lemma': [(u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'named', u'name', u'VBN'), (u'Buddy', u'Buddy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', "'s", 'best', 'friend', 'was', 'a', 'dog', 'named', 'Buddy', '.']}, {'string': ' Mary and Buddy went everywhere together.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary) (CC and) (NNP Buddy)) (VP (VBD went) (ADVP (RB everywhere)) (ADVP (RB together))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'and', u'and', u'CC'), (u'Buddy', u'Buddy', u'NNP'), (u'went', u'go', u'VBD'), (u'everywhere', u'everywhere', u'RB'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'and', 'Buddy', 'went', 'everywhere', 'together', '.']}, {'string': ' They had a lot in common.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD had) (NP (NP (DT a) (NN lot)) (PP (IN in) (NP (JJ common))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'in', u'in', u'IN'), (u'common', u'common', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'had', 'a', 'lot', 'in', 'common', '.']}, {'string': ' They both liked to play games like fetch and hide and seek.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (DT both) (VP (VBD liked) (S (VP (TO to) (VP (VP (VB play) (NP (NNS games)) (PP (IN like) (NP (NNP fetch)))) (CC and) (VP (VB hide) (CC and) (VB seek)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'both', u'both', u'DT'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'games', u'game', u'NNS'), (u'like', u'like', u'IN'), (u'fetch', u'fetch', u'NNP'), (u'and', u'and', u'CC'), (u'hide', u'hide', u'VB'), (u'and', u'and', u'CC'), (u'seek', u'seek', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'both', 'liked', 'to', 'play', 'games', 'like', 'fetch', 'and', 'hide', 'and', 'seek', '.']}, {'string': ' Neither of them liked to take a bath.', 'parse': {'tree': '(ROOT (S (NP (NP (DT Neither)) (PP (IN of) (NP (PRP them)))) (VP (VBD liked) (S (VP (TO to) (VP (VB take) (NP (DT a) (NN bath)))))) (. .)))', 'lemma': [(u'Neither', u'neither', u'DT'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'take', u'take', u'VB'), (u'a', u'a', u'DT'), (u'bath', u'bath', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Neither', 'of', 'them', 'liked', 'to', 'take', 'a', 'bath', '.']}, {'string': ' Mary and Buddy enjoyed smelling flowers and eating hamburgers.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary) (CC and) (NNP Buddy)) (VP (VBD enjoyed) (S (VP (VP (VBG smelling) (NP (NNS flowers))) (CC and) (VP (VBG eating) (NP (NNS hamburgers)))))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'and', u'and', u'CC'), (u'Buddy', u'Buddy', u'NNP'), (u'enjoyed', u'enjoy', u'VBD'), (u'smelling', u'smell', u'VBG'), (u'flowers', u'flower', u'NNS'), (u'and', u'and', u'CC'), (u'eating', u'eat', u'VBG'), (u'hamburgers', u'hamburger', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'and', 'Buddy', 'enjoyed', 'smelling', 'flowers', 'and', 'eating', 'hamburgers', '.']}, {'string': ' But they also were very different from one another.', 'parse': {'tree': '(ROOT (S (CC But) (NP (PRP they)) (ADVP (RB also)) (VP (VBD were) (ADJP (RB very) (JJ different)) (PP (IN from) (NP (CD one) (DT another)))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'they', u'they', u'PRP'), (u'also', u'also', u'RB'), (u'were', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'different', u'different', u'JJ'), (u'from', u'from', u'IN'), (u'one', u'one', u'CD'), (u'another', u'another', u'DT'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'they', 'also', 'were', 'very', 'different', 'from', 'one', 'another', '.']}, {'string': ' For one thing, Buddy was a dog!', 'parse': {'tree': '(ROOT (S (PP (IN For) (NP (CD one) (NN thing))) (, ,) (NP (NNP Buddy)) (VP (VBD was) (NP (DT a) (NN dog))) (. !)))', 'lemma': [(u'For', u'for', u'IN'), (u'one', u'one', u'CD'), (u'thing', u'thing', u'NN'), (u',', u',', u','), (u'Buddy', u'Buddy', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['For', 'one', 'thing', ',', 'Buddy', 'was', 'a', 'dog', '!']}, {'string': ' Buddy liked talking to strangers and visiting new places.', 'parse': {'tree': '(ROOT (S (NP (NNP Buddy)) (VP (VBD liked) (S (VP (VP (VBG talking) (PP (TO to) (NP (NNS strangers)))) (CC and) (VP (VBG visiting) (NP (JJ new) (NNS places)))))) (. .)))', 'lemma': [(u'Buddy', u'Buddy', u'NNP'), (u'liked', u'like', u'VBD'), (u'talking', u'talk', u'VBG'), (u'to', u'to', u'TO'), (u'strangers', u'stranger', u'NNS'), (u'and', u'and', u'CC'), (u'visiting', u'visit', u'VBG'), (u'new', u'new', u'JJ'), (u'places', u'place', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Buddy', 'liked', 'talking', 'to', 'strangers', 'and', 'visiting', 'new', 'places', '.']}, {'string': ' But Mary was shy.', 'parse': {'tree': '(ROOT (S (CC But) (NP (NNP Mary)) (VP (VBD was) (ADJP (JJ shy))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'Mary', u'Mary', u'NNP'), (u'was', u'be', u'VBD'), (u'shy', u'shy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'Mary', 'was', 'shy', '.']}, {'string': ' One day a man named John came by.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (NP (DT a) (NN man)) (VP (VBD named) (SBAR (S (NP (NNP John)) (VP (VBD came) (PP (IN by)))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'a', u'a', u'DT'), (u'man', u'man', u'NN'), (u'named', u'name', u'VBD'), (u'John', u'John', u'NNP'), (u'came', u'come', u'VBD'), (u'by', u'by', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'a', 'man', 'named', 'John', 'came', 'by', '.']}, {'string': ' Mary hid behind a tree when she saw him.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary)) (VP (VBP hid) (PP (IN behind) (NP (DT a) (NN tree))) (SBAR (WHADVP (WRB when)) (S (NP (PRP she)) (VP (VBD saw) (NP (PRP him)))))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'hid', u'hide', u'VBP'), (u'behind', u'behind', u'IN'), (u'a', u'a', u'DT'), (u'tree', u'tree', u'NN'), (u'when', u'when', u'WRB'), (u'she', u'she', u'PRP'), (u'saw', u'see', u'VBD'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'hid', 'behind', 'a', 'tree', 'when', 'she', 'saw', 'him', '.']}, {'string': ' Buddy tried to tell her it was okay, but she was too scared to listen.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Buddy)) (VP (VBD tried) (S (VP (TO to) (VP (VB tell) (NP (PRP her)) (SBAR (S (NP (PRP it)) (VP (VBD was) (ADJP (JJ okay)))))))))) (, ,) (CC but) (S (NP (PRP she)) (VP (VBD was) (ADJP (RB too) (VBN scared) (S (VP (TO to) (VP (VB listen))))))) (. .)))', 'lemma': [(u'Buddy', u'Buddy', u'NNP'), (u'tried', u'try', u'VBD'), (u'to', u'to', u'TO'), (u'tell', u'tell', u'VB'), (u'her', u'she', u'PRP'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'okay', u'okay', u'JJ'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'too', u'too', u'RB'), (u'scared', u'scare', u'VBN'), (u'to', u'to', u'TO'), (u'listen', u'listen', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Buddy', 'tried', 'to', 'tell', 'her', 'it', 'was', 'okay', ',', 'but', 'she', 'was', 'too', 'scared', 'to', 'listen', '.']}, {'string': ' So Buddy went out to say hello to John.', 'parse': {'tree': '(ROOT (S (IN So) (NP (NNP Buddy)) (VP (VBD went) (PRT (RP out)) (S (VP (TO to) (VP (VB say) (NP (UH hello)) (PP (TO to) (NP (NNP John))))))) (. .)))', 'lemma': [(u'So', u'so', u'IN'), (u'Buddy', u'Buddy', u'NNP'), (u'went', u'go', u'VBD'), (u'out', u'out', u'RP'), (u'to', u'to', u'TO'), (u'say', u'say', u'VB'), (u'hello', u'hello', u'UH'), (u'to', u'to', u'TO'), (u'John', u'John', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'Buddy', 'went', 'out', 'to', 'say', 'hello', 'to', 'John', '.']}, {'string': ' John was very nice and he liked the same games as Buddy.', 'parse': {'tree': '(ROOT (S (S (NP (NNP John)) (VP (VBD was) (ADJP (RB very) (JJ nice)))) (CC and) (S (NP (PRP he)) (VP (VBD liked) (NP (DT the) (JJ same) (NNS games)) (PP (IN as) (NP (NNP Buddy))))) (. .)))', 'lemma': [(u'John', u'John', u'NNP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'nice', u'nice', u'JJ'), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'liked', u'like', u'VBD'), (u'the', u'the', u'DT'), (u'same', u'same', u'JJ'), (u'games', u'game', u'NNS'), (u'as', u'as', u'IN'), (u'Buddy', u'Buddy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['John', 'was', 'very', 'nice', 'and', 'he', 'liked', 'the', 'same', 'games', 'as', 'Buddy', '.']}, {'string': ' Mary watched Buddy chase after a ball John threw.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary)) (VP (VBD watched) (S (NP (NNP Buddy)) (VP (VB chase) (SBAR (IN after) (S (NP (DT a) (NN ball) (NNP John)) (VP (VBD threw))))))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'watched', u'watch', u'VBD'), (u'Buddy', u'Buddy', u'NNP'), (u'chase', u'chase', u'VB'), (u'after', u'after', u'IN'), (u'a', u'a', u'DT'), (u'ball', u'ball', u'NN'), (u'John', u'John', u'NNP'), (u'threw', u'throw', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'watched', 'Buddy', 'chase', 'after', 'a', 'ball', 'John', 'threw', '.']}, {'string': ' She could tell John was a nice man.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (MD could) (VP (VB tell) (SBAR (S (NP (NNP John)) (VP (VBD was) (NP (DT a) (JJ nice) (NN man))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'could', u'could', u'MD'), (u'tell', u'tell', u'VB'), (u'John', u'John', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'nice', u'nice', u'JJ'), (u'man', u'man', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'could', 'tell', 'John', 'was', 'a', 'nice', 'man', '.']}, {'string': ' She wanted to play too.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD wanted) (S (VP (TO to) (VP (VB play) (ADVP (RB too)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'wanted', 'to', 'play', 'too', '.']}, {'string': ' Buddy saw her watching and led his new friend over to Mary.', 'parse': {'tree': '(ROOT (S (NP (NNP Buddy)) (VP (VP (VBD saw) (NP (PRP$ her) (NN watching))) (CC and) (VP (VBD led) (NP (PRP$ his) (JJ new) (NN friend)) (PRT (RP over)) (PP (TO to) (NP (NNP Mary))))) (. .)))', 'lemma': [(u'Buddy', u'Buddy', u'NNP'), (u'saw', u'see', u'VBD'), (u'her', u'she', u'PRP$'), (u'watching', u'watching', u'NN'), (u'and', u'and', u'CC'), (u'led', u'lead', u'VBD'), (u'his', u'he', u'PRP$'), (u'new', u'new', u'JJ'), (u'friend', u'friend', u'NN'), (u'over', u'over', u'RP'), (u'to', u'to', u'TO'), (u'Mary', u'Mary', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Buddy', 'saw', 'her', 'watching', 'and', 'led', 'his', 'new', 'friend', 'over', 'to', 'Mary', '.']}, {'string': ' John waved to Mary and brought her a flower.', 'parse': {'tree': '(ROOT (S (NP (NNP John)) (VP (VP (VBD waved) (PP (TO to) (NP (NNP Mary)))) (CC and) (VP (VBD brought) (S (NP (PRP her)) (NP (DT a) (NN flower))))) (. .)))', 'lemma': [(u'John', u'John', u'NNP'), (u'waved', u'wave', u'VBD'), (u'to', u'to', u'TO'), (u'Mary', u'Mary', u'NNP'), (u'and', u'and', u'CC'), (u'brought', u'bring', u'VBD'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'flower', u'flower', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['John', 'waved', 'to', 'Mary', 'and', 'brought', 'her', 'a', 'flower', '.']}, {'string': ' Mary smiled at him.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary)) (VP (VBD smiled) (PP (IN at) (NP (PRP him)))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'smiled', u'smile', u'VBD'), (u'at', u'at', u'IN'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'smiled', 'at', 'him', '.']}, {'string': " She thought he was very kind and she was n't as nervous as before.", 'parse': {'tree': "(ROOT (S (S (NP (PRP She)) (VP (VBD thought) (SBAR (S (NP (PRP he)) (VP (VBD was) (ADJP (RB very) (JJ kind))))))) (CC and) (S (NP (PRP she)) (VP (VBD was) (RB n't) (ADJP (RB as) (JJ nervous) (PP (IN as) (ADVP (RB before)))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'thought', u'think', u'VBD'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'kind', u'kind', u'JJ'), (u'and', u'and', u'CC'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'as', u'as', u'RB'), (u'nervous', u'nervous', u'JJ'), (u'as', u'as', u'IN'), (u'before', u'before', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'thought', 'he', 'was', 'very', 'kind', 'and', 'she', 'was', "n't", 'as', 'nervous', 'as', 'before', '.']}, {'string': ' Buddy barked happily.', 'parse': {'tree': '(ROOT (S (NP (NNP Buddy)) (VP (VBD barked) (ADVP (RB happily))) (. .)))', 'lemma': [(u'Buddy', u'Buddy', u'NNP'), (u'barked', u'bark', u'VBD'), (u'happily', u'happily', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Buddy', 'barked', 'happily', '.']}, {'string': ' Yay for new friends!', 'parse': {'tree': '(ROOT (S (VP (VB Yay) (PP (IN for) (NP (JJ new) (NNS friends)))) (. !)))', 'lemma': [(u'Yay', u'yay', u'VB'), (u'for', u'for', u'IN'), (u'new', u'new', u'JJ'), (u'friends', u'friend', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['Yay', 'for', 'new', 'friends', '!']}], 'questions': [{'question': {'string': ' How did Mary know John was a nice man?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (NNP Mary)) (VP (VB know) (SBAR (S (NP (NNP John)) (VP (VBD was) (NP (DT a) (JJ nice) (NN man))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'did', u'do', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u'know', u'know', u'VB'), (u'John', u'John', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'nice', u'nice', u'JJ'), (u'man', u'man', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'did', 'Mary', 'know', 'John', 'was', 'a', 'nice', 'man', '?']}, 'answers': [{'string': ' He played with Buddy and brought her a flower.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD played) (PP (IN with) (NP (NNP Buddy)))) (CC and) (VP (VBD brought) (S (NP (PRP her)) (NP (DT a) (NN flower))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'played', u'play', u'VBD'), (u'with', u'with', u'IN'), (u'Buddy', u'Buddy', u'NNP'), (u'and', u'and', u'CC'), (u'brought', u'bring', u'VBD'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'flower', u'flower', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'played', 'with', 'Buddy', 'and', 'brought', 'her', 'a', 'flower', '.']}, {'string': " John was Mary 's best friend.", 'parse': {'tree': "(ROOT (S (NP (NNP John)) (VP (VBD was) (NP (NP (NNP Mary) (POS 's)) (JJS best) (NN friend))) (. .)))", 'lemma': [(u'John', u'John', u'NNP'), (u'was', u'be', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['John', 'was', 'Mary', "'s", 'best', 'friend', '.']}, {'string': ' He liked to chase balls.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD liked) (S (VP (TO to) (VP (VB chase) (NP (NNS balls)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'chase', u'chase', u'VB'), (u'balls', u'ball', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'liked', 'to', 'chase', 'balls', '.']}, {'string': ' He was shy.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (JJ shy))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'shy', u'shy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'shy', '.']}], 'mode': 0}, {'question': {'string': ' What did Buddy, Mary and John like to do?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD did) (SBAR (S (NP (NNP Buddy) (, ,) (NNP Mary) (CC and) (NNP John)) (VP (VBP like) (S (VP (TO to) (VP (VB do))))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Buddy', u'Buddy', u'NNP'), (u',', u',', u','), (u'Mary', u'Mary', u'NNP'), (u'and', u'and', u'CC'), (u'John', u'John', u'NNP'), (u'like', u'like', u'VBP'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Buddy', ',', 'Mary', 'and', 'John', 'like', 'to', 'do', '?']}, 'answers': [{'string': ' Visit new places.', 'parse': {'tree': '(ROOT (S (VP (VB Visit) (NP (JJ new) (NNS places))) (. .)))', 'lemma': [(u'Visit', u'visit', u'VB'), (u'new', u'new', u'JJ'), (u'places', u'place', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Visit', 'new', 'places', '.']}, {'string': ' Take baths.', 'parse': {'tree': '(ROOT (S (VP (VB Take) (NP (NNS baths))) (. .)))', 'lemma': [(u'Take', u'take', u'VB'), (u'baths', u'bath', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Take', 'baths', '.']}, {'string': ' Eat hamburgers.', 'parse': {'tree': '(ROOT (S (VP (VB Eat) (NP (NNS hamburgers))) (. .)))', 'lemma': [(u'Eat', u'eat', u'VB'), (u'hamburgers', u'hamburger', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Eat', 'hamburgers', '.']}, {'string': ' Play fetch.', 'parse': {'tree': '(ROOT (S (NP (NNP Play)) (VP (VBP fetch)) (. .)))', 'lemma': [(u'Play', u'Play', u'NNP'), (u'fetch', u'fetch', u'VBP'), (u'.', u'.', u'.')]}, 'tokens': ['Play', 'fetch', '.']}], 'mode': 0}, {'question': {'string': ' Why did Buddy bark happily?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NNP Buddy)) (VP (VB bark) (ADVP (RB happily)))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'Buddy', u'Buddy', u'NNP'), (u'bark', u'bark', u'VB'), (u'happily', u'happily', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'Buddy', 'bark', 'happily', '?']}, 'answers': [{'string': ' Because Mary was going to give him a bath.', 'parse': {'tree': '(ROOT (S (NP (NNP Because) (NNP Mary)) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB give) (NP (PRP him)) (NP (DT a) (NN bath))))))) (. .)))', 'lemma': [(u'Because', u'Because', u'NNP'), (u'Mary', u'Mary', u'NNP'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'give', u'give', u'VB'), (u'him', u'he', u'PRP'), (u'a', u'a', u'DT'), (u'bath', u'bath', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'Mary', 'was', 'going', 'to', 'give', 'him', 'a', 'bath', '.']}, {'string': ' Because his new friend John became friends with Mary.', 'parse': {'tree': '(ROOT (S (PP (IN Because) (NP (PRP$ his) (JJ new) (NN friend))) (NP (NNP John)) (VP (VBD became) (NP (NNS friends)) (PP (IN with) (NP (NNP Mary)))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'his', u'he', u'PRP$'), (u'new', u'new', u'JJ'), (u'friend', u'friend', u'NN'), (u'John', u'John', u'NNP'), (u'became', u'become', u'VBD'), (u'friends', u'friend', u'NNS'), (u'with', u'with', u'IN'), (u'Mary', u'Mary', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'his', 'new', 'friend', 'John', 'became', 'friends', 'with', 'Mary', '.']}, {'string': ' Because John gave him a hamburger to eat.', 'parse': {'tree': '(ROOT (S (NP (NNP Because) (NNP John)) (VP (VBD gave) (NP (PRP him)) (NP (DT a) (NN hamburger) (S (VP (TO to) (VP (VB eat)))))) (. .)))', 'lemma': [(u'Because', u'Because', u'NNP'), (u'John', u'John', u'NNP'), (u'gave', u'give', u'VBD'), (u'him', u'he', u'PRP'), (u'a', u'a', u'DT'), (u'hamburger', u'hamburger', u'NN'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'John', 'gave', 'him', 'a', 'hamburger', 'to', 'eat', '.']}, {'string': ' Because he found a beautiful flower to give to Mary.', 'parse': {'tree': '(ROOT (FRAG (SBAR (IN Because) (S (NP (PRP he)) (VP (VBD found) (NP (DT a) (JJ beautiful) (NN flower)) (S (VP (TO to) (VP (VB give) (PP (TO to) (NP (NNP Mary))))))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'found', u'find', u'VBD'), (u'a', u'a', u'DT'), (u'beautiful', u'beautiful', u'JJ'), (u'flower', u'flower', u'NN'), (u'to', u'to', u'TO'), (u'give', u'give', u'VB'), (u'to', u'to', u'TO'), (u'Mary', u'Mary', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'he', 'found', 'a', 'beautiful', 'flower', 'to', 'give', 'to', 'Mary', '.']}], 'mode': 0}, {'question': {'string': ' Who was the new friend?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (DT the) (JJ new) (NN friend))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'new', u'new', u'JJ'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'the', 'new', 'friend', '?']}, 'answers': [{'string': ' John', 'parse': {'tree': '(ROOT (NP (NNP John)))', 'lemma': [(u'John', u'John', u'NNP')]}, 'tokens': ['John']}, {'string': ' Buddy', 'parse': {'tree': '(ROOT (NP (NNP Buddy)))', 'lemma': [(u'Buddy', u'Buddy', u'NNP')]}, 'tokens': ['Buddy']}, {'string': ' a flower', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN flower))))', 'lemma': [(u'a', u'a', u'DT'), (u'flower', u'flower', u'NN')]}, 'tokens': ['a', 'flower']}, {'string': ' Mary', 'parse': {'tree': '(ROOT (NP (NNP Mary)))', 'lemma': [(u'Mary', u'Mary', u'NNP')]}, 'tokens': ['Mary']}], 'mode': 0}]}
{'sentences': [{'string': ' Laura wanted to go to the park and play because she wanted to see her friends.', 'parse': {'tree': '(ROOT (S (NP (NNP Laura)) (VP (VBD wanted) (S (VP (TO to) (VP (VP (VB go) (PP (TO to) (NP (DT the) (NN park)))) (CC and) (VP (VB play) (SBAR (IN because) (S (NP (PRP she)) (VP (VBD wanted) (S (VP (TO to) (VP (VB see) (NP (PRP$ her) (NNS friends))))))))))))) (. .)))', 'lemma': [(u'Laura', u'Laura', u'NNP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'because', u'because', u'IN'), (u'she', u'she', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Laura', 'wanted', 'to', 'go', 'to', 'the', 'park', 'and', 'play', 'because', 'she', 'wanted', 'to', 'see', 'her', 'friends', '.']}, {'string': ' When she got to the park Laura did not see anyone.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP she)) (VP (VBD got) (PP (TO to) (NP (DT the) (NN park)))))) (NP (NNP Laura)) (VP (VBD did) (RB not) (VP (VB see) (NP (NN anyone)))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'she', u'she', u'PRP'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'Laura', u'Laura', u'NNP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'see', u'see', u'VB'), (u'anyone', u'anyone', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'she', 'got', 'to', 'the', 'park', 'Laura', 'did', 'not', 'see', 'anyone', '.']}, {'string': ' After looking, she saw her friend George by the basketball hoop.', 'parse': {'tree': '(ROOT (S (PP (IN After) (S (VP (VBG looking)))) (, ,) (NP (PRP she)) (VP (VBD saw) (NP (PRP$ her) (NN friend) (NNP George)) (PP (IN by) (NP (DT the) (NN basketball) (NN hoop)))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'looking', u'look', u'VBG'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'saw', u'see', u'VBD'), (u'her', u'she', u'PRP$'), (u'friend', u'friend', u'NN'), (u'George', u'George', u'NNP'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'basketball', u'basketball', u'NN'), (u'hoop', u'hoop', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'looking', ',', 'she', 'saw', 'her', 'friend', 'George', 'by', 'the', 'basketball', 'hoop', '.']}, {'string': ' George was playing all by himself.', 'parse': {'tree': '(ROOT (S (NP (NNP George)) (VP (VBD was) (VP (VBG playing) (NP (DT all)) (PP (IN by) (NP (PRP himself))))) (. .)))', 'lemma': [(u'George', u'George', u'NNP'), (u'was', u'be', u'VBD'), (u'playing', u'play', u'VBG'), (u'all', u'all', u'DT'), (u'by', u'by', u'IN'), (u'himself', u'himself', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['George', 'was', 'playing', 'all', 'by', 'himself', '.']}, {'string': ' George was happy when he saw Laura.', 'parse': {'tree': '(ROOT (S (NP (NNP George)) (VP (VBD was) (ADJP (JJ happy)) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBD saw) (NP (NNP Laura)))))) (. .)))', 'lemma': [(u'George', u'George', u'NNP'), (u'was', u'be', u'VBD'), (u'happy', u'happy', u'JJ'), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'saw', u'see', u'VBD'), (u'Laura', u'Laura', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['George', 'was', 'happy', 'when', 'he', 'saw', 'Laura', '.']}, {'string': ' Laura and George played basketball they saw the ice cream man driving in his truck.', 'parse': {'tree': '(ROOT (S (NP (NNP Laura) (CC and) (NNP George)) (VP (VBD played) (NP (NP (NN basketball)) (SBAR (S (NP (PRP they)) (VP (VBD saw) (NP (NP (DT the) (NN ice) (NN cream) (NN man)) (VP (VBG driving) (PP (IN in) (NP (PRP$ his) (NN truck)))))))))) (. .)))', 'lemma': [(u'Laura', u'Laura', u'NNP'), (u'and', u'and', u'CC'), (u'George', u'George', u'NNP'), (u'played', u'play', u'VBD'), (u'basketball', u'basketball', u'NN'), (u'they', u'they', u'PRP'), (u'saw', u'see', u'VBD'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'man', u'man', u'NN'), (u'driving', u'drive', u'VBG'), (u'in', u'in', u'IN'), (u'his', u'he', u'PRP$'), (u'truck', u'truck', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Laura', 'and', 'George', 'played', 'basketball', 'they', 'saw', 'the', 'ice', 'cream', 'man', 'driving', 'in', 'his', 'truck', '.']}, {'string': ' George asked Laura if she wanted him to buy her an ice cream cone.', 'parse': {'tree': '(ROOT (S (NP (NNP George)) (VP (VBD asked) (NP (NNP Laura)) (SBAR (IN if) (S (NP (PRP she)) (VP (VBD wanted) (S (NP (PRP him)) (VP (TO to) (VP (VB buy) (S (NP (PRP her)) (NP (DT an) (NN ice) (NN cream) (NN cone)))))))))) (. .)))', 'lemma': [(u'George', u'George', u'NNP'), (u'asked', u'ask', u'VBD'), (u'Laura', u'Laura', u'NNP'), (u'if', u'if', u'IN'), (u'she', u'she', u'PRP'), (u'wanted', u'want', u'VBD'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'her', u'she', u'PRP'), (u'an', u'a', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cone', u'cone', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['George', 'asked', 'Laura', 'if', 'she', 'wanted', 'him', 'to', 'buy', 'her', 'an', 'ice', 'cream', 'cone', '.']}, {'string': ' Laura said she would like him to do that.', 'parse': {'tree': '(ROOT (S (NP (NNP Laura)) (VP (VBD said) (SBAR (S (NP (PRP she)) (VP (MD would) (VP (VB like) (S (NP (PRP him)) (VP (TO to) (VP (VB do) (NP (DT that)))))))))) (. .)))', 'lemma': [(u'Laura', u'Laura', u'NNP'), (u'said', u'say', u'VBD'), (u'she', u'she', u'PRP'), (u'would', u'would', u'MD'), (u'like', u'like', u'VB'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'that', u'that', u'DT'), (u'.', u'.', u'.')]}, 'tokens': ['Laura', 'said', 'she', 'would', 'like', 'him', 'to', 'do', 'that', '.']}, {'string': ' Laura sat on the bench as George walked to the ice cream truck.', 'parse': {'tree': '(ROOT (S (NP (NNP Laura)) (VP (VBD sat) (PP (IN on) (NP (DT the) (NN bench))) (SBAR (IN as) (S (NP (NNP George)) (VP (VBD walked) (PP (TO to) (NP (DT the) (NN ice) (NN cream) (NN truck))))))) (. .)))', 'lemma': [(u'Laura', u'Laura', u'NNP'), (u'sat', u'sit', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'bench', u'bench', u'NN'), (u'as', u'as', u'IN'), (u'George', u'George', u'NNP'), (u'walked', u'walk', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'truck', u'truck', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Laura', 'sat', 'on', 'the', 'bench', 'as', 'George', 'walked', 'to', 'the', 'ice', 'cream', 'truck', '.']}, {'string': ' Laura looked in the sky and saw a pretty bird flying in a large circle.', 'parse': {'tree': '(ROOT (S (NP (NNP Laura)) (VP (VP (VBD looked) (PP (IN in) (NP (DT the) (NN sky)))) (CC and) (VP (VBD saw) (NP (DT a) (JJ pretty) (NN bird)) (S (VP (VBG flying) (PP (IN in) (NP (DT a) (JJ large) (NN circle))))))) (. .)))', 'lemma': [(u'Laura', u'Laura', u'NNP'), (u'looked', u'look', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'sky', u'sky', u'NN'), (u'and', u'and', u'CC'), (u'saw', u'see', u'VBD'), (u'a', u'a', u'DT'), (u'pretty', u'pretty', u'JJ'), (u'bird', u'bird', u'NN'), (u'flying', u'fly', u'VBG'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'large', u'large', u'JJ'), (u'circle', u'circle', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Laura', 'looked', 'in', 'the', 'sky', 'and', 'saw', 'a', 'pretty', 'bird', 'flying', 'in', 'a', 'large', 'circle', '.']}, {'string': ' The bird flew away.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN bird)) (VP (VBD flew) (PRT (RP away))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'bird', u'bird', u'NN'), (u'flew', u'fly', u'VBD'), (u'away', u'away', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'bird', 'flew', 'away', '.']}, {'string': ' George came back with two ice cream cones.', 'parse': {'tree': '(ROOT (S (NP (NNP George)) (VP (VBD came) (ADVP (RB back)) (PP (IN with) (NP (CD two) (NN ice) (NN cream) (NNS cones)))) (. .)))', 'lemma': [(u'George', u'George', u'NNP'), (u'came', u'come', u'VBD'), (u'back', u'back', u'RB'), (u'with', u'with', u'IN'), (u'two', u'two', u'CD'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cones', u'cone', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['George', 'came', 'back', 'with', 'two', 'ice', 'cream', 'cones', '.']}, {'string': ' One of the ice cream cones had rainbow sprinkles on it.', 'parse': {'tree': '(ROOT (S (NP (NP (CD One)) (PP (IN of) (NP (DT the) (NN ice) (NN cream) (NNS cones)))) (VP (VBD had) (NP (NP (NN rainbow) (NNS sprinkles)) (PP (IN on) (NP (PRP it))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cones', u'cone', u'NNS'), (u'had', u'have', u'VBD'), (u'rainbow', u'rainbow', u'NN'), (u'sprinkles', u'sprinkle', u'NNS'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'of', 'the', 'ice', 'cream', 'cones', 'had', 'rainbow', 'sprinkles', 'on', 'it', '.']}, {'string': ' George gave the ice cream cone with sprinkles to Laura.', 'parse': {'tree': '(ROOT (S (NP (NNP George)) (VP (VBD gave) (NP (DT the) (NN ice) (NN cream) (NN cone)) (PP (IN with) (NP (NNP sprinkles))) (PP (TO to) (NP (NNP Laura)))) (. .)))', 'lemma': [(u'George', u'George', u'NNP'), (u'gave', u'give', u'VBD'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cone', u'cone', u'NN'), (u'with', u'with', u'IN'), (u'sprinkles', u'sprinkles', u'NNP'), (u'to', u'to', u'TO'), (u'Laura', u'Laura', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['George', 'gave', 'the', 'ice', 'cream', 'cone', 'with', 'sprinkles', 'to', 'Laura', '.']}, {'string': ' George and Laura sat on the bench and watched a group of boys play football as they ate their ice cream cones.', 'parse': {'tree': '(ROOT (S (NP (NNP George) (CC and) (NNP Laura)) (VP (VP (VBD sat) (PP (IN on) (NP (DT the) (NN bench)))) (CC and) (VP (VBD watched) (NP (NP (DT a) (NN group)) (PP (IN of) (NP (NNS boys) (NN play) (NN football)))) (SBAR (IN as) (S (NP (PRP they)) (VP (VBD ate) (NP (PRP$ their) (NN ice) (NN cream) (NNS cones))))))) (. .)))', 'lemma': [(u'George', u'George', u'NNP'), (u'and', u'and', u'CC'), (u'Laura', u'Laura', u'NNP'), (u'sat', u'sit', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'bench', u'bench', u'NN'), (u'and', u'and', u'CC'), (u'watched', u'watch', u'VBD'), (u'a', u'a', u'DT'), (u'group', u'group', u'NN'), (u'of', u'of', u'IN'), (u'boys', u'boy', u'NNS'), (u'play', u'play', u'NN'), (u'football', u'football', u'NN'), (u'as', u'as', u'IN'), (u'they', u'they', u'PRP'), (u'ate', u'eat', u'VBD'), (u'their', u'they', u'PRP$'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cones', u'cone', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['George', 'and', 'Laura', 'sat', 'on', 'the', 'bench', 'and', 'watched', 'a', 'group', 'of', 'boys', 'play', 'football', 'as', 'they', 'ate', 'their', 'ice', 'cream', 'cones', '.']}, {'string': ' One of the boys broke his leg.', 'parse': {'tree': '(ROOT (S (NP (NP (CD One)) (PP (IN of) (NP (DT the) (NNS boys)))) (VP (VBD broke) (NP (PRP$ his) (NN leg))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'boys', u'boy', u'NNS'), (u'broke', u'break', u'VBD'), (u'his', u'he', u'PRP$'), (u'leg', u'leg', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'of', 'the', 'boys', 'broke', 'his', 'leg', '.']}, {'string': ' When George and Laura were finished with their ice cream, Laura ran home before the street lights came on.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP George) (CC and) (NNP Laura)) (VP (VBD were) (VP (VBN finished) (PP (IN with) (NP (PRP$ their) (NN ice) (NN cream))))))) (, ,) (NP (NNP Laura)) (VP (VBD ran) (ADVP (RB home)) (SBAR (IN before) (S (NP (DT the) (NN street) (NNS lights)) (VP (VBD came) (PRT (RP on)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'George', u'George', u'NNP'), (u'and', u'and', u'CC'), (u'Laura', u'Laura', u'NNP'), (u'were', u'be', u'VBD'), (u'finished', u'finish', u'VBN'), (u'with', u'with', u'IN'), (u'their', u'they', u'PRP$'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u',', u',', u','), (u'Laura', u'Laura', u'NNP'), (u'ran', u'run', u'VBD'), (u'home', u'home', u'RB'), (u'before', u'before', u'IN'), (u'the', u'the', u'DT'), (u'street', u'street', u'NN'), (u'lights', u'light', u'NNS'), (u'came', u'come', u'VBD'), (u'on', u'on', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'George', 'and', 'Laura', 'were', 'finished', 'with', 'their', 'ice', 'cream', ',', 'Laura', 'ran', 'home', 'before', 'the', 'street', 'lights', 'came', 'on', '.']}], 'questions': [{'question': {'string': ' What sport was George playing by himself?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN sport)) (SQ (VBD was) (NP (NNP George)) (VP (VBG playing) (PP (IN by) (NP (PRP himself))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'sport', u'sport', u'NN'), (u'was', u'be', u'VBD'), (u'George', u'George', u'NNP'), (u'playing', u'play', u'VBG'), (u'by', u'by', u'IN'), (u'himself', u'himself', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'sport', 'was', 'George', 'playing', 'by', 'himself', '?']}, 'answers': [{'string': ' football', 'parse': {'tree': '(ROOT (NP (NN football)))', 'lemma': [(u'football', u'football', u'NN')]}, 'tokens': ['football']}, {'string': ' baseball', 'parse': {'tree': '(ROOT (NP (NN baseball)))', 'lemma': [(u'baseball', u'baseball', u'NN')]}, 'tokens': ['baseball']}, {'string': ' basketball', 'parse': {'tree': '(ROOT (NP (NN basketball)))', 'lemma': [(u'basketball', u'basketball', u'NN')]}, 'tokens': ['basketball']}, {'string': ' soccer', 'parse': {'tree': '(ROOT (NP (NN soccer)))', 'lemma': [(u'soccer', u'soccer', u'NN')]}, 'tokens': ['soccer']}], 'mode': 0}, {'question': {'string': ' What did the bird do in the sky?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (DT the) (NN bird)) (VP (VB do) (PP (IN in) (NP (DT the) (NN sky))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'bird', u'bird', u'NN'), (u'do', u'do', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'sky', u'sky', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'the', 'bird', 'do', 'in', 'the', 'sky', '?']}, 'answers': [{'string': ' take a poop', 'parse': {'tree': '(ROOT (S (VP (VB take) (NP (DT a) (NN poop)))))', 'lemma': [(u'take', u'take', u'VB'), (u'a', u'a', u'DT'), (u'poop', u'poop', u'NN')]}, 'tokens': ['take', 'a', 'poop']}, {'string': ' eat a worm', 'parse': {'tree': '(ROOT (S (VP (VB eat) (NP (DT a) (NN worm)))))', 'lemma': [(u'eat', u'eat', u'VB'), (u'a', u'a', u'DT'), (u'worm', u'worm', u'NN')]}, 'tokens': ['eat', 'a', 'worm']}, {'string': ' fly in a circle then fly away', 'parse': {'tree': '(ROOT (S (VP (VB fly) (SBAR (IN in) (S (NP (DT a) (NN circle)) (ADVP (RB then)) (VP (VBP fly) (PRT (RP away))))))))', 'lemma': [(u'fly', u'fly', u'VB'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'circle', u'circle', u'NN'), (u'then', u'then', u'RB'), (u'fly', u'fly', u'VBP'), (u'away', u'away', u'RP')]}, 'tokens': ['fly', 'in', 'a', 'circle', 'then', 'fly', 'away']}, {'string': ' play with a cloud', 'parse': {'tree': '(ROOT (S (VP (VB play) (PP (IN with) (NP (DT a) (NN cloud))))))', 'lemma': [(u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'cloud', u'cloud', u'NN')]}, 'tokens': ['play', 'with', 'a', 'cloud']}], 'mode': 0}, {'question': {'string': ' What did Laura see as she ate the ice cream cone?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Laura)) (VP (VB see) (SBAR (IN as) (S (NP (PRP she)) (VP (VBD ate) (NP (DT the) (NN ice) (NN cream) (NN cone))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Laura', u'Laura', u'NNP'), (u'see', u'see', u'VB'), (u'as', u'as', u'IN'), (u'she', u'she', u'PRP'), (u'ate', u'eat', u'VBD'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cone', u'cone', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Laura', 'see', 'as', 'she', 'ate', 'the', 'ice', 'cream', 'cone', '?']}, 'answers': [{'string': ' a boy break his leg', 'parse': {'tree': '(ROOT (S (NP (DT a) (NN boy)) (VP (VBP break) (NP (PRP$ his) (NN leg)))))', 'lemma': [(u'a', u'a', u'DT'), (u'boy', u'boy', u'NN'), (u'break', u'break', u'VBP'), (u'his', u'he', u'PRP$'), (u'leg', u'leg', u'NN')]}, 'tokens': ['a', 'boy', 'break', 'his', 'leg']}, {'string': ' a mother yelling', 'parse': {'tree': '(ROOT (NP (DT a) (NN mother) (NN yelling)))', 'lemma': [(u'a', u'a', u'DT'), (u'mother', u'mother', u'NN'), (u'yelling', u'yelling', u'NN')]}, 'tokens': ['a', 'mother', 'yelling']}, {'string': ' a dog running', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN dog)) (ADJP (VBG running))))', 'lemma': [(u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'running', u'run', u'VBG')]}, 'tokens': ['a', 'dog', 'running']}, {'string': ' a car crash', 'parse': {'tree': '(ROOT (NP (DT a) (NN car) (NN crash)))', 'lemma': [(u'a', u'a', u'DT'), (u'car', u'car', u'NN'), (u'crash', u'crash', u'NN')]}, 'tokens': ['a', 'car', 'crash']}], 'mode': 0}, {'question': {'string': ' Who got the ice cream cones?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD got) (NP (DT the) (NN ice) (NN cream) (NNS cones)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'got', u'get', u'VBD'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cones', u'cone', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'got', 'the', 'ice', 'cream', 'cones', '?']}, 'answers': [{'string': ' The boys', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NNS boys))))', 'lemma': [(u'The', u'the', u'DT'), (u'boys', u'boy', u'NNS')]}, 'tokens': ['The', 'boys']}, {'string': ' George', 'parse': {'tree': '(ROOT (NP (NNP George)))', 'lemma': [(u'George', u'George', u'NNP')]}, 'tokens': ['George']}, {'string': ' Laura', 'parse': {'tree': '(ROOT (NP (NNP Laura)))', 'lemma': [(u'Laura', u'Laura', u'NNP')]}, 'tokens': ['Laura']}, {'string': ' A stranger', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (NN stranger))))', 'lemma': [(u'A', u'a', u'DT'), (u'stranger', u'stranger', u'NN')]}, 'tokens': ['A', 'stranger']}], 'mode': 0}]}
{'sentences': [{'string': ' There was once a small town by a river.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD was) (ADVP (RB once)) (NP (DT a) (JJ small) (NN town)) (PP (IN by) (NP (DT a) (NN river)))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'once', u'once', u'RB'), (u'a', u'a', u'DT'), (u'small', u'small', u'JJ'), (u'town', u'town', u'NN'), (u'by', u'by', u'IN'), (u'a', u'a', u'DT'), (u'river', u'river', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'was', 'once', 'a', 'small', 'town', 'by', 'a', 'river', '.']}, {'string': ' There were many houses in this town and they were all different colors, shapes and sizes.', 'parse': {'tree': '(ROOT (S (S (NP (EX There)) (VP (VBD were) (NP (NP (JJ many) (NNS houses)) (PP (IN in) (NP (DT this) (NN town)))))) (CC and) (S (NP (PRP they)) (VP (VBD were) (RB all) (NP (JJ different) (NNS colors) (, ,) (NNS shapes) (CC and) (NNS sizes)))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'many', u'many', u'JJ'), (u'houses', u'house', u'NNS'), (u'in', u'in', u'IN'), (u'this', u'this', u'DT'), (u'town', u'town', u'NN'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'all', u'all', u'RB'), (u'different', u'different', u'JJ'), (u'colors', u'color', u'NNS'), (u',', u',', u','), (u'shapes', u'shape', u'NNS'), (u'and', u'and', u'CC'), (u'sizes', u'size', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'were', 'many', 'houses', 'in', 'this', 'town', 'and', 'they', 'were', 'all', 'different', 'colors', ',', 'shapes', 'and', 'sizes', '.']}, {'string': ' which made the people happy.', 'parse': {'tree': '(ROOT (S (NP (WDT which)) (VP (VBD made) (S (NP (DT the) (NNS people)) (ADJP (JJ happy)))) (. .)))', 'lemma': [(u'which', u'which', u'WDT'), (u'made', u'make', u'VBD'), (u'the', u'the', u'DT'), (u'people', u'people', u'NNS'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['which', 'made', 'the', 'people', 'happy', '.']}, {'string': ' On one street there was a red house, a green house, a blue house and one purple house with yellow stripes.', 'parse': {'tree': '(ROOT (S (PP (IN On) (NP (CD one) (NN street))) (NP (EX there)) (VP (VBD was) (NP (NP (DT a) (JJ red) (NN house)) (, ,) (NP (DT a) (JJ green) (NN house)) (, ,) (NP (DT a) (JJ blue) (NN house)) (CC and) (NP (CD one) (JJ purple) (NN house))) (PP (IN with) (NP (JJ yellow) (NNS stripes)))) (. .)))', 'lemma': [(u'On', u'on', u'IN'), (u'one', u'one', u'CD'), (u'street', u'street', u'NN'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'red', u'red', u'JJ'), (u'house', u'house', u'NN'), (u',', u',', u','), (u'a', u'a', u'DT'), (u'green', u'green', u'JJ'), (u'house', u'house', u'NN'), (u',', u',', u','), (u'a', u'a', u'DT'), (u'blue', u'blue', u'JJ'), (u'house', u'house', u'NN'), (u'and', u'and', u'CC'), (u'one', u'one', u'CD'), (u'purple', u'purple', u'JJ'), (u'house', u'house', u'NN'), (u'with', u'with', u'IN'), (u'yellow', u'yellow', u'JJ'), (u'stripes', u'stripe', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'one', 'street', 'there', 'was', 'a', 'red', 'house', ',', 'a', 'green', 'house', ',', 'a', 'blue', 'house', 'and', 'one', 'purple', 'house', 'with', 'yellow', 'stripes', '.']}, {'string': ' The people in the town were all very friendly and knew each other well.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (NNS people)) (PP (IN in) (NP (DT the) (NN town)))) (VP (VP (VBD were) (ADJP (DT all) (RB very) (JJ friendly))) (CC and) (VP (VBD knew) (NP (DT each) (JJ other) (NN well)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'people', u'people', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'town', u'town', u'NN'), (u'were', u'be', u'VBD'), (u'all', u'all', u'DT'), (u'very', u'very', u'RB'), (u'friendly', u'friendly', u'JJ'), (u'and', u'and', u'CC'), (u'knew', u'know', u'VBD'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'well', u'well', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'people', 'in', 'the', 'town', 'were', 'all', 'very', 'friendly', 'and', 'knew', 'each', 'other', 'well', '.']}, {'string': ' When the people of the town went out they loved to wear hats but never wore shoes and the hats were also many different colors, shapes and sizes.', 'parse': {'tree': '(ROOT (S (S (SBAR (WHADVP (WRB When)) (S (NP (NP (DT the) (NNS people)) (PP (IN of) (NP (DT the) (NN town)))) (VP (VBD went) (PRT (RP out))))) (NP (PRP they)) (VP (VP (VBD loved) (S (VP (TO to) (VP (VB wear) (NP (NNS hats)))))) (CC but) (VP (ADVP (RB never)) (VBD wore) (NP (NNS shoes))))) (CC and) (S (NP (DT the) (NNS hats)) (VP (VBD were) (ADVP (RB also)) (NP (NP (JJ many) (JJ different) (NNS colors)) (, ,) (NP (NNS shapes)) (CC and) (NP (NNS sizes))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'people', u'people', u'NNS'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'town', u'town', u'NN'), (u'went', u'go', u'VBD'), (u'out', u'out', u'RP'), (u'they', u'they', u'PRP'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'wear', u'wear', u'VB'), (u'hats', u'hat', u'NNS'), (u'but', u'but', u'CC'), (u'never', u'never', u'RB'), (u'wore', u'wear', u'VBD'), (u'shoes', u'shoe', u'NNS'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'hats', u'hat', u'NNS'), (u'were', u'be', u'VBD'), (u'also', u'also', u'RB'), (u'many', u'many', u'JJ'), (u'different', u'different', u'JJ'), (u'colors', u'color', u'NNS'), (u',', u',', u','), (u'shapes', u'shape', u'NNS'), (u'and', u'and', u'CC'), (u'sizes', u'size', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'the', 'people', 'of', 'the', 'town', 'went', 'out', 'they', 'loved', 'to', 'wear', 'hats', 'but', 'never', 'wore', 'shoes', 'and', 'the', 'hats', 'were', 'also', 'many', 'different', 'colors', ',', 'shapes', 'and', 'sizes', '.']}, {'string': ' On Sundays all the families in town would go to the park by the river and have picnics.', 'parse': {'tree': '(ROOT (S (PP (IN On) (NP (NNP Sundays))) (NP (NP (PDT all) (DT the) (NNS families)) (PP (IN in) (NP (NN town)))) (VP (MD would) (VP (VP (VB go) (PP (TO to) (NP (DT the) (NN park))) (PP (IN by) (NP (DT the) (NN river)))) (CC and) (VP (VB have) (NP (NNS picnics))))) (. .)))', 'lemma': [(u'On', u'on', u'IN'), (u'Sundays', u'Sundays', u'NNP'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'families', u'family', u'NNS'), (u'in', u'in', u'IN'), (u'town', u'town', u'NN'), (u'would', u'would', u'MD'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'river', u'river', u'NN'), (u'and', u'and', u'CC'), (u'have', u'have', u'VB'), (u'picnics', u'picnic', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'Sundays', 'all', 'the', 'families', 'in', 'town', 'would', 'go', 'to', 'the', 'park', 'by', 'the', 'river', 'and', 'have', 'picnics', '.']}, {'string': ' The children would run, skip and play and the parents would talk, eat and laugh.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NNS children)) (VP (MD would) (VP (VB run) (, ,) (VB skip) (CC and) (VB play)))) (CC and) (S (NP (DT the) (NNS parents)) (VP (MD would) (VP (VB talk) (, ,) (VB eat) (CC and) (VB laugh)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'children', u'child', u'NNS'), (u'would', u'would', u'MD'), (u'run', u'run', u'VB'), (u',', u',', u','), (u'skip', u'skip', u'VB'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'parents', u'parent', u'NNS'), (u'would', u'would', u'MD'), (u'talk', u'talk', u'VB'), (u',', u',', u','), (u'eat', u'eat', u'VB'), (u'and', u'and', u'CC'), (u'laugh', u'laugh', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'children', 'would', 'run', ',', 'skip', 'and', 'play', 'and', 'the', 'parents', 'would', 'talk', ',', 'eat', 'and', 'laugh', '.']}, {'string': ' The children loved the picnic foods they had.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS children)) (VP (VBD loved) (NP (NP (DT the) (NN picnic) (NNS foods)) (SBAR (S (NP (PRP they)) (VP (VBD had)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'children', u'child', u'NNS'), (u'loved', u'love', u'VBD'), (u'the', u'the', u'DT'), (u'picnic', u'picnic', u'NN'), (u'foods', u'food', u'NNS'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'children', 'loved', 'the', 'picnic', 'foods', 'they', 'had', '.']}, {'string': ' There were hot dogs, hamburgers, chicken and steak.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD were) (NP (NP (JJ hot) (NNS dogs)) (, ,) (NP (NNS hamburgers)) (, ,) (NP (NN chicken)) (CC and) (NP (NN steak)))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'hot', u'hot', u'JJ'), (u'dogs', u'dog', u'NNS'), (u',', u',', u','), (u'hamburgers', u'hamburger', u'NNS'), (u',', u',', u','), (u'chicken', u'chicken', u'NN'), (u'and', u'and', u'CC'), (u'steak', u'steak', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'were', 'hot', 'dogs', ',', 'hamburgers', ',', 'chicken', 'and', 'steak', '.']}, {'string': ' They also had salads, coleslaw, fries and chips.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (RB also)) (VP (VBD had) (NP (NP (NNS salads)) (, ,) (NP (NN coleslaw)) (, ,) (NP (NNS fries)) (CC and) (NP (NNS chips)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'also', u'also', u'RB'), (u'had', u'have', u'VBD'), (u'salads', u'salad', u'NNS'), (u',', u',', u','), (u'coleslaw', u'coleslaw', u'NN'), (u',', u',', u','), (u'fries', u'fries', u'NNS'), (u'and', u'and', u'CC'), (u'chips', u'chip', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'also', 'had', 'salads', ',', 'coleslaw', ',', 'fries', 'and', 'chips', '.']}, {'string': " The kids ' favorite was hamburgers with fries.", 'parse': {'tree': "(ROOT (S (NP (NP (DT The) (NNS kids) (POS ')) (NN favorite)) (VP (VBD was) (NP (NP (NNS hamburgers)) (PP (IN with) (NP (NNS fries))))) (. .)))", 'lemma': [(u'The', u'the', u'DT'), (u'kids', u'kid', u'NNS'), (u"'", u"'", u'POS'), (u'favorite', u'favorite', u'NN'), (u'was', u'be', u'VBD'), (u'hamburgers', u'hamburger', u'NNS'), (u'with', u'with', u'IN'), (u'fries', u'fries', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'kids', "'", 'favorite', 'was', 'hamburgers', 'with', 'fries', '.']}, {'string': ' On days when it rained the children and parents would stay inside and read or color pictures and drink hot chocolate and they loved to wear big warm sweaters.', 'parse': {'tree': '(ROOT (S (PP (IN On) (NP (NP (NNS days)) (SBAR (WHADVP (WRB when)) (S (NP (PRP it)) (VP (VBD rained)))))) (S (NP (DT the) (NNS children) (CC and) (NNS parents)) (VP (MD would) (VP (VP (VB stay) (NP (NP (NN inside)) (CC and) (NP (VBN read) (CC or) (NN color) (NNS pictures)))) (CC and) (VP (VB drink) (NP (JJ hot) (NN chocolate)))))) (CC and) (S (NP (PRP they)) (VP (VBD loved) (S (VP (TO to) (VP (VB wear) (NP (JJ big) (JJ warm) (NNS sweaters))))))) (. .)))', 'lemma': [(u'On', u'on', u'IN'), (u'days', u'day', u'NNS'), (u'when', u'when', u'WRB'), (u'it', u'it', u'PRP'), (u'rained', u'rain', u'VBD'), (u'the', u'the', u'DT'), (u'children', u'child', u'NNS'), (u'and', u'and', u'CC'), (u'parents', u'parent', u'NNS'), (u'would', u'would', u'MD'), (u'stay', u'stay', u'VB'), (u'inside', u'inside', u'NN'), (u'and', u'and', u'CC'), (u'read', u'read', u'VBN'), (u'or', u'or', u'CC'), (u'color', u'color', u'NN'), (u'pictures', u'picture', u'NNS'), (u'and', u'and', u'CC'), (u'drink', u'drink', u'VB'), (u'hot', u'hot', u'JJ'), (u'chocolate', u'chocolate', u'NN'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'wear', u'wear', u'VB'), (u'big', u'big', u'JJ'), (u'warm', u'warm', u'JJ'), (u'sweaters', u'sweater', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'days', 'when', 'it', 'rained', 'the', 'children', 'and', 'parents', 'would', 'stay', 'inside', 'and', 'read', 'or', 'color', 'pictures', 'and', 'drink', 'hot', 'chocolate', 'and', 'they', 'loved', 'to', 'wear', 'big', 'warm', 'sweaters', '.']}, {'string': ' At night the family would all go to the kitchen and cook dinner together and after dinner was finished they would all clear the table and clean the dishes together before getting ready for bed.', 'parse': {'tree': '(ROOT (S (S (PP (IN At) (NP (NN night))) (NP (DT the) (NN family)) (VP (MD would) (RB all) (VP (VB go) (PP (TO to) (NP (DT the) (NN kitchen) (CC and) (NN cook) (NN dinner))) (ADVP (RB together))))) (CC and) (S (SBAR (IN after) (S (NP (NN dinner)) (VP (VBD was) (VP (VBN finished))))) (NP (PRP they)) (VP (MD would) (RB all) (VP (VP (VB clear) (NP (DT the) (NN table))) (CC and) (VP (VB clean) (NP (DT the) (NNS dishes)) (ADVP (RB together)) (PP (IN before) (S (VP (VBG getting) (ADJP (JJ ready)) (PP (IN for) (NP (NN bed)))))))))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'night', u'night', u'NN'), (u'the', u'the', u'DT'), (u'family', u'family', u'NN'), (u'would', u'would', u'MD'), (u'all', u'all', u'RB'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'kitchen', u'kitchen', u'NN'), (u'and', u'and', u'CC'), (u'cook', u'cook', u'NN'), (u'dinner', u'dinner', u'NN'), (u'together', u'together', u'RB'), (u'and', u'and', u'CC'), (u'after', u'after', u'IN'), (u'dinner', u'dinner', u'NN'), (u'was', u'be', u'VBD'), (u'finished', u'finish', u'VBN'), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'all', u'all', u'RB'), (u'clear', u'clear', u'VB'), (u'the', u'the', u'DT'), (u'table', u'table', u'NN'), (u'and', u'and', u'CC'), (u'clean', u'clean', u'VB'), (u'the', u'the', u'DT'), (u'dishes', u'dish', u'NNS'), (u'together', u'together', u'RB'), (u'before', u'before', u'IN'), (u'getting', u'get', u'VBG'), (u'ready', u'ready', u'JJ'), (u'for', u'for', u'IN'), (u'bed', u'bed', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'night', 'the', 'family', 'would', 'all', 'go', 'to', 'the', 'kitchen', 'and', 'cook', 'dinner', 'together', 'and', 'after', 'dinner', 'was', 'finished', 'they', 'would', 'all', 'clear', 'the', 'table', 'and', 'clean', 'the', 'dishes', 'together', 'before', 'getting', 'ready', 'for', 'bed', '.']}, {'string': ' They would put their pajamas on but never wear socks and they would get under the covers and fall asleep.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VP (MD would) (VP (VB put) (NP (PRP$ their) (NNS pajamas)) (PRT (RP on)))) (CC but) (VP (ADVP (RB never)) (VBP wear) (NP (NNS socks))))) (CC and) (S (NP (PRP they)) (VP (MD would) (VP (VP (VB get) (PP (IN under) (NP (DT the) (NNS covers)))) (CC and) (VP (VB fall) (ADJP (RB asleep)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'put', u'put', u'VB'), (u'their', u'they', u'PRP$'), (u'pajamas', u'pajamas', u'NNS'), (u'on', u'on', u'RP'), (u'but', u'but', u'CC'), (u'never', u'never', u'RB'), (u'wear', u'wear', u'VBP'), (u'socks', u'sock', u'NNS'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'get', u'get', u'VB'), (u'under', u'under', u'IN'), (u'the', u'the', u'DT'), (u'covers', u'cover', u'NNS'), (u'and', u'and', u'CC'), (u'fall', u'fall', u'VB'), (u'asleep', u'asleep', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'would', 'put', 'their', 'pajamas', 'on', 'but', 'never', 'wear', 'socks', 'and', 'they', 'would', 'get', 'under', 'the', 'covers', 'and', 'fall', 'asleep', '.']}], 'questions': [{'question': {'string': ' What were the kids favorite foods at the picnics?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD were) (NP (NP (DT the) (NNS kids) (JJ favorite) (NNS foods)) (PP (IN at) (NP (DT the) (NNS picnics))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'were', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'kids', u'kid', u'NNS'), (u'favorite', u'favorite', u'JJ'), (u'foods', u'food', u'NNS'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'picnics', u'picnic', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'were', 'the', 'kids', 'favorite', 'foods', 'at', 'the', 'picnics', '?']}, 'answers': [{'string': ' Steak and salad', 'parse': {'tree': '(ROOT (NP (NN Steak) (CC and) (NN salad)))', 'lemma': [(u'Steak', u'steak', u'NN'), (u'and', u'and', u'CC'), (u'salad', u'salad', u'NN')]}, 'tokens': ['Steak', 'and', 'salad']}, {'string': ' Chicken and coleslaw', 'parse': {'tree': '(ROOT (NP (NN Chicken) (CC and) (NN coleslaw)))', 'lemma': [(u'Chicken', u'chicken', u'NN'), (u'and', u'and', u'CC'), (u'coleslaw', u'coleslaw', u'NN')]}, 'tokens': ['Chicken', 'and', 'coleslaw']}, {'string': ' Hamburgers and Fries', 'parse': {'tree': '(ROOT (NP (NNPS Hamburgers) (CC and) (NNPS Fries)))', 'lemma': [(u'Hamburgers', u'Hamburgers', u'NNPS'), (u'and', u'and', u'CC'), (u'Fries', u'Fries', u'NNPS')]}, 'tokens': ['Hamburgers', 'and', 'Fries']}, {'string': ' Hot dogs and chips', 'parse': {'tree': '(ROOT (NP (NP (JJ Hot) (NNS dogs)) (CC and) (NP (NNS chips))))', 'lemma': [(u'Hot', u'hot', u'JJ'), (u'dogs', u'dog', u'NNS'), (u'and', u'and', u'CC'), (u'chips', u'chip', u'NNS')]}, 'tokens': ['Hot', 'dogs', 'and', 'chips']}], 'mode': 1}, {'question': {'string': ' Can you name two things the people loved to wear?', 'parse': {'tree': '(ROOT (SQ (MD Can) (NP (PRP you)) (VP (VB name) (NP (NP (CD two) (NNS things)) (SBAR (S (NP (DT the) (NNS people)) (VP (VBD loved) (S (VP (TO to) (VP (VB wear))))))))) (. ?)))', 'lemma': [(u'Can', u'can', u'MD'), (u'you', u'you', u'PRP'), (u'name', u'name', u'VB'), (u'two', u'two', u'CD'), (u'things', u'thing', u'NNS'), (u'the', u'the', u'DT'), (u'people', u'people', u'NNS'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'wear', u'wear', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Can', 'you', 'name', 'two', 'things', 'the', 'people', 'loved', 'to', 'wear', '?']}, 'answers': [{'string': ' Socks and shoes', 'parse': {'tree': '(ROOT (NP (NNS Socks) (CC and) (NNS shoes)))', 'lemma': [(u'Socks', u'sock', u'NNS'), (u'and', u'and', u'CC'), (u'shoes', u'shoe', u'NNS')]}, 'tokens': ['Socks', 'and', 'shoes']}, {'string': ' Shoes and Hats', 'parse': {'tree': '(ROOT (NP (NNPS Shoes) (CC and) (NNPS Hats)))', 'lemma': [(u'Shoes', u'Shoes', u'NNPS'), (u'and', u'and', u'CC'), (u'Hats', u'Hats', u'NNPS')]}, 'tokens': ['Shoes', 'and', 'Hats']}, {'string': ' Hats and Socks', 'parse': {'tree': '(ROOT (NP (NNPS Hats) (CC and) (NNPS Socks)))', 'lemma': [(u'Hats', u'Hats', u'NNPS'), (u'and', u'and', u'CC'), (u'Socks', u'Socks', u'NNPS')]}, 'tokens': ['Hats', 'and', 'Socks']}, {'string': ' Hats and big warm sweaters', 'parse': {'tree': '(ROOT (NP (NP (NNS Hats)) (CC and) (NP (JJ big) (JJ warm) (NNS sweaters))))', 'lemma': [(u'Hats', u'hat', u'NNS'), (u'and', u'and', u'CC'), (u'big', u'big', u'JJ'), (u'warm', u'warm', u'JJ'), (u'sweaters', u'sweater', u'NNS')]}, 'tokens': ['Hats', 'and', 'big', 'warm', 'sweaters']}], 'mode': 0}, {'question': {'string': " On the street with different colored houses which house was n't like the others?", 'parse': {'tree': "(ROOT (FRAG (PP (IN On) (NP (NP (DT the) (NN street)) (PP (IN with) (NP (NP (JJ different) (JJ colored) (NNS houses)) (SBAR (WHNP (WDT which)) (S (NP (NN house)) (VP (VBD was) (RB n't) (PP (IN like) (NP (DT the) (NNS others)))))))))) (. ?)))", 'lemma': [(u'On', u'on', u'IN'), (u'the', u'the', u'DT'), (u'street', u'street', u'NN'), (u'with', u'with', u'IN'), (u'different', u'different', u'JJ'), (u'colored', u'colored', u'JJ'), (u'houses', u'house', u'NNS'), (u'which', u'which', u'WDT'), (u'house', u'house', u'NN'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'IN'), (u'the', u'the', u'DT'), (u'others', u'other', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['On', 'the', 'street', 'with', 'different', 'colored', 'houses', 'which', 'house', 'was', "n't", 'like', 'the', 'others', '?']}, 'answers': [{'string': ' purple house with yellow stripes', 'parse': {'tree': '(ROOT (NP (NP (JJ purple) (NN house)) (PP (IN with) (NP (JJ yellow) (NNS stripes)))))', 'lemma': [(u'purple', u'purple', u'JJ'), (u'house', u'house', u'NN'), (u'with', u'with', u'IN'), (u'yellow', u'yellow', u'JJ'), (u'stripes', u'stripe', u'NNS')]}, 'tokens': ['purple', 'house', 'with', 'yellow', 'stripes']}, {'string': ' green', 'parse': {'tree': '(ROOT (ADJP (JJ green)))', 'lemma': [(u'green', u'green', u'JJ')]}, 'tokens': ['green']}, {'string': ' blue', 'parse': {'tree': '(ROOT (ADJP (JJ blue)))', 'lemma': [(u'blue', u'blue', u'JJ')]}, 'tokens': ['blue']}, {'string': ' red', 'parse': {'tree': '(ROOT (NP (NN red)))', 'lemma': [(u'red', u'red', u'NN')]}, 'tokens': ['red']}], 'mode': 1}, {'question': {'string': ' Can you name two things that were all different colors, shapes and sizes?', 'parse': {'tree': '(ROOT (SQ (MD Can) (NP (PRP you)) (VP (VB name) (NP (NP (CD two) (NNS things)) (SBAR (WHNP (WDT that)) (S (VP (VBD were) (RB all) (NP (JJ different) (NNS colors) (, ,) (NNS shapes) (CC and) (NNS sizes))))))) (. ?)))', 'lemma': [(u'Can', u'can', u'MD'), (u'you', u'you', u'PRP'), (u'name', u'name', u'VB'), (u'two', u'two', u'CD'), (u'things', u'thing', u'NNS'), (u'that', u'that', u'WDT'), (u'were', u'be', u'VBD'), (u'all', u'all', u'RB'), (u'different', u'different', u'JJ'), (u'colors', u'color', u'NNS'), (u',', u',', u','), (u'shapes', u'shape', u'NNS'), (u'and', u'and', u'CC'), (u'sizes', u'size', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['Can', 'you', 'name', 'two', 'things', 'that', 'were', 'all', 'different', 'colors', ',', 'shapes', 'and', 'sizes', '?']}, 'answers': [{'string': ' hats and pajamas', 'parse': {'tree': '(ROOT (NP (NNS hats) (CC and) (NNS pajamas)))', 'lemma': [(u'hats', u'hat', u'NNS'), (u'and', u'and', u'CC'), (u'pajamas', u'pajamas', u'NNS')]}, 'tokens': ['hats', 'and', 'pajamas']}, {'string': ' Sweaters and houses', 'parse': {'tree': '(ROOT (NP (NNS Sweaters) (CC and) (NNS houses)))', 'lemma': [(u'Sweaters', u'sweater', u'NNS'), (u'and', u'and', u'CC'), (u'houses', u'house', u'NNS')]}, 'tokens': ['Sweaters', 'and', 'houses']}, {'string': ' Hats and socks', 'parse': {'tree': '(ROOT (NP (NNS Hats) (CC and) (NNS socks)))', 'lemma': [(u'Hats', u'hat', u'NNS'), (u'and', u'and', u'CC'), (u'socks', u'sock', u'NNS')]}, 'tokens': ['Hats', 'and', 'socks']}, {'string': ' Houses and hats', 'parse': {'tree': '(ROOT (NP (NNS Houses) (CC and) (NNS hats)))', 'lemma': [(u'Houses', u'house', u'NNS'), (u'and', u'and', u'CC'), (u'hats', u'hat', u'NNS')]}, 'tokens': ['Houses', 'and', 'hats']}], 'mode': 0}]}
{'sentences': [{'string': ' Paws the cat lives with the Jones family.', 'parse': {'tree': '(ROOT (S (ADVP (RB Paws)) (NP (DT the) (NN cat)) (VP (VBZ lives) (PP (IN with) (NP (DT the) (NNP Jones) (NN family)))) (. .)))', 'lemma': [(u'Paws', u'paws', u'RB'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'lives', u'live', u'VBZ'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Paws', 'the', 'cat', 'lives', 'with', 'the', 'Jones', 'family', '.']}, {'string': ' Before Paws lived with the Jones family he lived with the Smith family and before he lived with the Smith family he lived with the Peters family.', 'parse': {'tree': '(ROOT (S (SBAR (IN Before) (S (NP (NNP Paws)) (VP (VBD lived) (PP (IN with) (NP (DT the) (NNP Jones) (NN family))) (SBAR (SBAR (S (NP (PRP he)) (VP (VBD lived) (PP (IN with) (NP (DT the) (NNP Smith) (NN family)))))) (CC and) (SBAR (IN before) (S (NP (PRP he)) (VP (VBD lived) (PP (IN with) (NP (DT the) (NNP Smith) (NN family)))))))))) (NP (PRP he)) (VP (VBD lived) (PP (IN with) (NP (DT the) (NNP Peters) (NN family)))) (. .)))', 'lemma': [(u'Before', u'before', u'IN'), (u'Paws', u'Paws', u'NNP'), (u'lived', u'live', u'VBD'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN'), (u'he', u'he', u'PRP'), (u'lived', u'live', u'VBD'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'Smith', u'Smith', u'NNP'), (u'family', u'family', u'NN'), (u'and', u'and', u'CC'), (u'before', u'before', u'IN'), (u'he', u'he', u'PRP'), (u'lived', u'live', u'VBD'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'Smith', u'Smith', u'NNP'), (u'family', u'family', u'NN'), (u'he', u'he', u'PRP'), (u'lived', u'live', u'VBD'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'Peters', u'Peters', u'NNP'), (u'family', u'family', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Before', 'Paws', 'lived', 'with', 'the', 'Jones', 'family', 'he', 'lived', 'with', 'the', 'Smith', 'family', 'and', 'before', 'he', 'lived', 'with', 'the', 'Smith', 'family', 'he', 'lived', 'with', 'the', 'Peters', 'family', '.']}, {'string': ' The Jones family used to live in a cabin in the woods.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNP Jones) (NN family)) (VP (VBD used) (S (VP (TO to) (VP (VB live) (PP (IN in) (NP (NP (DT a) (NN cabin)) (PP (IN in) (NP (DT the) (NNS woods))))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN'), (u'used', u'use', u'VBD'), (u'to', u'to', u'TO'), (u'live', u'live', u'VB'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'cabin', u'cabin', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'Jones', 'family', 'used', 'to', 'live', 'in', 'a', 'cabin', 'in', 'the', 'woods', '.']}, {'string': ' Then they moved to an apartment in the city.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VBD moved) (PP (TO to) (NP (DT an) (NN apartment))) (PP (IN in) (NP (DT the) (NN city)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'moved', u'move', u'VBD'), (u'to', u'to', u'TO'), (u'an', u'a', u'DT'), (u'apartment', u'apartment', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'moved', 'to', 'an', 'apartment', 'in', 'the', 'city', '.']}, {'string': ' Now they live in a house outside of the city.', 'parse': {'tree': '(ROOT (S (ADVP (RB Now)) (NP (PRP they)) (VP (VBP live) (PP (IN in) (NP (NP (DT a) (NN house) (NN outside)) (PP (IN of) (NP (DT the) (NN city)))))) (. .)))', 'lemma': [(u'Now', u'now', u'RB'), (u'they', u'they', u'PRP'), (u'live', u'live', u'VBP'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'house', u'house', u'NN'), (u'outside', u'outside', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Now', 'they', 'live', 'in', 'a', 'house', 'outside', 'of', 'the', 'city', '.']}, {'string': ' Paws liked all of the families that he had lived with but likes the Jones family the best.', 'parse': {'tree': '(ROOT (S (NP (NNS Paws)) (VP (VBD liked) (NP (NP (DT all)) (PP (IN of) (NP (DT the) (NNS families)))) (SBAR (IN that) (S (NP (PRP he)) (VP (VP (VBD had) (VP (VBN lived) (PP (IN with)))) (CC but) (VP (VBZ likes) (S (NP (DT the) (NNP Jones) (NN family)) (NP (DT the) (JJS best)))))))) (. .)))', 'lemma': [(u'Paws', u'paw', u'NNS'), (u'liked', u'like', u'VBD'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'families', u'family', u'NNS'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'lived', u'live', u'VBN'), (u'with', u'with', u'IN'), (u'but', u'but', u'CC'), (u'likes', u'like', u'VBZ'), (u'the', u'the', u'DT'), (u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN'), (u'the', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'.', u'.', u'.')]}, 'tokens': ['Paws', 'liked', 'all', 'of', 'the', 'families', 'that', 'he', 'had', 'lived', 'with', 'but', 'likes', 'the', 'Jones', 'family', 'the', 'best', '.']}, {'string': ' Paws likes living with the Jones family so much because they are nice to him and always play with him but also because they have lived in such great places.', 'parse': {'tree': '(ROOT (S (NP (NNS Paws)) (VP (VBZ likes) (SBAR (SBAR (S (S (VP (VBG living) (PP (IN with) (NP (DT the) (NNP Jones) (NN family))) (ADVP (ADVP (RB so) (RB much)) (SBAR (IN because) (S (NP (PRP they)) (VP (VBP are) (ADJP (JJ nice) (PP (TO to) (NP (PRP him)))))))))) (CC and) (S (ADVP (RB always)) (VP (VB play) (PP (IN with) (NP (PRP him))))))) (CC but) (SBAR (ADVP (RB also)) (IN because) (S (NP (PRP they)) (VP (VBP have) (VP (VBN lived) (PP (IN in) (NP (JJ such) (JJ great) (NNS places))))))))) (. .)))', 'lemma': [(u'Paws', u'paw', u'NNS'), (u'likes', u'like', u'VBZ'), (u'living', u'live', u'VBG'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN'), (u'so', u'so', u'RB'), (u'much', u'much', u'RB'), (u'because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'nice', u'nice', u'JJ'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'always', u'always', u'RB'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'him', u'he', u'PRP'), (u'but', u'but', u'CC'), (u'also', u'also', u'RB'), (u'because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'have', u'have', u'VBP'), (u'lived', u'live', u'VBN'), (u'in', u'in', u'IN'), (u'such', u'such', u'JJ'), (u'great', u'great', u'JJ'), (u'places', u'place', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Paws', 'likes', 'living', 'with', 'the', 'Jones', 'family', 'so', 'much', 'because', 'they', 'are', 'nice', 'to', 'him', 'and', 'always', 'play', 'with', 'him', 'but', 'also', 'because', 'they', 'have', 'lived', 'in', 'such', 'great', 'places', '.']}, {'string': ' Paws liked living in the cabin in the woods and in the apartment in the city but neither of these were his were his favorite place to live.', 'parse': {'tree': '(ROOT (S (S (NP (NNS Paws)) (VP (VBD liked) (S (VP (VBG living) (PP (PP (IN in) (NP (NP (DT the) (NN cabin)) (PP (IN in) (NP (DT the) (NNS woods))))) (CC and) (PP (IN in) (NP (NP (DT the) (NN apartment)) (PP (IN in) (NP (DT the) (NN city)))))))))) (CC but) (S (NP (NP (DT neither)) (PP (IN of) (NP (DT these)))) (VP (VBD were) (SBAR (S (NP (PRP$ his)) (VP (VBD were) (NP (PRP$ his) (JJ favorite) (NN place) (S (VP (TO to) (VP (VB live)))))))))) (. .)))', 'lemma': [(u'Paws', u'paw', u'NNS'), (u'liked', u'like', u'VBD'), (u'living', u'live', u'VBG'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'cabin', u'cabin', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS'), (u'and', u'and', u'CC'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'apartment', u'apartment', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN'), (u'but', u'but', u'CC'), (u'neither', u'neither', u'DT'), (u'of', u'of', u'IN'), (u'these', u'these', u'DT'), (u'were', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'were', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'place', u'place', u'NN'), (u'to', u'to', u'TO'), (u'live', u'live', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Paws', 'liked', 'living', 'in', 'the', 'cabin', 'in', 'the', 'woods', 'and', 'in', 'the', 'apartment', 'in', 'the', 'city', 'but', 'neither', 'of', 'these', 'were', 'his', 'were', 'his', 'favorite', 'place', 'to', 'live', '.']}, {'string': ' Paws favorite place to live is in the new house the Jones family bought outside of the city.', 'parse': {'tree': '(ROOT (S (NP (NP (JJ Paws) (JJ favorite) (NN place)) (SBAR (S (VP (TO to) (VP (VB live)))))) (VP (VBZ is) (PP (IN in) (NP (NP (DT the) (JJ new) (NN house)) (SBAR (S (NP (DT the) (NNP Jones) (NN family)) (VP (VBD bought) (NP (NP (RB outside)) (PP (IN of) (NP (DT the) (NN city)))))))))) (. .)))', 'lemma': [(u'Paws', u'paws', u'JJ'), (u'favorite', u'favorite', u'JJ'), (u'place', u'place', u'NN'), (u'to', u'to', u'TO'), (u'live', u'live', u'VB'), (u'is', u'be', u'VBZ'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'new', u'new', u'JJ'), (u'house', u'house', u'NN'), (u'the', u'the', u'DT'), (u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN'), (u'bought', u'buy', u'VBD'), (u'outside', u'outside', u'RB'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Paws', 'favorite', 'place', 'to', 'live', 'is', 'in', 'the', 'new', 'house', 'the', 'Jones', 'family', 'bought', 'outside', 'of', 'the', 'city', '.']}, {'string': ' The home is very large and Paws has a lot of room to run and play.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NN home)) (VP (VBZ is) (ADJP (RB very) (JJ large)))) (CC and) (S (NP (NNP Paws)) (VP (VBZ has) (NP (NP (DT a) (NN lot)) (PP (IN of) (NP (NN room))) (S (VP (TO to) (VP (VB run) (CC and) (VB play))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'home', u'home', u'NN'), (u'is', u'be', u'VBZ'), (u'very', u'very', u'RB'), (u'large', u'large', u'JJ'), (u'and', u'and', u'CC'), (u'Paws', u'Paws', u'NNP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'of', u'of', u'IN'), (u'room', u'room', u'NN'), (u'to', u'to', u'TO'), (u'run', u'run', u'VB'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'home', 'is', 'very', 'large', 'and', 'Paws', 'has', 'a', 'lot', 'of', 'room', 'to', 'run', 'and', 'play', '.']}], 'questions': [{'question': {'string': ' Paws favorite place to live was?', 'parse': {'tree': '(ROOT (S (NP (NP (JJ Paws) (JJ favorite) (NN place)) (SBAR (S (VP (TO to) (VP (VB live)))))) (VP (VBD was)) (. ?)))', 'lemma': [(u'Paws', u'paws', u'JJ'), (u'favorite', u'favorite', u'JJ'), (u'place', u'place', u'NN'), (u'to', u'to', u'TO'), (u'live', u'live', u'VB'), (u'was', u'be', u'VBD'), (u'?', u'?', u'.')]}, 'tokens': ['Paws', 'favorite', 'place', 'to', 'live', 'was', '?']}, 'answers': [{'string': ' The house outside the city', 'parse': {'tree': '(ROOT (NP (NP (DT The) (NN house)) (PP (IN outside) (NP (DT the) (NN city)))))', 'lemma': [(u'The', u'the', u'DT'), (u'house', u'house', u'NN'), (u'outside', u'outside', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN')]}, 'tokens': ['The', 'house', 'outside', 'the', 'city']}, {'string': ' The cabin in the woods', 'parse': {'tree': '(ROOT (NP (NP (DT The) (NN cabin)) (PP (IN in) (NP (DT the) (NNS woods)))))', 'lemma': [(u'The', u'the', u'DT'), (u'cabin', u'cabin', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS')]}, 'tokens': ['The', 'cabin', 'in', 'the', 'woods']}, {'string': ' The apartment in the city', 'parse': {'tree': '(ROOT (NP (NP (DT The) (NN apartment)) (PP (IN in) (NP (DT the) (NN city)))))', 'lemma': [(u'The', u'the', u'DT'), (u'apartment', u'apartment', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN')]}, 'tokens': ['The', 'apartment', 'in', 'the', 'city']}, {'string': ' A house in the woods', 'parse': {'tree': '(ROOT (NP (NP (DT A) (NN house)) (PP (IN in) (NP (DT the) (NNS woods)))))', 'lemma': [(u'A', u'a', u'DT'), (u'house', u'house', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS')]}, 'tokens': ['A', 'house', 'in', 'the', 'woods']}], 'mode': 1}, {'question': {'string': ' Where does the Jones family live now?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (DT the) (NNP Jones) (NN family)) (VP (VB live) (ADVP (RB now)))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'does', u'do', u'VBZ'), (u'the', u'the', u'DT'), (u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN'), (u'live', u'live', u'VB'), (u'now', u'now', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'does', 'the', 'Jones', 'family', 'live', 'now', '?']}, 'answers': [{'string': ' In a cabin in the woods', 'parse': {'tree': '(ROOT (PP (IN In) (NP (NP (DT a) (NN cabin)) (PP (IN in) (NP (DT the) (NNS woods))))))', 'lemma': [(u'In', u'in', u'IN'), (u'a', u'a', u'DT'), (u'cabin', u'cabin', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS')]}, 'tokens': ['In', 'a', 'cabin', 'in', 'the', 'woods']}, {'string': ' Outside the City', 'parse': {'tree': '(ROOT (PP (IN Outside) (NP (DT the) (NNP City))))', 'lemma': [(u'Outside', u'outside', u'IN'), (u'the', u'the', u'DT'), (u'City', u'City', u'NNP')]}, 'tokens': ['Outside', 'the', 'City']}, {'string': ' In a house in the woods', 'parse': {'tree': '(ROOT (PP (IN In) (NP (NP (DT a) (NN house)) (PP (IN in) (NP (DT the) (NNS woods))))))', 'lemma': [(u'In', u'in', u'IN'), (u'a', u'a', u'DT'), (u'house', u'house', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS')]}, 'tokens': ['In', 'a', 'house', 'in', 'the', 'woods']}, {'string': ' In the City', 'parse': {'tree': '(ROOT (PP (IN In) (NP (DT the) (NNP City))))', 'lemma': [(u'In', u'in', u'IN'), (u'the', u'the', u'DT'), (u'City', u'City', u'NNP')]}, 'tokens': ['In', 'the', 'City']}], 'mode': 1}, {'question': {'string': ' What type of home does the Jones family live in?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN type)) (PP (IN of) (NP (NN home)))) (SQ (VBZ does) (NP (DT the) (NNP Jones) (NN family)) (VP (VB live) (PRT (RP in)))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'type', u'type', u'NN'), (u'of', u'of', u'IN'), (u'home', u'home', u'NN'), (u'does', u'do', u'VBZ'), (u'the', u'the', u'DT'), (u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN'), (u'live', u'live', u'VB'), (u'in', u'in', u'RP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'type', 'of', 'home', 'does', 'the', 'Jones', 'family', 'live', 'in', '?']}, 'answers': [{'string': ' Cabin', 'parse': {'tree': '(ROOT (NP (NNP Cabin)))', 'lemma': [(u'Cabin', u'Cabin', u'NNP')]}, 'tokens': ['Cabin']}, {'string': ' City', 'parse': {'tree': '(ROOT (NP (NNP City)))', 'lemma': [(u'City', u'City', u'NNP')]}, 'tokens': ['City']}, {'string': ' House', 'parse': {'tree': '(ROOT (NP (NNP House)))', 'lemma': [(u'House', u'House', u'NNP')]}, 'tokens': ['House']}, {'string': ' Apartment', 'parse': {'tree': '(ROOT (NP (NNP Apartment)))', 'lemma': [(u'Apartment', u'Apartment', u'NNP')]}, 'tokens': ['Apartment']}], 'mode': 1}, {'question': {'string': ' Who does Paws the cat live with?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ does) (NP (NNP Paws) (DT the) (NN cat)) (VP (VB live) (PP (IN with)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'does', u'do', u'VBZ'), (u'Paws', u'Paws', u'NNP'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'live', u'live', u'VB'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'does', 'Paws', 'the', 'cat', 'live', 'with', '?']}, 'answers': [{'string': ' Jones family', 'parse': {'tree': '(ROOT (NP (NP (NNP Jones)) (NP (NN family))))', 'lemma': [(u'Jones', u'Jones', u'NNP'), (u'family', u'family', u'NN')]}, 'tokens': ['Jones', 'family']}, {'string': ' Paws', 'parse': {'tree': '(ROOT (NP (NNS Paws)))', 'lemma': [(u'Paws', u'paw', u'NNS')]}, 'tokens': ['Paws']}, {'string': ' Peter family', 'parse': {'tree': '(ROOT (NP (NP (NNP Peter)) (NP (NN family))))', 'lemma': [(u'Peter', u'Peter', u'NNP'), (u'family', u'family', u'NN')]}, 'tokens': ['Peter', 'family']}, {'string': ' Smith Family', 'parse': {'tree': '(ROOT (NP (NNP Smith) (NNP Family)))', 'lemma': [(u'Smith', u'Smith', u'NNP'), (u'Family', u'Family', u'NNP')]}, 'tokens': ['Smith', 'Family']}], 'mode': 1}]}
{'sentences': [{'string': ' Chocolate was a box turtle.', 'parse': {'tree': '(ROOT (S (NP (NNP Chocolate)) (VP (VBD was) (NP (DT a) (NN box) (NN turtle))) (. .)))', 'lemma': [(u'Chocolate', u'Chocolate', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'box', u'box', u'NN'), (u'turtle', u'turtle', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Chocolate', 'was', 'a', 'box', 'turtle', '.']}, {'string': ' Lauren found her one day on the side of the road, hiding in her old, worn shell, frightened by the cars going by.', 'parse': {'tree': '(ROOT (S (NP (NNP Lauren)) (VP (VBD found) (NP (PRP$ her) (CD one) (NN day)) (PP (IN on) (NP (NP (DT the) (NN side)) (PP (IN of) (NP (DT the) (NN road))))) (, ,) (S (VP (VBG hiding) (PP (IN in) (NP (NP (PRP$ her) (ADJP (JJ old) (, ,) (JJ worn)) (NN shell)) (, ,) (ADJP (VBN frightened) (PP (IN by) (NP (NP (DT the) (NNS cars)) (VP (VBG going) (PP (IN by))))))))))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'found', u'find', u'VBD'), (u'her', u'she', u'PRP$'), (u'one', u'one', u'CD'), (u'day', u'day', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'side', u'side', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'road', u'road', u'NN'), (u',', u',', u','), (u'hiding', u'hide', u'VBG'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'old', u'old', u'JJ'), (u',', u',', u','), (u'worn', u'worn', u'JJ'), (u'shell', u'shell', u'NN'), (u',', u',', u','), (u'frightened', u'frighten', u'VBN'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'cars', u'car', u'NNS'), (u'going', u'go', u'VBG'), (u'by', u'by', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'found', 'her', 'one', 'day', 'on', 'the', 'side', 'of', 'the', 'road', ',', 'hiding', 'in', 'her', 'old', ',', 'worn', 'shell', ',', 'frightened', 'by', 'the', 'cars', 'going', 'by', '.']}, {'string': ' Lauren picked Chocolate up to help her cross the street, because Lauren knew that turtles are very slow and cars are very fast.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Lauren)) (VP (VBD picked) (NP (NNP Chocolate)) (PRT (RP up)) (S (VP (TO to) (VP (VB help) (S (NP (PRP her)) (VP (VB cross) (NP (DT the) (NN street))))))) (, ,) (SBAR (IN because) (S (NP (NNP Lauren)) (VP (VBD knew) (SBAR (IN that) (S (NP (NNS turtles)) (VP (VBP are) (ADJP (RB very) (JJ slow)))))))))) (CC and) (S (NP (NNS cars)) (VP (VBP are) (ADJP (RB very) (JJ fast)))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'picked', u'pick', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'her', u'she', u'PRP'), (u'cross', u'cross', u'VB'), (u'the', u'the', u'DT'), (u'street', u'street', u'NN'), (u',', u',', u','), (u'because', u'because', u'IN'), (u'Lauren', u'Lauren', u'NNP'), (u'knew', u'know', u'VBD'), (u'that', u'that', u'IN'), (u'turtles', u'turtle', u'NNS'), (u'are', u'be', u'VBP'), (u'very', u'very', u'RB'), (u'slow', u'slow', u'JJ'), (u'and', u'and', u'CC'), (u'cars', u'car', u'NNS'), (u'are', u'be', u'VBP'), (u'very', u'very', u'RB'), (u'fast', u'fast', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'picked', 'Chocolate', 'up', 'to', 'help', 'her', 'cross', 'the', 'street', ',', 'because', 'Lauren', 'knew', 'that', 'turtles', 'are', 'very', 'slow', 'and', 'cars', 'are', 'very', 'fast', '.']}, {'string': ' After Lauren got Chocolate to the other side of the road, Chocolate peeked her head out of her shell and looked at the little girl.', 'parse': {'tree': '(ROOT (S (SBAR (IN After) (S (NP (NNP Lauren)) (VP (VBD got) (NP (NNP Chocolate)) (PP (TO to) (NP (NP (DT the) (JJ other) (NN side)) (PP (IN of) (NP (DT the) (NN road)))))))) (, ,) (NP (NNP Chocolate)) (VP (VP (VBD peeked) (NP (PRP$ her) (NN head)) (PRT (RP out)) (PP (IN of) (NP (PRP$ her) (NN shell)))) (CC and) (VP (VBD looked) (PP (IN at) (NP (DT the) (JJ little) (NN girl))))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'Lauren', u'Lauren', u'NNP'), (u'got', u'get', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'side', u'side', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'road', u'road', u'NN'), (u',', u',', u','), (u'Chocolate', u'Chocolate', u'NNP'), (u'peeked', u'peek', u'VBD'), (u'her', u'she', u'PRP$'), (u'head', u'head', u'NN'), (u'out', u'out', u'RP'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'shell', u'shell', u'NN'), (u'and', u'and', u'CC'), (u'looked', u'look', u'VBD'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'girl', u'girl', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'Lauren', 'got', 'Chocolate', 'to', 'the', 'other', 'side', 'of', 'the', 'road', ',', 'Chocolate', 'peeked', 'her', 'head', 'out', 'of', 'her', 'shell', 'and', 'looked', 'at', 'the', 'little', 'girl', '.']}, {'string': " Lauren saw that not only was Chocolate 's shell worn, one of her eyes was shut.", 'parse': {'tree': "(ROOT (S (NP (NNP Lauren)) (VP (VBD saw) (SBAR (IN that) (S (SBAR (RB not) (S (ADVP (RB only)) (VP (VBD was) (NP (NP (NP (NNP Chocolate) (POS 's)) (NN shell)) (VP (VBN worn)))))) (, ,) (NP (NP (CD one)) (PP (IN of) (NP (PRP$ her) (NNS eyes)))) (VP (VBD was) (VP (VBN shut)))))) (. .)))", 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'saw', u'see', u'VBD'), (u'that', u'that', u'IN'), (u'not', u'not', u'RB'), (u'only', u'only', u'RB'), (u'was', u'be', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u"'s", u"'s", u'POS'), (u'shell', u'shell', u'NN'), (u'worn', u'wear', u'VBN'), (u',', u',', u','), (u'one', u'one', u'CD'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'was', u'be', u'VBD'), (u'shut', u'shut', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'saw', 'that', 'not', 'only', 'was', 'Chocolate', "'s", 'shell', 'worn', ',', 'one', 'of', 'her', 'eyes', 'was', 'shut', '.']}, {'string': ' Lauren thought Chocolate needed more help from her, so Lauren took the turtle home.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Lauren)) (VP (VBD thought) (SBAR (S (NP (NNP Chocolate)) (VP (VBD needed) (NP (JJR more) (NN help)) (PP (IN from) (NP (PRP her)))))))) (, ,) (IN so) (S (NP (NNP Lauren)) (VP (VBD took) (NP (DT the) (NN turtle) (NN home)))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'thought', u'think', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u'needed', u'need', u'VBD'), (u'more', u'more', u'JJR'), (u'help', u'help', u'NN'), (u'from', u'from', u'IN'), (u'her', u'she', u'PRP'), (u',', u',', u','), (u'so', u'so', u'IN'), (u'Lauren', u'Lauren', u'NNP'), (u'took', u'take', u'VBD'), (u'the', u'the', u'DT'), (u'turtle', u'turtle', u'NN'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'thought', 'Chocolate', 'needed', 'more', 'help', 'from', 'her', ',', 'so', 'Lauren', 'took', 'the', 'turtle', 'home', '.']}, {'string': ' Lauren hid Chocolate in her bathtub, because she was worried that her mother would be mad.', 'parse': {'tree': '(ROOT (S (NP (NNP Lauren)) (VP (VBP hid) (NP (NP (NNP Chocolate)) (PP (IN in) (NP (PRP$ her) (NN bathtub)))) (, ,) (SBAR (IN because) (S (NP (PRP she)) (VP (VBD was) (VP (VBN worried) (SBAR (IN that) (S (NP (PRP$ her) (NN mother)) (VP (MD would) (VP (VB be) (ADJP (JJ mad))))))))))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'hid', u'hide', u'VBP'), (u'Chocolate', u'Chocolate', u'NNP'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'bathtub', u'bathtub', u'NN'), (u',', u',', u','), (u'because', u'because', u'IN'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'worried', u'worry', u'VBN'), (u'that', u'that', u'IN'), (u'her', u'she', u'PRP$'), (u'mother', u'mother', u'NN'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'mad', u'mad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'hid', 'Chocolate', 'in', 'her', 'bathtub', ',', 'because', 'she', 'was', 'worried', 'that', 'her', 'mother', 'would', 'be', 'mad', '.']}, {'string': ' Lauren went to look up what turtles like to eat and left Chocolate alone in the bathtub.', 'parse': {'tree': '(ROOT (S (NP (NNP Lauren)) (VP (VP (VBD went) (S (VP (TO to) (VP (VB look) (PRT (RP up)) (SBAR (WHNP (WP what)) (S (NP (NNS turtles)) (VP (VBP like) (S (VP (TO to) (VP (VB eat))))))))))) (CC and) (VP (VBD left) (NP (NNP Chocolate)) (PP (ADVP (RB alone)) (IN in) (NP (DT the) (NN bathtub))))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'look', u'look', u'VB'), (u'up', u'up', u'RP'), (u'what', u'what', u'WP'), (u'turtles', u'turtle', u'NNS'), (u'like', u'like', u'VBP'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'and', u'and', u'CC'), (u'left', u'leave', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u'alone', u'alone', u'RB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'bathtub', u'bathtub', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'went', 'to', 'look', 'up', 'what', 'turtles', 'like', 'to', 'eat', 'and', 'left', 'Chocolate', 'alone', 'in', 'the', 'bathtub', '.']}, {'string': " Lauren was still looking up turtle facts when she heard her mother call out, `` Lauren, get in here now! ''", 'parse': {'tree': "(ROOT (S (NP (NNP Lauren)) (VP (VBD was) (ADVP (RB still)) (VP (VBG looking) (PRT (RP up)) (NP (NN turtle) (NNS facts)) (SBAR (WHADVP (WRB when)) (S (NP (PRP she)) (VP (VBD heard) (NP (PRP$ her) (NN mother) (NN call)) (PRT (RP out)) (, ,) (`` ``) (S (NP (NNP Lauren)) (, ,) (VP (VB get) (PP (IN in) (NP (RB here))) (ADVP (RB now))))))))) (. !) ('' '')))", 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'was', u'be', u'VBD'), (u'still', u'still', u'RB'), (u'looking', u'look', u'VBG'), (u'up', u'up', u'RP'), (u'turtle', u'turtle', u'NN'), (u'facts', u'fact', u'NNS'), (u'when', u'when', u'WRB'), (u'she', u'she', u'PRP'), (u'heard', u'hear', u'VBD'), (u'her', u'she', u'PRP$'), (u'mother', u'mother', u'NN'), (u'call', u'call', u'NN'), (u'out', u'out', u'RP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Lauren', u'Lauren', u'NNP'), (u',', u',', u','), (u'get', u'get', u'VB'), (u'in', u'in', u'IN'), (u'here', u'here', u'RB'), (u'now', u'now', u'RB'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Lauren', 'was', 'still', 'looking', 'up', 'turtle', 'facts', 'when', 'she', 'heard', 'her', 'mother', 'call', 'out', ',', '``', 'Lauren', ',', 'get', 'in', 'here', 'now', '!', "''"]}, {'string': ' Lauren knew she was in trouble.', 'parse': {'tree': '(ROOT (S (NP (NNP Lauren)) (VP (VBD knew) (SBAR (S (NP (PRP she)) (VP (VBD was) (PP (IN in) (NP (NN trouble))))))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'knew', u'know', u'VBD'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'in', u'in', u'IN'), (u'trouble', u'trouble', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'knew', 'she', 'was', 'in', 'trouble', '.']}, {'string': ' But when Lauren came into the bathroom, her mother was smiling.', 'parse': {'tree': '(ROOT (S (CC But) (SBAR (WHADVP (WRB when)) (S (NP (NNP Lauren)) (VP (VBD came) (PP (IN into) (NP (DT the) (NN bathroom)))))) (, ,) (NP (PRP$ her) (NN mother)) (VP (VBD was) (VP (VBG smiling))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'when', u'when', u'WRB'), (u'Lauren', u'Lauren', u'NNP'), (u'came', u'come', u'VBD'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'bathroom', u'bathroom', u'NN'), (u',', u',', u','), (u'her', u'she', u'PRP$'), (u'mother', u'mother', u'NN'), (u'was', u'be', u'VBD'), (u'smiling', u'smile', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'when', 'Lauren', 'came', 'into', 'the', 'bathroom', ',', 'her', 'mother', 'was', 'smiling', '.']}, {'string': " Lauren 's mom told her that she had a turtle when she was a little girl.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Lauren) (POS 's)) (NN mom)) (VP (VBD told) (NP (PRP her)) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD had) (NP (NP (DT a) (NN turtle)) (SBAR (WHADVP (WRB when)) (S (NP (PRP she)) (VP (VBD was) (NP (DT a) (JJ little) (NN girl)))))))))) (. .)))", 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'told', u'tell', u'VBD'), (u'her', u'she', u'PRP'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'turtle', u'turtle', u'NN'), (u'when', u'when', u'WRB'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'girl', u'girl', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', "'s", 'mom', 'told', 'her', 'that', 'she', 'had', 'a', 'turtle', 'when', 'she', 'was', 'a', 'little', 'girl', '.']}, {'string': ' Lauren and her mom took Chocolate to an animal doctor who treated sick turtles.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Lauren)) (CC and) (NP (PRP$ her) (NN mom))) (VP (VBD took) (NP (NNP Chocolate)) (PP (TO to) (NP (NP (DT an) (NN animal) (NN doctor)) (SBAR (WHNP (WP who)) (S (VP (VBD treated) (NP (JJ sick) (NNS turtles)))))))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'mom', u'mom', u'NN'), (u'took', u'take', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u'to', u'to', u'TO'), (u'an', u'a', u'DT'), (u'animal', u'animal', u'NN'), (u'doctor', u'doctor', u'NN'), (u'who', u'who', u'WP'), (u'treated', u'treat', u'VBD'), (u'sick', u'sick', u'JJ'), (u'turtles', u'turtle', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'and', 'her', 'mom', 'took', 'Chocolate', 'to', 'an', 'animal', 'doctor', 'who', 'treated', 'sick', 'turtles', '.']}, {'string': " The doctor gave them special drops to put in Chocolate 's eyes.", 'parse': {'tree': "(ROOT (S (NP (DT The) (NN doctor)) (VP (VBD gave) (NP (PRP them)) (NP (JJ special) (NNS drops)) (S (VP (TO to) (VP (VB put) (PP (IN in) (NP (NP (NNP Chocolate) (POS 's)) (NNS eyes))))))) (. .)))", 'lemma': [(u'The', u'the', u'DT'), (u'doctor', u'doctor', u'NN'), (u'gave', u'give', u'VBD'), (u'them', u'they', u'PRP'), (u'special', u'special', u'JJ'), (u'drops', u'drop', u'NNS'), (u'to', u'to', u'TO'), (u'put', u'put', u'VB'), (u'in', u'in', u'IN'), (u'Chocolate', u'Chocolate', u'NNP'), (u"'s", u"'s", u'POS'), (u'eyes', u'eye', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'doctor', 'gave', 'them', 'special', 'drops', 'to', 'put', 'in', 'Chocolate', "'s", 'eyes', '.']}, {'string': " Lauren put the drops in Chocolate 's eyes, like the doctor told her and soon the turtle 's eyes were all better.", 'parse': {'tree': "(ROOT (S (S (NP (NNP Lauren)) (VP (VBD put) (NP (DT the) (NNS drops)) (PP (IN in) (NP (NP (NNP Chocolate) (POS 's)) (NNS eyes))) (, ,) (SBAR (IN like) (S (NP (DT the) (NN doctor)) (VP (VBD told) (NP (PRP her))))))) (CC and) (S (ADVP (RB soon)) (NP (NP (DT the) (NN turtle) (POS 's)) (NNS eyes)) (VP (VBD were) (ADVP (DT all) (RBR better)))) (. .)))", 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'put', u'put', u'VBD'), (u'the', u'the', u'DT'), (u'drops', u'drop', u'NNS'), (u'in', u'in', u'IN'), (u'Chocolate', u'Chocolate', u'NNP'), (u"'s", u"'s", u'POS'), (u'eyes', u'eye', u'NNS'), (u',', u',', u','), (u'like', u'like', u'IN'), (u'the', u'the', u'DT'), (u'doctor', u'doctor', u'NN'), (u'told', u'tell', u'VBD'), (u'her', u'she', u'PRP'), (u'and', u'and', u'CC'), (u'soon', u'soon', u'RB'), (u'the', u'the', u'DT'), (u'turtle', u'turtle', u'NN'), (u"'s", u"'s", u'POS'), (u'eyes', u'eye', u'NNS'), (u'were', u'be', u'VBD'), (u'all', u'all', u'DT'), (u'better', u'better', u'RBR'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'put', 'the', 'drops', 'in', 'Chocolate', "'s", 'eyes', ',', 'like', 'the', 'doctor', 'told', 'her', 'and', 'soon', 'the', 'turtle', "'s", 'eyes', 'were', 'all', 'better', '.']}, {'string': " Chocolate 's shell was still old and worn looking, like an old shoe, but now her eyes were beautiful, like the golden jewels on Grandma 's earrings.", 'parse': {'tree': "(ROOT (S (S (NP (NP (NNP Chocolate) (POS 's)) (NN shell)) (VP (VBD was) (ADVP (RB still)) (ADJP (JJ old) (CC and) (JJ worn)) (S (VP (VBG looking) (, ,) (PP (IN like) (NP (DT an) (JJ old) (NN shoe))))))) (, ,) (CC but) (S (ADVP (RB now)) (NP (PRP$ her) (NNS eyes)) (VP (VBD were) (ADJP (JJ beautiful)) (, ,) (PP (IN like) (NP (NP (DT the) (JJ golden) (NNS jewels)) (PP (IN on) (NP (NP (NNP Grandma) (POS 's)) (NNS earrings))))))) (. .)))", 'lemma': [(u'Chocolate', u'Chocolate', u'NNP'), (u"'s", u"'s", u'POS'), (u'shell', u'shell', u'NN'), (u'was', u'be', u'VBD'), (u'still', u'still', u'RB'), (u'old', u'old', u'JJ'), (u'and', u'and', u'CC'), (u'worn', u'worn', u'JJ'), (u'looking', u'look', u'VBG'), (u',', u',', u','), (u'like', u'like', u'IN'), (u'an', u'a', u'DT'), (u'old', u'old', u'JJ'), (u'shoe', u'shoe', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'now', u'now', u'RB'), (u'her', u'she', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'were', u'be', u'VBD'), (u'beautiful', u'beautiful', u'JJ'), (u',', u',', u','), (u'like', u'like', u'IN'), (u'the', u'the', u'DT'), (u'golden', u'golden', u'JJ'), (u'jewels', u'jewel', u'NNS'), (u'on', u'on', u'IN'), (u'Grandma', u'Grandma', u'NNP'), (u"'s", u"'s", u'POS'), (u'earrings', u'earring', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Chocolate', "'s", 'shell', 'was', 'still', 'old', 'and', 'worn', 'looking', ',', 'like', 'an', 'old', 'shoe', ',', 'but', 'now', 'her', 'eyes', 'were', 'beautiful', ',', 'like', 'the', 'golden', 'jewels', 'on', 'Grandma', "'s", 'earrings', '.']}, {'string': ' Lauren was glad that she helped Chocolate.', 'parse': {'tree': '(ROOT (S (NP (NNP Lauren)) (VP (VBD was) (ADJP (JJ glad)) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD helped) (NP (NNP Chocolate)))))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'was', u'be', u'VBD'), (u'glad', u'glad', u'JJ'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'helped', u'help', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'was', 'glad', 'that', 'she', 'helped', 'Chocolate', '.']}], 'questions': [{'question': {'string': ' Who was Chocolate?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NNP Chocolate))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'Chocolate', '?']}, 'answers': [{'string': ' a cat', 'parse': {'tree': '(ROOT (FRAG (DT a) (JJ cat)))', 'lemma': [(u'a', u'a', u'DT'), (u'cat', u'cat', u'JJ')]}, 'tokens': ['a', 'cat']}, {'string': ' a dog', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN dog))))', 'lemma': [(u'a', u'a', u'DT'), (u'dog', u'dog', u'NN')]}, 'tokens': ['a', 'dog']}, {'string': ' a lizard', 'parse': {'tree': '(ROOT (FRAG (X (SYM a)) (VP (VBD lizard))))', 'lemma': [(u'a', u'a', u'SYM'), (u'lizard', u'lizard', u'VBD')]}, 'tokens': ['a', 'lizard']}, {'string': ' a turtle', 'parse': {'tree': '(ROOT (FRAG (DT a) (JJ turtle)))', 'lemma': [(u'a', u'a', u'DT'), (u'turtle', u'turtle', u'JJ')]}, 'tokens': ['a', 'turtle']}], 'mode': 1}, {'question': {'string': ' What did Chocolate have at the beginning and the end of the story?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Chocolate)) (VP (VB have) (PP (IN at) (NP (NP (DT the) (NN beginning)) (CC and) (NP (NP (DT the) (NN end)) (PP (IN of) (NP (DT the) (NN story)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Chocolate', u'Chocolate', u'NNP'), (u'have', u'have', u'VB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'beginning', u'beginning', u'NN'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'end', u'end', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Chocolate', 'have', 'at', 'the', 'beginning', 'and', 'the', 'end', 'of', 'the', 'story', '?']}, 'answers': [{'string': ' a worn shell', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (ADJP (JJ worn)) (NN shell))))', 'lemma': [(u'a', u'a', u'DT'), (u'worn', u'worn', u'JJ'), (u'shell', u'shell', u'NN')]}, 'tokens': ['a', 'worn', 'shell']}, {'string': ' beautiful golden eyes', 'parse': {'tree': '(ROOT (S (VP (VB beautiful) (NP (JJ golden) (NNS eyes)))))', 'lemma': [(u'beautiful', u'beautiful', u'VB'), (u'golden', u'golden', u'JJ'), (u'eyes', u'eye', u'NNS')]}, 'tokens': ['beautiful', 'golden', 'eyes']}, {'string': ' bright green eyes', 'parse': {'tree': '(ROOT (NP (JJ bright) (NN green) (NNS eyes)))', 'lemma': [(u'bright', u'bright', u'JJ'), (u'green', u'green', u'NN'), (u'eyes', u'eye', u'NNS')]}, 'tokens': ['bright', 'green', 'eyes']}, {'string': ' a shiny shell', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (JJ shiny) (NN shell))))', 'lemma': [(u'a', u'a', u'DT'), (u'shiny', u'shiny', u'JJ'), (u'shell', u'shell', u'NN')]}, 'tokens': ['a', 'shiny', 'shell']}], 'mode': 0}, {'question': {'string': ' Where did Lauren hide Chocolate?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Lauren)) (VP (VB hide) (NP (NNP Chocolate)))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'Lauren', u'Lauren', u'NNP'), (u'hide', u'hide', u'VB'), (u'Chocolate', u'Chocolate', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'Lauren', 'hide', 'Chocolate', '?']}, 'answers': [{'string': ' in a closet', 'parse': {'tree': '(ROOT (PP (IN in) (NP (DT a) (NN closet))))', 'lemma': [(u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'closet', u'closet', u'NN')]}, 'tokens': ['in', 'a', 'closet']}, {'string': ' in a box', 'parse': {'tree': '(ROOT (PP (IN in) (NP (DT a) (NN box))))', 'lemma': [(u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'box', u'box', u'NN')]}, 'tokens': ['in', 'a', 'box']}, {'string': ' in her backpack', 'parse': {'tree': '(ROOT (PP (IN in) (NP (PRP$ her) (NN backpack))))', 'lemma': [(u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'backpack', u'backpack', u'NN')]}, 'tokens': ['in', 'her', 'backpack']}, {'string': ' in the bathtub', 'parse': {'tree': '(ROOT (PP (IN in) (NP (DT the) (NN bathtub))))', 'lemma': [(u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'bathtub', u'bathtub', u'NN')]}, 'tokens': ['in', 'the', 'bathtub']}], 'mode': 1}, {'question': {'string': ' What did Lauren do to help Chocolate?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Lauren)) (VP (VB do) (S (VP (TO to) (VP (VB help) (NP (NNP Chocolate))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Lauren', u'Lauren', u'NNP'), (u'do', u'do', u'VB'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'Chocolate', u'Chocolate', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Lauren', 'do', 'to', 'help', 'Chocolate', '?']}, 'answers': [{'string': ' fed her and put drops in her eyes', 'parse': {'tree': '(ROOT (S (VP (VP (VB fed) (NP (PRP her))) (CC and) (VP (VB put) (NP (NNS drops)) (PP (IN in) (NP (PRP$ her) (NNS eyes)))))))', 'lemma': [(u'fed', u'feed', u'VB'), (u'her', u'she', u'PRP'), (u'and', u'and', u'CC'), (u'put', u'put', u'VB'), (u'drops', u'drop', u'NNS'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'eyes', u'eye', u'NNS')]}, 'tokens': ['fed', 'her', 'and', 'put', 'drops', 'in', 'her', 'eyes']}, {'string': ' helped her cross the road and gave her a bath', 'parse': {'tree': '(ROOT (SINV (VP (VBD helped) (SBAR (S (NP (PRP her)) (VP (VP (VBP cross) (NP (DT the) (NN road))) (CC and) (VP (VBD gave) (NP (PRP her))))))) (NP (DT a) (NN bath))))', 'lemma': [(u'helped', u'help', u'VBD'), (u'her', u'she', u'PRP'), (u'cross', u'cross', u'VBP'), (u'the', u'the', u'DT'), (u'road', u'road', u'NN'), (u'and', u'and', u'CC'), (u'gave', u'give', u'VBD'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'bath', u'bath', u'NN')]}, 'tokens': ['helped', 'her', 'cross', 'the', 'road', 'and', 'gave', 'her', 'a', 'bath']}, {'string': ' helped her cross the road and put drops in her eyes', 'parse': {'tree': '(ROOT (SINV (VP (VBD helped) (NP (PRP$ her) (NN cross))) (NP (NP (DT the) (NN road) (CC and) (NN put) (NNS drops)) (PP (IN in) (NP (PRP$ her) (NNS eyes))))))', 'lemma': [(u'helped', u'help', u'VBD'), (u'her', u'she', u'PRP$'), (u'cross', u'cross', u'NN'), (u'the', u'the', u'DT'), (u'road', u'road', u'NN'), (u'and', u'and', u'CC'), (u'put', u'put', u'NN'), (u'drops', u'drop', u'NNS'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'eyes', u'eye', u'NNS')]}, 'tokens': ['helped', 'her', 'cross', 'the', 'road', 'and', 'put', 'drops', 'in', 'her', 'eyes']}, {'string': ' gave her a bath and fed her', 'parse': {'tree': '(ROOT (SINV (VP (VBD gave) (NP (PRP her)) (NP (DT a) (NN bath) (CC and) (NN fed))) (NP (PRP her))))', 'lemma': [(u'gave', u'give', u'VBD'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'bath', u'bath', u'NN'), (u'and', u'and', u'CC'), (u'fed', u'fed', u'NN'), (u'her', u'she', u'PRP')]}, 'tokens': ['gave', 'her', 'a', 'bath', 'and', 'fed', 'her']}], 'mode': 0}]}
{'sentences': [{'string': ' School is out for the summer.', 'parse': {'tree': '(ROOT (S (NP (NNP School)) (VP (VBZ is) (ADVP (RB out)) (PP (IN for) (NP (DT the) (NN summer)))) (. .)))', 'lemma': [(u'School', u'School', u'NNP'), (u'is', u'be', u'VBZ'), (u'out', u'out', u'RB'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'summer', u'summer', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['School', 'is', 'out', 'for', 'the', 'summer', '.']}, {'string': ' Jake and Jimmy are playing on a baseball team.', 'parse': {'tree': '(ROOT (S (NP (NNP Jake) (CC and) (NNP Jimmy)) (VP (VBP are) (VP (VBG playing) (PP (IN on) (NP (DT a) (NN baseball) (NN team))))) (. .)))', 'lemma': [(u'Jake', u'Jake', u'NNP'), (u'and', u'and', u'CC'), (u'Jimmy', u'Jimmy', u'NNP'), (u'are', u'be', u'VBP'), (u'playing', u'play', u'VBG'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'baseball', u'baseball', u'NN'), (u'team', u'team', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jake', 'and', 'Jimmy', 'are', 'playing', 'on', 'a', 'baseball', 'team', '.']}, {'string': ' They are both nine years old this year.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP are) (ADJP (NP (DT both) (CD nine) (NNS years)) (JJ old)) (NP (DT this) (NN year))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'both', u'both', u'DT'), (u'nine', u'nine', u'CD'), (u'years', u'year', u'NNS'), (u'old', u'old', u'JJ'), (u'this', u'this', u'DT'), (u'year', u'year', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'are', 'both', 'nine', 'years', 'old', 'this', 'year', '.']}, {'string': ' Their team is called the Knights.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Their) (NN team)) (VP (VBZ is) (VP (VBN called) (NP (DT the) (NNPS Knights)))) (. .)))', 'lemma': [(u'Their', u'they', u'PRP$'), (u'team', u'team', u'NN'), (u'is', u'be', u'VBZ'), (u'called', u'call', u'VBN'), (u'the', u'the', u'DT'), (u'Knights', u'Knights', u'NNPS'), (u'.', u'.', u'.')]}, 'tokens': ['Their', 'team', 'is', 'called', 'the', 'Knights', '.']}, {'string': ' Jake plays first base and Jimmy is a pitcher.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Jake)) (VP (VBZ plays) (NP (JJ first) (NN base)))) (CC and) (S (NP (NNP Jimmy)) (VP (VBZ is) (NP (DT a) (NN pitcher)))) (. .)))', 'lemma': [(u'Jake', u'Jake', u'NNP'), (u'plays', u'play', u'VBZ'), (u'first', u'first', u'JJ'), (u'base', u'base', u'NN'), (u'and', u'and', u'CC'), (u'Jimmy', u'Jimmy', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'pitcher', u'pitcher', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jake', 'plays', 'first', 'base', 'and', 'Jimmy', 'is', 'a', 'pitcher', '.']}, {'string': ' They both love baseball.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (DT both) (VP (VBP love) (NP (NN baseball))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'both', u'both', u'DT'), (u'love', u'love', u'VBP'), (u'baseball', u'baseball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'both', 'love', 'baseball', '.']}, {'string': ' They started playing when they were four years old.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD started) (S (VP (VBG playing) (SBAR (WHADVP (WRB when)) (S (NP (PRP they)) (VP (VBD were) (ADJP (NP (CD four) (NNS years)) (JJ old)))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'started', u'start', u'VBD'), (u'playing', u'play', u'VBG'), (u'when', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'four', u'four', u'CD'), (u'years', u'year', u'NNS'), (u'old', u'old', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'started', 'playing', 'when', 'they', 'were', 'four', 'years', 'old', '.']}, {'string': ' It is so fun for them.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBZ is) (ADVP (RB so)) (NP (NP (NN fun)) (PP (IN for) (NP (PRP them))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'so', u'so', u'RB'), (u'fun', u'fun', u'NN'), (u'for', u'for', u'IN'), (u'them', u'they', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'is', 'so', 'fun', 'for', 'them', '.']}, {'string': ' Their team has won three games so far.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Their) (NN team)) (VP (VBZ has) (VP (VBN won) (NP (CD three) (NNS games)) (ADVP (RB so) (RB far)))) (. .)))', 'lemma': [(u'Their', u'they', u'PRP$'), (u'team', u'team', u'NN'), (u'has', u'have', u'VBZ'), (u'won', u'win', u'VBN'), (u'three', u'three', u'CD'), (u'games', u'game', u'NNS'), (u'so', u'so', u'RB'), (u'far', u'far', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Their', 'team', 'has', 'won', 'three', 'games', 'so', 'far', '.']}, {'string': ' They beat the Jets, the Bluejays, and the Hawks so far.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD beat) (NP (NP (DT the) (NNS Jets)) (, ,) (NP (DT the) (NNPS Bluejays)) (, ,) (CC and) (NP (DT the) (NNPS Hawks))) (ADVP (RB so) (RB far))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'beat', u'beat', u'VBD'), (u'the', u'the', u'DT'), (u'Jets', u'jet', u'NNS'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'Bluejays', u'Bluejays', u'NNPS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'Hawks', u'Hawks', u'NNPS'), (u'so', u'so', u'RB'), (u'far', u'far', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'beat', 'the', 'Jets', ',', 'the', 'Bluejays', ',', 'and', 'the', 'Hawks', 'so', 'far', '.']}, {'string': ' They have not lost any games yet.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP have) (RB not) (VP (VBN lost) (NP (DT any) (NNS games)) (ADVP (RB yet)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'have', u'have', u'VBP'), (u'not', u'not', u'RB'), (u'lost', u'lose', u'VBN'), (u'any', u'any', u'DT'), (u'games', u'game', u'NNS'), (u'yet', u'yet', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'have', 'not', 'lost', 'any', 'games', 'yet', '.']}, {'string': ' They are playing the Tigers today.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP are) (VP (VBG playing) (NP (DT the) (NNP Tigers) (NN today)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'playing', u'play', u'VBG'), (u'the', u'the', u'DT'), (u'Tigers', u'Tigers', u'NNP'), (u'today', u'today', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'are', 'playing', 'the', 'Tigers', 'today', '.']}, {'string': ' The Tigers have not lost any games either.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNP Tigers)) (VP (VBP have) (RB not) (VP (VBN lost) (NP (DT any) (NNS games)) (ADVP (RB either)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'Tigers', u'Tigers', u'NNP'), (u'have', u'have', u'VBP'), (u'not', u'not', u'RB'), (u'lost', u'lose', u'VBN'), (u'any', u'any', u'DT'), (u'games', u'game', u'NNS'), (u'either', u'either', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'Tigers', 'have', 'not', 'lost', 'any', 'games', 'either', '.']}, {'string': ' The score was one to one until the last inning.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN score)) (VP (VBD was) (ADVP (CD one) (TO to) (CD one)) (PP (IN until) (NP (DT the) (JJ last) (NN inning)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'score', u'score', u'NN'), (u'was', u'be', u'VBD'), (u'one', u'one', u'CD'), (u'to', u'to', u'TO'), (u'one', u'one', u'CD'), (u'until', u'until', u'IN'), (u'the', u'the', u'DT'), (u'last', u'last', u'JJ'), (u'inning', u'inning', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'score', 'was', 'one', 'to', 'one', 'until', 'the', 'last', 'inning', '.']}, {'string': ' There were two outs.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD were) (NP (CD two) (NNS outs))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'two', u'two', u'CD'), (u'outs', u'out', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'were', 'two', 'outs', '.']}, {'string': ' Jimmy came to the plate.', 'parse': {'tree': '(ROOT (S (NP (NNP Jimmy)) (VP (VBD came) (PP (TO to) (NP (DT the) (NN plate)))) (. .)))', 'lemma': [(u'Jimmy', u'Jimmy', u'NNP'), (u'came', u'come', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'plate', u'plate', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jimmy', 'came', 'to', 'the', 'plate', '.']}, {'string': ' The pitcher named Johnny threw the ball hard.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN pitcher)) (VP (VBD named) (SBAR (S (NP (NNP Johnny)) (VP (VBD threw) (NP (DT the) (NN ball)) (ADVP (RB hard)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'pitcher', u'pitcher', u'NN'), (u'named', u'name', u'VBD'), (u'Johnny', u'Johnny', u'NNP'), (u'threw', u'throw', u'VBD'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'hard', u'hard', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'pitcher', 'named', 'Johnny', 'threw', 'the', 'ball', 'hard', '.']}, {'string': ' Jimmy swung his bat too late and missed.', 'parse': {'tree': '(ROOT (S (NP (NNP Jimmy)) (VP (VP (VBD swung) (NP (PRP$ his) (NN bat)) (ADVP (RB too) (RB late))) (CC and) (VP (VBD missed))) (. .)))', 'lemma': [(u'Jimmy', u'Jimmy', u'NNP'), (u'swung', u'swing', u'VBD'), (u'his', u'he', u'PRP$'), (u'bat', u'bat', u'NN'), (u'too', u'too', u'RB'), (u'late', u'late', u'RB'), (u'and', u'and', u'CC'), (u'missed', u'miss', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Jimmy', 'swung', 'his', 'bat', 'too', 'late', 'and', 'missed', '.']}, {'string': ' He missed the next pitch too.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD missed) (NP (DT the) (JJ next) (NN pitch)) (ADVP (RB too))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'missed', u'miss', u'VBD'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'pitch', u'pitch', u'NN'), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'missed', 'the', 'next', 'pitch', 'too', '.']}, {'string': ' It was too fast.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (ADJP (RB too) (JJ fast))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'too', u'too', u'RB'), (u'fast', u'fast', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'too', 'fast', '.']}, {'string': ' He was ready for the next pitch.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (JJ ready) (PP (IN for) (NP (DT the) (JJ next) (NN pitch))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'ready', u'ready', u'JJ'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'pitch', u'pitch', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'ready', 'for', 'the', 'next', 'pitch', '.']}, {'string': ' He hit it hard to center field.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD hit) (S (NP (PRP it)) (ADJP (JJ hard) (PP (TO to) (NP (NN center) (NN field)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'hit', u'hit', u'VBD'), (u'it', u'it', u'PRP'), (u'hard', u'hard', u'JJ'), (u'to', u'to', u'TO'), (u'center', u'center', u'NN'), (u'field', u'field', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'hit', 'it', 'hard', 'to', 'center', 'field', '.']}, {'string': ' The Tiger player in center field jumped to catch it, but it went over his head and over the fence.', 'parse': {'tree': '(ROOT (S (S (NP (NP (DT The) (NNP Tiger) (NN player)) (PP (IN in) (NP (NN center) (NN field)))) (VP (VBD jumped) (S (VP (TO to) (VP (VB catch) (NP (PRP it))))))) (, ,) (CC but) (S (NP (PRP it)) (VP (VBD went) (PP (PP (IN over) (NP (PRP$ his) (NN head))) (CC and) (PP (IN over) (NP (DT the) (NN fence)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'Tiger', u'Tiger', u'NNP'), (u'player', u'player', u'NN'), (u'in', u'in', u'IN'), (u'center', u'center', u'NN'), (u'field', u'field', u'NN'), (u'jumped', u'jump', u'VBD'), (u'to', u'to', u'TO'), (u'catch', u'catch', u'VB'), (u'it', u'it', u'PRP'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'it', u'it', u'PRP'), (u'went', u'go', u'VBD'), (u'over', u'over', u'IN'), (u'his', u'he', u'PRP$'), (u'head', u'head', u'NN'), (u'and', u'and', u'CC'), (u'over', u'over', u'IN'), (u'the', u'the', u'DT'), (u'fence', u'fence', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'Tiger', 'player', 'in', 'center', 'field', 'jumped', 'to', 'catch', 'it', ',', 'but', 'it', 'went', 'over', 'his', 'head', 'and', 'over', 'the', 'fence', '.']}, {'string': ' It was a home run!', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (DT a) (NN home) (NN run))) (. !)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'home', u'home', u'NN'), (u'run', u'run', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['It', 'was', 'a', 'home', 'run', '!']}, {'string': ' The Knights won the game!', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNPS Knights)) (VP (VBD won) (NP (DT the) (NN game))) (. !)))', 'lemma': [(u'The', u'the', u'DT'), (u'Knights', u'Knights', u'NNPS'), (u'won', u'win', u'VBD'), (u'the', u'the', u'DT'), (u'game', u'game', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['The', 'Knights', 'won', 'the', 'game', '!']}], 'questions': [{'question': {'string': ' Who hit a home run at the end of the game?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD hit) (NP (DT a) (NN home) (NN run)) (PP (IN at) (NP (NP (DT the) (NN end)) (PP (IN of) (NP (DT the) (NN game))))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'hit', u'hit', u'VBD'), (u'a', u'a', u'DT'), (u'home', u'home', u'NN'), (u'run', u'run', u'NN'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'end', u'end', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'game', u'game', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'hit', 'a', 'home', 'run', 'at', 'the', 'end', 'of', 'the', 'game', '?']}, 'answers': [{'string': ' Jake', 'parse': {'tree': '(ROOT (NP (NNP Jake)))', 'lemma': [(u'Jake', u'Jake', u'NNP')]}, 'tokens': ['Jake']}, {'string': ' Jimmy', 'parse': {'tree': '(ROOT (NP (NNP Jimmy)))', 'lemma': [(u'Jimmy', u'Jimmy', u'NNP')]}, 'tokens': ['Jimmy']}, {'string': ' Josh', 'parse': {'tree': '(ROOT (NP (NNP Josh)))', 'lemma': [(u'Josh', u'Josh', u'NNP')]}, 'tokens': ['Josh']}, {'string': ' Johnny', 'parse': {'tree': '(ROOT (NP (NNP Johnny)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP')]}, 'tokens': ['Johnny']}], 'mode': 0}, {'question': {'string': ' What team are the Knights playing today?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN team)) (SQ (VBP are) (NP (DT the) (NNPS Knights)) (VP (VBG playing) (NP (NN today)))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'team', u'team', u'NN'), (u'are', u'be', u'VBP'), (u'the', u'the', u'DT'), (u'Knights', u'Knights', u'NNPS'), (u'playing', u'play', u'VBG'), (u'today', u'today', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'team', 'are', 'the', 'Knights', 'playing', 'today', '?']}, 'answers': [{'string': ' the Bluejays', 'parse': {'tree': '(ROOT (NP (DT the) (NNP Bluejays)))', 'lemma': [(u'the', u'the', u'DT'), (u'Bluejays', u'Bluejays', u'NNP')]}, 'tokens': ['the', 'Bluejays']}, {'string': ' the Tigers', 'parse': {'tree': '(ROOT (NP (DT the) (NNP Tigers)))', 'lemma': [(u'the', u'the', u'DT'), (u'Tigers', u'Tigers', u'NNP')]}, 'tokens': ['the', 'Tigers']}, {'string': ' the Jets', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NNS Jets))))', 'lemma': [(u'the', u'the', u'DT'), (u'Jets', u'jet', u'NNS')]}, 'tokens': ['the', 'Jets']}, {'string': ' the Hawks', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NNPS Hawks))))', 'lemma': [(u'the', u'the', u'DT'), (u'Hawks', u'Hawks', u'NNPS')]}, 'tokens': ['the', 'Hawks']}], 'mode': 0}, {'question': {'string': ' Who plays first base?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBZ plays) (NP (JJ first) (NN base)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'plays', u'play', u'VBZ'), (u'first', u'first', u'JJ'), (u'base', u'base', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'plays', 'first', 'base', '?']}, 'answers': [{'string': ' Jimmy', 'parse': {'tree': '(ROOT (NP (NNP Jimmy)))', 'lemma': [(u'Jimmy', u'Jimmy', u'NNP')]}, 'tokens': ['Jimmy']}, {'string': ' Josh', 'parse': {'tree': '(ROOT (NP (NNP Josh)))', 'lemma': [(u'Josh', u'Josh', u'NNP')]}, 'tokens': ['Josh']}, {'string': ' Jake', 'parse': {'tree': '(ROOT (NP (NNP Jake)))', 'lemma': [(u'Jake', u'Jake', u'NNP')]}, 'tokens': ['Jake']}, {'string': ' Johnny', 'parse': {'tree': '(ROOT (NP (NNP Johnny)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP')]}, 'tokens': ['Johnny']}], 'mode': 1}, {'question': {'string': ' How old were the boys when they started playing baseball?', 'parse': {'tree': '(ROOT (SBARQ (WHADJP (WRB How) (JJ old)) (SQ (VBD were) (NP (NP (DT the) (NNS boys)) (SBAR (WHADVP (WRB when)) (S (NP (PRP they)) (VP (VBD started) (S (VP (VBG playing) (NP (NN baseball))))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'old', u'old', u'JJ'), (u'were', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'boys', u'boy', u'NNS'), (u'when', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'started', u'start', u'VBD'), (u'playing', u'play', u'VBG'), (u'baseball', u'baseball', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'old', 'were', 'the', 'boys', 'when', 'they', 'started', 'playing', 'baseball', '?']}, 'answers': [{'string': ' nine', 'parse': {'tree': '(ROOT (FRAG (NP (CD nine))))', 'lemma': [(u'nine', u'nine', u'CD')]}, 'tokens': ['nine']}, {'string': ' two', 'parse': {'tree': '(ROOT (FRAG (NP (CD two))))', 'lemma': [(u'two', u'two', u'CD')]}, 'tokens': ['two']}, {'string': ' four', 'parse': {'tree': '(ROOT (FRAG (NP (CD four))))', 'lemma': [(u'four', u'four', u'CD')]}, 'tokens': ['four']}, {'string': ' three', 'parse': {'tree': '(ROOT (FRAG (NP (CD three))))', 'lemma': [(u'three', u'three', u'CD')]}, 'tokens': ['three']}], 'mode': 0}]}
{'sentences': [{'string': ' There was once a land named Catatonia where cats ran things.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD was) (ADVP (RB once) (NP (DT a) (NN land))) (VP (VBN named) (NP (NP (NNP Catatonia)) (SBAR (WHADVP (WRB where)) (S (NP (NNS cats)) (VP (VBD ran) (NP (NNS things)))))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'once', u'once', u'RB'), (u'a', u'a', u'DT'), (u'land', u'land', u'NN'), (u'named', u'name', u'VBN'), (u'Catatonia', u'Catatonia', u'NNP'), (u'where', u'where', u'WRB'), (u'cats', u'cat', u'NNS'), (u'ran', u'run', u'VBD'), (u'things', u'thing', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'was', 'once', 'a', 'land', 'named', 'Catatonia', 'where', 'cats', 'ran', 'things', '.']}, {'string': ' Cats walked and talked much as you do except they walked on four legs.', 'parse': {'tree': '(ROOT (S (NP (NNS Cats)) (VP (VP (VBD walked)) (CC and) (VP (VBD talked) (SBAR (RB much) (IN as) (S (NP (PRP you)) (VP (VBP do) (SBAR (IN except) (S (NP (PRP they)) (VP (VBD walked) (PP (IN on) (NP (CD four) (NNS legs))))))))))) (. .)))', 'lemma': [(u'Cats', u'cat', u'NNS'), (u'walked', u'walk', u'VBD'), (u'and', u'and', u'CC'), (u'talked', u'talk', u'VBD'), (u'much', u'much', u'RB'), (u'as', u'as', u'IN'), (u'you', u'you', u'PRP'), (u'do', u'do', u'VBP'), (u'except', u'except', u'IN'), (u'they', u'they', u'PRP'), (u'walked', u'walk', u'VBD'), (u'on', u'on', u'IN'), (u'four', u'four', u'CD'), (u'legs', u'leg', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Cats', 'walked', 'and', 'talked', 'much', 'as', 'you', 'do', 'except', 'they', 'walked', 'on', 'four', 'legs', '.']}, {'string': ' There were cat policemen, cat firemen, cat teachers, and even a cat bus driver.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD were) (NP (NP (NN cat) (NN policemen)) (, ,) (NP (NN cat) (NNS firemen)) (, ,) (NP (NN cat) (NNS teachers)) (, ,) (CC and) (NP (RB even) (DT a) (JJ cat) (NN bus) (NN driver)))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'cat', u'cat', u'NN'), (u'policemen', u'policeman', u'NN'), (u',', u',', u','), (u'cat', u'cat', u'NN'), (u'firemen', u'fireman', u'NNS'), (u',', u',', u','), (u'cat', u'cat', u'NN'), (u'teachers', u'teacher', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'even', u'even', u'RB'), (u'a', u'a', u'DT'), (u'cat', u'cat', u'JJ'), (u'bus', u'bus', u'NN'), (u'driver', u'driver', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'were', 'cat', 'policemen', ',', 'cat', 'firemen', ',', 'cat', 'teachers', ',', 'and', 'even', 'a', 'cat', 'bus', 'driver', '.']}, {'string': ' Most of the cats were very busy.', 'parse': {'tree': '(ROOT (S (NP (NP (JJS Most)) (PP (IN of) (NP (DT the) (NNS cats)))) (VP (VBD were) (ADJP (RB very) (JJ busy))) (. .)))', 'lemma': [(u'Most', u'most', u'JJS'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'cats', u'cat', u'NNS'), (u'were', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'busy', u'busy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Most', 'of', 'the', 'cats', 'were', 'very', 'busy', '.']}, {'string': ' The King of Catatonia was a small cat named Diggs.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (NNP King)) (PP (IN of) (NP (NNP Catatonia)))) (VP (VBD was) (NP (NP (DT a) (JJ small) (NN cat)) (VP (VBN named) (NP (NNS Diggs))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'King', u'King', u'NNP'), (u'of', u'of', u'IN'), (u'Catatonia', u'Catatonia', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'small', u'small', u'JJ'), (u'cat', u'cat', u'NN'), (u'named', u'name', u'VBN'), (u'Diggs', u'digg', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'King', 'of', 'Catatonia', 'was', 'a', 'small', 'cat', 'named', 'Diggs', '.']}, {'string': ' He had two brothers named Pouncer and Flash who helped him rule in Catatonia.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (NP (NP (CD two) (NNS brothers)) (VP (VBN named) (NP (NP (NNP Pouncer) (CC and) (NNP Flash)) (SBAR (WHNP (WP who)) (S (VP (VBD helped) (S (NP (PRP him)) (VP (VB rule) (PP (IN in) (NP (NNP Catatonia)))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'two', u'two', u'CD'), (u'brothers', u'brother', u'NNS'), (u'named', u'name', u'VBN'), (u'Pouncer', u'Pouncer', u'NNP'), (u'and', u'and', u'CC'), (u'Flash', u'Flash', u'NNP'), (u'who', u'who', u'WP'), (u'helped', u'help', u'VBD'), (u'him', u'he', u'PRP'), (u'rule', u'rule', u'VB'), (u'in', u'in', u'IN'), (u'Catatonia', u'Catatonia', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'two', 'brothers', 'named', 'Pouncer', 'and', 'Flash', 'who', 'helped', 'him', 'rule', 'in', 'Catatonia', '.']}, {'string': " Pouncer was head of the Milk, Cheese and Cream center and Flash 's job was to blow things up.", 'parse': {'tree': "(ROOT (S (S (NP (NNP Pouncer)) (VP (VBD was) (NP (NP (NN head)) (PP (IN of) (NP (NP (DT the) (NN Milk)) (, ,) (NP (NNP Cheese)) (CC and) (NP (NN Cream) (NN center))))))) (CC and) (S (NP (NP (NNP Flash) (POS 's)) (NN job)) (VP (VBD was) (S (VP (TO to) (VP (VB blow) (NP (NNS things)) (PRT (RP up))))))) (. .)))", 'lemma': [(u'Pouncer', u'Pouncer', u'NNP'), (u'was', u'be', u'VBD'), (u'head', u'head', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'Milk', u'milk', u'NN'), (u',', u',', u','), (u'Cheese', u'Cheese', u'NNP'), (u'and', u'and', u'CC'), (u'Cream', u'cream', u'NN'), (u'center', u'center', u'NN'), (u'and', u'and', u'CC'), (u'Flash', u'Flash', u'NNP'), (u"'s", u"'s", u'POS'), (u'job', u'job', u'NN'), (u'was', u'be', u'VBD'), (u'to', u'to', u'TO'), (u'blow', u'blow', u'VB'), (u'things', u'thing', u'NNS'), (u'up', u'up', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['Pouncer', 'was', 'head', 'of', 'the', 'Milk', ',', 'Cheese', 'and', 'Cream', 'center', 'and', 'Flash', "'s", 'job', 'was', 'to', 'blow', 'things', 'up', '.']}, {'string': ' Together the three of them made sure all the cats were happy, had plenty to drink and got to enjoy bright fireworks shows in the distance.', 'parse': {'tree': '(ROOT (S (ADVP (RB Together)) (NP (NP (DT the) (CD three)) (PP (IN of) (NP (PRP them)))) (VP (VP (VBD made) (ADJP (JJ sure) (SBAR (S (NP (PDT all) (DT the) (NNS cats)) (VP (VBD were) (ADJP (JJ happy))))))) (, ,) (VP (VBD had) (S (NP (RB plenty)) (VP (TO to) (VP (VB drink))))) (CC and) (VP (VBD got) (S (VP (TO to) (VP (VB enjoy) (NP (JJ bright) (NNS fireworks) (NNS shows)) (PP (IN in) (NP (DT the) (NN distance)))))))) (. .)))', 'lemma': [(u'Together', u'together', u'RB'), (u'the', u'the', u'DT'), (u'three', u'three', u'CD'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'made', u'make', u'VBD'), (u'sure', u'sure', u'JJ'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'cats', u'cat', u'NNS'), (u'were', u'be', u'VBD'), (u'happy', u'happy', u'JJ'), (u',', u',', u','), (u'had', u'have', u'VBD'), (u'plenty', u'plenty', u'RB'), (u'to', u'to', u'TO'), (u'drink', u'drink', u'VB'), (u'and', u'and', u'CC'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'enjoy', u'enjoy', u'VB'), (u'bright', u'bright', u'JJ'), (u'fireworks', u'firework', u'NNS'), (u'shows', u'show', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'distance', u'distance', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Together', 'the', 'three', 'of', 'them', 'made', 'sure', 'all', 'the', 'cats', 'were', 'happy', ',', 'had', 'plenty', 'to', 'drink', 'and', 'got', 'to', 'enjoy', 'bright', 'fireworks', 'shows', 'in', 'the', 'distance', '.']}, {'string': " One day Pouncer 's wife brought the kittens to see Pouncer at his office.", 'parse': {'tree': "(ROOT (S (NP (CD One) (NN day)) (NP (NP (NNP Pouncer) (POS 's)) (NN wife)) (VP (VBD brought) (NP (DT the) (NNS kittens)) (S (VP (TO to) (VP (VB see) (NP (NP (NNP Pouncer)) (PP (IN at) (NP (PRP$ his) (NN office)))))))) (. .)))", 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'Pouncer', u'Pouncer', u'NNP'), (u"'s", u"'s", u'POS'), (u'wife', u'wife', u'NN'), (u'brought', u'bring', u'VBD'), (u'the', u'the', u'DT'), (u'kittens', u'kitten', u'NNS'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'Pouncer', u'Pouncer', u'NNP'), (u'at', u'at', u'IN'), (u'his', u'he', u'PRP$'), (u'office', u'office', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'Pouncer', "'s", 'wife', 'brought', 'the', 'kittens', 'to', 'see', 'Pouncer', 'at', 'his', 'office', '.']}, {'string': ' There were white kittens and lots of black and white spotted kittens walking around in the Milk, Cheese and Cream center.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD were) (NP (NP (JJ white) (NNS kittens) (CC and) (NNS lots)) (PP (IN of) (NP (NP (ADJP (JJ black) (CC and) (JJ white)) (JJ spotted) (NNS kittens)) (VP (VBG walking) (PRT (RP around)) (PP (IN in) (NP (NP (DT the) (NN Milk)) (, ,) (NP (NNP Cheese)) (CC and) (NP (NN Cream) (NN center))))))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'white', u'white', u'JJ'), (u'kittens', u'kitten', u'NNS'), (u'and', u'and', u'CC'), (u'lots', u'lot', u'NNS'), (u'of', u'of', u'IN'), (u'black', u'black', u'JJ'), (u'and', u'and', u'CC'), (u'white', u'white', u'JJ'), (u'spotted', u'spotted', u'JJ'), (u'kittens', u'kitten', u'NNS'), (u'walking', u'walk', u'VBG'), (u'around', u'around', u'RP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'Milk', u'milk', u'NN'), (u',', u',', u','), (u'Cheese', u'Cheese', u'NNP'), (u'and', u'and', u'CC'), (u'Cream', u'cream', u'NN'), (u'center', u'center', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'were', 'white', 'kittens', 'and', 'lots', 'of', 'black', 'and', 'white', 'spotted', 'kittens', 'walking', 'around', 'in', 'the', 'Milk', ',', 'Cheese', 'and', 'Cream', 'center', '.']}, {'string': ' Well that is all the time we have for now.', 'parse': {'tree': '(ROOT (S (ADVP (RB Well)) (NP (DT that)) (VP (VBZ is) (NP (NP (PDT all) (DT the) (NN time)) (SBAR (S (NP (PRP we)) (VP (VBP have) (VP (PP (IN for) (NP (RB now))))))))) (. .)))', 'lemma': [(u'Well', u'well', u'RB'), (u'that', u'that', u'DT'), (u'is', u'be', u'VBZ'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u'we', u'we', u'PRP'), (u'have', u'have', u'VBP'), (u'for', u'for', u'IN'), (u'now', u'now', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Well', 'that', 'is', 'all', 'the', 'time', 'we', 'have', 'for', 'now', '.']}, {'string': ' I hope this short story of the Cats of Catatonia made at least one person in the room smile.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBP hope) (SBAR (S (NP (NP (DT this) (JJ short) (NN story)) (PP (IN of) (NP (NP (DT the) (NNPS Cats)) (PP (IN of) (NP (NNP Catatonia)))))) (VP (VBD made) (NP (NP (QP (IN at) (JJS least) (CD one)) (NN person)) (PP (IN in) (NP (DT the) (NN room) (NN smile)))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'hope', u'hope', u'VBP'), (u'this', u'this', u'DT'), (u'short', u'short', u'JJ'), (u'story', u'story', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'Cats', u'Cats', u'NNPS'), (u'of', u'of', u'IN'), (u'Catatonia', u'Catatonia', u'NNP'), (u'made', u'make', u'VBD'), (u'at', u'at', u'IN'), (u'least', u'least', u'JJS'), (u'one', u'one', u'CD'), (u'person', u'person', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'room', u'room', u'NN'), (u'smile', u'smile', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'hope', 'this', 'short', 'story', 'of', 'the', 'Cats', 'of', 'Catatonia', 'made', 'at', 'least', 'one', 'person', 'in', 'the', 'room', 'smile', '.']}], 'questions': [{'question': {'string': ' What type of job was NOT in the story?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN type)) (PP (IN of) (NP (NN job)))) (SQ (VBD was) (NP (NP (NNP NOT)) (PP (IN in) (NP (DT the) (NN story))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'type', u'type', u'NN'), (u'of', u'of', u'IN'), (u'job', u'job', u'NN'), (u'was', u'be', u'VBD'), (u'NOT', u'NOT', u'NNP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'type', 'of', 'job', 'was', 'NOT', 'in', 'the', 'story', '?']}, 'answers': [{'string': ' Bus driver', 'parse': {'tree': '(ROOT (NP (NN Bus) (NN driver)))', 'lemma': [(u'Bus', u'bus', u'NN'), (u'driver', u'driver', u'NN')]}, 'tokens': ['Bus', 'driver']}, {'string': ' Policeman', 'parse': {'tree': '(ROOT (NP (NNP Policeman)))', 'lemma': [(u'Policeman', u'Policeman', u'NNP')]}, 'tokens': ['Policeman']}, {'string': ' Milk-maker', 'parse': {'tree': '(ROOT (NP (NNP Milk-maker)))', 'lemma': [(u'Milk-maker', u'Milk-maker', u'NNP')]}, 'tokens': ['Milk-maker']}, {'string': ' Fireman', 'parse': {'tree': '(ROOT (NP (NNP Fireman)))', 'lemma': [(u'Fireman', u'Fireman', u'NNP')]}, 'tokens': ['Fireman']}], 'mode': 1}, {'question': {'string': ' What did Flash do in Catatonia?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Flash)) (VP (VB do) (PP (IN in) (NP (NNP Catatonia))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Flash', u'Flash', u'NNP'), (u'do', u'do', u'VB'), (u'in', u'in', u'IN'), (u'Catatonia', u'Catatonia', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Flash', 'do', 'in', 'Catatonia', '?']}, 'answers': [{'string': ' Blew up things and put on bright fireworks shows in the distance', 'parse': {'tree': '(ROOT (S (VP (VP (VB Blew) (PRT (RP up)) (NP (NNS things))) (CC and) (VP (VB put) (PP (IN on) (NP (JJ bright) (NNS fireworks) (NNS shows))) (PP (IN in) (NP (DT the) (NN distance)))))))', 'lemma': [(u'Blew', u'blow', u'VB'), (u'up', u'up', u'RP'), (u'things', u'thing', u'NNS'), (u'and', u'and', u'CC'), (u'put', u'put', u'VB'), (u'on', u'on', u'IN'), (u'bright', u'bright', u'JJ'), (u'fireworks', u'firework', u'NNS'), (u'shows', u'show', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'distance', u'distance', u'NN')]}, 'tokens': ['Blew', 'up', 'things', 'and', 'put', 'on', 'bright', 'fireworks', 'shows', 'in', 'the', 'distance']}, {'string': ' Was a fireman', 'parse': {'tree': '(ROOT (SINV (VP (VBD Was)) (NP (DT a) (NN fireman))))', 'lemma': [(u'Was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'fireman', u'fireman', u'NN')]}, 'tokens': ['Was', 'a', 'fireman']}, {'string': ' Served cheese and cream', 'parse': {'tree': '(ROOT (VP (VBN Served) (NP (NN cheese) (CC and) (NN cream))))', 'lemma': [(u'Served', u'serve', u'VBN'), (u'cheese', u'cheese', u'NN'), (u'and', u'and', u'CC'), (u'cream', u'cream', u'NN')]}, 'tokens': ['Served', 'cheese', 'and', 'cream']}, {'string': ' Was the king', 'parse': {'tree': '(ROOT (SINV (VP (VBD Was)) (NP (DT the) (NN king))))', 'lemma': [(u'Was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'king', u'king', u'NN')]}, 'tokens': ['Was', 'the', 'king']}], 'mode': 0}, {'question': {'string': ' What were the names of the ruling brothers?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD were) (NP (NP (DT the) (NNS names)) (PP (IN of) (NP (DT the) (VBG ruling) (NNS brothers))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'were', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'names', u'name', u'NNS'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'ruling', u'rule', u'VBG'), (u'brothers', u'brother', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'were', 'the', 'names', 'of', 'the', 'ruling', 'brothers', '?']}, 'answers': [{'string': ' Pouncer, Flash and Diggs', 'parse': {'tree': '(ROOT (NP (NP (NNP Pouncer)) (, ,) (NP (NNP Flash) (CC and) (NNP Diggs))))', 'lemma': [(u'Pouncer', u'Pouncer', u'NNP'), (u',', u',', u','), (u'Flash', u'Flash', u'NNP'), (u'and', u'and', u'CC'), (u'Diggs', u'Diggs', u'NNP')]}, 'tokens': ['Pouncer', ',', 'Flash', 'and', 'Diggs']}, {'string': ' Diggs, Flash and Spot', 'parse': {'tree': '(ROOT (NP (NP (NNS Diggs)) (, ,) (NP (NNP Flash) (CC and) (NNP Spot))))', 'lemma': [(u'Diggs', u'digg', u'NNS'), (u',', u',', u','), (u'Flash', u'Flash', u'NNP'), (u'and', u'and', u'CC'), (u'Spot', u'Spot', u'NNP')]}, 'tokens': ['Diggs', ',', 'Flash', 'and', 'Spot']}, {'string': ' Cream, Milk and Cheese', 'parse': {'tree': '(ROOT (NP (NP (NN Cream)) (, ,) (NP (NN Milk) (CC and) (NN Cheese))))', 'lemma': [(u'Cream', u'cream', u'NN'), (u',', u',', u','), (u'Milk', u'milk', u'NN'), (u'and', u'and', u'CC'), (u'Cheese', u'cheese', u'NN')]}, 'tokens': ['Cream', ',', 'Milk', 'and', 'Cheese']}, {'string': ' Pouncer, Kitten and King', 'parse': {'tree': '(ROOT (NP (NP (NNP Pouncer)) (, ,) (NP (NNP Kitten) (CC and) (NNP King))))', 'lemma': [(u'Pouncer', u'Pouncer', u'NNP'), (u',', u',', u','), (u'Kitten', u'Kitten', u'NNP'), (u'and', u'and', u'CC'), (u'King', u'King', u'NNP')]}, 'tokens': ['Pouncer', ',', 'Kitten', 'and', 'King']}], 'mode': 0}, {'question': {'string': ' What type of kittens did NOT come to visit Pouncer?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN type)) (PP (IN of) (NP (NNS kittens)))) (SQ (VBD did) (NP (NNP NOT)) (VP (VB come) (S (VP (TO to) (VP (VB visit) (NP (NNP Pouncer))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'type', u'type', u'NN'), (u'of', u'of', u'IN'), (u'kittens', u'kitten', u'NNS'), (u'did', u'do', u'VBD'), (u'NOT', u'NOT', u'NNP'), (u'come', u'come', u'VB'), (u'to', u'to', u'TO'), (u'visit', u'visit', u'VB'), (u'Pouncer', u'Pouncer', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'type', 'of', 'kittens', 'did', 'NOT', 'come', 'to', 'visit', 'Pouncer', '?']}, 'answers': [{'string': ' Spotted', 'parse': {'tree': '(ROOT (S (VP (VBN Spotted))))', 'lemma': [(u'Spotted', u'spot', u'VBN')]}, 'tokens': ['Spotted']}, {'string': ' White', 'parse': {'tree': '(ROOT (NP (NNP White)))', 'lemma': [(u'White', u'White', u'NNP')]}, 'tokens': ['White']}, {'string': ' Cheese colored', 'parse': {'tree': '(ROOT (NP (NNP Cheese) (NNP colored)))', 'lemma': [(u'Cheese', u'Cheese', u'NNP'), (u'colored', u'colored', u'NNP')]}, 'tokens': ['Cheese', 'colored']}, {'string': ' Black and White', 'parse': {'tree': '(ROOT (NP (NP (NNP Black)) (CC and) (NP (NNP White))))', 'lemma': [(u'Black', u'Black', u'NNP'), (u'and', u'and', u'CC'), (u'White', u'White', u'NNP')]}, 'tokens': ['Black', 'and', 'White']}], 'mode': 1}]}
{'sentences': [{'string': ' There once was a big black and white dog named Forrest.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (ADVP (RB once)) (VP (VBD was) (NP (NP (DT a) (JJ big) (ADJP (JJ black) (CC and) (JJ white)) (NN dog)) (VP (VBN named) (NP (NNP Forrest))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'once', u'once', u'RB'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'black', u'black', u'JJ'), (u'and', u'and', u'CC'), (u'white', u'white', u'JJ'), (u'dog', u'dog', u'NN'), (u'named', u'name', u'VBN'), (u'Forrest', u'Forrest', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'once', 'was', 'a', 'big', 'black', 'and', 'white', 'dog', 'named', 'Forrest', '.']}, {'string': " His owner 's name was Jeff.", 'parse': {'tree': "(ROOT (S (NP (NP (PRP$ His) (NN owner) (POS 's)) (NN name)) (VP (VBD was) (NP (NNP Jeff))) (. .)))", 'lemma': [(u'His', u'he', u'PRP$'), (u'owner', u'owner', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Jeff', u'Jeff', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'owner', "'s", 'name', 'was', 'Jeff', '.']}, {'string': ' Jeff thought he was the best dog in the whole world.', 'parse': {'tree': '(ROOT (S (NP (NNP Jeff)) (VP (VBD thought) (SBAR (S (NP (PRP he)) (VP (VBD was) (NP (NP (DT the) (JJS best) (NN dog)) (PP (IN in) (NP (DT the) (JJ whole) (NN world)))))))) (. .)))', 'lemma': [(u'Jeff', u'Jeff', u'NNP'), (u'thought', u'think', u'VBD'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'dog', u'dog', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'whole', u'whole', u'JJ'), (u'world', u'world', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jeff', 'thought', 'he', 'was', 'the', 'best', 'dog', 'in', 'the', 'whole', 'world', '.']}, {'string': ' One night, when Forrest and Jeff were taking a walk in the park, they saw two men walking down the path.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN night)) (, ,) (SBAR (WHADVP (WRB when)) (S (NP (NNP Forrest) (CC and) (NNP Jeff)) (VP (VBD were) (VP (VBG taking) (NP (NP (DT a) (NN walk)) (PP (IN in) (NP (DT the) (NN park)))))))) (, ,) (NP (PRP they)) (VP (VBD saw) (NP (NP (CD two) (NNS men)) (VP (VBG walking) (PRT (RP down)) (NP (DT the) (NN path))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'night', u'night', u'NN'), (u',', u',', u','), (u'when', u'when', u'WRB'), (u'Forrest', u'Forrest', u'NNP'), (u'and', u'and', u'CC'), (u'Jeff', u'Jeff', u'NNP'), (u'were', u'be', u'VBD'), (u'taking', u'take', u'VBG'), (u'a', u'a', u'DT'), (u'walk', u'walk', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'saw', u'see', u'VBD'), (u'two', u'two', u'CD'), (u'men', u'man', u'NNS'), (u'walking', u'walk', u'VBG'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'path', u'path', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'night', ',', 'when', 'Forrest', 'and', 'Jeff', 'were', 'taking', 'a', 'walk', 'in', 'the', 'park', ',', 'they', 'saw', 'two', 'men', 'walking', 'down', 'the', 'path', '.']}, {'string': ' Both men were dressed in very nice suits.', 'parse': {'tree': '(ROOT (S (NP (DT Both) (NNS men)) (VP (VBD were) (VP (VBN dressed) (PP (IN in) (NP (ADJP (RB very) (JJ nice)) (NNS suits))))) (. .)))', 'lemma': [(u'Both', u'both', u'DT'), (u'men', u'man', u'NNS'), (u'were', u'be', u'VBD'), (u'dressed', u'dress', u'VBN'), (u'in', u'in', u'IN'), (u'very', u'very', u'RB'), (u'nice', u'nice', u'JJ'), (u'suits', u'suit', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Both', 'men', 'were', 'dressed', 'in', 'very', 'nice', 'suits', '.']}, {'string': ' Jeff waved at the men.', 'parse': {'tree': '(ROOT (S (NP (NNP Jeff)) (VP (VBD waved) (PP (IN at) (NP (DT the) (NNS men)))) (. .)))', 'lemma': [(u'Jeff', u'Jeff', u'NNP'), (u'waved', u'wave', u'VBD'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'men', u'man', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Jeff', 'waved', 'at', 'the', 'men', '.']}, {'string': " `` Good evening, '' he said.", 'parse': {'tree': "(ROOT (S (`` ``) (FRAG (INTJ (JJ Good) (NN evening))) (, ,) ('' '') (NP (PRP he)) (VP (VBD said)) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Good', u'good', u'JJ'), (u'evening', u'evening', u'NN'), (u',', u',', u','), (u"''", u"''", u"''"), (u'he', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Good', 'evening', ',', "''", 'he', 'said', '.']}, {'string': " `` How are you tonight? ''", 'parse': {'tree': "(ROOT (SBARQ (`` ``) (WHADVP (WRB How)) (SQ (VBP are) (NP (PRP you)) (NP (RB tonight))) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'How', u'how', u'WRB'), (u'are', u'be', u'VBP'), (u'you', u'you', u'PRP'), (u'tonight', u'tonight', u'RB'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'How', 'are', 'you', 'tonight', '?', "''"]}, {'string': " `` Hello, '' one of the men said.", 'parse': {'tree': "(ROOT (S (`` ``) (FRAG (INTJ (UH Hello))) (, ,) ('' '') (NP (NP (CD one)) (PP (IN of) (NP (DT the) (NNS men)))) (VP (VBD said)) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Hello', u'hello', u'UH'), (u',', u',', u','), (u"''", u"''", u"''"), (u'one', u'one', u'CD'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'men', u'man', u'NNS'), (u'said', u'say', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Hello', ',', "''", 'one', 'of', 'the', 'men', 'said', '.']}, {'string': " `` It is such a great night for walking. ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP It)) (VP (VBZ is) (NP (NP (PDT such) (DT a) (JJ great) (NN night)) (PP (IN for) (NP (VBG walking))))) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'such', u'such', u'PDT'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'night', u'night', u'NN'), (u'for', u'for', u'IN'), (u'walking', u'walk', u'VBG'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'It', 'is', 'such', 'a', 'great', 'night', 'for', 'walking', '.', "''"]}, {'string': ' Jeff and Forrest kept walking down the path.', 'parse': {'tree': '(ROOT (S (NP (NNP Jeff) (CC and) (NNP Forrest)) (VP (VBD kept) (S (VP (VBG walking) (PRT (RP down)) (NP (DT the) (NN path))))) (. .)))', 'lemma': [(u'Jeff', u'Jeff', u'NNP'), (u'and', u'and', u'CC'), (u'Forrest', u'Forrest', u'NNP'), (u'kept', u'keep', u'VBD'), (u'walking', u'walk', u'VBG'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'path', u'path', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jeff', 'and', 'Forrest', 'kept', 'walking', 'down', 'the', 'path', '.']}, {'string': ' It was a very dark night, but the moon was shining bright.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBD was) (NP (DT a) (ADJP (RB very) (JJ dark)) (NN night)))) (, ,) (CC but) (S (NP (DT the) (NN moon)) (VP (VBD was) (VP (VBG shining) (ADJP (JJ bright))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'dark', u'dark', u'JJ'), (u'night', u'night', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'the', u'the', u'DT'), (u'moon', u'moon', u'NN'), (u'was', u'be', u'VBD'), (u'shining', u'shine', u'VBG'), (u'bright', u'bright', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'a', 'very', 'dark', 'night', ',', 'but', 'the', 'moon', 'was', 'shining', 'bright', '.']}, {'string': ' When Jeff turned around to look for the two men, he could not see them at all.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Jeff)) (VP (VBD turned) (PRT (RP around)) (S (VP (TO to) (VP (VB look) (PP (IN for) (NP (DT the) (CD two) (NNS men))))))))) (, ,) (NP (PRP he)) (VP (MD could) (RB not) (VP (VB see) (NP (PRP them)) (ADVP (IN at) (DT all)))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Jeff', u'Jeff', u'NNP'), (u'turned', u'turn', u'VBD'), (u'around', u'around', u'RP'), (u'to', u'to', u'TO'), (u'look', u'look', u'VB'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'two', u'two', u'CD'), (u'men', u'man', u'NNS'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'see', u'see', u'VB'), (u'them', u'they', u'PRP'), (u'at', u'at', u'IN'), (u'all', u'all', u'DT'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Jeff', 'turned', 'around', 'to', 'look', 'for', 'the', 'two', 'men', ',', 'he', 'could', 'not', 'see', 'them', 'at', 'all', '.']}, {'string': ' They were nowhere to be seen.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (ADVP (RB nowhere)) (S (VP (TO to) (VP (VB be) (VP (VBN seen)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'nowhere', u'nowhere', u'RB'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'seen', u'see', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'nowhere', 'to', 'be', 'seen', '.']}, {'string': ' Later that night, when their walk was over, Jeff and Forrest were lying on the bed.', 'parse': {'tree': '(ROOT (S (NP (RB Later) (DT that) (NN night)) (, ,) (SBAR (WHADVP (WRB when)) (S (NP (PRP$ their) (NN walk)) (VP (VBD was) (ADJP (RP over))))) (, ,) (NP (NNP Jeff) (CC and) (NNP Forrest)) (VP (VBD were) (VP (VBG lying) (PP (IN on) (NP (DT the) (NN bed))))) (. .)))', 'lemma': [(u'Later', u'later', u'RB'), (u'that', u'that', u'DT'), (u'night', u'night', u'NN'), (u',', u',', u','), (u'when', u'when', u'WRB'), (u'their', u'they', u'PRP$'), (u'walk', u'walk', u'NN'), (u'was', u'be', u'VBD'), (u'over', u'over', u'RP'), (u',', u',', u','), (u'Jeff', u'Jeff', u'NNP'), (u'and', u'and', u'CC'), (u'Forrest', u'Forrest', u'NNP'), (u'were', u'be', u'VBD'), (u'lying', u'lie', u'VBG'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'bed', u'bed', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Later', 'that', 'night', ',', 'when', 'their', 'walk', 'was', 'over', ',', 'Jeff', 'and', 'Forrest', 'were', 'lying', 'on', 'the', 'bed', '.']}, {'string': ' They were watching a television show about ghosts.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (VP (VBG watching) (NP (DT a) (NN television) (NN show)) (PP (IN about) (NP (NNS ghosts))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'watching', u'watch', u'VBG'), (u'a', u'a', u'DT'), (u'television', u'television', u'NN'), (u'show', u'show', u'NN'), (u'about', u'about', u'IN'), (u'ghosts', u'ghost', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'watching', 'a', 'television', 'show', 'about', 'ghosts', '.']}, {'string': " `` Do you think maybe those two men were ghosts? ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Do) (SBAR (S (NP (PRP you)) (VP (VBP think) (S (ADVP (RB maybe)) (NP (DT those) (CD two) (NNS men)) (VP (VBD were) (NP (NNS ghosts)))))))) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Do', u'do', u'VB'), (u'you', u'you', u'PRP'), (u'think', u'think', u'VBP'), (u'maybe', u'maybe', u'RB'), (u'those', u'those', u'DT'), (u'two', u'two', u'CD'), (u'men', u'man', u'NNS'), (u'were', u'be', u'VBD'), (u'ghosts', u'ghost', u'NNS'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Do', 'you', 'think', 'maybe', 'those', 'two', 'men', 'were', 'ghosts', '?', "''"]}, {'string': ' Jeff said out loud.', 'parse': {'tree': '(ROOT (S (NP (NNP Jeff)) (VP (VBD said) (PRT (RP out)) (ADVP (JJ loud))) (. .)))', 'lemma': [(u'Jeff', u'Jeff', u'NNP'), (u'said', u'say', u'VBD'), (u'out', u'out', u'RP'), (u'loud', u'loud', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Jeff', 'said', 'out', 'loud', '.']}, {'string': " `` They did not leave a trace. ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP They)) (VP (VBD did) (RB not) (VP (VB leave) (NP (DT a) (NN trace)))) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'They', u'they', u'PRP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'leave', u'leave', u'VB'), (u'a', u'a', u'DT'), (u'trace', u'trace', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'They', 'did', 'not', 'leave', 'a', 'trace', '.', "''"]}, {'string': ' Forrest was a dog, but he acted like he understood.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Forrest)) (VP (VBD was) (NP (DT a) (NN dog)))) (, ,) (CC but) (S (NP (PRP he)) (VP (VBD acted) (SBAR (IN like) (S (NP (PRP he)) (VP (VBD understood)))))) (. .)))', 'lemma': [(u'Forrest', u'Forrest', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'acted', u'act', u'VBD'), (u'like', u'like', u'IN'), (u'he', u'he', u'PRP'), (u'understood', u'understand', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Forrest', 'was', 'a', 'dog', ',', 'but', 'he', 'acted', 'like', 'he', 'understood', '.']}, {'string': ' He barked.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD barked)) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'barked', u'bark', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'barked', '.']}, {'string': ' Jeff smiled.', 'parse': {'tree': '(ROOT (S (NP (NNP Jeff)) (VP (VBD smiled)) (. .)))', 'lemma': [(u'Jeff', u'Jeff', u'NNP'), (u'smiled', u'smile', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Jeff', 'smiled', '.']}, {'string': ' He liked that his dog always saw things the same way he did.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD liked) (SBAR (IN that) (S (NP (PRP$ his) (NN dog)) (ADVP (RB always)) (VP (VBD saw) (NP (NNS things)) (NP (NP (DT the) (JJ same) (NN way)) (SBAR (S (NP (PRP he)) (VP (VBD did))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'liked', u'like', u'VBD'), (u'that', u'that', u'IN'), (u'his', u'he', u'PRP$'), (u'dog', u'dog', u'NN'), (u'always', u'always', u'RB'), (u'saw', u'see', u'VBD'), (u'things', u'thing', u'NNS'), (u'the', u'the', u'DT'), (u'same', u'same', u'JJ'), (u'way', u'way', u'NN'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'liked', 'that', 'his', 'dog', 'always', 'saw', 'things', 'the', 'same', 'way', 'he', 'did', '.']}], 'questions': [{'question': {'string': ' What time of day did Jeff and Forrest go for a walk?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN time)) (PP (IN of) (NP (NN day)))) (SQ (VBD did) (NP (NNP Jeff) (CC and) (NNP Forrest)) (VP (VB go) (PP (IN for) (NP (DT a) (NN walk))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'time', u'time', u'NN'), (u'of', u'of', u'IN'), (u'day', u'day', u'NN'), (u'did', u'do', u'VBD'), (u'Jeff', u'Jeff', u'NNP'), (u'and', u'and', u'CC'), (u'Forrest', u'Forrest', u'NNP'), (u'go', u'go', u'VB'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'walk', u'walk', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'time', 'of', 'day', 'did', 'Jeff', 'and', 'Forrest', 'go', 'for', 'a', 'walk', '?']}, 'answers': [{'string': ' morning', 'parse': {'tree': '(ROOT (NP (NN morning)))', 'lemma': [(u'morning', u'morning', u'NN')]}, 'tokens': ['morning']}, {'string': ' afternoon', 'parse': {'tree': '(ROOT (NP (NN afternoon)))', 'lemma': [(u'afternoon', u'afternoon', u'NN')]}, 'tokens': ['afternoon']}, {'string': ' night', 'parse': {'tree': '(ROOT (NP (NN night)))', 'lemma': [(u'night', u'night', u'NN')]}, 'tokens': ['night']}, {'string': ' lunchtime', 'parse': {'tree': '(ROOT (NP (NN lunchtime)))', 'lemma': [(u'lunchtime', u'lunchtime', u'NN')]}, 'tokens': ['lunchtime']}], 'mode': 0}, {'question': {'string': ' Why did Jeff think the men were ghosts?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NNP Jeff)) (VP (VB think) (SBAR (S (NP (DT the) (NNS men)) (VP (VBD were) (NP (NNS ghosts))))))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'Jeff', u'Jeff', u'NNP'), (u'think', u'think', u'VB'), (u'the', u'the', u'DT'), (u'men', u'man', u'NNS'), (u'were', u'be', u'VBD'), (u'ghosts', u'ghost', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'Jeff', 'think', 'the', 'men', 'were', 'ghosts', '?']}, 'answers': [{'string': ' they looked scary', 'parse': {'tree': '(ROOT (S (NP (PRP they)) (VP (VBD looked) (ADJP (JJ scary)))))', 'lemma': [(u'they', u'they', u'PRP'), (u'looked', u'look', u'VBD'), (u'scary', u'scary', u'JJ')]}, 'tokens': ['they', 'looked', 'scary']}, {'string': ' they chased him and his dog', 'parse': {'tree': '(ROOT (S (NP (PRP they)) (VP (VBD chased) (NP (NP (PRP him)) (CC and) (NP (PRP$ his) (NN dog))))))', 'lemma': [(u'they', u'they', u'PRP'), (u'chased', u'chase', u'VBD'), (u'him', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'dog', u'dog', u'NN')]}, 'tokens': ['they', 'chased', 'him', 'and', 'his', 'dog']}, {'string': ' they were howling', 'parse': {'tree': '(ROOT (S (NP (PRP they)) (VP (VBD were) (VP (VBG howling)))))', 'lemma': [(u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'howling', u'howl', u'VBG')]}, 'tokens': ['they', 'were', 'howling']}, {'string': ' they disappeared', 'parse': {'tree': '(ROOT (S (NP (PRP they)) (VP (VBD disappeared))))', 'lemma': [(u'they', u'they', u'PRP'), (u'disappeared', u'disappear', u'VBD')]}, 'tokens': ['they', 'disappeared']}], 'mode': 0}, {'question': {'string': " What was the name of Jeff 's dog?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (NNP Jeff) (POS 's)) (NN dog))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'name', u'name', u'NN'), (u'of', u'of', u'IN'), (u'Jeff', u'Jeff', u'NNP'), (u"'s", u"'s", u'POS'), (u'dog', u'dog', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'name', 'of', 'Jeff', "'s", 'dog', '?']}, 'answers': [{'string': ' Scruffy', 'parse': {'tree': '(ROOT (ADVP (RB Scruffy)))', 'lemma': [(u'Scruffy', u'scruffy', u'RB')]}, 'tokens': ['Scruffy']}, {'string': ' Patches', 'parse': {'tree': '(ROOT (NP (NNS Patches)))', 'lemma': [(u'Patches', u'patch', u'NNS')]}, 'tokens': ['Patches']}, {'string': ' Forrest', 'parse': {'tree': '(ROOT (NP (NNP Forrest)))', 'lemma': [(u'Forrest', u'Forrest', u'NNP')]}, 'tokens': ['Forrest']}, {'string': ' Rodney', 'parse': {'tree': '(ROOT (ADVP (RB Rodney)))', 'lemma': [(u'Rodney', u'rodney', u'RB')]}, 'tokens': ['Rodney']}], 'mode': 1}, {'question': {'string': ' How many men did Jeff and Forrest see?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How) (NP (JJ many) (NNS men))) (SQ (VBD did) (NP (NNP Jeff) (CC and) (NNP Forrest)) (VP (VB see))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'many', u'many', u'JJ'), (u'men', u'man', u'NNS'), (u'did', u'do', u'VBD'), (u'Jeff', u'Jeff', u'NNP'), (u'and', u'and', u'CC'), (u'Forrest', u'Forrest', u'NNP'), (u'see', u'see', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'many', 'men', 'did', 'Jeff', 'and', 'Forrest', 'see', '?']}, 'answers': [{'string': ' two', 'parse': {'tree': '(ROOT (FRAG (NP (CD two))))', 'lemma': [(u'two', u'two', u'CD')]}, 'tokens': ['two']}, {'string': ' four', 'parse': {'tree': '(ROOT (FRAG (NP (CD four))))', 'lemma': [(u'four', u'four', u'CD')]}, 'tokens': ['four']}, {'string': ' three', 'parse': {'tree': '(ROOT (FRAG (NP (CD three))))', 'lemma': [(u'three', u'three', u'CD')]}, 'tokens': ['three']}, {'string': ' one', 'parse': {'tree': '(ROOT (NP (NN one)))', 'lemma': [(u'one', u'one', u'NN')]}, 'tokens': ['one']}], 'mode': 1}]}
{'sentences': [{'string': ' Johnny wakes up early this morning.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VBZ wakes) (PRT (RP up)) (NP (RB early) (DT this) (NN morning))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'wakes', u'wake', u'VBZ'), (u'up', u'up', u'RP'), (u'early', u'early', u'RB'), (u'this', u'this', u'DT'), (u'morning', u'morning', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'wakes', 'up', 'early', 'this', 'morning', '.']}, {'string': ' He is so happy.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ is) (ADJP (RB so) (JJ happy))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'so', u'so', u'RB'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'is', 'so', 'happy', '.']}, {'string': ' Today Daddy is taking him to the aquarium.', 'parse': {'tree': '(ROOT (S (NP (NNP Today) (NNP Daddy)) (VP (VBZ is) (VP (VBG taking) (NP (PRP him)) (PP (TO to) (NP (DT the) (NN aquarium))))) (. .)))', 'lemma': [(u'Today', u'Today', u'NNP'), (u'Daddy', u'Daddy', u'NNP'), (u'is', u'be', u'VBZ'), (u'taking', u'take', u'VBG'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'aquarium', u'aquarium', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Today', 'Daddy', 'is', 'taking', 'him', 'to', 'the', 'aquarium', '.']}, {'string': ' Johnny wants to see blue fish, red fish, yellow fish, and green fish.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VBZ wants) (S (VP (TO to) (VP (VB see) (NP (NP (JJ blue) (NN fish)) (, ,) (NP (JJ red) (NN fish)) (, ,) (NP (JJ yellow) (NN fish)) (, ,) (CC and) (NP (JJ green) (NN fish))))))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'wants', u'want', u'VBZ'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'blue', u'blue', u'JJ'), (u'fish', u'fish', u'NN'), (u',', u',', u','), (u'red', u'red', u'JJ'), (u'fish', u'fish', u'NN'), (u',', u',', u','), (u'yellow', u'yellow', u'JJ'), (u'fish', u'fish', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'green', u'green', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'wants', 'to', 'see', 'blue', 'fish', ',', 'red', 'fish', ',', 'yellow', 'fish', ',', 'and', 'green', 'fish', '.']}, {'string': ' He also wants to see really big fish.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB also)) (VP (VBZ wants) (S (VP (TO to) (VP (VB see) (NP (ADJP (RB really) (JJ big)) (NN fish)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'also', u'also', u'RB'), (u'wants', u'want', u'VBZ'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'really', u'really', u'RB'), (u'big', u'big', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'also', 'wants', 'to', 'see', 'really', 'big', 'fish', '.']}, {'string': ' Daddy and Johnny are at the aquarium.', 'parse': {'tree': '(ROOT (S (NP (NNP Daddy) (CC and) (NNP Johnny)) (VP (VBP are) (PP (IN at) (NP (DT the) (NN aquarium)))) (. .)))', 'lemma': [(u'Daddy', u'Daddy', u'NNP'), (u'and', u'and', u'CC'), (u'Johnny', u'Johnny', u'NNP'), (u'are', u'be', u'VBP'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'aquarium', u'aquarium', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Daddy', 'and', 'Johnny', 'are', 'at', 'the', 'aquarium', '.']}, {'string': " `` Look! ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Look)) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Look', u'look', u'VB'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Look', '!', "''"]}, {'string': ' Johnny says.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VBZ says)) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'says', u'say', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'says', '.']}, {'string': " `` There 's a big red fish! ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (EX There)) (VP (VBZ 's) (NP (DT a) (JJ big) (JJ red) (NN fish))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'There', u'there', u'EX'), (u"'s", u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'red', u'red', u'JJ'), (u'fish', u'fish', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'There', "'s", 'a', 'big', 'red', 'fish', '!', "''"]}, {'string': ' The fish swims away.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN fish)) (VP (VBZ swims) (PRT (RP away))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'fish', u'fish', u'NN'), (u'swims', u'swim', u'VBZ'), (u'away', u'away', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'fish', 'swims', 'away', '.']}, {'string': ' A small yellow fish swims up to the glass and looks at Johnny.', 'parse': {'tree': '(ROOT (S (NP (DT A) (JJ small) (JJ yellow) (NN fish)) (VP (VP (VBZ swims) (PRT (RP up)) (PP (TO to) (NP (DT the) (NN glass)))) (CC and) (VP (VBZ looks) (PP (IN at) (NP (NNP Johnny))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'small', u'small', u'JJ'), (u'yellow', u'yellow', u'JJ'), (u'fish', u'fish', u'NN'), (u'swims', u'swim', u'VBZ'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'glass', u'glass', u'NN'), (u'and', u'and', u'CC'), (u'looks', u'look', u'VBZ'), (u'at', u'at', u'IN'), (u'Johnny', u'Johnny', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'small', 'yellow', 'fish', 'swims', 'up', 'to', 'the', 'glass', 'and', 'looks', 'at', 'Johnny', '.']}, {'string': " `` A yellow fish! ''", 'parse': {'tree': "(ROOT (FRAG (NP (`` ``) (DT A) (JJ yellow) (NN fish) (. !) ('' ''))))", 'lemma': [(u'``', u'``', u'``'), (u'A', u'a', u'DT'), (u'yellow', u'yellow', u'JJ'), (u'fish', u'fish', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'A', 'yellow', 'fish', '!', "''"]}, {'string': " says Johnny, `` He 's tiny. ''", 'parse': {'tree': "(ROOT (SINV (VP (VBZ says)) (NP (NNP Johnny)) (, ,) (`` ``) (S (NP (PRP He)) (VP (VBZ 's) (ADJP (JJ tiny)))) (. .) ('' '')))", 'lemma': [(u'says', u'say', u'VBZ'), (u'Johnny', u'Johnny', u'NNP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'He', u'he', u'PRP'), (u"'s", u'be', u'VBZ'), (u'tiny', u'tiny', u'JJ'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['says', 'Johnny', ',', '``', 'He', "'s", 'tiny', '.', "''"]}, {'string': ' Lots of blue fish swim by behind the yellow fish.', 'parse': {'tree': '(ROOT (S (NP (NP (NNS Lots)) (PP (IN of) (NP (JJ blue) (NN fish)))) (VP (VBP swim) (PP (IN by) (PP (IN behind) (NP (DT the) (JJ yellow) (NN fish))))) (. .)))', 'lemma': [(u'Lots', u'lot', u'NNS'), (u'of', u'of', u'IN'), (u'blue', u'blue', u'JJ'), (u'fish', u'fish', u'NN'), (u'swim', u'swim', u'VBP'), (u'by', u'by', u'IN'), (u'behind', u'behind', u'IN'), (u'the', u'the', u'DT'), (u'yellow', u'yellow', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lots', 'of', 'blue', 'fish', 'swim', 'by', 'behind', 'the', 'yellow', 'fish', '.']}, {'string': " `` Look at all of those blue fish! ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Look) (PP (IN at) (NP (NP (DT all)) (PP (IN of) (NP (DT those) (JJ blue) (NN fish)))))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Look', u'look', u'VB'), (u'at', u'at', u'IN'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'those', u'those', u'DT'), (u'blue', u'blue', u'JJ'), (u'fish', u'fish', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Look', 'at', 'all', 'of', 'those', 'blue', 'fish', '!', "''"]}, {'string': ' says Johnny.', 'parse': {'tree': '(ROOT (S (VP (VBZ says) (NP (NNP Johnny))) (. .)))', 'lemma': [(u'says', u'say', u'VBZ'), (u'Johnny', u'Johnny', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['says', 'Johnny', '.']}, {'string': " `` They stay together. ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP They)) (VP (VBP stay) (ADVP (RB together))) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'They', u'they', u'PRP'), (u'stay', u'stay', u'VBP'), (u'together', u'together', u'RB'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'They', 'stay', 'together', '.', "''"]}, {'string': " Daddy points at a long fish and says `` That one is as big as me! ''", 'parse': {'tree': "(ROOT (S (NP (NNP Daddy)) (VP (VP (VBZ points) (PP (IN at) (NP (DT a) (JJ long) (NN fish)))) (CC and) (VP (VBZ says) (`` ``) (S (NP (DT That) (NN one)) (VP (VBZ is) (ADJP (RB as) (JJ big) (PP (IN as) (NP (PRP me)))))))) (. !) ('' '')))", 'lemma': [(u'Daddy', u'Daddy', u'NNP'), (u'points', u'point', u'VBZ'), (u'at', u'at', u'IN'), (u'a', u'a', u'DT'), (u'long', u'long', u'JJ'), (u'fish', u'fish', u'NN'), (u'and', u'and', u'CC'), (u'says', u'say', u'VBZ'), (u'``', u'``', u'``'), (u'That', u'that', u'DT'), (u'one', u'one', u'NN'), (u'is', u'be', u'VBZ'), (u'as', u'as', u'RB'), (u'big', u'big', u'JJ'), (u'as', u'as', u'IN'), (u'me', u'I', u'PRP'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Daddy', 'points', 'at', 'a', 'long', 'fish', 'and', 'says', '``', 'That', 'one', 'is', 'as', 'big', 'as', 'me', '!', "''"]}, {'string': ' Johnny laughs.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VBZ laughs)) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'laughs', u'laugh', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'laughs', '.']}, {'string': ' He still wants to find a green fish.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB still)) (VP (VBZ wants) (S (VP (TO to) (VP (VB find) (NP (DT a) (JJ green) (NN fish)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'still', u'still', u'RB'), (u'wants', u'want', u'VBZ'), (u'to', u'to', u'TO'), (u'find', u'find', u'VB'), (u'a', u'a', u'DT'), (u'green', u'green', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'still', 'wants', 'to', 'find', 'a', 'green', 'fish', '.']}, {'string': ' He sees a lot of fish, but none of them are green.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBZ sees) (NP (NP (DT a) (NN lot)) (PP (IN of) (NP (NN fish)))))) (, ,) (CC but) (S (NP (NP (NN none)) (PP (IN of) (NP (PRP them)))) (VP (VBP are) (ADJP (JJ green)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'sees', u'see', u'VBZ'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'of', u'of', u'IN'), (u'fish', u'fish', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'none', u'none', u'NN'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'green', u'green', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'sees', 'a', 'lot', 'of', 'fish', ',', 'but', 'none', 'of', 'them', 'are', 'green', '.']}, {'string': " `` Daddy, I ca n't find a green fish.", 'parse': {'tree': "(ROOT (S (`` ``) (ADVP (RB Daddy)) (, ,) (NP (PRP I)) (VP (MD ca) (RB n't) (VP (VB find) (NP (DT a) (JJ green) (NN fish)))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Daddy', u'daddy', u'RB'), (u',', u',', u','), (u'I', u'I', u'PRP'), (u'ca', u'can', u'MD'), (u"n't", u'not', u'RB'), (u'find', u'find', u'VB'), (u'a', u'a', u'DT'), (u'green', u'green', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Daddy', ',', 'I', 'ca', "n't", 'find', 'a', 'green', 'fish', '.']}, {'string': " I want to see a green fish. ''", 'parse': {'tree': "(ROOT (S (NP (PRP I)) (VP (VBP want) (S (VP (TO to) (VP (VB see) (NP (DT a) (JJ green) (NN fish)))))) (. .) ('' '')))", 'lemma': [(u'I', u'I', u'PRP'), (u'want', u'want', u'VBP'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'a', u'a', u'DT'), (u'green', u'green', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['I', 'want', 'to', 'see', 'a', 'green', 'fish', '.', "''"]}, {'string': ' Daddy laughs.', 'parse': {'tree': '(ROOT (S (NP (NNP Daddy)) (VP (VBZ laughs)) (. .)))', 'lemma': [(u'Daddy', u'Daddy', u'NNP'), (u'laughs', u'laugh', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['Daddy', 'laughs', '.']}, {'string': " `` Let 's go to the next window and look. ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Let) (S (NP (POS 's)) (VP (VP (VB go) (PP (TO to) (NP (DT the) (JJ next) (NN window)))) (CC and) (VP (VB look))))) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Let', u'let', u'VB'), (u"'s", u"'s", u'POS'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'window', u'window', u'NN'), (u'and', u'and', u'CC'), (u'look', u'look', u'VB'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Let', "'s", 'go', 'to', 'the', 'next', 'window', 'and', 'look', '.', "''"]}, {'string': ' Johnny looks through the next window and sees lots of fish, but none of them are green fish.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Johnny)) (VP (VP (VBZ looks) (PP (IN through) (NP (DT the) (JJ next) (NN window)))) (CC and) (VP (VBZ sees) (NP (NP (NNS lots)) (PP (IN of) (NP (NN fish))))))) (, ,) (CC but) (S (NP (NP (NN none)) (PP (IN of) (NP (PRP them)))) (VP (VBP are) (NP (JJ green) (NN fish)))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'looks', u'look', u'VBZ'), (u'through', u'through', u'IN'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'window', u'window', u'NN'), (u'and', u'and', u'CC'), (u'sees', u'see', u'VBZ'), (u'lots', u'lot', u'NNS'), (u'of', u'of', u'IN'), (u'fish', u'fish', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'none', u'none', u'NN'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'green', u'green', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'looks', 'through', 'the', 'next', 'window', 'and', 'sees', 'lots', 'of', 'fish', ',', 'but', 'none', 'of', 'them', 'are', 'green', 'fish', '.']}, {'string': " `` I still do n't see any green fish, '' says Johnny.", 'parse': {'tree': "(ROOT (SINV (`` ``) (S (NP (PRP I)) (ADVP (RB still)) (VP (VBP do) (RB n't) (VP (VB see) (NP (DT any) (JJ green) (NN fish))))) (, ,) ('' '') (VP (VBZ says)) (NP (NNP Johnny)) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'still', u'still', u'RB'), (u'do', u'do', u'VBP'), (u"n't", u'not', u'RB'), (u'see', u'see', u'VB'), (u'any', u'any', u'DT'), (u'green', u'green', u'JJ'), (u'fish', u'fish', u'NN'), (u',', u',', u','), (u"''", u"''", u"''"), (u'says', u'say', u'VBZ'), (u'Johnny', u'Johnny', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'I', 'still', 'do', "n't", 'see', 'any', 'green', 'fish', ',', "''", 'says', 'Johnny', '.']}, {'string': " `` Look there, '' Daddy tells him.", 'parse': {'tree': "(ROOT (S (`` ``) (S (VP (VB Look) (ADVP (RB there)))) (, ,) ('' '') (NP (NNP Daddy)) (VP (VBZ tells) (NP (PRP him))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Look', u'look', u'VB'), (u'there', u'there', u'RB'), (u',', u',', u','), (u"''", u"''", u"''"), (u'Daddy', u'Daddy', u'NNP'), (u'tells', u'tell', u'VBZ'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Look', 'there', ',', "''", 'Daddy', 'tells', 'him', '.']}, {'string': ' Johnny sees a green sea turtle!', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VBZ sees) (NP (DT a) (JJ green) (NN sea) (NN turtle))) (. !)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'sees', u'see', u'VBZ'), (u'a', u'a', u'DT'), (u'green', u'green', u'JJ'), (u'sea', u'sea', u'NN'), (u'turtle', u'turtle', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['Johnny', 'sees', 'a', 'green', 'sea', 'turtle', '!']}, {'string': " It 's a lot bigger than a fish.", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (VBZ 's) (ADJP (NP (DT a) (RB lot)) (JJR bigger) (PP (IN than) (NP (DT a) (NN fish))))) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'RB'), (u'bigger', u'bigger', u'JJR'), (u'than', u'than', u'IN'), (u'a', u'a', u'DT'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', "'s", 'a', 'lot', 'bigger', 'than', 'a', 'fish', '.']}, {'string': ' After looking at all the fish, Daddy and Johnny go home again.', 'parse': {'tree': '(ROOT (S (PP (IN After) (S (VP (VBG looking) (PP (IN at) (NP (PDT all) (DT the) (NN fish)))))) (, ,) (NP (NNP Daddy) (CC and) (NNP Johnny)) (VP (VBP go) (NP (NN home)) (ADVP (RB again))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'looking', u'look', u'VBG'), (u'at', u'at', u'IN'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'fish', u'fish', u'NN'), (u',', u',', u','), (u'Daddy', u'Daddy', u'NNP'), (u'and', u'and', u'CC'), (u'Johnny', u'Johnny', u'NNP'), (u'go', u'go', u'VBP'), (u'home', u'home', u'NN'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'looking', 'at', 'all', 'the', 'fish', ',', 'Daddy', 'and', 'Johnny', 'go', 'home', 'again', '.']}], 'questions': [{'question': {'string': ' Which fish stay together?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT Which) (NN fish)) (SQ (VP (VBP stay) (ADVP (RB together)))) (. ?)))', 'lemma': [(u'Which', u'which', u'WDT'), (u'fish', u'fish', u'NN'), (u'stay', u'stay', u'VBP'), (u'together', u'together', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['Which', 'fish', 'stay', 'together', '?']}, 'answers': [{'string': ' the blue fish.', 'parse': {'tree': '(ROOT (NP (DT the) (JJ blue) (NN fish) (. .)))', 'lemma': [(u'the', u'the', u'DT'), (u'blue', u'blue', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['the', 'blue', 'fish', '.']}, {'string': ' the yellow fish.', 'parse': {'tree': '(ROOT (NP (DT the) (JJ yellow) (NN fish) (. .)))', 'lemma': [(u'the', u'the', u'DT'), (u'yellow', u'yellow', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['the', 'yellow', 'fish', '.']}, {'string': ' the red fish.', 'parse': {'tree': '(ROOT (NP (DT the) (JJ red) (NN fish) (. .)))', 'lemma': [(u'the', u'the', u'DT'), (u'red', u'red', u'JJ'), (u'fish', u'fish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['the', 'red', 'fish', '.']}, {'string': ' the sea turtles.', 'parse': {'tree': '(ROOT (S (NP (DT the) (NN sea)) (VP (VBZ turtles)) (. .)))', 'lemma': [(u'the', u'the', u'DT'), (u'sea', u'sea', u'NN'), (u'turtles', u'turtle', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['the', 'sea', 'turtles', '.']}], 'mode': 0}, {'question': {'string': ' What color was the sea turtle?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBD was) (NP (DT the) (NN sea) (NN turtle))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'sea', u'sea', u'NN'), (u'turtle', u'turtle', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'was', 'the', 'sea', 'turtle', '?']}, 'answers': [{'string': ' red', 'parse': {'tree': '(ROOT (NP (NN red)))', 'lemma': [(u'red', u'red', u'NN')]}, 'tokens': ['red']}, {'string': ' blue', 'parse': {'tree': '(ROOT (ADJP (JJ blue)))', 'lemma': [(u'blue', u'blue', u'JJ')]}, 'tokens': ['blue']}, {'string': ' green', 'parse': {'tree': '(ROOT (ADJP (JJ green)))', 'lemma': [(u'green', u'green', u'JJ')]}, 'tokens': ['green']}, {'string': ' yellow', 'parse': {'tree': '(ROOT (ADJP (JJ yellow)))', 'lemma': [(u'yellow', u'yellow', u'JJ')]}, 'tokens': ['yellow']}], 'mode': 1}, {'question': {'string': ' Where did Johnny and Daddy go?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Johnny) (CC and) (NNP Daddy)) (VP (VB go))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'Johnny', u'Johnny', u'NNP'), (u'and', u'and', u'CC'), (u'Daddy', u'Daddy', u'NNP'), (u'go', u'go', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'Johnny', 'and', 'Daddy', 'go', '?']}, 'answers': [{'string': ' to the aquarium.', 'parse': {'tree': '(ROOT (S (VP (PP (TO to) (NP (DT the) (NN aquarium)))) (. .)))', 'lemma': [(u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'aquarium', u'aquarium', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['to', 'the', 'aquarium', '.']}, {'string': ' to Disney Land', 'parse': {'tree': '(ROOT (PP (TO to) (NP (NNP Disney) (NNP Land))))', 'lemma': [(u'to', u'to', u'TO'), (u'Disney', u'Disney', u'NNP'), (u'Land', u'Land', u'NNP')]}, 'tokens': ['to', 'Disney', 'Land']}, {'string': ' to the ice cream store', 'parse': {'tree': '(ROOT (PP (TO to) (NP (DT the) (NN ice) (NN cream) (NN store))))', 'lemma': [(u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'store', u'store', u'NN')]}, 'tokens': ['to', 'the', 'ice', 'cream', 'store']}, {'string': ' to get a hamburger', 'parse': {'tree': '(ROOT (FRAG (S (VP (TO to) (VP (VB get) (NP (DT a) (NN hamburger)))))))', 'lemma': [(u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'a', u'a', u'DT'), (u'hamburger', u'hamburger', u'NN')]}, 'tokens': ['to', 'get', 'a', 'hamburger']}], 'mode': 1}, {'question': {'string': ' Which fish did Johnny see first?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT Which) (NN fish)) (SQ (VBD did) (NP (NNP Johnny)) (VP (VB see) (ADVP (RB first)))) (. ?)))', 'lemma': [(u'Which', u'which', u'WDT'), (u'fish', u'fish', u'NN'), (u'did', u'do', u'VBD'), (u'Johnny', u'Johnny', u'NNP'), (u'see', u'see', u'VB'), (u'first', u'first', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['Which', 'fish', 'did', 'Johnny', 'see', 'first', '?']}, 'answers': [{'string': ' the blue fish', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (JJ blue) (NN fish))))', 'lemma': [(u'the', u'the', u'DT'), (u'blue', u'blue', u'JJ'), (u'fish', u'fish', u'NN')]}, 'tokens': ['the', 'blue', 'fish']}, {'string': ' the red fish', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (JJ red) (NN fish))))', 'lemma': [(u'the', u'the', u'DT'), (u'red', u'red', u'JJ'), (u'fish', u'fish', u'NN')]}, 'tokens': ['the', 'red', 'fish']}, {'string': ' the yellow fish', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (JJ yellow) (NN fish))))', 'lemma': [(u'the', u'the', u'DT'), (u'yellow', u'yellow', u'JJ'), (u'fish', u'fish', u'NN')]}, 'tokens': ['the', 'yellow', 'fish']}, {'string': ' the sea turtle', 'parse': {'tree': '(ROOT (NP (DT the) (NN sea) (NN turtle)))', 'lemma': [(u'the', u'the', u'DT'), (u'sea', u'sea', u'NN'), (u'turtle', u'turtle', u'NN')]}, 'tokens': ['the', 'sea', 'turtle']}], 'mode': 0}]}
{'sentences': [{'string': ' Rob is a dog.', 'parse': {'tree': '(ROOT (S (NP (NNP Rob)) (VP (VBZ is) (NP (DT a) (NN dog))) (. .)))', 'lemma': [(u'Rob', u'Rob', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rob', 'is', 'a', 'dog', '.']}, {'string': ' Rob is a big red dog.', 'parse': {'tree': '(ROOT (S (NP (NNP Rob)) (VP (VBZ is) (NP (DT a) (JJ big) (JJ red) (NN dog))) (. .)))', 'lemma': [(u'Rob', u'Rob', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'red', u'red', u'JJ'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rob', 'is', 'a', 'big', 'red', 'dog', '.']}, {'string': ' He likes to go to the park.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ likes) (S (VP (TO to) (VP (VB go) (PP (TO to) (NP (DT the) (NN park))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'likes', 'to', 'go', 'to', 'the', 'park', '.']}, {'string': ' Rob likes the swing.', 'parse': {'tree': '(ROOT (S (NP (NNP Rob)) (VP (VBZ likes) (NP (DT the) (NN swing))) (. .)))', 'lemma': [(u'Rob', u'Rob', u'NNP'), (u'likes', u'like', u'VBZ'), (u'the', u'the', u'DT'), (u'swing', u'swing', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rob', 'likes', 'the', 'swing', '.']}, {'string': ' He likes to go as high as he can.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ likes) (S (VP (TO to) (VP (VB go) (ADVP (ADVP (RB as) (JJ high)) (SBAR (IN as) (S (NP (PRP he)) (VP (MD can))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'as', u'as', u'RB'), (u'high', u'high', u'JJ'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'can', u'can', u'MD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'likes', 'to', 'go', 'as', 'high', 'as', 'he', 'can', '.']}, {'string': ' To get to the park, Rob has to go to town.', 'parse': {'tree': '(ROOT (S (S (VP (TO To) (VP (VB get) (PP (TO to) (NP (DT the) (NN park)))))) (, ,) (NP (NNP Rob)) (VP (VBZ has) (S (VP (TO to) (VP (VB go) (PP (TO to) (NP (NN town))))))) (. .)))', 'lemma': [(u'To', u'to', u'TO'), (u'get', u'get', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u',', u',', u','), (u'Rob', u'Rob', u'NNP'), (u'has', u'have', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'town', u'town', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['To', 'get', 'to', 'the', 'park', ',', 'Rob', 'has', 'to', 'go', 'to', 'town', '.']}, {'string': ' When he is in town, he walks by the school.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP he)) (VP (VBZ is) (PP (IN in) (NP (NN town)))))) (, ,) (NP (PRP he)) (VP (VBZ walks) (PP (IN by) (NP (DT the) (NN school)))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'in', u'in', u'IN'), (u'town', u'town', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'walks', u'walk', u'VBZ'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'he', 'is', 'in', 'town', ',', 'he', 'walks', 'by', 'the', 'school', '.']}, {'string': ' It is by the baseball field.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBZ is) (PP (IN by) (NP (DT the) (NN baseball) (NN field)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'baseball', u'baseball', u'NN'), (u'field', u'field', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'is', 'by', 'the', 'baseball', 'field', '.']}, {'string': ' Rob likes to go to the park with Rod.', 'parse': {'tree': '(ROOT (S (NP (NNP Rob)) (VP (VBZ likes) (S (VP (TO to) (VP (VB go) (PP (TO to) (NP (NP (DT the) (NN park)) (PP (IN with) (NP (NNP Rod))))))))) (. .)))', 'lemma': [(u'Rob', u'Rob', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'with', u'with', u'IN'), (u'Rod', u'Rod', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Rob', 'likes', 'to', 'go', 'to', 'the', 'park', 'with', 'Rod', '.']}, {'string': ' Rod is a small dog.', 'parse': {'tree': '(ROOT (S (NP (NNP Rod)) (VP (VBZ is) (NP (DT a) (JJ small) (NN dog))) (. .)))', 'lemma': [(u'Rod', u'Rod', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'small', u'small', u'JJ'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rod', 'is', 'a', 'small', 'dog', '.']}, {'string': ' Rod is a brown dog.', 'parse': {'tree': '(ROOT (S (NP (NNP Rod)) (VP (VBZ is) (NP (DT a) (JJ brown) (NN dog))) (. .)))', 'lemma': [(u'Rod', u'Rod', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'brown', u'brown', u'JJ'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rod', 'is', 'a', 'brown', 'dog', '.']}, {'string': ' Rod likes to go down the slide.', 'parse': {'tree': '(ROOT (S (NP (NNP Rod)) (VP (VBZ likes) (S (VP (TO to) (VP (VB go) (PRT (RP down)) (NP (DT the) (NN slide)))))) (. .)))', 'lemma': [(u'Rod', u'Rod', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'slide', u'slide', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rod', 'likes', 'to', 'go', 'down', 'the', 'slide', '.']}, {'string': ' Rod likes to go fast.', 'parse': {'tree': '(ROOT (S (NP (NNP Rod)) (VP (VBZ likes) (S (VP (TO to) (VP (VB go) (ADVP (RB fast)))))) (. .)))', 'lemma': [(u'Rod', u'Rod', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'fast', u'fast', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Rod', 'likes', 'to', 'go', 'fast', '.']}, {'string': ' Rob likes to slide too.', 'parse': {'tree': '(ROOT (S (NP (NNP Rob)) (VP (VBZ likes) (S (VP (TO to) (VP (VB slide) (ADVP (RB too)))))) (. .)))', 'lemma': [(u'Rob', u'Rob', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'slide', u'slide', u'VB'), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Rob', 'likes', 'to', 'slide', 'too', '.']}, {'string': ' Rob and Rod like to go down the slide many times.', 'parse': {'tree': '(ROOT (S (NP (NNP Rob) (CC and) (NNP Rod)) (VP (VBP like) (S (VP (TO to) (VP (VB go) (PRT (RP down)) (NP (DT the) (NN slide)) (NP (JJ many) (NNS times)))))) (. .)))', 'lemma': [(u'Rob', u'Rob', u'NNP'), (u'and', u'and', u'CC'), (u'Rod', u'Rod', u'NNP'), (u'like', u'like', u'VBP'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'slide', u'slide', u'NN'), (u'many', u'many', u'JJ'), (u'times', u'time', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Rob', 'and', 'Rod', 'like', 'to', 'go', 'down', 'the', 'slide', 'many', 'times', '.']}, {'string': ' When it gets dark, Rob and Rod have to go home.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP it)) (VP (VBZ gets) (ADJP (JJ dark))))) (, ,) (NP (NNP Rob) (CC and) (NNP Rod)) (VP (VBP have) (S (VP (TO to) (VP (VB go) (NP (NN home)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'it', u'it', u'PRP'), (u'gets', u'get', u'VBZ'), (u'dark', u'dark', u'JJ'), (u',', u',', u','), (u'Rob', u'Rob', u'NNP'), (u'and', u'and', u'CC'), (u'Rod', u'Rod', u'NNP'), (u'have', u'have', u'VBP'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'it', 'gets', 'dark', ',', 'Rob', 'and', 'Rod', 'have', 'to', 'go', 'home', '.']}, {'string': ' Rob has to go home.', 'parse': {'tree': '(ROOT (S (NP (NNP Rob)) (VP (VBZ has) (S (VP (TO to) (VP (VB go) (NP (NN home)))))) (. .)))', 'lemma': [(u'Rob', u'Rob', u'NNP'), (u'has', u'have', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rob', 'has', 'to', 'go', 'home', '.']}, {'string': ' He has to go eat.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (S (VP (TO to) (VP (VB go) (VP (VB eat)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'to', 'go', 'eat', '.']}, {'string': ' Swinging makes Rob hungry.', 'parse': {'tree': '(ROOT (S (NP (NNP Swinging)) (VP (VBZ makes) (S (NP (NNP Rob)) (ADJP (JJ hungry)))) (. .)))', 'lemma': [(u'Swinging', u'Swinging', u'NNP'), (u'makes', u'make', u'VBZ'), (u'Rob', u'Rob', u'NNP'), (u'hungry', u'hungry', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Swinging', 'makes', 'Rob', 'hungry', '.']}, {'string': ' Rod has to go home too.', 'parse': {'tree': '(ROOT (S (NP (NNP Rod)) (VP (VBZ has) (S (VP (TO to) (VP (VB go) (NP (NN home)) (ADVP (RB too)))))) (. .)))', 'lemma': [(u'Rod', u'Rod', u'NNP'), (u'has', u'have', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'home', u'home', u'NN'), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Rod', 'has', 'to', 'go', 'home', 'too', '.']}, {'string': ' He does not like to be in the dark.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ does) (RB not) (VP (VB like) (S (VP (TO to) (VP (VB be) (PP (IN in) (NP (DT the) (NN dark)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'does', u'do', u'VBZ'), (u'not', u'not', u'RB'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'dark', u'dark', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'does', 'not', 'like', 'to', 'be', 'in', 'the', 'dark', '.']}, {'string': ' They can go to the park tomorrow.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (MD can) (VP (VB go) (PP (TO to) (NP (DT the) (NN park))) (NP (NN tomorrow)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'can', u'can', u'MD'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'tomorrow', u'tomorrow', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'can', 'go', 'to', 'the', 'park', 'tomorrow', '.']}, {'string': ' Goodbye Rob and Rod.', 'parse': {'tree': '(ROOT (S (VP (VB Goodbye) (NP (NNP Rob) (CC and) (NNP Rod))) (. .)))', 'lemma': [(u'Goodbye', u'goodbye', u'VB'), (u'Rob', u'Rob', u'NNP'), (u'and', u'and', u'CC'), (u'Rod', u'Rod', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Goodbye', 'Rob', 'and', 'Rod', '.']}], 'questions': [{'question': {'string': ' What does Rob like to do at the park?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Rob)) (VP (VB like) (S (VP (TO to) (VP (VB do) (PP (IN at) (NP (DT the) (NN park)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Rob', u'Rob', u'NNP'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Rob', 'like', 'to', 'do', 'at', 'the', 'park', '?']}, 'answers': [{'string': ' walk', 'parse': {'tree': '(ROOT (S (VP (VB walk))))', 'lemma': [(u'walk', u'walk', u'VB')]}, 'tokens': ['walk']}, {'string': ' throw a ball', 'parse': {'tree': '(ROOT (S (VP (VB throw) (NP (DT a) (NN ball)))))', 'lemma': [(u'throw', u'throw', u'VB'), (u'a', u'a', u'DT'), (u'ball', u'ball', u'NN')]}, 'tokens': ['throw', 'a', 'ball']}, {'string': ' run', 'parse': {'tree': '(ROOT (S (VP (VB run))))', 'lemma': [(u'run', u'run', u'VB')]}, 'tokens': ['run']}, {'string': ' swing and go down the slide', 'parse': {'tree': '(ROOT (SINV (VP (VBP swing) (CC and) (VBP go) (ADVP (RB down))) (NP (DT the) (NN slide))))', 'lemma': [(u'swing', u'swing', u'VBP'), (u'and', u'and', u'CC'), (u'go', u'go', u'VBP'), (u'down', u'down', u'RB'), (u'the', u'the', u'DT'), (u'slide', u'slide', u'NN')]}, 'tokens': ['swing', 'and', 'go', 'down', 'the', 'slide']}], 'mode': 0}, {'question': {'string': ' What is by the baseball field?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (PP (IN by) (NP (DT the) (NN baseball) (NN field)))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'baseball', u'baseball', u'NN'), (u'field', u'field', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'by', 'the', 'baseball', 'field', '?']}, 'answers': [{'string': ' the store', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN store))))', 'lemma': [(u'the', u'the', u'DT'), (u'store', u'store', u'NN')]}, 'tokens': ['the', 'store']}, {'string': ' the school', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN school))))', 'lemma': [(u'the', u'the', u'DT'), (u'school', u'school', u'NN')]}, 'tokens': ['the', 'school']}, {'string': ' a rock', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN rock))))', 'lemma': [(u'a', u'a', u'DT'), (u'rock', u'rock', u'NN')]}, 'tokens': ['a', 'rock']}, {'string': ' the park', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN park))))', 'lemma': [(u'the', u'the', u'DT'), (u'park', u'park', u'NN')]}, 'tokens': ['the', 'park']}], 'mode': 0}, {'question': {'string': ' What makes Rob hungry?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ makes) (S (NP (NNP Rob)) (ADJP (JJ hungry))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'makes', u'make', u'VBZ'), (u'Rob', u'Rob', u'NNP'), (u'hungry', u'hungry', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'makes', 'Rob', 'hungry', '?']}, 'answers': [{'string': ' throwing', 'parse': {'tree': '(ROOT (S (VP (VBG throwing))))', 'lemma': [(u'throwing', u'throw', u'VBG')]}, 'tokens': ['throwing']}, {'string': ' swinging', 'parse': {'tree': '(ROOT (NP (NN swinging)))', 'lemma': [(u'swinging', u'swinging', u'NN')]}, 'tokens': ['swinging']}, {'string': ' running', 'parse': {'tree': '(ROOT (ADJP (VBG running)))', 'lemma': [(u'running', u'run', u'VBG')]}, 'tokens': ['running']}, {'string': ' jumping', 'parse': {'tree': '(ROOT (S (VP (VBG jumping))))', 'lemma': [(u'jumping', u'jump', u'VBG')]}, 'tokens': ['jumping']}], 'mode': 1}, {'question': {'string': ' What color is Rob?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBZ is) (NP (NNP Rob))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'is', u'be', u'VBZ'), (u'Rob', u'Rob', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'is', 'Rob', '?']}, 'answers': [{'string': ' Black', 'parse': {'tree': '(ROOT (NP (NNP Black)))', 'lemma': [(u'Black', u'Black', u'NNP')]}, 'tokens': ['Black']}, {'string': ' Red', 'parse': {'tree': '(ROOT (NP (NNP Red)))', 'lemma': [(u'Red', u'Red', u'NNP')]}, 'tokens': ['Red']}, {'string': ' Brown', 'parse': {'tree': '(ROOT (NP (NNP Brown)))', 'lemma': [(u'Brown', u'Brown', u'NNP')]}, 'tokens': ['Brown']}, {'string': ' White', 'parse': {'tree': '(ROOT (NP (NNP White)))', 'lemma': [(u'White', u'White', u'NNP')]}, 'tokens': ['White']}], 'mode': 1}]}
{'sentences': [{'string': ' Mary was a little girl who loved to sew.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary)) (VP (VBD was) (NP (NP (DT a) (JJ little) (NN girl)) (SBAR (WHNP (WP who)) (S (VP (VBD loved) (S (VP (TO to) (VP (VB sew))))))))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'girl', u'girl', u'NN'), (u'who', u'who', u'WP'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'sew', u'sew', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'was', 'a', 'little', 'girl', 'who', 'loved', 'to', 'sew', '.']}, {'string': ' She liked to sew dresses, shirts, and skirts but Mary hated to sew quilts.', 'parse': {'tree': '(ROOT (S (S (NP (PRP She)) (VP (VP (VBD liked) (PP (TO to) (NP (NP (NN sew) (NNS dresses)) (, ,) (NP (NNS shirts)) (, ,)))) (CC and) (VP (VBZ skirts)))) (CC but) (S (NP (NNP Mary)) (ADJP (VBN hated) (PP (TO to) (NP (NN sew) (NNS quilts))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'sew', u'sew', u'NN'), (u'dresses', u'dress', u'NNS'), (u',', u',', u','), (u'shirts', u'shirt', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'skirts', u'skirt', u'VBZ'), (u'but', u'but', u'CC'), (u'Mary', u'Mary', u'NNP'), (u'hated', u'hate', u'VBN'), (u'to', u'to', u'TO'), (u'sew', u'sew', u'NN'), (u'quilts', u'quilt', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'liked', 'to', 'sew', 'dresses', ',', 'shirts', ',', 'and', 'skirts', 'but', 'Mary', 'hated', 'to', 'sew', 'quilts', '.']}, {'string': " She did n't like anything about sewing quilts and blankets because it took too long.", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBD did) (RB n't) (VP (VB like) (NP (NN anything)) (PP (IN about) (S (VP (VBG sewing) (NP (NNS quilts) (CC and) (NNS blankets)) (SBAR (IN because) (S (NP (PRP it)) (VP (VBD took) (ADJP (RB too) (JJ long)))))))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'anything', u'anything', u'NN'), (u'about', u'about', u'IN'), (u'sewing', u'sew', u'VBG'), (u'quilts', u'quilt', u'NNS'), (u'and', u'and', u'CC'), (u'blankets', u'blanket', u'NNS'), (u'because', u'because', u'IN'), (u'it', u'it', u'PRP'), (u'took', u'take', u'VBD'), (u'too', u'too', u'RB'), (u'long', u'long', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'did', "n't", 'like', 'anything', 'about', 'sewing', 'quilts', 'and', 'blankets', 'because', 'it', 'took', 'too', 'long', '.']}, {'string': ' One quilt or blanket took a week to make, when a skirt or shirt took one night!', 'parse': {'tree': '(ROOT (S (NP (NP (CD One) (NN quilt)) (CC or) (NP (NN blanket))) (VP (VBD took) (NP (DT a) (NN week)) (S (VP (TO to) (VP (VB make)))) (, ,) (SBAR (WHADVP (WRB when)) (S (NP (DT a) (NN skirt) (CC or) (NN shirt)) (VP (VBD took) (NP (CD one)) (NP (NN night)))))) (. !)))', 'lemma': [(u'One', u'one', u'CD'), (u'quilt', u'quilt', u'NN'), (u'or', u'or', u'CC'), (u'blanket', u'blanket', u'NN'), (u'took', u'take', u'VBD'), (u'a', u'a', u'DT'), (u'week', u'week', u'NN'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u',', u',', u','), (u'when', u'when', u'WRB'), (u'a', u'a', u'DT'), (u'skirt', u'skirt', u'NN'), (u'or', u'or', u'CC'), (u'shirt', u'shirt', u'NN'), (u'took', u'take', u'VBD'), (u'one', u'one', u'CD'), (u'night', u'night', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['One', 'quilt', 'or', 'blanket', 'took', 'a', 'week', 'to', 'make', ',', 'when', 'a', 'skirt', 'or', 'shirt', 'took', 'one', 'night', '!']}, {'string': " Mary 's mother did n't understand why Mary did n't like to sew quilts and blankets because Mary 's mother loved to!", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Mary) (POS 's)) (NN mother)) (VP (VBD did) (RB n't) (VP (VB understand) (SBAR (WHADVP (WRB why)) (S (NP (NNP Mary)) (VP (VBD did) (RB n't) (VP (VB like) (S (VP (TO to) (VP (VB sew) (NP (NNS quilts) (CC and) (NNS blankets)) (SBAR (IN because) (S (NP (NP (NNP Mary) (POS 's)) (NN mother)) (VP (VBD loved) (PP (TO to)))))))))))))) (. !)))", 'lemma': [(u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'mother', u'mother', u'NN'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'understand', u'understand', u'VB'), (u'why', u'why', u'WRB'), (u'Mary', u'Mary', u'NNP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'sew', u'sew', u'VB'), (u'quilts', u'quilt', u'NNS'), (u'and', u'and', u'CC'), (u'blankets', u'blanket', u'NNS'), (u'because', u'because', u'IN'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'mother', u'mother', u'NN'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'!', u'!', u'.')]}, 'tokens': ['Mary', "'s", 'mother', 'did', "n't", 'understand', 'why', 'Mary', 'did', "n't", 'like', 'to', 'sew', 'quilts', 'and', 'blankets', 'because', 'Mary', "'s", 'mother', 'loved', 'to', '!']}, {'string': " Mary was a normal little girl even if her friends did n't think so all the time.", 'parse': {'tree': "(ROOT (S (NP (NNP Mary)) (VP (VBD was) (NP (DT a) (JJ normal) (JJ little) (NN girl)) (SBAR (RB even) (IN if) (S (NP (PRP$ her) (NNS friends)) (VP (VBD did) (RB n't) (VP (VB think) (ADVP (RB so)) (NP (PDT all) (DT the) (NN time))))))) (. .)))", 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'normal', u'normal', u'JJ'), (u'little', u'little', u'JJ'), (u'girl', u'girl', u'NN'), (u'even', u'even', u'RB'), (u'if', u'if', u'IN'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'think', u'think', u'VB'), (u'so', u'so', u'RB'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'was', 'a', 'normal', 'little', 'girl', 'even', 'if', 'her', 'friends', 'did', "n't", 'think', 'so', 'all', 'the', 'time', '.']}, {'string': " Mary 's friends liked to play games and play outside but all Mary liked was to sew.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Mary) (POS 's)) (NNS friends)) (VP (VBD liked) (S (VP (TO to) (VP (VP (VB play) (NP (NNS games))) (CC and) (VP (VB play) (PP (IN outside) (SBAR (CC but) (S (NP (DT all) (NNP Mary) (NNP liked)) (VP (VBD was) (S (VP (TO to) (VP (VB sew))))))))))))) (. .)))", 'lemma': [(u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'friends', u'friend', u'NNS'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'games', u'game', u'NNS'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'outside', u'outside', u'IN'), (u'but', u'but', u'CC'), (u'all', u'all', u'DT'), (u'Mary', u'Mary', u'NNP'), (u'liked', u'liked', u'NNP'), (u'was', u'be', u'VBD'), (u'to', u'to', u'TO'), (u'sew', u'sew', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', "'s", 'friends', 'liked', 'to', 'play', 'games', 'and', 'play', 'outside', 'but', 'all', 'Mary', 'liked', 'was', 'to', 'sew', '.']}, {'string': ' She woke up and she began to sew.', 'parse': {'tree': '(ROOT (S (S (NP (PRP She)) (VP (VBD woke) (PRT (RP up)))) (CC and) (S (NP (PRP she)) (VP (VBD began) (S (VP (TO to) (VP (VB sew)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'woke', u'wake', u'VBD'), (u'up', u'up', u'RP'), (u'and', u'and', u'CC'), (u'she', u'she', u'PRP'), (u'began', u'begin', u'VBD'), (u'to', u'to', u'TO'), (u'sew', u'sew', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'woke', 'up', 'and', 'she', 'began', 'to', 'sew', '.']}, {'string': ' She only stopped to eat and use the bathroom.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (ADVP (RB only)) (VP (VBD stopped) (S (VP (TO to) (VP (VB eat) (CC and) (VB use) (NP (DT the) (NN bathroom)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'only', u'only', u'RB'), (u'stopped', u'stop', u'VBD'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'and', u'and', u'CC'), (u'use', u'use', u'VB'), (u'the', u'the', u'DT'), (u'bathroom', u'bathroom', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'only', 'stopped', 'to', 'eat', 'and', 'use', 'the', 'bathroom', '.']}, {'string': " Mary 's father was very worried about Mary.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Mary) (POS 's)) (NN father)) (VP (VBD was) (ADJP (RB very) (JJ worried)) (PP (IN about) (NP (NNP Mary)))) (. .)))", 'lemma': [(u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'worried', u'worried', u'JJ'), (u'about', u'about', u'IN'), (u'Mary', u'Mary', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', "'s", 'father', 'was', 'very', 'worried', 'about', 'Mary', '.']}, {'string': ' He said that little girls needed to laugh and play, not sew all the time.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD said) (SBAR (IN that) (S (NP (JJ little) (NNS girls)) (VP (VBD needed) (S (VP (TO to) (VP (VP (VB laugh) (CC and) (VB play)) (, ,) (RB not) (VP (VB sew) (NP (PDT all) (DT the) (NN time)))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u'that', u'that', u'IN'), (u'little', u'little', u'JJ'), (u'girls', u'girl', u'NNS'), (u'needed', u'need', u'VBD'), (u'to', u'to', u'TO'), (u'laugh', u'laugh', u'VB'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u',', u',', u','), (u'not', u'not', u'RB'), (u'sew', u'sew', u'VB'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'said', 'that', 'little', 'girls', 'needed', 'to', 'laugh', 'and', 'play', ',', 'not', 'sew', 'all', 'the', 'time', '.']}, {'string': " One day Mary 's father took Mary 's sewing things and gave them to the poor children.", 'parse': {'tree': "(ROOT (S (NP (CD One) (NN day)) (NP (NP (NNP Mary) (POS 's)) (NN father)) (VP (VP (VBD took) (NP (NP (NNP Mary) (POS 's)) (NN sewing) (NNS things))) (CC and) (VP (VBD gave) (NP (PRP them)) (PP (TO to) (NP (DT the) (JJ poor) (NNS children))))) (. .)))", 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN'), (u'took', u'take', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'sewing', u'sewing', u'NN'), (u'things', u'thing', u'NNS'), (u'and', u'and', u'CC'), (u'gave', u'give', u'VBD'), (u'them', u'they', u'PRP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'poor', u'poor', u'JJ'), (u'children', u'child', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'Mary', "'s", 'father', 'took', 'Mary', "'s", 'sewing', 'things', 'and', 'gave', 'them', 'to', 'the', 'poor', 'children', '.']}, {'string': " `` No more sewing, Mary! ''", 'parse': {'tree': "(ROOT (FRAG (`` ``) (NP (CD No) (JJR more) (NN sewing)) (, ,) (NP (NNP Mary)) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'No', u'no', u'CD'), (u'more', u'more', u'JJR'), (u'sewing', u'sewing', u'NN'), (u',', u',', u','), (u'Mary', u'Mary', u'NNP'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'No', 'more', 'sewing', ',', 'Mary', '!', "''"]}, {'string': ' He said.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD said)) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'said', '.']}, {'string': ' He wanted her to go laugh and play with her friends instead of sew but instead of going outside to play she ran into her room and cried.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD wanted) (S (NP (PRP her)) (VP (TO to) (VP (VP (VB go) (NP (NN laugh))) (CC and) (VP (VB play) (PP (IN with) (NP (PRP$ her) (NNS friends))) (PP (RB instead) (PP (IN of) (NP (NN sew))) (CC but) (PP (RB instead) (IN of) (S (VP (VBG going) (ADVP (RB outside)) (S (VP (TO to) (VP (VB play) (SBAR (S (NP (PRP she)) (VP (VP (VBD ran) (PP (IN into) (NP (PRP$ her) (NN room)))) (CC and) (VP (VBD cried))))))))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'her', u'she', u'PRP'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'laugh', u'laugh', u'NN'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'instead', u'instead', u'RB'), (u'of', u'of', u'IN'), (u'sew', u'sew', u'NN'), (u'but', u'but', u'CC'), (u'instead', u'instead', u'RB'), (u'of', u'of', u'IN'), (u'going', u'go', u'VBG'), (u'outside', u'outside', u'RB'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'she', u'she', u'PRP'), (u'ran', u'run', u'VBD'), (u'into', u'into', u'IN'), (u'her', u'she', u'PRP$'), (u'room', u'room', u'NN'), (u'and', u'and', u'CC'), (u'cried', u'cry', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'wanted', 'her', 'to', 'go', 'laugh', 'and', 'play', 'with', 'her', 'friends', 'instead', 'of', 'sew', 'but', 'instead', 'of', 'going', 'outside', 'to', 'play', 'she', 'ran', 'into', 'her', 'room', 'and', 'cried', '.']}, {'string': " Mary was very sad that she could n't sew any more.", 'parse': {'tree': "(ROOT (S (NP (NNP Mary)) (VP (VBD was) (ADJP (RB very) (JJ sad)) (SBAR (IN that) (S (NP (PRP she)) (VP (MD could) (RB n't) (VP (VB sew) (ADVP (DT any) (RBR more))))))) (. .)))", 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'sad', u'sad', u'JJ'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'sew', u'sew', u'VB'), (u'any', u'any', u'DT'), (u'more', u'more', u'RBR'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'was', 'very', 'sad', 'that', 'she', 'could', "n't", 'sew', 'any', 'more', '.']}, {'string': " Soon her friends came over to see why Mary had n't come over to play like her father said she would.", 'parse': {'tree': "(ROOT (S (ADVP (RB Soon)) (NP (PRP$ her) (NNS friends)) (VP (VBD came) (PRT (RP over)) (S (VP (TO to) (VP (VB see) (SBAR (WHADVP (WRB why)) (S (NP (NNP Mary)) (VP (VBD had) (RB n't) (VP (VBN come) (PRT (RP over)) (S (VP (TO to) (VP (VB play) (SBAR (IN like) (S (NP (PRP$ her) (NN father)) (VP (VBD said) (SBAR (S (NP (PRP she)) (VP (MD would)))))))))))))))))) (. .)))", 'lemma': [(u'Soon', u'soon', u'RB'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'came', u'come', u'VBD'), (u'over', u'over', u'RP'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'why', u'why', u'WRB'), (u'Mary', u'Mary', u'NNP'), (u'had', u'have', u'VBD'), (u"n't", u'not', u'RB'), (u'come', u'come', u'VBN'), (u'over', u'over', u'RP'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'like', u'like', u'IN'), (u'her', u'she', u'PRP$'), (u'father', u'father', u'NN'), (u'said', u'say', u'VBD'), (u'she', u'she', u'PRP'), (u'would', u'would', u'MD'), (u'.', u'.', u'.')]}, 'tokens': ['Soon', 'her', 'friends', 'came', 'over', 'to', 'see', 'why', 'Mary', 'had', "n't", 'come', 'over', 'to', 'play', 'like', 'her', 'father', 'said', 'she', 'would', '.']}, {'string': ' When they saw her crying on her bed they had to think of a way to cheer her up.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP they)) (VP (VBD saw) (NP (PRP$ her) (NN crying)) (PP (IN on) (NP (PRP$ her) (NN bed)))))) (NP (PRP they)) (VP (VBD had) (S (VP (TO to) (VP (VB think) (PP (IN of) (NP (DT a) (NN way)))))) (S (VP (TO to) (VP (VB cheer) (NP (PRP her)) (PRT (RP up)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'saw', u'see', u'VBD'), (u'her', u'she', u'PRP$'), (u'crying', u'crying', u'NN'), (u'on', u'on', u'IN'), (u'her', u'she', u'PRP$'), (u'bed', u'bed', u'NN'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'think', u'think', u'VB'), (u'of', u'of', u'IN'), (u'a', u'a', u'DT'), (u'way', u'way', u'NN'), (u'to', u'to', u'TO'), (u'cheer', u'cheer', u'VB'), (u'her', u'she', u'PRP'), (u'up', u'up', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'they', 'saw', 'her', 'crying', 'on', 'her', 'bed', 'they', 'had', 'to', 'think', 'of', 'a', 'way', 'to', 'cheer', 'her', 'up', '.']}, {'string': ' Billy said that maybe they could let her sew at their houses.', 'parse': {'tree': '(ROOT (S (NP (NNP Billy)) (VP (VBD said) (SBAR (IN that) (S (ADVP (RB maybe)) (NP (PRP they)) (VP (MD could) (VP (VB let) (NP (PRP$ her) (NN sew)) (PP (IN at) (NP (PRP$ their) (NNS houses)))))))) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'said', u'say', u'VBD'), (u'that', u'that', u'IN'), (u'maybe', u'maybe', u'RB'), (u'they', u'they', u'PRP'), (u'could', u'could', u'MD'), (u'let', u'let', u'VB'), (u'her', u'she', u'PRP$'), (u'sew', u'sew', u'NN'), (u'at', u'at', u'IN'), (u'their', u'they', u'PRP$'), (u'houses', u'house', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'said', 'that', 'maybe', 'they', 'could', 'let', 'her', 'sew', 'at', 'their', 'houses', '.']}, {'string': ' Abby thought it was a great idea.', 'parse': {'tree': '(ROOT (S (NP (NNP Abby)) (VP (VBD thought) (SBAR (S (NP (PRP it)) (VP (VBD was) (NP (DT a) (JJ great) (NN idea)))))) (. .)))', 'lemma': [(u'Abby', u'Abby', u'NNP'), (u'thought', u'think', u'VBD'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'idea', u'idea', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Abby', 'thought', 'it', 'was', 'a', 'great', 'idea', '.']}, {'string': " So then all Mary 's friends bought sewing things with their money so that Mary would be happy again.", 'parse': {'tree': "(ROOT (S (CC So) (ADVP (RB then)) (NP (PDT all) (NP (NNP Mary) (POS 's)) (NNS friends)) (VP (VBD bought) (NP (JJ sewing) (NNS things)) (PP (IN with) (NP (PRP$ their) (NN money))) (SBAR (RB so) (IN that) (S (NP (NNP Mary)) (VP (MD would) (VP (VB be) (ADJP (JJ happy)) (ADVP (RB again))))))) (. .)))", 'lemma': [(u'So', u'so', u'CC'), (u'then', u'then', u'RB'), (u'all', u'all', u'PDT'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'friends', u'friend', u'NNS'), (u'bought', u'buy', u'VBD'), (u'sewing', u'sewing', u'JJ'), (u'things', u'thing', u'NNS'), (u'with', u'with', u'IN'), (u'their', u'they', u'PRP$'), (u'money', u'money', u'NN'), (u'so', u'so', u'RB'), (u'that', u'that', u'IN'), (u'Mary', u'Mary', u'NNP'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'happy', u'happy', u'JJ'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'then', 'all', 'Mary', "'s", 'friends', 'bought', 'sewing', 'things', 'with', 'their', 'money', 'so', 'that', 'Mary', 'would', 'be', 'happy', 'again', '.']}, {'string': " When Mary 's father saw Mary go to one of her friend 's house he was very happy.", 'parse': {'tree': "(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NP (NNP Mary) (POS 's)) (NN father)) (VP (VBD saw) (SBAR (S (NP (NNP Mary)) (VP (VBP go) (PP (TO to) (NP (NP (CD one)) (PP (IN of) (NP (NP (PRP$ her) (NN friend) (POS 's)) (NN house))))))))))) (NP (PRP he)) (VP (VBD was) (ADJP (RB very) (JJ happy))) (. .)))", 'lemma': [(u'When', u'when', u'WRB'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN'), (u'saw', u'see', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u'go', u'go', u'VBP'), (u'to', u'to', u'TO'), (u'one', u'one', u'CD'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'friend', u'friend', u'NN'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Mary', "'s", 'father', 'saw', 'Mary', 'go', 'to', 'one', 'of', 'her', 'friend', "'s", 'house', 'he', 'was', 'very', 'happy', '.']}, {'string': ' Soon everyone was happy again.', 'parse': {'tree': '(ROOT (S (ADVP (RB Soon)) (NP (NN everyone)) (VP (VBD was) (ADJP (JJ happy)) (ADVP (RB again))) (. .)))', 'lemma': [(u'Soon', u'soon', u'RB'), (u'everyone', u'everyone', u'NN'), (u'was', u'be', u'VBD'), (u'happy', u'happy', u'JJ'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Soon', 'everyone', 'was', 'happy', 'again', '.']}], 'questions': [{'question': {'string': ' What did Mary like to sew?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Mary)) (VP (VB like) (PP (TO to) (NP (NN sew))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'sew', u'sew', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Mary', 'like', 'to', 'sew', '?']}, 'answers': [{'string': ' blankets, dresses, and shirts.', 'parse': {'tree': '(ROOT (NP (NP (NNS blankets)) (, ,) (NP (NP (NNS dresses)) (, ,) (CC and) (NP (NNS shirts))) (. .)))', 'lemma': [(u'blankets', u'blanket', u'NNS'), (u',', u',', u','), (u'dresses', u'dress', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'shirts', u'shirt', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['blankets', ',', 'dresses', ',', 'and', 'shirts', '.']}, {'string': ' dresses, shirts, and skirts.', 'parse': {'tree': '(ROOT (S (NP (NNS dresses)) (, ,) (VP (VP (VBZ shirts)) (, ,) (CC and) (VP (VBZ skirts))) (. .)))', 'lemma': [(u'dresses', u'dress', u'NNS'), (u',', u',', u','), (u'shirts', u'shirt', u'VBZ'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'skirts', u'skirt', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['dresses', ',', 'shirts', ',', 'and', 'skirts', '.']}, {'string': ' quilts, blankets, and shirts.', 'parse': {'tree': '(ROOT (NP (NP (NNS quilts)) (, ,) (NP (NP (NNS blankets)) (, ,) (CC and) (NP (NNS shirts))) (. .)))', 'lemma': [(u'quilts', u'quilt', u'NNS'), (u',', u',', u','), (u'blankets', u'blanket', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'shirts', u'shirt', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['quilts', ',', 'blankets', ',', 'and', 'shirts', '.']}, {'string': ' quilts, dresses, and skirts.', 'parse': {'tree': '(ROOT (S (NP (NNS quilts)) (, ,) (VP (VP (VBZ dresses)) (, ,) (CC and) (VP (VBZ skirts))) (. .)))', 'lemma': [(u'quilts', u'quilt', u'NNS'), (u',', u',', u','), (u'dresses', u'dress', u'VBZ'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'skirts', u'skirt', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['quilts', ',', 'dresses', ',', 'and', 'skirts', '.']}], 'mode': 0}, {'question': {'string': " What was the little girl 's name in the story?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (NP (DT the) (JJ little) (NN girl) (POS 's)) (NN name)) (PP (IN in) (NP (DT the) (NN story))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'girl', u'girl', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'little', 'girl', "'s", 'name', 'in', 'the', 'story', '?']}, 'answers': [{'string': ' Mary.', 'parse': {'tree': '(ROOT (FRAG (NP (NNP Mary)) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', '.']}, {'string': ' Billie.', 'parse': {'tree': '(ROOT (NP (FW Billie) (. .)))', 'lemma': [(u'Billie', u'billie', u'FW'), (u'.', u'.', u'.')]}, 'tokens': ['Billie', '.']}, {'string': ' Billy.', 'parse': {'tree': '(ROOT (NP (FW Billy) (. .)))', 'lemma': [(u'Billy', u'billy', u'FW'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', '.']}, {'string': ' Abby.', 'parse': {'tree': '(ROOT (NP (FW Abby) (. .)))', 'lemma': [(u'Abby', u'abby', u'FW'), (u'.', u'.', u'.')]}, 'tokens': ['Abby', '.']}], 'mode': 1}, {'question': {'string': " Why did Mary 's father not want Mary to sew?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NP (NNP Mary) (POS 's)) (NN father)) (VP (RB not) (VB want) (S (NP (NNP Mary)) (VP (TO to) (VP (VB sew)))))) (. ?)))", 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'father', u'father', u'NN'), (u'not', u'not', u'RB'), (u'want', u'want', u'VB'), (u'Mary', u'Mary', u'NNP'), (u'to', u'to', u'TO'), (u'sew', u'sew', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'Mary', "'s", 'father', 'not', 'want', 'Mary', 'to', 'sew', '?']}, 'answers': [{'string': ' Because she never did anything but sew.', 'parse': {'tree': '(ROOT (S (SBAR (IN Because) (S (NP (PRP she)) (ADVP (RB never)) (VP (VBD did) (NP (NN anything)) (ADVP (CC but))))) (VP (VBP sew)) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'she', u'she', u'PRP'), (u'never', u'never', u'RB'), (u'did', u'do', u'VBD'), (u'anything', u'anything', u'NN'), (u'but', u'but', u'CC'), (u'sew', u'sew', u'VBP'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'she', 'never', 'did', 'anything', 'but', 'sew', '.']}, {'string': " Because her friends did n't think she was normal.", 'parse': {'tree': "(ROOT (S (SBAR (IN Because) (S (NP (PRP$ her) (NNS friends)) (VP (VBD did) (RB n't) (VP (VB think))))) (NP (PRP she)) (VP (VBD was) (ADJP (JJ normal))) (. .)))", 'lemma': [(u'Because', u'because', u'IN'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'think', u'think', u'VB'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'normal', u'normal', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'her', 'friends', 'did', "n't", 'think', 'she', 'was', 'normal', '.']}, {'string': ' Because he thought little girls needed to laugh and play.', 'parse': {'tree': '(ROOT (S (SBAR (IN Because) (S (NP (PRP he)) (VP (VBD thought) (NP (JJ little) (NNS girls))))) (VP (VBD needed) (S (VP (TO to) (VP (VB laugh) (CC and) (VB play))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'thought', u'think', u'VBD'), (u'little', u'little', u'JJ'), (u'girls', u'girl', u'NNS'), (u'needed', u'need', u'VBD'), (u'to', u'to', u'TO'), (u'laugh', u'laugh', u'VB'), (u'and', u'and', u'CC'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'he', 'thought', 'little', 'girls', 'needed', 'to', 'laugh', 'and', 'play', '.']}, {'string': " Because he did n't like her sewing.", 'parse': {'tree': "(ROOT (FRAG (SBAR (IN Because) (S (NP (PRP he)) (VP (VBD did) (RB n't) (VP (VB like) (NP (PRP$ her) (NN sewing)))))) (. .)))", 'lemma': [(u'Because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'her', u'she', u'PRP$'), (u'sewing', u'sewing', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'he', 'did', "n't", 'like', 'her', 'sewing', '.']}], 'mode': 0}, {'question': {'string': " What are two of Mary 's friends ' names?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (CD two)) (PP (IN of) (NP (NP (NP (NNP Mary) (POS 's)) (NNS friends) (POS ')) (NNS names))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'two', u'two', u'CD'), (u'of', u'of', u'IN'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'friends', u'friend', u'NNS'), (u"'", u"'", u'POS'), (u'names', u'name', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'are', 'two', 'of', 'Mary', "'s", 'friends', "'", 'names', '?']}, 'answers': [{'string': ' Billy and Abby.', 'parse': {'tree': '(ROOT (NP (NNP Billy) (CC and) (NNP Abby) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'and', u'and', u'CC'), (u'Abby', u'Abby', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'and', 'Abby', '.']}, {'string': ' Johnny and Abby.', 'parse': {'tree': '(ROOT (NP (NNP Johnny) (CC and) (NNP Abby) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'and', u'and', u'CC'), (u'Abby', u'Abby', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'and', 'Abby', '.']}, {'string': ' Billie and Abbie.', 'parse': {'tree': '(ROOT (NP (NNP Billie) (CC and) (NNP Abbie) (. .)))', 'lemma': [(u'Billie', u'Billie', u'NNP'), (u'and', u'and', u'CC'), (u'Abbie', u'Abbie', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Billie', 'and', 'Abbie', '.']}, {'string': ' Jenny and Billy.', 'parse': {'tree': '(ROOT (NP (NNP Jenny) (CC and) (NNP Billy) (. .)))', 'lemma': [(u'Jenny', u'Jenny', u'NNP'), (u'and', u'and', u'CC'), (u'Billy', u'Billy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Jenny', 'and', 'Billy', '.']}], 'mode': 1}]}
{'sentences': [{'string': ' Ryan and Adam love to play basketball.', 'parse': {'tree': '(ROOT (S (NP (NNP Ryan) (CC and) (NNP Adam)) (VP (VBP love) (S (VP (TO to) (VP (VB play) (NP (NN basketball)))))) (. .)))', 'lemma': [(u'Ryan', u'Ryan', u'NNP'), (u'and', u'and', u'CC'), (u'Adam', u'Adam', u'NNP'), (u'love', u'love', u'VBP'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'basketball', u'basketball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ryan', 'and', 'Adam', 'love', 'to', 'play', 'basketball', '.']}, {'string': ' They like it better than soccer and baseball.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP like) (S (NP (PRP it)) (ADJP (JJR better))) (PP (IN than) (NP (NN soccer) (CC and) (NN baseball)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'like', u'like', u'VBP'), (u'it', u'it', u'PRP'), (u'better', u'better', u'JJR'), (u'than', u'than', u'IN'), (u'soccer', u'soccer', u'NN'), (u'and', u'and', u'CC'), (u'baseball', u'baseball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'like', 'it', 'better', 'than', 'soccer', 'and', 'baseball', '.']}, {'string': ' Their other friend, Jared, has his own basketball hoop.', 'parse': {'tree': '(ROOT (S (NP (NP (PRP$ Their) (JJ other) (NN friend)) (, ,) (NP (NNP Jared)) (, ,)) (VP (VBZ has) (NP (PRP$ his) (JJ own) (NN basketball) (NN hoop))) (. .)))', 'lemma': [(u'Their', u'they', u'PRP$'), (u'other', u'other', u'JJ'), (u'friend', u'friend', u'NN'), (u',', u',', u','), (u'Jared', u'Jared', u'NNP'), (u',', u',', u','), (u'has', u'have', u'VBZ'), (u'his', u'he', u'PRP$'), (u'own', u'own', u'JJ'), (u'basketball', u'basketball', u'NN'), (u'hoop', u'hoop', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Their', 'other', 'friend', ',', 'Jared', ',', 'has', 'his', 'own', 'basketball', 'hoop', '.']}, {'string': ' He got it for his ninth birthday.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD got) (NP (PRP it)) (PP (IN for) (NP (PRP$ his) (JJ ninth) (NN birthday)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'it', u'it', u'PRP'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'ninth', u'ninth', u'JJ'), (u'birthday', u'birthday', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'got', 'it', 'for', 'his', 'ninth', 'birthday', '.']}, {'string': ' Ryan got a football for his birthday and Adam got a skateboard.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Ryan)) (VP (VBD got) (NP (DT a) (NN football)) (PP (IN for) (NP (PRP$ his) (NN birthday))))) (CC and) (S (NP (NNP Adam)) (VP (VBD got) (NP (DT a) (NN skateboard)))) (. .)))', 'lemma': [(u'Ryan', u'Ryan', u'NNP'), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'football', u'football', u'NN'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'birthday', u'birthday', u'NN'), (u'and', u'and', u'CC'), (u'Adam', u'Adam', u'NNP'), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'skateboard', u'skateboard', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ryan', 'got', 'a', 'football', 'for', 'his', 'birthday', 'and', 'Adam', 'got', 'a', 'skateboard', '.']}, {'string': ' They like their presents, but think the basketball hoop is better.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBP like) (NP (PRP$ their) (NNS presents))) (, ,) (CC but) (VP (VBP think) (SBAR (S (NP (DT the) (NN basketball) (NN hoop)) (VP (VBZ is) (ADJP (JJR better))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'like', u'like', u'VBP'), (u'their', u'they', u'PRP$'), (u'presents', u'present', u'NNS'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'think', u'think', u'VBP'), (u'the', u'the', u'DT'), (u'basketball', u'basketball', u'NN'), (u'hoop', u'hoop', u'NN'), (u'is', u'be', u'VBZ'), (u'better', u'better', u'JJR'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'like', 'their', 'presents', ',', 'but', 'think', 'the', 'basketball', 'hoop', 'is', 'better', '.']}, {'string': " They play basketball at Jared 's house with him and any other kids who show up.", 'parse': {'tree': "(ROOT (S (NP (PRP They)) (VP (VBP play) (NP (NN basketball)) (PP (IN at) (NP (NP (NP (NP (NNP Jared) (POS 's)) (NN house)) (PP (IN with) (NP (PRP him)))) (CC and) (NP (NP (DT any) (JJ other) (NNS kids)) (SBAR (WHNP (WP who)) (S (VP (VBP show) (PRT (RP up))))))))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u'play', u'play', u'VBP'), (u'basketball', u'basketball', u'NN'), (u'at', u'at', u'IN'), (u'Jared', u'Jared', u'NNP'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'with', u'with', u'IN'), (u'him', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'any', u'any', u'DT'), (u'other', u'other', u'JJ'), (u'kids', u'kid', u'NNS'), (u'who', u'who', u'WP'), (u'show', u'show', u'VBP'), (u'up', u'up', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'play', 'basketball', 'at', 'Jared', "'s", 'house', 'with', 'him', 'and', 'any', 'other', 'kids', 'who', 'show', 'up', '.']}, {'string': ' Alex and Brady come almost every day and Josh, Ty, and Max come sometimes.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Alex) (CC and) (NNP Brady)) (VP (VBP come) (NP (RB almost) (DT every) (NN day)))) (CC and) (S (NP (NNP Josh) (, ,) (NNP Ty) (, ,) (CC and) (NNP Max)) (VP (VBP come) (ADVP (RB sometimes)))) (. .)))', 'lemma': [(u'Alex', u'Alex', u'NNP'), (u'and', u'and', u'CC'), (u'Brady', u'Brady', u'NNP'), (u'come', u'come', u'VBP'), (u'almost', u'almost', u'RB'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'and', u'and', u'CC'), (u'Josh', u'Josh', u'NNP'), (u',', u',', u','), (u'Ty', u'Ty', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Max', u'Max', u'NNP'), (u'come', u'come', u'VBP'), (u'sometimes', u'sometimes', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Alex', 'and', 'Brady', 'come', 'almost', 'every', 'day', 'and', 'Josh', ',', 'Ty', ',', 'and', 'Max', 'come', 'sometimes', '.']}, {'string': ' Next year, they all get to play on a basketball team.', 'parse': {'tree': '(ROOT (S (NP (JJ Next) (NN year)) (, ,) (NP (PRP they)) (ADVP (DT all)) (VP (VBP get) (S (VP (TO to) (VP (VB play) (PP (IN on) (NP (DT a) (NN basketball) (NN team))))))) (. .)))', 'lemma': [(u'Next', u'next', u'JJ'), (u'year', u'year', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'all', u'all', u'DT'), (u'get', u'get', u'VBP'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'basketball', u'basketball', u'NN'), (u'team', u'team', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Next', 'year', ',', 'they', 'all', 'get', 'to', 'play', 'on', 'a', 'basketball', 'team', '.']}, {'string': ' They get to play at their school.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP get) (S (VP (TO to) (VP (VB play) (PP (IN at) (NP (PRP$ their) (NN school))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'get', u'get', u'VBP'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'at', u'at', u'IN'), (u'their', u'they', u'PRP$'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'get', 'to', 'play', 'at', 'their', 'school', '.']}, {'string': " They are very excited about that and ca n't wait to play on a real team.", 'parse': {'tree': "(ROOT (S (NP (PRP They)) (VP (VP (VBP are) (ADJP (RB very) (JJ excited) (PP (IN about) (NP (DT that))))) (CC and) (VP (MD ca) (RB n't) (VP (VB wait) (S (VP (TO to) (VP (VB play) (PP (IN on) (NP (DT a) (JJ real) (NN team))))))))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'very', u'very', u'RB'), (u'excited', u'excited', u'JJ'), (u'about', u'about', u'IN'), (u'that', u'that', u'DT'), (u'and', u'and', u'CC'), (u'ca', u'can', u'MD'), (u"n't", u'not', u'RB'), (u'wait', u'wait', u'VB'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'real', u'real', u'JJ'), (u'team', u'team', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'are', 'very', 'excited', 'about', 'that', 'and', 'ca', "n't", 'wait', 'to', 'play', 'on', 'a', 'real', 'team', '.']}, {'string': ' For now, they are practicing a lot and are trying to get really good.', 'parse': {'tree': '(ROOT (S (PP (IN For) (NP (RB now))) (, ,) (NP (PRP they)) (VP (VP (VBP are) (VP (VBG practicing) (NP (DT a) (NN lot)))) (CC and) (VP (VBP are) (VP (VBG trying) (S (VP (TO to) (VP (VB get) (ADJP (RB really) (JJ good)))))))) (. .)))', 'lemma': [(u'For', u'for', u'IN'), (u'now', u'now', u'RB'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'practicing', u'practice', u'VBG'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'and', u'and', u'CC'), (u'are', u'be', u'VBP'), (u'trying', u'try', u'VBG'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'really', u'really', u'RB'), (u'good', u'good', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['For', 'now', ',', 'they', 'are', 'practicing', 'a', 'lot', 'and', 'are', 'trying', 'to', 'get', 'really', 'good', '.']}, {'string': ' They play every day they can.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP play) (NP (NP (DT every) (NN day)) (SBAR (S (NP (PRP they)) (VP (MD can)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'play', u'play', u'VBP'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'they', u'they', u'PRP'), (u'can', u'can', u'MD'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'play', 'every', 'day', 'they', 'can', '.']}, {'string': ' They are trying to be as good as the NBA players they watch on TV.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VBP are) (VP (VBG trying) (S (VP (TO to) (VP (VB be) (ADJP (RB as) (JJ good) (PP (IN as) (NP (DT the) (NNP NBA) (NNS players)))))))))) (NP (PRP they)) (VP (VBP watch) (PP (IN on) (NP (NN TV)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'trying', u'try', u'VBG'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'as', u'as', u'RB'), (u'good', u'good', u'JJ'), (u'as', u'as', u'IN'), (u'the', u'the', u'DT'), (u'NBA', u'NBA', u'NNP'), (u'players', u'player', u'NNS'), (u'they', u'they', u'PRP'), (u'watch', u'watch', u'VBP'), (u'on', u'on', u'IN'), (u'TV', u'tv', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'are', 'trying', 'to', 'be', 'as', 'good', 'as', 'the', 'NBA', 'players', 'they', 'watch', 'on', 'TV', '.']}, {'string': ' They dream of someday playing in the NBA.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP dream) (PP (IN of) (S (ADVP (RB someday)) (VP (VBG playing) (PP (IN in) (NP (DT the) (NNP NBA))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'dream', u'dream', u'VBP'), (u'of', u'of', u'IN'), (u'someday', u'someday', u'RB'), (u'playing', u'play', u'VBG'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'NBA', u'NBA', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'dream', 'of', 'someday', 'playing', 'in', 'the', 'NBA', '.']}, {'string': ' They are sure it is going to happen.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP are) (ADJP (JJ sure) (SBAR (S (NP (PRP it)) (VP (VBZ is) (VP (VBG going) (S (VP (TO to) (VP (VB happen)))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'sure', u'sure', u'JJ'), (u'it', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'happen', u'happen', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'are', 'sure', 'it', 'is', 'going', 'to', 'happen', '.']}], 'questions': [{'question': {'string': " What do Ryan and Adam play at Jared 's house?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP do) (NP (NNP Ryan) (CC and) (NNP Adam)) (VP (VB play) (PP (IN at) (NP (NP (NNP Jared) (POS 's)) (NN house))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'do', u'do', u'VBP'), (u'Ryan', u'Ryan', u'NNP'), (u'and', u'and', u'CC'), (u'Adam', u'Adam', u'NNP'), (u'play', u'play', u'VB'), (u'at', u'at', u'IN'), (u'Jared', u'Jared', u'NNP'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'do', 'Ryan', 'and', 'Adam', 'play', 'at', 'Jared', "'s", 'house', '?']}, 'answers': [{'string': ' football', 'parse': {'tree': '(ROOT (NP (NN football)))', 'lemma': [(u'football', u'football', u'NN')]}, 'tokens': ['football']}, {'string': ' basketball', 'parse': {'tree': '(ROOT (NP (NN basketball)))', 'lemma': [(u'basketball', u'basketball', u'NN')]}, 'tokens': ['basketball']}, {'string': ' soccer', 'parse': {'tree': '(ROOT (NP (NN soccer)))', 'lemma': [(u'soccer', u'soccer', u'NN')]}, 'tokens': ['soccer']}, {'string': ' baseball', 'parse': {'tree': '(ROOT (NP (NN baseball)))', 'lemma': [(u'baseball', u'baseball', u'NN')]}, 'tokens': ['baseball']}], 'mode': 0}, {'question': {'string': ' What sport do Ryan and Adam love to play?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN sport)) (SQ (VBP do) (NP (NNP Ryan) (CC and) (NNP Adam)) (VP (VB love) (S (VP (TO to) (VP (VB play)))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'sport', u'sport', u'NN'), (u'do', u'do', u'VBP'), (u'Ryan', u'Ryan', u'NNP'), (u'and', u'and', u'CC'), (u'Adam', u'Adam', u'NNP'), (u'love', u'love', u'VB'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'sport', 'do', 'Ryan', 'and', 'Adam', 'love', 'to', 'play', '?']}, 'answers': [{'string': ' football', 'parse': {'tree': '(ROOT (NP (NN football)))', 'lemma': [(u'football', u'football', u'NN')]}, 'tokens': ['football']}, {'string': ' baseball', 'parse': {'tree': '(ROOT (NP (NN baseball)))', 'lemma': [(u'baseball', u'baseball', u'NN')]}, 'tokens': ['baseball']}, {'string': ' soccer', 'parse': {'tree': '(ROOT (NP (NN soccer)))', 'lemma': [(u'soccer', u'soccer', u'NN')]}, 'tokens': ['soccer']}, {'string': ' basketball', 'parse': {'tree': '(ROOT (NP (NN basketball)))', 'lemma': [(u'basketball', u'basketball', u'NN')]}, 'tokens': ['basketball']}], 'mode': 1}, {'question': {'string': ' What do the boys get to play on at their school next year?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP do) (NP (DT the) (NNS boys)) (VP (VB get) (S (VP (TO to) (VP (VB play) (PRT (RP on)) (PP (IN at) (NP (PRP$ their) (NN school))) (NP (JJ next) (NN year))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'do', u'do', u'VBP'), (u'the', u'the', u'DT'), (u'boys', u'boy', u'NNS'), (u'get', u'get', u'VB'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'on', u'on', u'RP'), (u'at', u'at', u'IN'), (u'their', u'they', u'PRP$'), (u'school', u'school', u'NN'), (u'next', u'next', u'JJ'), (u'year', u'year', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'do', 'the', 'boys', 'get', 'to', 'play', 'on', 'at', 'their', 'school', 'next', 'year', '?']}, 'answers': [{'string': ' on a baseball team', 'parse': {'tree': '(ROOT (PP (IN on) (NP (DT a) (NN baseball) (NN team))))', 'lemma': [(u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'baseball', u'baseball', u'NN'), (u'team', u'team', u'NN')]}, 'tokens': ['on', 'a', 'baseball', 'team']}, {'string': ' on a skateboarding team', 'parse': {'tree': '(ROOT (PP (IN on) (NP (DT a) (NNP skateboarding) (NN team))))', 'lemma': [(u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'skateboarding', u'skateboarding', u'NNP'), (u'team', u'team', u'NN')]}, 'tokens': ['on', 'a', 'skateboarding', 'team']}, {'string': ' on a soccer team', 'parse': {'tree': '(ROOT (PP (IN on) (NP (DT a) (NN soccer) (NN team))))', 'lemma': [(u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'soccer', u'soccer', u'NN'), (u'team', u'team', u'NN')]}, 'tokens': ['on', 'a', 'soccer', 'team']}, {'string': ' on a basketball team', 'parse': {'tree': '(ROOT (PP (IN on) (NP (DT a) (NN basketball) (NN team))))', 'lemma': [(u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'basketball', u'basketball', u'NN'), (u'team', u'team', u'NN')]}, 'tokens': ['on', 'a', 'basketball', 'team']}], 'mode': 0}, {'question': {'string': ' What did Jared get for his ninth birthday?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Jared)) (VP (VB get) (PP (IN for) (NP (PRP$ his) (JJ ninth) (NN birthday))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Jared', u'Jared', u'NNP'), (u'get', u'get', u'VB'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'ninth', u'ninth', u'JJ'), (u'birthday', u'birthday', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Jared', 'get', 'for', 'his', 'ninth', 'birthday', '?']}, 'answers': [{'string': ' a basketball hoop', 'parse': {'tree': '(ROOT (NP (DT a) (NN basketball) (NN hoop)))', 'lemma': [(u'a', u'a', u'DT'), (u'basketball', u'basketball', u'NN'), (u'hoop', u'hoop', u'NN')]}, 'tokens': ['a', 'basketball', 'hoop']}, {'string': ' a baseball bat', 'parse': {'tree': '(ROOT (NP (DT a) (NN baseball) (NN bat)))', 'lemma': [(u'a', u'a', u'DT'), (u'baseball', u'baseball', u'NN'), (u'bat', u'bat', u'NN')]}, 'tokens': ['a', 'baseball', 'bat']}, {'string': ' a football', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN football))))', 'lemma': [(u'a', u'a', u'DT'), (u'football', u'football', u'NN')]}, 'tokens': ['a', 'football']}, {'string': ' a skateboard', 'parse': {'tree': '(ROOT (FRAG (X (SYM a)) (VP (VBD skateboard))))', 'lemma': [(u'a', u'a', u'SYM'), (u'skateboard', u'skateboard', u'VBD')]}, 'tokens': ['a', 'skateboard']}], 'mode': 0}]}
{'sentences': [{'string': ' Cindy and Mary were playing at recess.', 'parse': {'tree': '(ROOT (S (NP (NNP Cindy) (CC and) (NNP Mary)) (VP (VBD were) (VP (VBG playing) (PP (IN at) (NP (NN recess))))) (. .)))', 'lemma': [(u'Cindy', u'Cindy', u'NNP'), (u'and', u'and', u'CC'), (u'Mary', u'Mary', u'NNP'), (u'were', u'be', u'VBD'), (u'playing', u'play', u'VBG'), (u'at', u'at', u'IN'), (u'recess', u'recess', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Cindy', 'and', 'Mary', 'were', 'playing', 'at', 'recess', '.']}, {'string': " They were having a great time until Cindy brought up Allison 's birthday party.", 'parse': {'tree': "(ROOT (S (NP (PRP They)) (VP (VBD were) (VP (VBG having) (NP (DT a) (JJ great) (NN time)) (SBAR (IN until) (S (NP (NNP Cindy)) (VP (VBD brought) (PRT (RP up)) (NP (NP (NNP Allison) (POS 's)) (NN birthday) (NN party))))))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'having', u'have', u'VBG'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'time', u'time', u'NN'), (u'until', u'until', u'IN'), (u'Cindy', u'Cindy', u'NNP'), (u'brought', u'bring', u'VBD'), (u'up', u'up', u'RP'), (u'Allison', u'Allison', u'NNP'), (u"'s", u"'s", u'POS'), (u'birthday', u'birthday', u'NN'), (u'party', u'party', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'having', 'a', 'great', 'time', 'until', 'Cindy', 'brought', 'up', 'Allison', "'s", 'birthday', 'party', '.']}, {'string': ' Cindy had been invited to it, but Mary had not.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Cindy)) (VP (VBD had) (VP (VBN been) (VP (VBN invited) (PP (TO to) (NP (PRP it))))))) (, ,) (CC but) (S (NP (NNP Mary)) (VP (VBD had) (RB not))) (. .)))', 'lemma': [(u'Cindy', u'Cindy', u'NNP'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'invited', u'invite', u'VBN'), (u'to', u'to', u'TO'), (u'it', u'it', u'PRP'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'Mary', u'Mary', u'NNP'), (u'had', u'have', u'VBD'), (u'not', u'not', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Cindy', 'had', 'been', 'invited', 'to', 'it', ',', 'but', 'Mary', 'had', 'not', '.']}, {'string': " This hurt Mary 's feelings a lot.", 'parse': {'tree': "(ROOT (S (NP (DT This)) (VP (VBD hurt) (NP (NP (NP (NNP Mary) (POS 's)) (NNS feelings)) (NP (DT a) (NN lot)))) (. .)))", 'lemma': [(u'This', u'this', u'DT'), (u'hurt', u'hurt', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'feelings', u'feeling', u'NNS'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['This', 'hurt', 'Mary', "'s", 'feelings', 'a', 'lot', '.']}, {'string': ' The girls kept on playing and Mary was trying to have fun, but all she felt like doing was crying.', 'parse': {'tree': '(ROOT (S (S (S (NP (DT The) (NNS girls)) (VP (VBD kept) (PP (IN on) (NP (NN playing))))) (CC and) (S (NP (NNP Mary)) (VP (VBD was) (VP (VBG trying) (S (VP (TO to) (VP (VB have) (NP (NN fun))))))))) (, ,) (CC but) (S (NP (NP (DT all)) (SBAR (S (NP (PRP she)) (VP (VBD felt) (PP (IN like) (S (VP (VBG doing)))))))) (VP (VBD was) (VP (VBG crying)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'girls', u'girl', u'NNS'), (u'kept', u'keep', u'VBD'), (u'on', u'on', u'IN'), (u'playing', u'playing', u'NN'), (u'and', u'and', u'CC'), (u'Mary', u'Mary', u'NNP'), (u'was', u'be', u'VBD'), (u'trying', u'try', u'VBG'), (u'to', u'to', u'TO'), (u'have', u'have', u'VB'), (u'fun', u'fun', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'all', u'all', u'DT'), (u'she', u'she', u'PRP'), (u'felt', u'feel', u'VBD'), (u'like', u'like', u'IN'), (u'doing', u'do', u'VBG'), (u'was', u'be', u'VBD'), (u'crying', u'cry', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'girls', 'kept', 'on', 'playing', 'and', 'Mary', 'was', 'trying', 'to', 'have', 'fun', ',', 'but', 'all', 'she', 'felt', 'like', 'doing', 'was', 'crying', '.']}, {'string': " She could n't believe that she had not been invited to Allison 's birthday party.", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (MD could) (RB n't) (VP (VB believe) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD had) (RB not) (VP (VBN been) (VP (VBN invited) (PP (TO to) (NP (NP (NNP Allison) (POS 's)) (NN birthday) (NN party)))))))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'believe', u'believe', u'VB'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'not', u'not', u'RB'), (u'been', u'be', u'VBN'), (u'invited', u'invite', u'VBN'), (u'to', u'to', u'TO'), (u'Allison', u'Allison', u'NNP'), (u"'s", u"'s", u'POS'), (u'birthday', u'birthday', u'NN'), (u'party', u'party', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'could', "n't", 'believe', 'that', 'she', 'had', 'not', 'been', 'invited', 'to', 'Allison', "'s", 'birthday', 'party', '.']}, {'string': ' She thought that they were friends and if her best friend Cindy had been invited, why not her?', 'parse': {'tree': '(ROOT (SQ (S (NP (PRP She)) (VP (VBD thought) (SBAR (SBAR (IN that) (S (NP (PRP they)) (VP (VBD were) (NP (NNS friends))))) (CC and) (SBAR (IN if) (S (NP (PRP$ her) (JJS best) (NN friend) (NN Cindy)) (VP (VBD had) (VP (VBN been) (VP (VBN invited))))))))) (, ,) (SQ (VBD why) (RB not) (NP (PRP her))) (. ?)))', 'lemma': [(u'She', u'she', u'PRP'), (u'thought', u'think', u'VBD'), (u'that', u'that', u'IN'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'friends', u'friend', u'NNS'), (u'and', u'and', u'CC'), (u'if', u'if', u'IN'), (u'her', u'she', u'PRP$'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'Cindy', u'cindy', u'NN'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'invited', u'invite', u'VBN'), (u',', u',', u','), (u'why', u'why', u'VBD'), (u'not', u'not', u'RB'), (u'her', u'she', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['She', 'thought', 'that', 'they', 'were', 'friends', 'and', 'if', 'her', 'best', 'friend', 'Cindy', 'had', 'been', 'invited', ',', 'why', 'not', 'her', '?']}, {'string': ' After recess was over, the class walked back into the school.', 'parse': {'tree': '(ROOT (S (SBAR (IN After) (S (NP (NN recess)) (VP (VBD was) (ADJP (RP over))))) (, ,) (NP (DT the) (NN class)) (VP (VBD walked) (ADVP (RB back)) (PP (IN into) (NP (DT the) (NN school)))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'recess', u'recess', u'NN'), (u'was', u'be', u'VBD'), (u'over', u'over', u'RP'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'class', u'class', u'NN'), (u'walked', u'walk', u'VBD'), (u'back', u'back', u'RB'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'recess', 'was', 'over', ',', 'the', 'class', 'walked', 'back', 'into', 'the', 'school', '.']}, {'string': ' Mary saw Allison in line and tried to smile, but it was hard.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Mary)) (VP (VP (VBD saw) (NP (NP (NNP Allison)) (PP (IN in) (NP (NN line))))) (CC and) (VP (VBD tried) (PP (TO to) (NP (NN smile)))))) (, ,) (CC but) (S (NP (PRP it)) (VP (VBD was) (ADJP (JJ hard)))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'saw', u'see', u'VBD'), (u'Allison', u'Allison', u'NNP'), (u'in', u'in', u'IN'), (u'line', u'line', u'NN'), (u'and', u'and', u'CC'), (u'tried', u'try', u'VBD'), (u'to', u'to', u'TO'), (u'smile', u'smile', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'hard', u'hard', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'saw', 'Allison', 'in', 'line', 'and', 'tried', 'to', 'smile', ',', 'but', 'it', 'was', 'hard', '.']}, {'string': ' Cindy felt horrible now that she had talked about the party that her friend was not going to.', 'parse': {'tree': '(ROOT (S (NP (NNP Cindy)) (VP (VBD felt) (ADJP (JJ horrible)) (ADVP (RB now)) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD had) (VP (VBN talked) (PP (IN about) (NP (DT the) (NN party))) (SBAR (IN that) (S (NP (PRP$ her) (NN friend)) (VP (VBD was) (RB not) (VP (VBG going) (PP (TO to))))))))))) (. .)))', 'lemma': [(u'Cindy', u'Cindy', u'NNP'), (u'felt', u'feel', u'VBD'), (u'horrible', u'horrible', u'JJ'), (u'now', u'now', u'RB'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'talked', u'talk', u'VBN'), (u'about', u'about', u'IN'), (u'the', u'the', u'DT'), (u'party', u'party', u'NN'), (u'that', u'that', u'IN'), (u'her', u'she', u'PRP$'), (u'friend', u'friend', u'NN'), (u'was', u'be', u'VBD'), (u'not', u'not', u'RB'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'.', u'.', u'.')]}, 'tokens': ['Cindy', 'felt', 'horrible', 'now', 'that', 'she', 'had', 'talked', 'about', 'the', 'party', 'that', 'her', 'friend', 'was', 'not', 'going', 'to', '.']}, {'string': ' Mary found it hard to pay attention to the teacher now.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary)) (VP (VBD found) (S (NP (PRP it)) (ADJP (JJ hard) (S (VP (TO to) (VP (VB pay) (NP (NN attention)) (PP (TO to) (NP (DT the) (NN teacher))) (ADVP (RB now)))))))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'found', u'find', u'VBD'), (u'it', u'it', u'PRP'), (u'hard', u'hard', u'JJ'), (u'to', u'to', u'TO'), (u'pay', u'pay', u'VB'), (u'attention', u'attention', u'NN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'teacher', u'teacher', u'NN'), (u'now', u'now', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'found', 'it', 'hard', 'to', 'pay', 'attention', 'to', 'the', 'teacher', 'now', '.']}, {'string': " She kept thinking over and over why Allison did n't invite her to the party.", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBD kept) (S (VP (VBG thinking) (PRT (RP over) (CC and) (RP over)) (SBAR (WHADVP (WRB why)) (S (NP (NNP Allison)) (VP (VBD did) (RB n't) (VP (VB invite) (NP (PRP her)) (PP (TO to) (NP (DT the) (NN party)))))))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'kept', u'keep', u'VBD'), (u'thinking', u'think', u'VBG'), (u'over', u'over', u'RP'), (u'and', u'and', u'CC'), (u'over', u'over', u'RP'), (u'why', u'why', u'WRB'), (u'Allison', u'Allison', u'NNP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'invite', u'invite', u'VB'), (u'her', u'she', u'PRP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'party', u'party', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'kept', 'thinking', 'over', 'and', 'over', 'why', 'Allison', 'did', "n't", 'invite', 'her', 'to', 'the', 'party', '.']}, {'string': ' Did Mary do something to make Allison mad or to hurt her?', 'parse': {'tree': '(ROOT (SQ (VBD Did) (NP (NNP Mary)) (VP (VB do) (NP (NN something)) (S (VP (VP (TO to) (VP (VB make) (S (NP (NNP Allison)) (ADJP (JJ mad))))) (CC or) (VP (TO to) (VP (VB hurt) (NP (PRP her))))))) (. ?)))', 'lemma': [(u'Did', u'do', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u'do', u'do', u'VB'), (u'something', u'something', u'NN'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'Allison', u'Allison', u'NNP'), (u'mad', u'mad', u'JJ'), (u'or', u'or', u'CC'), (u'to', u'to', u'TO'), (u'hurt', u'hurt', u'VB'), (u'her', u'she', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['Did', 'Mary', 'do', 'something', 'to', 'make', 'Allison', 'mad', 'or', 'to', 'hurt', 'her', '?']}, {'string': " She could n't understand it.", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (MD could) (RB n't) (VP (VB understand) (NP (PRP it)))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'understand', u'understand', u'VB'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'could', "n't", 'understand', 'it', '.']}, {'string': ' Her eyes started to get wet with tears.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (NNS eyes)) (VP (VBD started) (S (VP (TO to) (VP (VB get) (ADJP (JJ wet)) (PP (IN with) (NP (NNS tears))))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'wet', u'wet', u'JJ'), (u'with', u'with', u'IN'), (u'tears', u'tear', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'eyes', 'started', 'to', 'get', 'wet', 'with', 'tears', '.']}, {'string': ' She was hoping that no one saw this.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD was) (VP (VBG hoping) (SBAR (IN that) (S (NP (DT no) (NN one)) (VP (VBD saw) (NP (DT this))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'hoping', u'hope', u'VBG'), (u'that', u'that', u'IN'), (u'no', u'no', u'DT'), (u'one', u'one', u'NN'), (u'saw', u'see', u'VBD'), (u'this', u'this', u'DT'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'was', 'hoping', 'that', 'no', 'one', 'saw', 'this', '.']}, {'string': ' Mary thought she saw Allison looking at her in a funny way.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary)) (VP (VBD thought) (SBAR (S (NP (PRP she)) (VP (VBD saw) (NP (NP (NNP Allison)) (VP (VBG looking) (PP (IN at) (NP (PRP her))) (PP (IN in) (NP (DT a) (JJ funny) (NN way))))))))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'thought', u'think', u'VBD'), (u'she', u'she', u'PRP'), (u'saw', u'see', u'VBD'), (u'Allison', u'Allison', u'NNP'), (u'looking', u'look', u'VBG'), (u'at', u'at', u'IN'), (u'her', u'she', u'PRP'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'funny', u'funny', u'JJ'), (u'way', u'way', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'thought', 'she', 'saw', 'Allison', 'looking', 'at', 'her', 'in', 'a', 'funny', 'way', '.']}, {'string': ' Suddenly Mary felt like she was going to start crying.', 'parse': {'tree': '(ROOT (S (ADVP (RB Suddenly)) (NP (NNP Mary)) (VP (VBD felt) (SBAR (IN like) (S (NP (PRP she)) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB start) (S (VP (VBG crying))))))))))) (. .)))', 'lemma': [(u'Suddenly', u'suddenly', u'RB'), (u'Mary', u'Mary', u'NNP'), (u'felt', u'feel', u'VBD'), (u'like', u'like', u'IN'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'start', u'start', u'VB'), (u'crying', u'cry', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['Suddenly', 'Mary', 'felt', 'like', 'she', 'was', 'going', 'to', 'start', 'crying', '.']}, {'string': ' She reached into her desk to pull out some tissues.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD reached) (PP (IN into) (NP (PRP$ her) (NN desk) (S (VP (TO to) (VP (VB pull) (PRT (RP out)) (NP (DT some) (NNS tissues)))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'reached', u'reach', u'VBD'), (u'into', u'into', u'IN'), (u'her', u'she', u'PRP$'), (u'desk', u'desk', u'NN'), (u'to', u'to', u'TO'), (u'pull', u'pull', u'VB'), (u'out', u'out', u'RP'), (u'some', u'some', u'DT'), (u'tissues', u'tissue', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'reached', 'into', 'her', 'desk', 'to', 'pull', 'out', 'some', 'tissues', '.']}, {'string': ' She felt a strange piece of paper.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD felt) (NP (NP (DT a) (JJ strange) (NN piece)) (PP (IN of) (NP (NN paper))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'felt', u'feel', u'VBD'), (u'a', u'a', u'DT'), (u'strange', u'strange', u'JJ'), (u'piece', u'piece', u'NN'), (u'of', u'of', u'IN'), (u'paper', u'paper', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'felt', 'a', 'strange', 'piece', 'of', 'paper', '.']}, {'string': " She pulled it out and there was the invitation to Allison 's party.", 'parse': {'tree': "(ROOT (S (S (NP (PRP She)) (VP (VBD pulled) (NP (PRP it)) (PRT (RP out)))) (CC and) (S (NP (EX there)) (VP (VBD was) (NP (DT the) (NN invitation)) (PP (TO to) (NP (NP (NNP Allison) (POS 's)) (NN party))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'pulled', u'pull', u'VBD'), (u'it', u'it', u'PRP'), (u'out', u'out', u'RP'), (u'and', u'and', u'CC'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'invitation', u'invitation', u'NN'), (u'to', u'to', u'TO'), (u'Allison', u'Allison', u'NNP'), (u"'s", u"'s", u'POS'), (u'party', u'party', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'pulled', 'it', 'out', 'and', 'there', 'was', 'the', 'invitation', 'to', 'Allison', "'s", 'party', '.']}, {'string': ' It had gotten mixed up in her papers in her desk.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD had) (VP (VBN gotten) (ADJP (VBN mixed) (PRT (RP up)) (PP (IN in) (NP (NP (PRP$ her) (NNS papers)) (PP (IN in) (NP (PRP$ her) (NN desk)))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'had', u'have', u'VBD'), (u'gotten', u'get', u'VBN'), (u'mixed', u'mix', u'VBN'), (u'up', u'up', u'RP'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'papers', u'papers', u'NNS'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'desk', u'desk', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'had', 'gotten', 'mixed', 'up', 'in', 'her', 'papers', 'in', 'her', 'desk', '.']}, {'string': ' She immediately started to smile.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (ADVP (RB immediately)) (VP (VBD started) (PP (TO to) (NP (NN smile)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'immediately', u'immediately', u'RB'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'smile', u'smile', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'immediately', 'started', 'to', 'smile', '.']}, {'string': ' She smiled at Allison and at Cindy.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD smiled) (PP (PP (IN at) (NP (NNP Allison))) (CC and) (PP (IN at) (NP (NNP Cindy))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'smiled', u'smile', u'VBD'), (u'at', u'at', u'IN'), (u'Allison', u'Allison', u'NNP'), (u'and', u'and', u'CC'), (u'at', u'at', u'IN'), (u'Cindy', u'Cindy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'smiled', 'at', 'Allison', 'and', 'at', 'Cindy', '.']}, {'string': ' Cindy gave her a puzzled look because she thought that Mary was sad.', 'parse': {'tree': '(ROOT (S (NP (NNP Cindy)) (VP (VBD gave) (NP (PRP her)) (NP (DT a) (JJ puzzled) (NN look)) (SBAR (IN because) (S (NP (PRP she)) (VP (VBD thought) (SBAR (IN that) (S (NP (NNP Mary)) (VP (VBD was) (ADJP (JJ sad))))))))) (. .)))', 'lemma': [(u'Cindy', u'Cindy', u'NNP'), (u'gave', u'give', u'VBD'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'puzzled', u'puzzled', u'JJ'), (u'look', u'look', u'NN'), (u'because', u'because', u'IN'), (u'she', u'she', u'PRP'), (u'thought', u'think', u'VBD'), (u'that', u'that', u'IN'), (u'Mary', u'Mary', u'NNP'), (u'was', u'be', u'VBD'), (u'sad', u'sad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Cindy', 'gave', 'her', 'a', 'puzzled', 'look', 'because', 'she', 'thought', 'that', 'Mary', 'was', 'sad', '.']}, {'string': ' At lunch Mary explained everything to Cindy.', 'parse': {'tree': '(ROOT (S (PP (IN At) (NP (NN lunch))) (NP (NNP Mary)) (VP (VBD explained) (NP (NN everything)) (PP (TO to) (NP (NNP Cindy)))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'lunch', u'lunch', u'NN'), (u'Mary', u'Mary', u'NNP'), (u'explained', u'explain', u'VBD'), (u'everything', u'everything', u'NN'), (u'to', u'to', u'TO'), (u'Cindy', u'Cindy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'lunch', 'Mary', 'explained', 'everything', 'to', 'Cindy', '.']}, {'string': ' Then Mary, Allison, and Cindy all went off to play.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (NNP Mary) (, ,) (NNP Allison) (, ,) (CC and) (NNP Cindy)) (VP (ADVP (DT all)) (VBD went) (PRT (RP off)) (S (VP (TO to) (VP (VB play))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'Mary', u'Mary', u'NNP'), (u',', u',', u','), (u'Allison', u'Allison', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Cindy', u'Cindy', u'NNP'), (u'all', u'all', u'DT'), (u'went', u'go', u'VBD'), (u'off', u'off', u'RP'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'Mary', ',', 'Allison', ',', 'and', 'Cindy', 'all', 'went', 'off', 'to', 'play', '.']}], 'questions': [{'question': {'string': ' What did Mary find in her desk?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Mary)) (VP (VB find) (PP (IN in) (NP (PRP$ her) (NN desk))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u'find', u'find', u'VB'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'desk', u'desk', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Mary', 'find', 'in', 'her', 'desk', '?']}, 'answers': [{'string': ' a test', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN test))))', 'lemma': [(u'a', u'a', u'DT'), (u'test', u'test', u'NN')]}, 'tokens': ['a', 'test']}, {'string': ' a birthday invitation', 'parse': {'tree': '(ROOT (NP (DT a) (NN birthday) (NN invitation)))', 'lemma': [(u'a', u'a', u'DT'), (u'birthday', u'birthday', u'NN'), (u'invitation', u'invitation', u'NN')]}, 'tokens': ['a', 'birthday', 'invitation']}, {'string': ' a teacher', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN teacher))))', 'lemma': [(u'a', u'a', u'DT'), (u'teacher', u'teacher', u'NN')]}, 'tokens': ['a', 'teacher']}, {'string': ' a sandwich', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN sandwich))))', 'lemma': [(u'a', u'a', u'DT'), (u'sandwich', u'sandwich', u'NN')]}, 'tokens': ['a', 'sandwich']}], 'mode': 0}, {'question': {'string': ' How did Mary feel at the end of the story?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (NNP Mary)) (VP (VB feel) (PP (IN at) (NP (NP (DT the) (NN end)) (PP (IN of) (NP (DT the) (NN story))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'did', u'do', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u'feel', u'feel', u'VB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'end', u'end', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'did', 'Mary', 'feel', 'at', 'the', 'end', 'of', 'the', 'story', '?']}, 'answers': [{'string': ' sad', 'parse': {'tree': '(ROOT (ADJP (JJ sad)))', 'lemma': [(u'sad', u'sad', u'JJ')]}, 'tokens': ['sad']}, {'string': ' mad', 'parse': {'tree': '(ROOT (ADJP (JJ mad)))', 'lemma': [(u'mad', u'mad', u'JJ')]}, 'tokens': ['mad']}, {'string': ' happy', 'parse': {'tree': '(ROOT (ADJP (JJ happy)))', 'lemma': [(u'happy', u'happy', u'JJ')]}, 'tokens': ['happy']}, {'string': ' grumpy', 'parse': {'tree': '(ROOT (ADVP (RB grumpy)))', 'lemma': [(u'grumpy', u'grumpy', u'RB')]}, 'tokens': ['grumpy']}], 'mode': 1}, {'question': {'string': ' Who did we think was not invited to the party?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (PRP we)) (VP (VB think) (SBAR (S (VP (VBD was) (RB not) (VP (VBN invited) (PP (TO to) (NP (DT the) (NN party))))))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'did', u'do', u'VBD'), (u'we', u'we', u'PRP'), (u'think', u'think', u'VB'), (u'was', u'be', u'VBD'), (u'not', u'not', u'RB'), (u'invited', u'invite', u'VBN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'party', u'party', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'did', 'we', 'think', 'was', 'not', 'invited', 'to', 'the', 'party', '?']}, 'answers': [{'string': ' Cindy', 'parse': {'tree': '(ROOT (NP (NNP Cindy)))', 'lemma': [(u'Cindy', u'Cindy', u'NNP')]}, 'tokens': ['Cindy']}, {'string': ' Allison', 'parse': {'tree': '(ROOT (NP (NNP Allison)))', 'lemma': [(u'Allison', u'Allison', u'NNP')]}, 'tokens': ['Allison']}, {'string': " Mary 's desk", 'parse': {'tree': "(ROOT (NP (NP (NNP Mary) (POS 's)) (NN desk)))", 'lemma': [(u'Mary', u'Mary', u'NNP'), (u"'s", u"'s", u'POS'), (u'desk', u'desk', u'NN')]}, 'tokens': ['Mary', "'s", 'desk']}, {'string': ' Mary', 'parse': {'tree': '(ROOT (NP (NNP Mary)))', 'lemma': [(u'Mary', u'Mary', u'NNP')]}, 'tokens': ['Mary']}], 'mode': 0}, {'question': {'string': ' What was this story about?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (DT this) (NN story)) (ADJP (IN about))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'this', u'this', u'DT'), (u'story', u'story', u'NN'), (u'about', u'about', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'this', 'story', 'about', '?']}, 'answers': [{'string': ' an animal', 'parse': {'tree': '(ROOT (FRAG (NP (DT an) (NN animal))))', 'lemma': [(u'an', u'a', u'DT'), (u'animal', u'animal', u'NN')]}, 'tokens': ['an', 'animal']}, {'string': ' the teacher', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN teacher))))', 'lemma': [(u'the', u'the', u'DT'), (u'teacher', u'teacher', u'NN')]}, 'tokens': ['the', 'teacher']}, {'string': ' a birthday party', 'parse': {'tree': '(ROOT (NP (DT a) (NN birthday) (NN party)))', 'lemma': [(u'a', u'a', u'DT'), (u'birthday', u'birthday', u'NN'), (u'party', u'party', u'NN')]}, 'tokens': ['a', 'birthday', 'party']}, {'string': ' a test', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN test))))', 'lemma': [(u'a', u'a', u'DT'), (u'test', u'test', u'NN')]}, 'tokens': ['a', 'test']}], 'mode': 0}]}
{'sentences': [{'string': ' A boy named Eduardo in a far away place is thinking about a girl he loves.', 'parse': {'tree': '(ROOT (S (NP (DT A) (NN boy)) (VP (VBD named) (SBAR (S (NP (NP (NNP Eduardo)) (PP (IN in) (NP (DT a) (ADJP (RB far) (RB away)) (NN place)))) (VP (VBZ is) (VP (VBG thinking) (PP (IN about) (NP (NP (DT a) (NN girl)) (SBAR (S (NP (PRP he)) (VP (VBZ loves))))))))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'boy', u'boy', u'NN'), (u'named', u'name', u'VBD'), (u'Eduardo', u'Eduardo', u'NNP'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'far', u'far', u'RB'), (u'away', u'away', u'RB'), (u'place', u'place', u'NN'), (u'is', u'be', u'VBZ'), (u'thinking', u'think', u'VBG'), (u'about', u'about', u'IN'), (u'a', u'a', u'DT'), (u'girl', u'girl', u'NN'), (u'he', u'he', u'PRP'), (u'loves', u'love', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'boy', 'named', 'Eduardo', 'in', 'a', 'far', 'away', 'place', 'is', 'thinking', 'about', 'a', 'girl', 'he', 'loves', '.']}, {'string': ' He is cold.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ is) (ADJP (JJ cold))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'cold', u'cold', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'is', 'cold', '.']}, {'string': ' It is snowing where he lives.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBZ is) (VP (VBG snowing) (SBAR (WHADVP (WRB where)) (S (NP (PRP he)) (VP (VBZ lives)))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'snowing', u'snow', u'VBG'), (u'where', u'where', u'WRB'), (u'he', u'he', u'PRP'), (u'lives', u'live', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'is', 'snowing', 'where', 'he', 'lives', '.']}, {'string': ' He lives in Argentina.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ lives) (PP (IN in) (NP (NNP Argentina)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'lives', u'live', u'VBZ'), (u'in', u'in', u'IN'), (u'Argentina', u'Argentina', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'lives', 'in', 'Argentina', '.']}, {'string': " It 's warm where she lives in Hawaii.", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (VBZ 's) (ADJP (JJ warm)) (SBAR (WHADVP (WRB where)) (S (NP (PRP she)) (VP (VBZ lives) (PP (IN in) (NP (NNP Hawaii))))))) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'warm', u'warm', u'JJ'), (u'where', u'where', u'WRB'), (u'she', u'she', u'PRP'), (u'lives', u'live', u'VBZ'), (u'in', u'in', u'IN'), (u'Hawaii', u'Hawaii', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['It', "'s", 'warm', 'where', 'she', 'lives', 'in', 'Hawaii', '.']}, {'string': ' She eats fresh fruit.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ eats) (NP (JJ fresh) (NN fruit))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'eats', u'eat', u'VBZ'), (u'fresh', u'fresh', u'JJ'), (u'fruit', u'fruit', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'eats', 'fresh', 'fruit', '.']}, {'string': ' Her shower is outdoors under the warm sun as red birds fly around her.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (NN shower)) (VP (VBZ is) (ADJP (JJ outdoors) (PP (IN under) (NP (DT the) (JJ warm) (NN sun)))) (SBAR (IN as) (S (NP (JJ red) (NNS birds)) (VP (VBP fly) (PRT (RP around)) (NP (PRP her)))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'shower', u'shower', u'NN'), (u'is', u'be', u'VBZ'), (u'outdoors', u'outdoors', u'JJ'), (u'under', u'under', u'IN'), (u'the', u'the', u'DT'), (u'warm', u'warm', u'JJ'), (u'sun', u'sun', u'NN'), (u'as', u'as', u'IN'), (u'red', u'red', u'JJ'), (u'birds', u'bird', u'NNS'), (u'fly', u'fly', u'VBP'), (u'around', u'around', u'RP'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'shower', 'is', 'outdoors', 'under', 'the', 'warm', 'sun', 'as', 'red', 'birds', 'fly', 'around', 'her', '.']}, {'string': ' It is nice, but she misses him.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBZ is) (ADJP (JJ nice)))) (, ,) (CC but) (S (NP (PRP she)) (VP (VBZ misses) (NP (PRP him)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'nice', u'nice', u'JJ'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'she', u'she', u'PRP'), (u'misses', u'miss', u'VBZ'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'is', 'nice', ',', 'but', 'she', 'misses', 'him', '.']}, {'string': ' She remembers he is very pretty.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ remembers) (SBAR (S (NP (PRP he)) (VP (VBZ is) (ADJP (RB very) (JJ pretty)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'remembers', u'remember', u'VBZ'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'very', u'very', u'RB'), (u'pretty', u'pretty', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'remembers', 'he', 'is', 'very', 'pretty', '.']}, {'string': ' She wondered if he would really love her always, because she is older.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD wondered) (SBAR (IN if) (S (NP (PRP he)) (VP (MD would) (ADVP (RB really)) (VP (VB love) (NP (PRP her)) (ADVP (RB always)) (, ,) (SBAR (IN because) (S (NP (PRP she)) (VP (VBZ is) (ADJP (JJR older)))))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'wondered', u'wonder', u'VBD'), (u'if', u'if', u'IN'), (u'he', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'really', u'really', u'RB'), (u'love', u'love', u'VB'), (u'her', u'she', u'PRP'), (u'always', u'always', u'RB'), (u',', u',', u','), (u'because', u'because', u'IN'), (u'she', u'she', u'PRP'), (u'is', u'be', u'VBZ'), (u'older', u'older', u'JJR'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'wondered', 'if', 'he', 'would', 'really', 'love', 'her', 'always', ',', 'because', 'she', 'is', 'older', '.']}, {'string': " He did n't care.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD did) (RB n't) (VP (VB care))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'care', u'care', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'did', "n't", 'care', '.']}, {'string': ' Eduardo was poor, so he could not visit her.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Eduardo)) (VP (VBD was) (ADJP (JJ poor)))) (, ,) (IN so) (S (NP (PRP he)) (VP (MD could) (RB not) (VP (VB visit) (NP (PRP her))))) (. .)))', 'lemma': [(u'Eduardo', u'Eduardo', u'NNP'), (u'was', u'be', u'VBD'), (u'poor', u'poor', u'JJ'), (u',', u',', u','), (u'so', u'so', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'visit', u'visit', u'VB'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Eduardo', 'was', 'poor', ',', 'so', 'he', 'could', 'not', 'visit', 'her', '.']}, {'string': ' Maybe a time machine would help !! She can give back her birthdays!', 'parse': {'tree': '(ROOT (S (ADVP (RB Maybe)) (NP (DT a) (NN time) (NN machine)) (VP (MD would) (VP (VB help) (NP (NP (NNP !!)) (SBAR (S (NP (PRP She)) (VP (MD can) (VP (VB give) (PRT (RP back)) (NP (PRP$ her) (NNS birthdays))))))))) (. !)))', 'lemma': [(u'Maybe', u'maybe', u'RB'), (u'a', u'a', u'DT'), (u'time', u'time', u'NN'), (u'machine', u'machine', u'NN'), (u'would', u'would', u'MD'), (u'help', u'help', u'VB'), (u'!!', u'!!', u'NNP'), (u'She', u'she', u'PRP'), (u'can', u'can', u'MD'), (u'give', u'give', u'VB'), (u'back', u'back', u'RP'), (u'her', u'she', u'PRP$'), (u'birthdays', u'birthday', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['Maybe', 'a', 'time', 'machine', 'would', 'help', '!!', 'She', 'can', 'give', 'back', 'her', 'birthdays', '!']}, {'string': " But she did n't want to bring back any dinosaurs back by accident.", 'parse': {'tree': "(ROOT (S (CC But) (NP (PRP she)) (VP (VBD did) (RB n't) (VP (VB want) (S (VP (TO to) (VP (VB bring) (PRT (RP back)) (NP (DT any) (NNS dinosaurs)) (ADVP (RB back)) (PP (IN by) (NP (NN accident)))))))) (. .)))", 'lemma': [(u'But', u'but', u'CC'), (u'she', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'want', u'want', u'VB'), (u'to', u'to', u'TO'), (u'bring', u'bring', u'VB'), (u'back', u'back', u'RP'), (u'any', u'any', u'DT'), (u'dinosaurs', u'dinosaur', u'NNS'), (u'back', u'back', u'RB'), (u'by', u'by', u'IN'), (u'accident', u'accident', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'she', 'did', "n't", 'want', 'to', 'bring', 'back', 'any', 'dinosaurs', 'back', 'by', 'accident', '.']}, {'string': ' Like last time.', 'parse': {'tree': '(ROOT (FRAG (PP (IN Like) (NP (JJ last) (NN time))) (. .)))', 'lemma': [(u'Like', u'like', u'IN'), (u'last', u'last', u'JJ'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Like', 'last', 'time', '.']}, {'string': ' Then an angel flew down from a star called the Pleiades to help her.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (DT an) (NN angel)) (VP (VBD flew) (PRT (RP down)) (PP (IN from) (NP (NP (DT a) (NN star)) (VP (VBN called) (S (NP (DT the) (NNPS Pleiades)) (VP (TO to) (VP (VB help) (NP (PRP her))))))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'an', u'a', u'DT'), (u'angel', u'angel', u'NN'), (u'flew', u'fly', u'VBD'), (u'down', u'down', u'RP'), (u'from', u'from', u'IN'), (u'a', u'a', u'DT'), (u'star', u'star', u'NN'), (u'called', u'call', u'VBN'), (u'the', u'the', u'DT'), (u'Pleiades', u'Pleiades', u'NNPS'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'an', 'angel', 'flew', 'down', 'from', 'a', 'star', 'called', 'the', 'Pleiades', 'to', 'help', 'her', '.']}, {'string': ' His name was Eh.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN name)) (VP (VBD was) (ADJP (JJ Eh))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Eh', u'eh', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'name', 'was', 'Eh', '.']}, {'string': ' He said, `` close your eyes!', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD said) (, ,) (`` ``) (S (VP (VB close) (NP (PRP$ your) (NNS eyes))))) (. !)))', 'lemma': [(u'He', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'close', u'close', u'VB'), (u'your', u'you', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['He', 'said', ',', '``', 'close', 'your', 'eyes', '!']}, {'string': ' Then remember the most happy you have ever felt!', 'parse': {'tree': '(ROOT (S (RB Then) (VP (VB remember) (NP (NP (DT the) (ADJP (RBS most) (JJ happy))) (SBAR (S (NP (PRP you)) (VP (VBP have) (ADVP (RB ever)) (VP (VBN felt))))))) (. !)))', 'lemma': [(u'Then', u'then', u'RB'), (u'remember', u'remember', u'VB'), (u'the', u'the', u'DT'), (u'most', u'most', u'RBS'), (u'happy', u'happy', u'JJ'), (u'you', u'you', u'PRP'), (u'have', u'have', u'VBP'), (u'ever', u'ever', u'RB'), (u'felt', u'feel', u'VBN'), (u'!', u'!', u'.')]}, 'tokens': ['Then', 'remember', 'the', 'most', 'happy', 'you', 'have', 'ever', 'felt', '!']}, {'string': ' Let go of any thing that feels like clouds.', 'parse': {'tree': '(ROOT (S (VP (VB Let) (VP (VB go) (PP (IN of) (NP (NP (DT any) (NN thing)) (SBAR (WHNP (WDT that)) (S (VP (VBZ feels) (PP (IN like) (NP (NNS clouds)))))))))) (. .)))', 'lemma': [(u'Let', u'let', u'VB'), (u'go', u'go', u'VB'), (u'of', u'of', u'IN'), (u'any', u'any', u'DT'), (u'thing', u'thing', u'NN'), (u'that', u'that', u'WDT'), (u'feels', u'feel', u'VBZ'), (u'like', u'like', u'IN'), (u'clouds', u'cloud', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Let', 'go', 'of', 'any', 'thing', 'that', 'feels', 'like', 'clouds', '.']}, {'string': ' Imagine puppies hugging you, and kitties purring with you.', 'parse': {'tree': '(ROOT (S (VP (VB Imagine) (NP (NP (NP (NNS puppies)) (VP (VBG hugging) (NP (PRP you)))) (, ,) (CC and) (NP (NP (NNS kitties)) (VP (VBG purring) (PP (IN with) (NP (PRP you))))))) (. .)))', 'lemma': [(u'Imagine', u'imagine', u'VB'), (u'puppies', u'puppy', u'NNS'), (u'hugging', u'hug', u'VBG'), (u'you', u'you', u'PRP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'kitties', u'kitty', u'NNS'), (u'purring', u'purr', u'VBG'), (u'with', u'with', u'IN'), (u'you', u'you', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Imagine', 'puppies', 'hugging', 'you', ',', 'and', 'kitties', 'purring', 'with', 'you', '.']}, {'string': ' Imagine you are eating chocolate ice cream!', 'parse': {'tree': '(ROOT (S (VP (VB Imagine) (SBAR (S (NP (PRP you)) (VP (VBP are) (VP (VBG eating) (NP (NN chocolate) (NN ice) (NN cream))))))) (. !)))', 'lemma': [(u'Imagine', u'imagine', u'VB'), (u'you', u'you', u'PRP'), (u'are', u'be', u'VBP'), (u'eating', u'eat', u'VBG'), (u'chocolate', u'chocolate', u'NN'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['Imagine', 'you', 'are', 'eating', 'chocolate', 'ice', 'cream', '!']}, {'string': ' As long as you remember how to be happy you can ALWAYS be as young as Eduardo!', 'parse': {'tree': '(ROOT (S (ADVP (RB As) (RB long) (SBAR (IN as) (S (NP (PRP you)) (VP (VBP remember) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (VB be) (ADJP (JJ happy)))))))))) (NP (PRP you)) (VP (MD can) (ADVP (RB ALWAYS)) (VP (VB be) (ADJP (RB as) (JJ young) (PP (IN as) (NP (NNP Eduardo)))))) (. !)))', 'lemma': [(u'As', u'as', u'RB'), (u'long', u'long', u'RB'), (u'as', u'as', u'IN'), (u'you', u'you', u'PRP'), (u'remember', u'remember', u'VBP'), (u'how', u'how', u'WRB'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'happy', u'happy', u'JJ'), (u'you', u'you', u'PRP'), (u'can', u'can', u'MD'), (u'ALWAYS', u'always', u'RB'), (u'be', u'be', u'VB'), (u'as', u'as', u'RB'), (u'young', u'young', u'JJ'), (u'as', u'as', u'IN'), (u'Eduardo', u'Eduardo', u'NNP'), (u'!', u'!', u'.')]}, 'tokens': ['As', 'long', 'as', 'you', 'remember', 'how', 'to', 'be', 'happy', 'you', 'can', 'ALWAYS', 'be', 'as', 'young', 'as', 'Eduardo', '!']}, {'string': " And you can think of GREAT ways you can see him again! ''", 'parse': {'tree': "(ROOT (S (CC And) (NP (PRP you)) (VP (MD can) (VP (VB think) (PP (IN of) (NP (NP (JJ GREAT) (NNS ways)) (SBAR (S (NP (PRP you)) (VP (MD can) (VP (VB see) (NP (PRP him)) (ADVP (RB again)))))))))) (. !) ('' '')))", 'lemma': [(u'And', u'and', u'CC'), (u'you', u'you', u'PRP'), (u'can', u'can', u'MD'), (u'think', u'think', u'VB'), (u'of', u'of', u'IN'), (u'GREAT', u'great', u'JJ'), (u'ways', u'way', u'NNS'), (u'you', u'you', u'PRP'), (u'can', u'can', u'MD'), (u'see', u'see', u'VB'), (u'him', u'he', u'PRP'), (u'again', u'again', u'RB'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['And', 'you', 'can', 'think', 'of', 'GREAT', 'ways', 'you', 'can', 'see', 'him', 'again', '!', "''"]}, {'string': ' It worked!', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD worked)) (. !)))', 'lemma': [(u'It', u'it', u'PRP'), (u'worked', u'work', u'VBD'), (u'!', u'!', u'.')]}, 'tokens': ['It', 'worked', '!']}, {'string': ' She had an idea.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD had) (NP (DT an) (NN idea))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'an', u'a', u'DT'), (u'idea', u'idea', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'had', 'an', 'idea', '.']}, {'string': ' Someone in a place called MR was buying stories that people wrote.', 'parse': {'tree': '(ROOT (S (NP (NP (NN Someone)) (PP (IN in) (NP (DT a) (NN place)))) (VP (VBD called) (SBAR (S (NP (NNP MR)) (VP (VBD was) (VP (VBG buying) (NP (NNS stories)) (SBAR (IN that) (S (NP (NNS people)) (VP (VBD wrote))))))))) (. .)))', 'lemma': [(u'Someone', u'someone', u'NN'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'place', u'place', u'NN'), (u'called', u'call', u'VBD'), (u'MR', u'MR', u'NNP'), (u'was', u'be', u'VBD'), (u'buying', u'buy', u'VBG'), (u'stories', u'story', u'NNS'), (u'that', u'that', u'IN'), (u'people', u'people', u'NNS'), (u'wrote', u'write', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Someone', 'in', 'a', 'place', 'called', 'MR', 'was', 'buying', 'stories', 'that', 'people', 'wrote', '.']}, {'string': ' She wrote one about her & Eduardo!', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD wrote) (NP (CD one)) (PP (IN about) (NP (NP (PRP her)) (CC &) (NP (NNP Eduardo))))) (. !)))', 'lemma': [(u'She', u'she', u'PRP'), (u'wrote', u'write', u'VBD'), (u'one', u'one', u'CD'), (u'about', u'about', u'IN'), (u'her', u'she', u'PRP'), (u'&', u'&', u'CC'), (u'Eduardo', u'Eduardo', u'NNP'), (u'!', u'!', u'.')]}, 'tokens': ['She', 'wrote', 'one', 'about', 'her', '&', 'Eduardo', '!']}, {'string': ' It paid for her airplane ride.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD paid) (PP (IN for) (NP (PRP$ her) (NN airplane) (NN ride)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'paid', u'pay', u'VBD'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'airplane', u'airplane', u'NN'), (u'ride', u'ride', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'paid', 'for', 'her', 'airplane', 'ride', '.']}, {'string': ' Wow.', 'parse': {'tree': '(ROOT (INTJ (UH Wow) (. .)))', 'lemma': [(u'Wow', u'wow', u'UH'), (u'.', u'.', u'.')]}, 'tokens': ['Wow', '.']}, {'string': ' Then they were together again.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VBD were) (ADVP (RB together)) (ADVP (RB again))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'together', u'together', u'RB'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'were', 'together', 'again', '.']}, {'string': " Hugging each other in happiness, they said, `` Thank you everyone, for helping us! ''", 'parse': {'tree': "(ROOT (S (S (VP (VBG Hugging) (NP (DT each) (JJ other)) (PP (IN in) (NP (NN happiness))))) (PRN (, ,) (S (NP (PRP they)) (VP (VBD said))) (, ,)) (`` ``) (VP (VBZ Thank) (S (NP (PRP you)) (NP (NN everyone))) (, ,) (PP (IN for) (S (VP (VBG helping) (NP (PRP us)))))) (. !) ('' '')))", 'lemma': [(u'Hugging', u'hug', u'VBG'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'in', u'in', u'IN'), (u'happiness', u'happiness', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Thank', u'thank', u'VBZ'), (u'you', u'you', u'PRP'), (u'everyone', u'everyone', u'NN'), (u',', u',', u','), (u'for', u'for', u'IN'), (u'helping', u'help', u'VBG'), (u'us', u'we', u'PRP'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Hugging', 'each', 'other', 'in', 'happiness', ',', 'they', 'said', ',', '``', 'Thank', 'you', 'everyone', ',', 'for', 'helping', 'us', '!', "''"]}], 'questions': [{'question': {'string': ' How does she travel to see the boy?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBZ does) (NP (PRP she)) (VP (VB travel) (S (VP (TO to) (VP (VB see) (NP (DT the) (NN boy))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'does', u'do', u'VBZ'), (u'she', u'she', u'PRP'), (u'travel', u'travel', u'VB'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'the', u'the', u'DT'), (u'boy', u'boy', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'does', 'she', 'travel', 'to', 'see', 'the', 'boy', '?']}, 'answers': [{'string': ' On an Airplane', 'parse': {'tree': '(ROOT (PP (IN On) (NP (DT an) (NNP Airplane))))', 'lemma': [(u'On', u'on', u'IN'), (u'an', u'a', u'DT'), (u'Airplane', u'Airplane', u'NNP')]}, 'tokens': ['On', 'an', 'Airplane']}, {'string': ' on a Dinosaur', 'parse': {'tree': '(ROOT (PP (IN on) (NP (DT a) (NNP Dinosaur))))', 'lemma': [(u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'Dinosaur', u'Dinosaur', u'NNP')]}, 'tokens': ['on', 'a', 'Dinosaur']}, {'string': ' On a bird', 'parse': {'tree': '(ROOT (PP (IN On) (NP (DT a) (NN bird))))', 'lemma': [(u'On', u'on', u'IN'), (u'a', u'a', u'DT'), (u'bird', u'bird', u'NN')]}, 'tokens': ['On', 'a', 'bird']}, {'string': ' In a time machine', 'parse': {'tree': '(ROOT (PP (IN In) (NP (DT a) (NN time) (NN machine))))', 'lemma': [(u'In', u'in', u'IN'), (u'a', u'a', u'DT'), (u'time', u'time', u'NN'), (u'machine', u'machine', u'NN')]}, 'tokens': ['In', 'a', 'time', 'machine']}], 'mode': 1}, {'question': {'string': ' What things does the girl NOT imagine?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NNS things)) (SQ (VBZ does) (NP (DT the) (NN girl) (NNP NOT)) (VP (VB imagine))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'things', u'thing', u'NNS'), (u'does', u'do', u'VBZ'), (u'the', u'the', u'DT'), (u'girl', u'girl', u'NN'), (u'NOT', u'NOT', u'NNP'), (u'imagine', u'imagine', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'things', 'does', 'the', 'girl', 'NOT', 'imagine', '?']}, 'answers': [{'string': ' Kitties', 'parse': {'tree': '(ROOT (NP (NNS Kitties)))', 'lemma': [(u'Kitties', u'kitty', u'NNS')]}, 'tokens': ['Kitties']}, {'string': ' Chocolate ice cream', 'parse': {'tree': '(ROOT (S (VP (VB Chocolate) (NP (NN ice) (NN cream)))))', 'lemma': [(u'Chocolate', u'chocolate', u'VB'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN')]}, 'tokens': ['Chocolate', 'ice', 'cream']}, {'string': ' Birds', 'parse': {'tree': '(ROOT (NP (NNP Birds)))', 'lemma': [(u'Birds', u'Birds', u'NNP')]}, 'tokens': ['Birds']}, {'string': ' Puppies', 'parse': {'tree': '(ROOT (NP (NNS Puppies)))', 'lemma': [(u'Puppies', u'puppy', u'NNS')]}, 'tokens': ['Puppies']}], 'mode': 0}, {'question': {'string': ' Where is it snowing?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (PRP it)) (VP (VBG snowing))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'is', u'be', u'VBZ'), (u'it', u'it', u'PRP'), (u'snowing', u'snow', u'VBG'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'is', 'it', 'snowing', '?']}, 'answers': [{'string': ' Hawaii', 'parse': {'tree': '(ROOT (NP (NNP Hawaii)))', 'lemma': [(u'Hawaii', u'Hawaii', u'NNP')]}, 'tokens': ['Hawaii']}, {'string': ' MR', 'parse': {'tree': '(ROOT (NP (NNP MR)))', 'lemma': [(u'MR', u'MR', u'NNP')]}, 'tokens': ['MR']}, {'string': ' Argentina', 'parse': {'tree': '(ROOT (NP (NNP Argentina)))', 'lemma': [(u'Argentina', u'Argentina', u'NNP')]}, 'tokens': ['Argentina']}, {'string': ' Pleiades', 'parse': {'tree': '(ROOT (NP (NNS Pleiades)))', 'lemma': [(u'Pleiades', u'pleiade', u'NNS')]}, 'tokens': ['Pleiades']}], 'mode': 0}, {'question': {'string': ' What is the name of the boy?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (DT the) (NN boy))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'name', u'name', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'boy', u'boy', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'the', 'name', 'of', 'the', 'boy', '?']}, 'answers': [{'string': ' Pleiades', 'parse': {'tree': '(ROOT (NP (NNS Pleiades)))', 'lemma': [(u'Pleiades', u'pleiade', u'NNS')]}, 'tokens': ['Pleiades']}, {'string': ' Argentina', 'parse': {'tree': '(ROOT (NP (NNP Argentina)))', 'lemma': [(u'Argentina', u'Argentina', u'NNP')]}, 'tokens': ['Argentina']}, {'string': ' Eduardo', 'parse': {'tree': '(ROOT (NP (NNP Eduardo)))', 'lemma': [(u'Eduardo', u'Eduardo', u'NNP')]}, 'tokens': ['Eduardo']}, {'string': ' Eh', 'parse': {'tree': '(ROOT (NP (NNP Eh)))', 'lemma': [(u'Eh', u'Eh', u'NNP')]}, 'tokens': ['Eh']}], 'mode': 1}]}
{'sentences': [{'string': ' Jamie and his friends love playing baseball.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Jamie)) (CC and) (NP (PRP$ his) (NNS friends))) (VP (VBP love) (S (VP (VBG playing) (NP (NN baseball))))) (. .)))', 'lemma': [(u'Jamie', u'Jamie', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'love', u'love', u'VBP'), (u'playing', u'play', u'VBG'), (u'baseball', u'baseball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jamie', 'and', 'his', 'friends', 'love', 'playing', 'baseball', '.']}, {'string': ' They play in the park every morning.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP play) (PP (IN in) (NP (NP (DT the) (NN park)) (NP (DT every) (NN morning))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'play', u'play', u'VBP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'every', u'every', u'DT'), (u'morning', u'morning', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'play', 'in', 'the', 'park', 'every', 'morning', '.']}, {'string': ' One summer morning they lost the baseball.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN summer) (NN morning)) (NP (PRP they)) (VP (VBD lost) (NP (DT the) (NN baseball))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'summer', u'summer', u'NN'), (u'morning', u'morning', u'NN'), (u'they', u'they', u'PRP'), (u'lost', u'lose', u'VBD'), (u'the', u'the', u'DT'), (u'baseball', u'baseball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'summer', 'morning', 'they', 'lost', 'the', 'baseball', '.']}, {'string': ' Jamie and his friend Joe went to the store.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Jamie)) (CC and) (NP (PRP$ his) (NN friend) (NNP Joe))) (VP (VBD went) (PP (TO to) (NP (DT the) (NN store)))) (. .)))', 'lemma': [(u'Jamie', u'Jamie', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'Joe', u'Joe', u'NNP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jamie', 'and', 'his', 'friend', 'Joe', 'went', 'to', 'the', 'store', '.']}, {'string': ' They bought two baseballs.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD bought) (NP (CD two) (NNS baseballs))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'bought', u'buy', u'VBD'), (u'two', u'two', u'CD'), (u'baseballs', u'baseball', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'bought', 'two', 'baseballs', '.']}, {'string': ' They also bought colas for the other kids.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (RB also)) (VP (VBD bought) (NP (NNS colas)) (PP (IN for) (NP (DT the) (JJ other) (NNS kids)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'also', u'also', u'RB'), (u'bought', u'buy', u'VBD'), (u'colas', u'cola', u'NNS'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'kids', u'kid', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'also', 'bought', 'colas', 'for', 'the', 'other', 'kids', '.']}, {'string': ' They spent ten dollars.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD spent) (NP (CD ten) (NNS dollars))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'spent', u'spend', u'VBD'), (u'ten', u'ten', u'CD'), (u'dollars', u'dollar', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'spent', 'ten', 'dollars', '.']}, {'string': ' Jamie and Joe went back to the park.', 'parse': {'tree': '(ROOT (S (NP (NNP Jamie) (CC and) (NNP Joe)) (VP (VBD went) (ADVP (RB back)) (PP (TO to) (NP (DT the) (NN park)))) (. .)))', 'lemma': [(u'Jamie', u'Jamie', u'NNP'), (u'and', u'and', u'CC'), (u'Joe', u'Joe', u'NNP'), (u'went', u'go', u'VBD'), (u'back', u'back', u'RB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jamie', 'and', 'Joe', 'went', 'back', 'to', 'the', 'park', '.']}, {'string': ' His friend Mike drank his cola and went to bat.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN friend) (NNP Mike)) (VP (VP (VBD drank) (NP (PRP$ his) (NN cola))) (CC and) (VP (VBD went) (PP (TO to) (NP (NN bat))))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'Mike', u'Mike', u'NNP'), (u'drank', u'drink', u'VBD'), (u'his', u'he', u'PRP$'), (u'cola', u'cola', u'NN'), (u'and', u'and', u'CC'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'bat', u'bat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'friend', 'Mike', 'drank', 'his', 'cola', 'and', 'went', 'to', 'bat', '.']}, {'string': ' Mike hit a home run and rounded the bases.', 'parse': {'tree': '(ROOT (S (NP (NNP Mike)) (VP (VP (VBD hit) (NP (DT a) (NN home) (NN run))) (CC and) (VP (VBD rounded) (NP (DT the) (NNS bases)))) (. .)))', 'lemma': [(u'Mike', u'Mike', u'NNP'), (u'hit', u'hit', u'VBD'), (u'a', u'a', u'DT'), (u'home', u'home', u'NN'), (u'run', u'run', u'NN'), (u'and', u'and', u'CC'), (u'rounded', u'round', u'VBD'), (u'the', u'the', u'DT'), (u'bases', u'basis', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Mike', 'hit', 'a', 'home', 'run', 'and', 'rounded', 'the', 'bases', '.']}, {'string': " All of Jamie 's friends cheered very loudly.", 'parse': {'tree': "(ROOT (S (NP (NP (DT All)) (PP (IN of) (NP (NP (NNP Jamie) (POS 's)) (NNS friends)))) (VP (VBD cheered) (ADVP (RB very) (RB loudly))) (. .)))", 'lemma': [(u'All', u'all', u'DT'), (u'of', u'of', u'IN'), (u'Jamie', u'Jamie', u'NNP'), (u"'s", u"'s", u'POS'), (u'friends', u'friend', u'NNS'), (u'cheered', u'cheer', u'VBD'), (u'very', u'very', u'RB'), (u'loudly', u'loudly', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['All', 'of', 'Jamie', "'s", 'friends', 'cheered', 'very', 'loudly', '.']}, {'string': ' The sun was very bright and Jamie had an idea.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NN sun)) (VP (VBD was) (ADJP (RB very) (JJ bright)))) (CC and) (S (NP (NNP Jamie)) (VP (VBD had) (NP (DT an) (NN idea)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'sun', u'sun', u'NN'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'bright', u'bright', u'JJ'), (u'and', u'and', u'CC'), (u'Jamie', u'Jamie', u'NNP'), (u'had', u'have', u'VBD'), (u'an', u'a', u'DT'), (u'idea', u'idea', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'sun', 'was', 'very', 'bright', 'and', 'Jamie', 'had', 'an', 'idea', '.']}, {'string': ' Jamie and his friends went to the pool in town and swam that afternoon.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Jamie)) (CC and) (NP (PRP$ his) (NNS friends))) (VP (VBD went) (PP (TO to) (NP (NP (DT the) (NN pool)) (PP (IN in) (NP (NN town) (CC and) (NN swam))))) (NP (DT that) (NN afternoon))) (. .)))', 'lemma': [(u'Jamie', u'Jamie', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pool', u'pool', u'NN'), (u'in', u'in', u'IN'), (u'town', u'town', u'NN'), (u'and', u'and', u'CC'), (u'swam', u'swam', u'NN'), (u'that', u'that', u'DT'), (u'afternoon', u'afternoon', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jamie', 'and', 'his', 'friends', 'went', 'to', 'the', 'pool', 'in', 'town', 'and', 'swam', 'that', 'afternoon', '.']}, {'string': ' They met Sally and Jessica at the pool.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD met) (NP (NNP Sally) (CC and) (NNP Jessica)) (PP (IN at) (NP (DT the) (NN pool)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'met', u'meet', u'VBD'), (u'Sally', u'Sally', u'NNP'), (u'and', u'and', u'CC'), (u'Jessica', u'Jessica', u'NNP'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'pool', u'pool', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'met', 'Sally', 'and', 'Jessica', 'at', 'the', 'pool', '.']}, {'string': ' They also met Jenny at the pool.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (RB also)) (VP (VBD met) (NP (NNP Jenny)) (PP (IN at) (NP (DT the) (NN pool)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'also', u'also', u'RB'), (u'met', u'meet', u'VBD'), (u'Jenny', u'Jenny', u'NNP'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'pool', u'pool', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'also', 'met', 'Jenny', 'at', 'the', 'pool', '.']}, {'string': ' The lifeguard made them put their sandals, watches and hats by the fence.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN lifeguard)) (VP (VBD made) (SBAR (S (NP (PRP them)) (VP (VBD put) (NP (NP (PRP$ their) (NNS sandals) (, ,) (NNS watches) (CC and) (NNS hats)) (PP (IN by) (NP (DT the) (NN fence)))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'lifeguard', u'lifeguard', u'NN'), (u'made', u'make', u'VBD'), (u'them', u'they', u'PRP'), (u'put', u'put', u'VBD'), (u'their', u'they', u'PRP$'), (u'sandals', u'sandal', u'NNS'), (u',', u',', u','), (u'watches', u'watch', u'NNS'), (u'and', u'and', u'CC'), (u'hats', u'hat', u'NNS'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'fence', u'fence', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'lifeguard', 'made', 'them', 'put', 'their', 'sandals', ',', 'watches', 'and', 'hats', 'by', 'the', 'fence', '.']}, {'string': ' Jamie went home after swimming.', 'parse': {'tree': '(ROOT (S (NP (NNP Jamie)) (VP (VBD went) (NP (NN home)) (PP (IN after) (NP (NN swimming)))) (. .)))', 'lemma': [(u'Jamie', u'Jamie', u'NNP'), (u'went', u'go', u'VBD'), (u'home', u'home', u'NN'), (u'after', u'after', u'IN'), (u'swimming', u'swimming', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jamie', 'went', 'home', 'after', 'swimming', '.']}, {'string': ' He was very tired.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (RB very) (JJ tired))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'tired', u'tired', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'very', 'tired', '.']}, {'string': ' He went to sleep but had a lot of fun that day.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD went) (S (VP (TO to) (VP (VB sleep))))) (CC but) (VP (VBD had) (NP (NP (DT a) (NN lot)) (PP (IN of) (NP (NN fun)))) (NP (DT that) (NN day)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'but', u'but', u'CC'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'of', u'of', u'IN'), (u'fun', u'fun', u'NN'), (u'that', u'that', u'DT'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'went', 'to', 'sleep', 'but', 'had', 'a', 'lot', 'of', 'fun', 'that', 'day', '.']}], 'questions': [{'question': {'string': ' Who made Jamie and his friends leave their sandals, watches and hats by the fence?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD made) (SBAR (S (NP (NP (NNP Jamie)) (CC and) (NP (PRP$ his) (NNS friends))) (VP (VBP leave) (NP (NP (PRP$ their) (NNS sandals) (, ,) (NNS watches) (CC and) (NNS hats)) (PP (IN by) (NP (DT the) (NN fence))))))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'made', u'make', u'VBD'), (u'Jamie', u'Jamie', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'leave', u'leave', u'VBP'), (u'their', u'they', u'PRP$'), (u'sandals', u'sandal', u'NNS'), (u',', u',', u','), (u'watches', u'watch', u'NNS'), (u'and', u'and', u'CC'), (u'hats', u'hat', u'NNS'), (u'by', u'by', u'IN'), (u'the', u'the', u'DT'), (u'fence', u'fence', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'made', 'Jamie', 'and', 'his', 'friends', 'leave', 'their', 'sandals', ',', 'watches', 'and', 'hats', 'by', 'the', 'fence', '?']}, 'answers': [{'string': ' Jessica', 'parse': {'tree': '(ROOT (NP (NNP Jessica)))', 'lemma': [(u'Jessica', u'Jessica', u'NNP')]}, 'tokens': ['Jessica']}, {'string': ' Mike', 'parse': {'tree': '(ROOT (NP (NNP Mike)))', 'lemma': [(u'Mike', u'Mike', u'NNP')]}, 'tokens': ['Mike']}, {'string': ' Joe', 'parse': {'tree': '(ROOT (NP (NNP Joe)))', 'lemma': [(u'Joe', u'Joe', u'NNP')]}, 'tokens': ['Joe']}, {'string': ' The lifeguard', 'parse': {'tree': '(ROOT (X (DT The) (ADJP (JJ lifeguard))))', 'lemma': [(u'The', u'the', u'DT'), (u'lifeguard', u'lifeguard', u'JJ')]}, 'tokens': ['The', 'lifeguard']}], 'mode': 1}, {'question': {'string': ' Where do Jamie and his friends play baseball?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBP do) (NP (NP (NNP Jamie)) (CC and) (NP (PRP$ his) (NNS friends))) (VP (VB play) (NP (NN baseball)))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'do', u'do', u'VBP'), (u'Jamie', u'Jamie', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'play', u'play', u'VB'), (u'baseball', u'baseball', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'do', 'Jamie', 'and', 'his', 'friends', 'play', 'baseball', '?']}, 'answers': [{'string': ' The store', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN store))))', 'lemma': [(u'The', u'the', u'DT'), (u'store', u'store', u'NN')]}, 'tokens': ['The', 'store']}, {'string': ' The park', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN park))))', 'lemma': [(u'The', u'the', u'DT'), (u'park', u'park', u'NN')]}, 'tokens': ['The', 'park']}, {'string': ' The street', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN street))))', 'lemma': [(u'The', u'the', u'DT'), (u'street', u'street', u'NN')]}, 'tokens': ['The', 'street']}, {'string': ' His house', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN house))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'house', u'house', u'NN')]}, 'tokens': ['His', 'house']}], 'mode': 1}, {'question': {'string': ' What girls did Jamie and his friends meet at the pool?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN girls)) (SQ (VBD did) (NP (NP (NNP Jamie)) (CC and) (NP (PRP$ his) (NNS friends))) (VP (VB meet) (PP (IN at) (NP (DT the) (NN pool))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'girls', u'girl', u'NN'), (u'did', u'do', u'VBD'), (u'Jamie', u'Jamie', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'meet', u'meet', u'VB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'pool', u'pool', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'girls', 'did', 'Jamie', 'and', 'his', 'friends', 'meet', 'at', 'the', 'pool', '?']}, 'answers': [{'string': ' Mike and Sally', 'parse': {'tree': '(ROOT (NP (NP (NNP Mike)) (CC and) (NP (NNP Sally))))', 'lemma': [(u'Mike', u'Mike', u'NNP'), (u'and', u'and', u'CC'), (u'Sally', u'Sally', u'NNP')]}, 'tokens': ['Mike', 'and', 'Sally']}, {'string': ' Mike and Joe', 'parse': {'tree': '(ROOT (NP (NP (NNP Mike)) (CC and) (NP (NNP Joe))))', 'lemma': [(u'Mike', u'Mike', u'NNP'), (u'and', u'and', u'CC'), (u'Joe', u'Joe', u'NNP')]}, 'tokens': ['Mike', 'and', 'Joe']}, {'string': ' Jessica, Jenny and Sally', 'parse': {'tree': '(ROOT (NP (NP (NNP Jessica)) (, ,) (NP (NNP Jenny) (CC and) (NNP Sally))))', 'lemma': [(u'Jessica', u'Jessica', u'NNP'), (u',', u',', u','), (u'Jenny', u'Jenny', u'NNP'), (u'and', u'and', u'CC'), (u'Sally', u'Sally', u'NNP')]}, 'tokens': ['Jessica', ',', 'Jenny', 'and', 'Sally']}, {'string': ' Mike and the Lifeguard', 'parse': {'tree': '(ROOT (NP (NP (NNP Mike)) (CC and) (NP (DT the) (NNP Lifeguard))))', 'lemma': [(u'Mike', u'Mike', u'NNP'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'Lifeguard', u'Lifeguard', u'NNP')]}, 'tokens': ['Mike', 'and', 'the', 'Lifeguard']}], 'mode': 0}, {'question': {'string': ' What did Jamie and Joe buy from the store?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Jamie) (CC and) (NNP Joe)) (VP (VB buy) (PP (IN from) (NP (DT the) (NN store))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Jamie', u'Jamie', u'NNP'), (u'and', u'and', u'CC'), (u'Joe', u'Joe', u'NNP'), (u'buy', u'buy', u'VB'), (u'from', u'from', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Jamie', 'and', 'Joe', 'buy', 'from', 'the', 'store', '?']}, 'answers': [{'string': ' 2 baseballs and chips', 'parse': {'tree': '(ROOT (NP (NP (CD 2) (NNS baseballs)) (CC and) (NP (NNS chips))))', 'lemma': [(u'2', u'2', u'CD'), (u'baseballs', u'baseball', u'NNS'), (u'and', u'and', u'CC'), (u'chips', u'chip', u'NNS')]}, 'tokens': ['2', 'baseballs', 'and', 'chips']}, {'string': ' Colas and chips', 'parse': {'tree': '(ROOT (NP (NNS Colas) (CC and) (NNS chips)))', 'lemma': [(u'Colas', u'cola', u'NNS'), (u'and', u'and', u'CC'), (u'chips', u'chip', u'NNS')]}, 'tokens': ['Colas', 'and', 'chips']}, {'string': ' Ice Cream', 'parse': {'tree': '(ROOT (NP (NNP Ice) (NNP Cream)))', 'lemma': [(u'Ice', u'Ice', u'NNP'), (u'Cream', u'Cream', u'NNP')]}, 'tokens': ['Ice', 'Cream']}, {'string': ' 2 baseballs and colas', 'parse': {'tree': '(ROOT (NP (NP (CD 2) (NNS baseballs)) (CC and) (NP (NNS colas))))', 'lemma': [(u'2', u'2', u'CD'), (u'baseballs', u'baseball', u'NNS'), (u'and', u'and', u'CC'), (u'colas', u'cola', u'NNS')]}, 'tokens': ['2', 'baseballs', 'and', 'colas']}], 'mode': 0}]}
{'sentences': [{'string': ' Once upon a time, there was a boy named Freddy.', 'parse': {'tree': '(ROOT (S (ADVP (RB Once) (PP (IN upon) (NP (DT a) (NN time)))) (, ,) (NP (EX there)) (VP (VBD was) (NP (NP (DT a) (NN boy)) (VP (VBN named) (ADVP (RB Freddy))))) (. .)))', 'lemma': [(u'Once', u'once', u'RB'), (u'upon', u'upon', u'IN'), (u'a', u'a', u'DT'), (u'time', u'time', u'NN'), (u',', u',', u','), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'boy', u'boy', u'NN'), (u'named', u'name', u'VBN'), (u'Freddy', u'freddy', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Once', 'upon', 'a', 'time', ',', 'there', 'was', 'a', 'boy', 'named', 'Freddy', '.']}, {'string': ' And Freddy loved his mom very much, and his mom loved him very much too.', 'parse': {'tree': '(ROOT (S (CC And) (S (NP (NNP Freddy)) (VP (VBD loved) (NP (PRP$ his) (NN mom)) (ADVP (RB very) (RB much)))) (, ,) (CC and) (S (NP (PRP$ his) (NN mom)) (VP (VBD loved) (NP (PRP him)) (ADVP (RB very) (RB much) (RB too)))) (. .)))', 'lemma': [(u'And', u'and', u'CC'), (u'Freddy', u'Freddy', u'NNP'), (u'loved', u'love', u'VBD'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'very', u'very', u'RB'), (u'much', u'much', u'RB'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'loved', u'love', u'VBD'), (u'him', u'he', u'PRP'), (u'very', u'very', u'RB'), (u'much', u'much', u'RB'), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['And', 'Freddy', 'loved', 'his', 'mom', 'very', 'much', ',', 'and', 'his', 'mom', 'loved', 'him', 'very', 'much', 'too', '.']}, {'string': ' One day, Freddy went outside to ride his bike.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (, ,) (NP (NNP Freddy)) (VP (VBD went) (ADVP (RB outside)) (S (VP (TO to) (VP (VB ride) (NP (PRP$ his) (NN bike)))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'Freddy', u'Freddy', u'NNP'), (u'went', u'go', u'VBD'), (u'outside', u'outside', u'RB'), (u'to', u'to', u'TO'), (u'ride', u'ride', u'VB'), (u'his', u'he', u'PRP$'), (u'bike', u'bike', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', ',', 'Freddy', 'went', 'outside', 'to', 'ride', 'his', 'bike', '.']}, {'string': " On the way out, his mother told him, `` Remember to wear your helmet, '' and Freddy grabbed his helmet and met his friends outside.", 'parse': {'tree': "(ROOT (S (PP (IN On) (ADVP (NP (DT the) (NN way)) (IN out))) (, ,) (S (NP (PRP$ his) (NN mother)) (VP (VBD told) (NP (PRP him)) (, ,) (S (`` ``) (VP (VB Remember) (S (VP (TO to) (VP (VB wear) (NP (PRP$ your) (NN helmet))))))))) (, ,) ('' '') (CC and) (S (NP (NNP Freddy)) (VP (VP (VBD grabbed) (NP (PRP$ his) (NN helmet))) (CC and) (VP (VBD met) (NP (PRP$ his) (NNS friends)) (ADVP (RB outside))))) (. .)))", 'lemma': [(u'On', u'on', u'IN'), (u'the', u'the', u'DT'), (u'way', u'way', u'NN'), (u'out', u'out', u'IN'), (u',', u',', u','), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'told', u'tell', u'VBD'), (u'him', u'he', u'PRP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Remember', u'remember', u'VB'), (u'to', u'to', u'TO'), (u'wear', u'wear', u'VB'), (u'your', u'you', u'PRP$'), (u'helmet', u'helmet', u'NN'), (u',', u',', u','), (u"''", u"''", u"''"), (u'and', u'and', u'CC'), (u'Freddy', u'Freddy', u'NNP'), (u'grabbed', u'grab', u'VBD'), (u'his', u'he', u'PRP$'), (u'helmet', u'helmet', u'NN'), (u'and', u'and', u'CC'), (u'met', u'meet', u'VBD'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'outside', u'outside', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'the', 'way', 'out', ',', 'his', 'mother', 'told', 'him', ',', '``', 'Remember', 'to', 'wear', 'your', 'helmet', ',', "''", 'and', 'Freddy', 'grabbed', 'his', 'helmet', 'and', 'met', 'his', 'friends', 'outside', '.']}, {'string': ' When he was putting on his helmet, his friends told him, `` Helmets are for girls!', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP he)) (VP (VBD was) (VP (VBG putting) (PP (IN on) (NP (PRP$ his) (NN helmet))))))) (PRN (, ,) (S (NP (PRP$ his) (NNS friends)) (VP (VBD told) (NP (PRP him)))) (, ,)) (`` ``) (NP (NNP Helmets)) (VP (VBP are) (PP (IN for) (NP (NNS girls)))) (. !)))', 'lemma': [(u'When', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'putting', u'put', u'VBG'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'helmet', u'helmet', u'NN'), (u',', u',', u','), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'told', u'tell', u'VBD'), (u'him', u'he', u'PRP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Helmets', u'Helmets', u'NNP'), (u'are', u'be', u'VBP'), (u'for', u'for', u'IN'), (u'girls', u'girl', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['When', 'he', 'was', 'putting', 'on', 'his', 'helmet', ',', 'his', 'friends', 'told', 'him', ',', '``', 'Helmets', 'are', 'for', 'girls', '!']}, {'string': " You 're not cool if you wear a helmet! ''", 'parse': {'tree': "(ROOT (S (NP (PRP You)) (VP (VBP 're) (RB not) (ADJP (JJ cool)) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP wear) (NP (DT a) (NN helmet)))))) (. !) ('' '')))", 'lemma': [(u'You', u'you', u'PRP'), (u"'re", u'be', u'VBP'), (u'not', u'not', u'RB'), (u'cool', u'cool', u'JJ'), (u'if', u'if', u'IN'), (u'you', u'you', u'PRP'), (u'wear', u'wear', u'VBP'), (u'a', u'a', u'DT'), (u'helmet', u'helmet', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['You', "'re", 'not', 'cool', 'if', 'you', 'wear', 'a', 'helmet', '!', "''"]}, {'string': ' Freddy thought about what his mom told him, but he wanted to be cool like his friends, and he took off his helmet.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Freddy)) (VP (VBD thought) (PP (IN about) (SBAR (WHNP (WP what)) (S (NP (PRP$ his) (NN mom)) (VP (VBD told) (NP (PRP him)))))))) (, ,) (CC but) (S (S (NP (PRP he)) (VP (VBD wanted) (S (VP (TO to) (VP (VB be) (ADJP (JJ cool) (PP (IN like) (NP (PRP$ his) (NNS friends))))))))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD took) (PRT (RP off)) (NP (PRP$ his) (NN helmet))))) (. .)))', 'lemma': [(u'Freddy', u'Freddy', u'NNP'), (u'thought', u'think', u'VBD'), (u'about', u'about', u'IN'), (u'what', u'what', u'WP'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'told', u'tell', u'VBD'), (u'him', u'he', u'PRP'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'cool', u'cool', u'JJ'), (u'like', u'like', u'IN'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'took', u'take', u'VBD'), (u'off', u'off', u'RP'), (u'his', u'he', u'PRP$'), (u'helmet', u'helmet', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Freddy', 'thought', 'about', 'what', 'his', 'mom', 'told', 'him', ',', 'but', 'he', 'wanted', 'to', 'be', 'cool', 'like', 'his', 'friends', ',', 'and', 'he', 'took', 'off', 'his', 'helmet', '.']}, {'string': ' Freddy and his friends went on a long adventure, and they rode all the way to the top of the largest hill in their neighborhood.', 'parse': {'tree': '(ROOT (S (S (NP (NP (NNP Freddy)) (CC and) (NP (PRP$ his) (NNS friends))) (VP (VBD went) (PP (IN on) (NP (DT a) (JJ long) (NN adventure))))) (, ,) (CC and) (S (NP (PRP they)) (VP (VBD rode) (NP (PDT all) (DT the) (NN way)) (PP (TO to) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT the) (JJS largest) (NN hill))))) (PP (IN in) (NP (PRP$ their) (NN neighborhood))))) (. .)))', 'lemma': [(u'Freddy', u'Freddy', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'went', u'go', u'VBD'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'long', u'long', u'JJ'), (u'adventure', u'adventure', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'rode', u'ride', u'VBD'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'way', u'way', u'NN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'largest', u'largest', u'JJS'), (u'hill', u'hill', u'NN'), (u'in', u'in', u'IN'), (u'their', u'they', u'PRP$'), (u'neighborhood', u'neighborhood', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Freddy', 'and', 'his', 'friends', 'went', 'on', 'a', 'long', 'adventure', ',', 'and', 'they', 'rode', 'all', 'the', 'way', 'to', 'the', 'top', 'of', 'the', 'largest', 'hill', 'in', 'their', 'neighborhood', '.']}, {'string': ' Looking down, Freddy was scared.', 'parse': {'tree': '(ROOT (S (S (VP (VBG Looking) (PRT (RP down)))) (, ,) (NP (NNP Freddy)) (VP (VBD was) (ADJP (VBN scared))) (. .)))', 'lemma': [(u'Looking', u'look', u'VBG'), (u'down', u'down', u'RP'), (u',', u',', u','), (u'Freddy', u'Freddy', u'NNP'), (u'was', u'be', u'VBD'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['Looking', 'down', ',', 'Freddy', 'was', 'scared', '.']}, {'string': ' He had never ridden down this hill before.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (ADVP (RB never)) (VP (VBN ridden) (PRT (RP down)) (ADVP (NP (DT this) (NN hill)) (IN before)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'never', u'never', u'RB'), (u'ridden', u'ride', u'VBN'), (u'down', u'down', u'RP'), (u'this', u'this', u'DT'), (u'hill', u'hill', u'NN'), (u'before', u'before', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'never', 'ridden', 'down', 'this', 'hill', 'before', '.']}, {'string': " His friends said, `` What are you, scared? ''", 'parse': {'tree': "(ROOT (S (NP (PRP$ His) (NNS friends)) (VP (VBD said) (, ,) (`` ``) (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (PRP you)) (, ,) (VP (VBN scared)))) (. ?)) ('' ''))))", 'lemma': [(u'His', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'What', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'you', u'you', u'PRP'), (u',', u',', u','), (u'scared', u'scare', u'VBN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['His', 'friends', 'said', ',', '``', 'What', 'are', 'you', ',', 'scared', '?', "''"]}, {'string': ' Freddy did not want to come off as scared.', 'parse': {'tree': '(ROOT (S (NP (NNP Freddy)) (VP (VBD did) (RB not) (VP (VB want) (S (VP (TO to) (VP (VB come) (PRT (RP off)) (ADVP (RB as) (VBN scared))))))) (. .)))', 'lemma': [(u'Freddy', u'Freddy', u'NNP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'want', u'want', u'VB'), (u'to', u'to', u'TO'), (u'come', u'come', u'VB'), (u'off', u'off', u'RP'), (u'as', u'as', u'RB'), (u'scared', u'scare', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['Freddy', 'did', 'not', 'want', 'to', 'come', 'off', 'as', 'scared', '.']}, {'string': ' He hopped on his bicycle, and down he went.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBD hopped) (PP (IN on) (NP (PRP$ his) (NN bicycle))))) (, ,) (CC and) (S (ADVP (RB down)) (NP (PRP he)) (VP (VBD went))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'hopped', u'hop', u'VBD'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'bicycle', u'bicycle', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'down', u'down', u'RB'), (u'he', u'he', u'PRP'), (u'went', u'go', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'hopped', 'on', 'his', 'bicycle', ',', 'and', 'down', 'he', 'went', '.']}, {'string': ' Freddy started speeding up, going very, very fast.', 'parse': {'tree': '(ROOT (S (NP (NNP Freddy)) (VP (VBD started) (S (VP (VP (VBG speeding) (PRT (RP up))) (, ,) (VP (VBG going) (ADJP (RB very) (, ,) (RB very) (JJ fast)))))) (. .)))', 'lemma': [(u'Freddy', u'Freddy', u'NNP'), (u'started', u'start', u'VBD'), (u'speeding', u'speed', u'VBG'), (u'up', u'up', u'RP'), (u',', u',', u','), (u'going', u'go', u'VBG'), (u'very', u'very', u'RB'), (u',', u',', u','), (u'very', u'very', u'RB'), (u'fast', u'fast', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Freddy', 'started', 'speeding', 'up', ',', 'going', 'very', ',', 'very', 'fast', '.']}, {'string': " He pressed his brakes, but oh no, his brakes were n't working.", 'parse': {'tree': "(ROOT (S (S (NP (PRP He)) (VP (VBD pressed) (NP (PRP$ his) (NNS brakes)))) (, ,) (CC but) (S (INTJ (UH oh) (UH no)) (, ,) (NP (PRP$ his) (NNS brakes)) (VP (VBD were) (RB n't) (VP (VBG working)))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'pressed', u'press', u'VBD'), (u'his', u'he', u'PRP$'), (u'brakes', u'brake', u'NNS'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'oh', u'oh', u'UH'), (u'no', u'no', u'UH'), (u',', u',', u','), (u'his', u'he', u'PRP$'), (u'brakes', u'brake', u'NNS'), (u'were', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'working', u'work', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'pressed', 'his', 'brakes', ',', 'but', 'oh', 'no', ',', 'his', 'brakes', 'were', "n't", 'working', '.']}, {'string': ' Freddy, speeding down the hill, did not know what to do.', 'parse': {'tree': '(ROOT (S (ADVP (RB Freddy)) (, ,) (S (VP (VBG speeding) (PRT (RP down)) (NP (DT the) (NN hill)))) (, ,) (VP (VBD did) (RB not) (VP (VB know) (SBAR (WHNP (WP what)) (S (VP (TO to) (VP (VB do))))))) (. .)))', 'lemma': [(u'Freddy', u'freddy', u'RB'), (u',', u',', u','), (u'speeding', u'speed', u'VBG'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'hill', u'hill', u'NN'), (u',', u',', u','), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'know', u'know', u'VB'), (u'what', u'what', u'WP'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Freddy', ',', 'speeding', 'down', 'the', 'hill', ',', 'did', 'not', 'know', 'what', 'to', 'do', '.']}, {'string': ' He got to the end of the hill and slammed right into a tree.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD got) (PP (TO to) (NP (NP (DT the) (NN end)) (PP (IN of) (NP (DT the) (NN hill)))))) (CC and) (VP (VBD slammed) (ADVP (RB right)) (PP (IN into) (NP (DT a) (NN tree))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'end', u'end', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'hill', u'hill', u'NN'), (u'and', u'and', u'CC'), (u'slammed', u'slam', u'VBD'), (u'right', u'right', u'RB'), (u'into', u'into', u'IN'), (u'a', u'a', u'DT'), (u'tree', u'tree', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'got', 'to', 'the', 'end', 'of', 'the', 'hill', 'and', 'slammed', 'right', 'into', 'a', 'tree', '.']}, {'string': ' He awoke the next day in the hospital.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD awoke) (NP (DT the) (JJ next) (NN day)) (PP (IN in) (NP (DT the) (NN hospital)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'awoke', u'awake', u'VBD'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'hospital', u'hospital', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'awoke', 'the', 'next', 'day', 'in', 'the', 'hospital', '.']}, {'string': ' At the hospital, his mother was there.', 'parse': {'tree': '(ROOT (S (PP (IN At) (NP (DT the) (NN hospital))) (, ,) (NP (PRP$ his) (NN mother)) (VP (VBD was) (ADVP (RB there))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'the', u'the', u'DT'), (u'hospital', u'hospital', u'NN'), (u',', u',', u','), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'was', u'be', u'VBD'), (u'there', u'there', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'the', 'hospital', ',', 'his', 'mother', 'was', 'there', '.']}, {'string': ' Freddy opened his eyes and told his mom the whole story.', 'parse': {'tree': '(ROOT (S (NP (NNP Freddy)) (VP (VP (VBD opened) (NP (PRP$ his) (NNS eyes))) (CC and) (VP (VBD told) (NP (PRP$ his) (NN mom))) (NP (DT the) (JJ whole) (NN story))) (. .)))', 'lemma': [(u'Freddy', u'Freddy', u'NNP'), (u'opened', u'open', u'VBD'), (u'his', u'he', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'and', u'and', u'CC'), (u'told', u'tell', u'VBD'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'the', u'the', u'DT'), (u'whole', u'whole', u'JJ'), (u'story', u'story', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Freddy', 'opened', 'his', 'eyes', 'and', 'told', 'his', 'mom', 'the', 'whole', 'story', '.']}, {'string': ' He told her how we would never do that again, and how he would always wear his helmet.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD told) (NP (PRP her)) (SBAR (SBAR (WHADVP (WRB how)) (S (NP (PRP we)) (VP (MD would) (ADVP (RB never)) (VP (VB do) (NP (DT that)) (ADVP (RB again)))))) (, ,) (CC and) (SBAR (WHADVP (WRB how)) (S (NP (PRP he)) (VP (MD would) (ADVP (RB always)) (VP (VB wear) (NP (PRP$ his) (NN helmet)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'told', u'tell', u'VBD'), (u'her', u'she', u'PRP'), (u'how', u'how', u'WRB'), (u'we', u'we', u'PRP'), (u'would', u'would', u'MD'), (u'never', u'never', u'RB'), (u'do', u'do', u'VB'), (u'that', u'that', u'DT'), (u'again', u'again', u'RB'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'how', u'how', u'WRB'), (u'he', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'always', u'always', u'RB'), (u'wear', u'wear', u'VB'), (u'his', u'he', u'PRP$'), (u'helmet', u'helmet', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'told', 'her', 'how', 'we', 'would', 'never', 'do', 'that', 'again', ',', 'and', 'how', 'he', 'would', 'always', 'wear', 'his', 'helmet', '.']}, {'string': ' His mom gave him a big kiss on the forehead, and Freddy knew his mother was right in the beginning.', 'parse': {'tree': '(ROOT (S (S (NP (PRP$ His) (NN mom)) (VP (VBD gave) (NP (PRP him)) (NP (NP (DT a) (JJ big) (NN kiss)) (PP (IN on) (NP (DT the) (NN forehead)))))) (, ,) (CC and) (S (NP (NNP Freddy)) (VP (VBD knew) (SBAR (S (NP (PRP$ his) (NN mother)) (VP (VBD was) (ADJP (JJ right) (PP (IN in) (NP (DT the) (NN beginning))))))))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'gave', u'give', u'VBD'), (u'him', u'he', u'PRP'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'kiss', u'kiss', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'forehead', u'forehead', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Freddy', u'Freddy', u'NNP'), (u'knew', u'know', u'VBD'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'was', u'be', u'VBD'), (u'right', u'right', u'JJ'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'beginning', u'beginning', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'mom', 'gave', 'him', 'a', 'big', 'kiss', 'on', 'the', 'forehead', ',', 'and', 'Freddy', 'knew', 'his', 'mother', 'was', 'right', 'in', 'the', 'beginning', '.']}, {'string': " She did n't have to say it.", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VBD did) (RB n't) (VP (VB have) (S (VP (TO to) (VP (VB say) (NP (PRP it))))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'have', u'have', u'VB'), (u'to', u'to', u'TO'), (u'say', u'say', u'VB'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'did', "n't", 'have', 'to', 'say', 'it', '.']}, {'string': " In the end, Freddy learned that it 's important to not care what other people think, and those that think you 're not cool because you wear a helmet are the ones that are n't cool in the first place.", 'parse': {'tree': "(ROOT (S (PP (IN In) (NP (DT the) (NN end))) (, ,) (NP (NNP Freddy)) (VP (VBD learned) (SBAR (IN that) (S (NP (PRP it)) (VP (VBZ 's) (ADJP (JJ important) (PP (TO to) (NP (NP (NP (RB not) (NN care)) (SBAR (WHNP (WP what)) (S (NP (JJ other) (NNS people)) (VP (VBP think))))) (, ,) (CC and) (NP (NP (DT those)) (SBAR (WHNP (WDT that)) (S (VP (VBP think) (SBAR (S (NP (PRP you)) (VP (VBP 're) (RB not) (ADJP (JJ cool)) (SBAR (IN because) (S (NP (PRP you)) (VP (VBP wear) (SBAR (S (NP (DT a) (NN helmet)) (VP (VBP are) (NP (NP (DT the) (NNS ones)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (RB n't) (ADJP (JJ cool) (PP (IN in) (NP (DT the) (JJ first) (NN place)))))))))))))))))))))))))))) (. .)))", 'lemma': [(u'In', u'in', u'IN'), (u'the', u'the', u'DT'), (u'end', u'end', u'NN'), (u',', u',', u','), (u'Freddy', u'Freddy', u'NNP'), (u'learned', u'learn', u'VBD'), (u'that', u'that', u'IN'), (u'it', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'important', u'important', u'JJ'), (u'to', u'to', u'TO'), (u'not', u'not', u'RB'), (u'care', u'care', u'NN'), (u'what', u'what', u'WP'), (u'other', u'other', u'JJ'), (u'people', u'people', u'NNS'), (u'think', u'think', u'VBP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'those', u'those', u'DT'), (u'that', u'that', u'WDT'), (u'think', u'think', u'VBP'), (u'you', u'you', u'PRP'), (u"'re", u'be', u'VBP'), (u'not', u'not', u'RB'), (u'cool', u'cool', u'JJ'), (u'because', u'because', u'IN'), (u'you', u'you', u'PRP'), (u'wear', u'wear', u'VBP'), (u'a', u'a', u'DT'), (u'helmet', u'helmet', u'NN'), (u'are', u'be', u'VBP'), (u'the', u'the', u'DT'), (u'ones', u'one', u'NNS'), (u'that', u'that', u'WDT'), (u'are', u'be', u'VBP'), (u"n't", u'not', u'RB'), (u'cool', u'cool', u'JJ'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'first', u'first', u'JJ'), (u'place', u'place', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'the', 'end', ',', 'Freddy', 'learned', 'that', 'it', "'s", 'important', 'to', 'not', 'care', 'what', 'other', 'people', 'think', ',', 'and', 'those', 'that', 'think', 'you', "'re", 'not', 'cool', 'because', 'you', 'wear', 'a', 'helmet', 'are', 'the', 'ones', 'that', 'are', "n't", 'cool', 'in', 'the', 'first', 'place', '.']}], 'questions': [{'question': {'string': ' Who does Freddy love?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ does) (NP (NNP Freddy)) (VP (VB love))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'does', u'do', u'VBZ'), (u'Freddy', u'Freddy', u'NNP'), (u'love', u'love', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'does', 'Freddy', 'love', '?']}, 'answers': [{'string': ' His friends', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN friends))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'friends', u'friend', u'NN')]}, 'tokens': ['His', 'friends']}, {'string': ' His bicycle', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN bicycle))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'bicycle', u'bicycle', u'NN')]}, 'tokens': ['His', 'bicycle']}, {'string': ' His mom', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN mom))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'mom', u'mom', u'NN')]}, 'tokens': ['His', 'mom']}, {'string': ' His dad', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN dad))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'dad', u'dad', u'NN')]}, 'tokens': ['His', 'dad']}], 'mode': 1}, {'question': {'string': " What 's the name of the main character in the story?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ 's) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (JJ main) (NN character)) (PP (IN in) (NP (DT the) (NN story))))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u"'s", u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'name', u'name', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'main', u'main', u'JJ'), (u'character', u'character', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', "'s", 'the', 'name', 'of', 'the', 'main', 'character', 'in', 'the', 'story', '?']}, 'answers': [{'string': ' Billy', 'parse': {'tree': '(ROOT (NP (NNP Billy)))', 'lemma': [(u'Billy', u'Billy', u'NNP')]}, 'tokens': ['Billy']}, {'string': ' Freddy', 'parse': {'tree': '(ROOT (ADVP (RB Freddy)))', 'lemma': [(u'Freddy', u'freddy', u'RB')]}, 'tokens': ['Freddy']}, {'string': ' Blake', 'parse': {'tree': '(ROOT (NP (NNP Blake)))', 'lemma': [(u'Blake', u'Blake', u'NNP')]}, 'tokens': ['Blake']}, {'string': ' Joey', 'parse': {'tree': '(ROOT (NP (NNP Joey)))', 'lemma': [(u'Joey', u'Joey', u'NNP')]}, 'tokens': ['Joey']}], 'mode': 1}, {'question': {'string': ' In which two places is this story located?', 'parse': {'tree': '(ROOT (SBARQ (WHPP (IN In) (WHNP (WDT which) (CD two) (NNS places))) (SQ (VBZ is) (NP (DT this) (NN story)) (VP (VBN located))) (. ?)))', 'lemma': [(u'In', u'in', u'IN'), (u'which', u'which', u'WDT'), (u'two', u'two', u'CD'), (u'places', u'place', u'NNS'), (u'is', u'be', u'VBZ'), (u'this', u'this', u'DT'), (u'story', u'story', u'NN'), (u'located', u'locate', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['In', 'which', 'two', 'places', 'is', 'this', 'story', 'located', '?']}, 'answers': [{'string': ' Neighborhood and Hospital', 'parse': {'tree': '(ROOT (NP (NN Neighborhood) (CC and) (NN Hospital)))', 'lemma': [(u'Neighborhood', u'neighborhood', u'NN'), (u'and', u'and', u'CC'), (u'Hospital', u'hospital', u'NN')]}, 'tokens': ['Neighborhood', 'and', 'Hospital']}, {'string': ' Neighborhood and Shopping Mall', 'parse': {'tree': '(ROOT (NP (NP (NNP Neighborhood)) (CC and) (NP (NNP Shopping) (NNP Mall))))', 'lemma': [(u'Neighborhood', u'Neighborhood', u'NNP'), (u'and', u'and', u'CC'), (u'Shopping', u'Shopping', u'NNP'), (u'Mall', u'Mall', u'NNP')]}, 'tokens': ['Neighborhood', 'and', 'Shopping', 'Mall']}, {'string': ' Hospital and the Zoo', 'parse': {'tree': '(ROOT (NP (NP (NNP Hospital)) (CC and) (NP (DT the) (NN Zoo))))', 'lemma': [(u'Hospital', u'Hospital', u'NNP'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'Zoo', u'zoo', u'NN')]}, 'tokens': ['Hospital', 'and', 'the', 'Zoo']}, {'string': ' Restaurant and Shopping Mall', 'parse': {'tree': '(ROOT (NP (NP (NNP Restaurant)) (CC and) (NP (NNP Shopping) (NNP Mall))))', 'lemma': [(u'Restaurant', u'Restaurant', u'NNP'), (u'and', u'and', u'CC'), (u'Shopping', u'Shopping', u'NNP'), (u'Mall', u'Mall', u'NNP')]}, 'tokens': ['Restaurant', 'and', 'Shopping', 'Mall']}], 'mode': 0}, {'question': {'string': " What two things do the main character 's friends say to him?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WDT What) (CD two) (NNS things)) (SQ (VBP do) (NP (NP (DT the) (JJ main) (NN character) (POS 's)) (NNS friends)) (VP (VB say) (PP (TO to) (NP (PRP him))))) (. ?)))", 'lemma': [(u'What', u'what', u'WDT'), (u'two', u'two', u'CD'), (u'things', u'thing', u'NNS'), (u'do', u'do', u'VBP'), (u'the', u'the', u'DT'), (u'main', u'main', u'JJ'), (u'character', u'character', u'NN'), (u"'s", u"'s", u'POS'), (u'friends', u'friend', u'NNS'), (u'say', u'say', u'VB'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'two', 'things', 'do', 'the', 'main', 'character', "'s", 'friends', 'say', 'to', 'him', '?']}, 'answers': [{'string': " Freddy is a girl! and `` You 're a little baby! ''", 'parse': {'tree': "(ROOT (S (S (NP (NNP Freddy)) (VP (VBZ is) (NP (DT a) (NN girl))) (. !)) (CC and) (`` ``) (S (NP (PRP You)) (VP (VBP 're) (NP (DT a) (JJ little) (NN baby)))) (. !) ('' '')))", 'lemma': [(u'Freddy', u'Freddy', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'girl', u'girl', u'NN'), (u'!', u'!', u'.'), (u'and', u'and', u'CC'), (u'``', u'``', u'``'), (u'You', u'you', u'PRP'), (u"'re", u'be', u'VBP'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'baby', u'baby', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Freddy', 'is', 'a', 'girl', '!', 'and', '``', 'You', "'re", 'a', 'little', 'baby', '!', "''"]}, {'string': " Helmets are for girls! You 're not cool if you wear a helmet! and `` What are you, scared? ''", 'parse': {'tree': "(ROOT (S (NP (NNS Helmets)) (VP (VBP are) (NP (SBAR (IN for) (FRAG (ADJP (FW girls) (. !)) (S (NP (PRP You)) (VP (VBP 're) (RB not) (ADJP (JJ cool)) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP wear) (NP (DT a) (NN helmet))))))) (. !))) (CC and) (SBAR (`` ``) (WHNP (WP What)) (S (VP (VBP are) (NP (PRP you)) (, ,) (S (ADJP (RB scared)))))))) (. ?) ('' '')))", 'lemma': [(u'Helmets', u'helmet', u'NNS'), (u'are', u'be', u'VBP'), (u'for', u'for', u'IN'), (u'girls', u'girls', u'FW'), (u'!', u'!', u'.'), (u'You', u'you', u'PRP'), (u"'re", u'be', u'VBP'), (u'not', u'not', u'RB'), (u'cool', u'cool', u'JJ'), (u'if', u'if', u'IN'), (u'you', u'you', u'PRP'), (u'wear', u'wear', u'VBP'), (u'a', u'a', u'DT'), (u'helmet', u'helmet', u'NN'), (u'!', u'!', u'.'), (u'and', u'and', u'CC'), (u'``', u'``', u'``'), (u'What', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'you', u'you', u'PRP'), (u',', u',', u','), (u'scared', u'scared', u'RB'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Helmets', 'are', 'for', 'girls', '!', 'You', "'re", 'not', 'cool', 'if', 'you', 'wear', 'a', 'helmet', '!', 'and', '``', 'What', 'are', 'you', ',', 'scared', '?', "''"]}, {'string': " Did your mommy buy you that helmet? and `` Helmets are for girls! You 're not cool if you wear a helmet! ''", 'parse': {'tree': "(ROOT (FRAG (FRAG (ADJP (JJ Did)) (S (NP (PRP$ your) (NN mommy)) (VP (VBP buy) (S (NP (PRP you)) (ADJP (RB that) (JJ helmet))))) (. ?)) (CC and) (FRAG (`` ``) (NP (NP (NNP Helmets)) (SBAR (S (VP (VBP are) (SBAR (IN for) (S (INTJ (UH girls) (. !)) (NP (PRP You)) (VP (VBP 're) (RB not) (ADJP (JJ cool)) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP wear) (NP (DT a) (NN helmet)))))))))))) (. !) ('' ''))))", 'lemma': [(u'Did', u'did', u'JJ'), (u'your', u'you', u'PRP$'), (u'mommy', u'mommy', u'NN'), (u'buy', u'buy', u'VBP'), (u'you', u'you', u'PRP'), (u'that', u'that', u'RB'), (u'helmet', u'helmet', u'JJ'), (u'?', u'?', u'.'), (u'and', u'and', u'CC'), (u'``', u'``', u'``'), (u'Helmets', u'Helmets', u'NNP'), (u'are', u'be', u'VBP'), (u'for', u'for', u'IN'), (u'girls', u'girls', u'UH'), (u'!', u'!', u'.'), (u'You', u'you', u'PRP'), (u"'re", u'be', u'VBP'), (u'not', u'not', u'RB'), (u'cool', u'cool', u'JJ'), (u'if', u'if', u'IN'), (u'you', u'you', u'PRP'), (u'wear', u'wear', u'VBP'), (u'a', u'a', u'DT'), (u'helmet', u'helmet', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Did', 'your', 'mommy', 'buy', 'you', 'that', 'helmet', '?', 'and', '``', 'Helmets', 'are', 'for', 'girls', '!', 'You', "'re", 'not', 'cool', 'if', 'you', 'wear', 'a', 'helmet', '!', "''"]}, {'string': " Quit being such a cry baby and `` What are you, scared? ''", 'parse': {'tree': "(ROOT (FRAG (NP (NNP Quit)) (S (VP (VBG being) (PP (JJ such) (NP (NP (DT a) (NN cry) (NN baby)) (CC and) (`` ``) (SBAR (WHNP (WP What)) (S (VP (VBP are) (NP (PRP you)) (, ,) (S (ADJP (RB scared)))))))))) (. ?) ('' '')))", 'lemma': [(u'Quit', u'Quit', u'NNP'), (u'being', u'be', u'VBG'), (u'such', u'such', u'JJ'), (u'a', u'a', u'DT'), (u'cry', u'cry', u'NN'), (u'baby', u'baby', u'NN'), (u'and', u'and', u'CC'), (u'``', u'``', u'``'), (u'What', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'you', u'you', u'PRP'), (u',', u',', u','), (u'scared', u'scared', u'RB'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Quit', 'being', 'such', 'a', 'cry', 'baby', 'and', '``', 'What', 'are', 'you', ',', 'scared', '?', "''"]}], 'mode': 0}]}
{'sentences': [{'string': ' There was a big race in town.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD was) (NP (NP (DT a) (JJ big) (NN race)) (PP (IN in) (NP (NN town))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'race', u'race', u'NN'), (u'in', u'in', u'IN'), (u'town', u'town', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'was', 'a', 'big', 'race', 'in', 'town', '.']}, {'string': ' Stephanie and Sarah were friends.', 'parse': {'tree': '(ROOT (S (NP (NNP Stephanie) (CC and) (NNP Sarah)) (VP (VBD were) (NP (NNS friends))) (. .)))', 'lemma': [(u'Stephanie', u'Stephanie', u'NNP'), (u'and', u'and', u'CC'), (u'Sarah', u'Sarah', u'NNP'), (u'were', u'be', u'VBD'), (u'friends', u'friend', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Stephanie', 'and', 'Sarah', 'were', 'friends', '.']}, {'string': ' Stephanie was faster than Sarah.', 'parse': {'tree': '(ROOT (S (NP (NNP Stephanie)) (VP (VBD was) (ADVP (RBR faster)) (PP (IN than) (NP (NNP Sarah)))) (. .)))', 'lemma': [(u'Stephanie', u'Stephanie', u'NNP'), (u'was', u'be', u'VBD'), (u'faster', u'faster', u'RBR'), (u'than', u'than', u'IN'), (u'Sarah', u'Sarah', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Stephanie', 'was', 'faster', 'than', 'Sarah', '.']}, {'string': ' On the day of the race, they wished each other good luck.', 'parse': {'tree': '(ROOT (S (PP (IN On) (NP (NP (DT the) (NN day)) (PP (IN of) (NP (DT the) (NN race))))) (, ,) (NP (PRP they)) (VP (VBD wished) (NP (DT each) (JJ other) (JJ good) (NN luck))) (. .)))', 'lemma': [(u'On', u'on', u'IN'), (u'the', u'the', u'DT'), (u'day', u'day', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'race', u'race', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'wished', u'wish', u'VBD'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'good', u'good', u'JJ'), (u'luck', u'luck', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'the', 'day', 'of', 'the', 'race', ',', 'they', 'wished', 'each', 'other', 'good', 'luck', '.']}, {'string': ' Sarah tripped on a rock during the race.', 'parse': {'tree': '(ROOT (S (NP (NNP Sarah)) (VP (VBN tripped) (PP (IN on) (NP (DT a) (NN rock))) (PP (IN during) (NP (DT the) (NN race)))) (. .)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP'), (u'tripped', u'trip', u'VBN'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'rock', u'rock', u'NN'), (u'during', u'during', u'IN'), (u'the', u'the', u'DT'), (u'race', u'race', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sarah', 'tripped', 'on', 'a', 'rock', 'during', 'the', 'race', '.']}, {'string': ' She cried but another one of her friends, Matt, helped her stand up.', 'parse': {'tree': '(ROOT (S (S (NP (PRP She)) (VP (VBD cried))) (CC but) (S (NP (NP (DT another) (NN one)) (PP (IN of) (NP (NP (PRP$ her) (NNS friends)) (, ,) (NP (NNP Matt)) (, ,)))) (VP (VBD helped) (SBAR (S (NP (PRP her)) (VP (VBP stand) (PRT (RP up))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'cried', u'cry', u'VBD'), (u'but', u'but', u'CC'), (u'another', u'another', u'DT'), (u'one', u'one', u'NN'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u',', u',', u','), (u'Matt', u'Matt', u'NNP'), (u',', u',', u','), (u'helped', u'help', u'VBD'), (u'her', u'she', u'PRP'), (u'stand', u'stand', u'VBP'), (u'up', u'up', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'cried', 'but', 'another', 'one', 'of', 'her', 'friends', ',', 'Matt', ',', 'helped', 'her', 'stand', 'up', '.']}, {'string': ' Stephanie cheered for her to finish after she crossed the line.', 'parse': {'tree': '(ROOT (S (NP (NNP Stephanie)) (VP (VBD cheered) (SBAR (IN for) (S (NP (PRP her)) (VP (TO to) (VP (VB finish) (SBAR (IN after) (S (NP (PRP she)) (VP (VBD crossed) (NP (DT the) (NN line)))))))))) (. .)))', 'lemma': [(u'Stephanie', u'Stephanie', u'NNP'), (u'cheered', u'cheer', u'VBD'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP'), (u'to', u'to', u'TO'), (u'finish', u'finish', u'VB'), (u'after', u'after', u'IN'), (u'she', u'she', u'PRP'), (u'crossed', u'cross', u'VBD'), (u'the', u'the', u'DT'), (u'line', u'line', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Stephanie', 'cheered', 'for', 'her', 'to', 'finish', 'after', 'she', 'crossed', 'the', 'line', '.']}, {'string': ' On the next day Sarah came into school with a bruise on her knee.', 'parse': {'tree': '(ROOT (S (PP (IN On) (NP (DT the) (JJ next) (NN day))) (NP (NNP Sarah)) (VP (VBD came) (PP (IN into) (NP (NN school))) (PP (IN with) (NP (NP (DT a) (NN bruise)) (PP (IN on) (NP (PRP$ her) (NN knee)))))) (. .)))', 'lemma': [(u'On', u'on', u'IN'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u'Sarah', u'Sarah', u'NNP'), (u'came', u'come', u'VBD'), (u'into', u'into', u'IN'), (u'school', u'school', u'NN'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'bruise', u'bruise', u'NN'), (u'on', u'on', u'IN'), (u'her', u'she', u'PRP$'), (u'knee', u'knee', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'the', 'next', 'day', 'Sarah', 'came', 'into', 'school', 'with', 'a', 'bruise', 'on', 'her', 'knee', '.']}, {'string': ' Jane thought she looked silly.', 'parse': {'tree': '(ROOT (S (NP (NNP Jane)) (VP (VBD thought) (SBAR (S (NP (PRP she)) (VP (VBD looked) (ADJP (JJ silly)))))) (. .)))', 'lemma': [(u'Jane', u'Jane', u'NNP'), (u'thought', u'think', u'VBD'), (u'she', u'she', u'PRP'), (u'looked', u'look', u'VBD'), (u'silly', u'silly', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Jane', 'thought', 'she', 'looked', 'silly', '.']}, {'string': ' They were in the same class.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (PP (IN in) (NP (DT the) (JJ same) (NN class)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'same', u'same', u'JJ'), (u'class', u'class', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'in', 'the', 'same', 'class', '.']}, {'string': ' Jane did not make fun of Sarah.', 'parse': {'tree': '(ROOT (S (NP (NNP Jane)) (VP (VBD did) (RB not) (VP (VB make) (NP (NP (NN fun)) (PP (IN of) (NP (NNP Sarah)))))) (. .)))', 'lemma': [(u'Jane', u'Jane', u'NNP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'make', u'make', u'VB'), (u'fun', u'fun', u'NN'), (u'of', u'of', u'IN'), (u'Sarah', u'Sarah', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Jane', 'did', 'not', 'make', 'fun', 'of', 'Sarah', '.']}, {'string': ' She gave her a bandage instead.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD gave) (NP (PRP her)) (NP (DT a) (NN bandage)) (ADVP (RB instead))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'gave', u'give', u'VBD'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'bandage', u'bandage', u'NN'), (u'instead', u'instead', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'gave', 'her', 'a', 'bandage', 'instead', '.']}, {'string': " It had a cat on it to match Sarah 's shirt.", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (VBD had) (NP (NP (DT a) (NN cat)) (PP (IN on) (NP (PRP it))) (S (VP (TO to) (VP (VB match) (NP (NP (NNP Sarah) (POS 's)) (NN shirt))))))) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'cat', u'cat', u'NN'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP'), (u'to', u'to', u'TO'), (u'match', u'match', u'VB'), (u'Sarah', u'Sarah', u'NNP'), (u"'s", u"'s", u'POS'), (u'shirt', u'shirt', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'had', 'a', 'cat', 'on', 'it', 'to', 'match', 'Sarah', "'s", 'shirt', '.']}, {'string': ' Sarah was still unhappy.', 'parse': {'tree': '(ROOT (S (NP (NNP Sarah)) (VP (VBD was) (ADVP (RB still)) (ADJP (JJ unhappy))) (. .)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP'), (u'was', u'be', u'VBD'), (u'still', u'still', u'RB'), (u'unhappy', u'unhappy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Sarah', 'was', 'still', 'unhappy', '.']}, {'string': ' She would not eat her lunch or play at recess.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (MD would) (RB not) (VP (VP (VB eat) (NP (PRP$ her) (NN lunch))) (CC or) (VP (VB play) (PP (IN at) (NP (NN recess)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'would', u'would', u'MD'), (u'not', u'not', u'RB'), (u'eat', u'eat', u'VB'), (u'her', u'she', u'PRP$'), (u'lunch', u'lunch', u'NN'), (u'or', u'or', u'CC'), (u'play', u'play', u'VB'), (u'at', u'at', u'IN'), (u'recess', u'recess', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'would', 'not', 'eat', 'her', 'lunch', 'or', 'play', 'at', 'recess', '.']}, {'string': ' When Stephanie tried to talk to her she frowned.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Stephanie)) (VP (VBD tried) (S (VP (TO to) (VP (VB talk) (PP (TO to) (NP (PRP her))))))))) (NP (PRP she)) (VP (VBD frowned)) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Stephanie', u'Stephanie', u'NNP'), (u'tried', u'try', u'VBD'), (u'to', u'to', u'TO'), (u'talk', u'talk', u'VB'), (u'to', u'to', u'TO'), (u'her', u'she', u'PRP'), (u'she', u'she', u'PRP'), (u'frowned', u'frown', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Stephanie', 'tried', 'to', 'talk', 'to', 'her', 'she', 'frowned', '.']}, {'string': ' Then Stephanie gave Sarah a bunny toy that she liked.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (NNP Stephanie)) (VP (VBD gave) (NP (NNP Sarah)) (NP (DT a) (NN bunny) (NN toy)) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD liked))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'Stephanie', u'Stephanie', u'NNP'), (u'gave', u'give', u'VBD'), (u'Sarah', u'Sarah', u'NNP'), (u'a', u'a', u'DT'), (u'bunny', u'bunny', u'NN'), (u'toy', u'toy', u'NN'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'liked', u'like', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'Stephanie', 'gave', 'Sarah', 'a', 'bunny', 'toy', 'that', 'she', 'liked', '.']}, {'string': ' Sarah smiled.', 'parse': {'tree': '(ROOT (S (NP (NNP Sarah)) (VP (VBD smiled)) (. .)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP'), (u'smiled', u'smile', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Sarah', 'smiled', '.']}, {'string': ' She gave Stephanie a hug.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD gave) (NP (NNP Stephanie)) (NP (DT a) (NN hug))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'gave', u'give', u'VBD'), (u'Stephanie', u'Stephanie', u'NNP'), (u'a', u'a', u'DT'), (u'hug', u'hug', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'gave', 'Stephanie', 'a', 'hug', '.']}], 'questions': [{'question': {'string': ' Based on the story, who likely won the race?', 'parse': {'tree': '(ROOT (SBARQ (S (VP (VBN Based) (PP (IN on) (NP (DT the) (NN story))))) (, ,) (WHNP (WP who)) (SQ (ADVP (RB likely)) (VP (VBD won) (NP (DT the) (NN race)))) (. ?)))', 'lemma': [(u'Based', u'base', u'VBN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u',', u',', u','), (u'who', u'who', u'WP'), (u'likely', u'likely', u'RB'), (u'won', u'win', u'VBD'), (u'the', u'the', u'DT'), (u'race', u'race', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Based', 'on', 'the', 'story', ',', 'who', 'likely', 'won', 'the', 'race', '?']}, 'answers': [{'string': ' Jane', 'parse': {'tree': '(ROOT (NP (NNP Jane)))', 'lemma': [(u'Jane', u'Jane', u'NNP')]}, 'tokens': ['Jane']}, {'string': ' Matt', 'parse': {'tree': '(ROOT (NP (NNP Matt)))', 'lemma': [(u'Matt', u'Matt', u'NNP')]}, 'tokens': ['Matt']}, {'string': ' Sarah', 'parse': {'tree': '(ROOT (NP (NNP Sarah)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP')]}, 'tokens': ['Sarah']}, {'string': ' Stephanie', 'parse': {'tree': '(ROOT (NP (NNP Stephanie)))', 'lemma': [(u'Stephanie', u'Stephanie', u'NNP')]}, 'tokens': ['Stephanie']}], 'mode': 0}, {'question': {'string': ' Why was Sarah unhappy?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD was) (NP (NNP Sarah)) (ADJP (JJ unhappy))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'was', u'be', u'VBD'), (u'Sarah', u'Sarah', u'NNP'), (u'unhappy', u'unhappy', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'was', 'Sarah', 'unhappy', '?']}, 'answers': [{'string': ' Stephanie was her friend', 'parse': {'tree': '(ROOT (S (NP (NNP Stephanie)) (VP (VBD was) (NP (PRP$ her) (NN friend)))))', 'lemma': [(u'Stephanie', u'Stephanie', u'NNP'), (u'was', u'be', u'VBD'), (u'her', u'she', u'PRP$'), (u'friend', u'friend', u'NN')]}, 'tokens': ['Stephanie', 'was', 'her', 'friend']}, {'string': ' She did not win the race', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD did) (RB not) (VP (VB win) (NP (DT the) (NN race))))))', 'lemma': [(u'She', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'win', u'win', u'VB'), (u'the', u'the', u'DT'), (u'race', u'race', u'NN')]}, 'tokens': ['She', 'did', 'not', 'win', 'the', 'race']}, {'string': ' Matt helped her stand up', 'parse': {'tree': '(ROOT (S (NP (NNP Matt)) (VP (VBD helped) (SBAR (S (NP (PRP her)) (VP (VBP stand) (PRT (RP up))))))))', 'lemma': [(u'Matt', u'Matt', u'NNP'), (u'helped', u'help', u'VBD'), (u'her', u'she', u'PRP'), (u'stand', u'stand', u'VBP'), (u'up', u'up', u'RP')]}, 'tokens': ['Matt', 'helped', 'her', 'stand', 'up']}, {'string': ' Jane gave her a bandage', 'parse': {'tree': '(ROOT (S (NP (NNP Jane)) (VP (VBD gave) (NP (PRP her)) (NP (DT a) (NN bandage)))))', 'lemma': [(u'Jane', u'Jane', u'NNP'), (u'gave', u'give', u'VBD'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'bandage', u'bandage', u'NN')]}, 'tokens': ['Jane', 'gave', 'her', 'a', 'bandage']}], 'mode': 0}, {'question': {'string': ' What did Stephanie give Sarah?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Stephanie)) (VP (VB give) (NP (NNP Sarah)))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Stephanie', u'Stephanie', u'NNP'), (u'give', u'give', u'VB'), (u'Sarah', u'Sarah', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Stephanie', 'give', 'Sarah', '?']}, 'answers': [{'string': ' A rock', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (NN rock))))', 'lemma': [(u'A', u'a', u'DT'), (u'rock', u'rock', u'NN')]}, 'tokens': ['A', 'rock']}, {'string': ' A bunny toy', 'parse': {'tree': '(ROOT (NP (DT A) (NN bunny) (NN toy)))', 'lemma': [(u'A', u'a', u'DT'), (u'bunny', u'bunny', u'NN'), (u'toy', u'toy', u'NN')]}, 'tokens': ['A', 'bunny', 'toy']}, {'string': ' A hug', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (NN hug))))', 'lemma': [(u'A', u'a', u'DT'), (u'hug', u'hug', u'NN')]}, 'tokens': ['A', 'hug']}, {'string': ' A bandage', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (NN bandage))))', 'lemma': [(u'A', u'a', u'DT'), (u'bandage', u'bandage', u'NN')]}, 'tokens': ['A', 'bandage']}], 'mode': 1}, {'question': {'string': " What was on Sarah 's shirt?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD was) (PP (IN on) (NP (NP (NNP Sarah) (POS 's)) (NN shirt))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'on', u'on', u'IN'), (u'Sarah', u'Sarah', u'NNP'), (u"'s", u"'s", u'POS'), (u'shirt', u'shirt', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'on', 'Sarah', "'s", 'shirt', '?']}, 'answers': [{'string': ' shoelace', 'parse': {'tree': '(ROOT (NP (NN shoelace)))', 'lemma': [(u'shoelace', u'shoelace', u'NN')]}, 'tokens': ['shoelace']}, {'string': ' cat', 'parse': {'tree': '(ROOT (NP (NN cat)))', 'lemma': [(u'cat', u'cat', u'NN')]}, 'tokens': ['cat']}, {'string': ' rock', 'parse': {'tree': '(ROOT (NP (NN rock)))', 'lemma': [(u'rock', u'rock', u'NN')]}, 'tokens': ['rock']}, {'string': ' bunny', 'parse': {'tree': '(ROOT (NP (NN bunny)))', 'lemma': [(u'bunny', u'bunny', u'NN')]}, 'tokens': ['bunny']}], 'mode': 1}]}
{'sentences': [{'string': ' The other day Mitch went to the store to buy his mother a big turkey.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ other) (NN day) (NN Mitch)) (VP (VBD went) (PP (TO to) (NP (DT the) (NN store))) (S (VP (TO to) (VP (VB buy) (NP (PRP$ his) (NN mother)) (NP (DT a) (JJ big) (NN turkey)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'day', u'day', u'NN'), (u'Mitch', u'mitch', u'NN'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'turkey', u'turkey', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'other', 'day', 'Mitch', 'went', 'to', 'the', 'store', 'to', 'buy', 'his', 'mother', 'a', 'big', 'turkey', '.']}, {'string': ' Inside the store there was food all over!', 'parse': {'tree': '(ROOT (S (PP (IN Inside) (NP (DT the) (NN store))) (NP (EX there)) (VP (VBD was) (NP (NN food)) (ADVP (DT all) (RP over))) (. !)))', 'lemma': [(u'Inside', u'inside', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'food', u'food', u'NN'), (u'all', u'all', u'DT'), (u'over', u'over', u'RP'), (u'!', u'!', u'.')]}, 'tokens': ['Inside', 'the', 'store', 'there', 'was', 'food', 'all', 'over', '!']}, {'string': ' Mitch could not believe his own little eyes.', 'parse': {'tree': '(ROOT (S (NP (NNP Mitch)) (VP (MD could) (RB not) (VP (VB believe) (NP (PRP$ his) (JJ own) (JJ little) (NNS eyes)))) (. .)))', 'lemma': [(u'Mitch', u'Mitch', u'NNP'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'believe', u'believe', u'VB'), (u'his', u'he', u'PRP$'), (u'own', u'own', u'JJ'), (u'little', u'little', u'JJ'), (u'eyes', u'eye', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Mitch', 'could', 'not', 'believe', 'his', 'own', 'little', 'eyes', '.']}, {'string': " From the first time Mitch woke up this morning he knew that he 'd be a big man someday, and getting a big turkey for his mother was the way in which he could show that he is a big man.", 'parse': {'tree': "(ROOT (S (S (PP (IN From) (NP (DT the) (JJ first) (NN time))) (NP (NNP Mitch)) (VP (VBD woke) (PRT (RP up)) (NP (NP (DT this) (NN morning)) (SBAR (S (NP (PRP he)) (VP (VBD knew) (SBAR (IN that) (S (NP (PRP he)) (VP (MD 'd) (VP (VB be) (NP (DT a) (JJ big) (NN man)) (ADVP (RB someday)))))))))))) (, ,) (CC and) (S (S (VP (VBG getting) (NP (DT a) (JJ big) (NN turkey)) (PP (IN for) (NP (PRP$ his) (NN mother))))) (VP (VBD was) (NP (NP (DT the) (NN way)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (PRP he)) (VP (MD could) (VP (VB show) (SBAR (IN that) (S (NP (PRP he)) (VP (VBZ is) (NP (DT a) (JJ big) (NN man)))))))))))) (. .)))", 'lemma': [(u'From', u'from', u'IN'), (u'the', u'the', u'DT'), (u'first', u'first', u'JJ'), (u'time', u'time', u'NN'), (u'Mitch', u'Mitch', u'NNP'), (u'woke', u'wake', u'VBD'), (u'up', u'up', u'RP'), (u'this', u'this', u'DT'), (u'morning', u'morning', u'NN'), (u'he', u'he', u'PRP'), (u'knew', u'know', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u"'d", u'would', u'MD'), (u'be', u'be', u'VB'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'man', u'man', u'NN'), (u'someday', u'someday', u'RB'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'getting', u'get', u'VBG'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'turkey', u'turkey', u'NN'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'way', u'way', u'NN'), (u'in', u'in', u'IN'), (u'which', u'which', u'WDT'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'show', u'show', u'VB'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'man', u'man', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['From', 'the', 'first', 'time', 'Mitch', 'woke', 'up', 'this', 'morning', 'he', 'knew', 'that', 'he', "'d", 'be', 'a', 'big', 'man', 'someday', ',', 'and', 'getting', 'a', 'big', 'turkey', 'for', 'his', 'mother', 'was', 'the', 'way', 'in', 'which', 'he', 'could', 'show', 'that', 'he', 'is', 'a', 'big', 'man', '.']}, {'string': ' The store had all kinds of food from chocolate bars to yummy radish.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN store)) (VP (VBD had) (NP (NP (DT all) (NNS kinds)) (PP (IN of) (NP (NN food)))) (PP (IN from) (NP (NP (NN chocolate) (NNS bars)) (PP (TO to) (NP (JJ yummy) (NN radish)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'store', u'store', u'NN'), (u'had', u'have', u'VBD'), (u'all', u'all', u'DT'), (u'kinds', u'kind', u'NNS'), (u'of', u'of', u'IN'), (u'food', u'food', u'NN'), (u'from', u'from', u'IN'), (u'chocolate', u'chocolate', u'NN'), (u'bars', u'bar', u'NNS'), (u'to', u'to', u'TO'), (u'yummy', u'yummy', u'JJ'), (u'radish', u'radish', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'store', 'had', 'all', 'kinds', 'of', 'food', 'from', 'chocolate', 'bars', 'to', 'yummy', 'radish', '.']}, {'string': ' Mitch ran for the turkey section of the store with much force.', 'parse': {'tree': '(ROOT (S (NP (NNP Mitch)) (VP (VBD ran) (PP (IN for) (NP (NP (DT the) (NN turkey) (NN section)) (PP (IN of) (NP (DT the) (NN store))))) (PP (IN with) (NP (JJ much) (NN force)))) (. .)))', 'lemma': [(u'Mitch', u'Mitch', u'NNP'), (u'ran', u'run', u'VBD'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'turkey', u'turkey', u'NN'), (u'section', u'section', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'with', u'with', u'IN'), (u'much', u'much', u'JJ'), (u'force', u'force', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Mitch', 'ran', 'for', 'the', 'turkey', 'section', 'of', 'the', 'store', 'with', 'much', 'force', '.']}, {'string': " `` Turkeys are good, yummy yummy in my tummy, I want to eat a big old turkey and then go to the bathroom several times! ''", 'parse': {'tree': "(ROOT (S (`` ``) (S (NP (NNP Turkeys)) (VP (VBP are) (ADJP (JJ good) (, ,) (RB yummy) (JJ yummy)) (PP (IN in) (NP (PRP$ my) (NN tummy))))) (, ,) (NP (PRP I)) (VP (VBP want) (S (VP (TO to) (VP (VP (VB eat) (NP (DT a) (JJ big) (JJ old) (NN turkey))) (CC and) (ADVP (RB then)) (VP (VB go) (PP (TO to) (NP (DT the) (NN bathroom))) (NP (JJ several) (NNS times))))))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Turkeys', u'Turkeys', u'NNP'), (u'are', u'be', u'VBP'), (u'good', u'good', u'JJ'), (u',', u',', u','), (u'yummy', u'yummy', u'RB'), (u'yummy', u'yummy', u'JJ'), (u'in', u'in', u'IN'), (u'my', u'my', u'PRP$'), (u'tummy', u'tummy', u'NN'), (u',', u',', u','), (u'I', u'I', u'PRP'), (u'want', u'want', u'VBP'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'old', u'old', u'JJ'), (u'turkey', u'turkey', u'NN'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'bathroom', u'bathroom', u'NN'), (u'several', u'several', u'JJ'), (u'times', u'time', u'NNS'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Turkeys', 'are', 'good', ',', 'yummy', 'yummy', 'in', 'my', 'tummy', ',', 'I', 'want', 'to', 'eat', 'a', 'big', 'old', 'turkey', 'and', 'then', 'go', 'to', 'the', 'bathroom', 'several', 'times', '!', "''"]}, {'string': ' Mitch would cry out to strangers he met in the turkey section of the store.', 'parse': {'tree': '(ROOT (S (NP (NNP Mitch)) (VP (MD would) (VP (VB cry) (PRT (RP out)) (S (VP (TO to) (VP (VB strangers) (S (NP (PRP he)) (VP (VBN met) (PP (IN in) (NP (NP (DT the) (NN turkey) (NN section)) (PP (IN of) (NP (DT the) (NN store)))))))))))) (. .)))', 'lemma': [(u'Mitch', u'Mitch', u'NNP'), (u'would', u'would', u'MD'), (u'cry', u'cry', u'VB'), (u'out', u'out', u'RP'), (u'to', u'to', u'TO'), (u'strangers', u'stranger', u'VB'), (u'he', u'he', u'PRP'), (u'met', u'meet', u'VBN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'turkey', u'turkey', u'NN'), (u'section', u'section', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Mitch', 'would', 'cry', 'out', 'to', 'strangers', 'he', 'met', 'in', 'the', 'turkey', 'section', 'of', 'the', 'store', '.']}, {'string': ' Then, four and a half seconds later, Mitch turned into a giant Walrus named Ted!', 'parse': {'tree': '(ROOT (S (ADVP (RB Then)) (, ,) (ADVP (NP (QP (CD four) (CC and) (DT a) (NN half)) (NNS seconds)) (RB later)) (, ,) (NP (NNP Mitch)) (VP (VBD turned) (PP (IN into) (NP (NP (DT a) (JJ giant) (NNS Walrus)) (VP (VBN named) (NP (NNP Ted)))))) (. !)))', 'lemma': [(u'Then', u'then', u'RB'), (u',', u',', u','), (u'four', u'four', u'CD'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'half', u'half', u'NN'), (u'seconds', u'seconds', u'NNS'), (u'later', u'later', u'RB'), (u',', u',', u','), (u'Mitch', u'Mitch', u'NNP'), (u'turned', u'turn', u'VBD'), (u'into', u'into', u'IN'), (u'a', u'a', u'DT'), (u'giant', u'giant', u'JJ'), (u'Walrus', u'walrus', u'NNS'), (u'named', u'name', u'VBN'), (u'Ted', u'Ted', u'NNP'), (u'!', u'!', u'.')]}, 'tokens': ['Then', ',', 'four', 'and', 'a', 'half', 'seconds', 'later', ',', 'Mitch', 'turned', 'into', 'a', 'giant', 'Walrus', 'named', 'Ted', '!']}, {'string': ' No one knew how this could have happened, but the Walrus knew.', 'parse': {'tree': '(ROOT (S (S (NP (DT No) (NN one)) (VP (VBD knew) (SBAR (WHADVP (WRB how)) (S (NP (DT this)) (VP (MD could) (VP (VB have) (VP (VBN happened)))))))) (, ,) (CC but) (S (NP (DT the) (NNPS Walrus)) (VP (VBD knew))) (. .)))', 'lemma': [(u'No', u'no', u'DT'), (u'one', u'one', u'NN'), (u'knew', u'know', u'VBD'), (u'how', u'how', u'WRB'), (u'this', u'this', u'DT'), (u'could', u'could', u'MD'), (u'have', u'have', u'VB'), (u'happened', u'happen', u'VBN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'the', u'the', u'DT'), (u'Walrus', u'Walrus', u'NNPS'), (u'knew', u'know', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['No', 'one', 'knew', 'how', 'this', 'could', 'have', 'happened', ',', 'but', 'the', 'Walrus', 'knew', '.']}, {'string': ' A few years later, Mitch the now giant Walrus named Ted joined the circus and became a rich man with green in his heart.', 'parse': {'tree': '(ROOT (S (ADVP (NP (DT A) (JJ few) (NNS years)) (RB later)) (, ,) (NP (NP (NNP Mitch)) (NP (DT the) (RB now) (JJ giant) (NNS Walrus))) (VP (VBD named) (SBAR (S (NP (NNP Ted)) (VP (VP (VBD joined) (NP (DT the) (NN circus))) (CC and) (VP (VBD became) (NP (DT a) (JJ rich) (NN man)) (PP (IN with) (ADJP (JJ green))) (PP (IN in) (NP (PRP$ his) (NN heart)))))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'few', u'few', u'JJ'), (u'years', u'year', u'NNS'), (u'later', u'later', u'RB'), (u',', u',', u','), (u'Mitch', u'Mitch', u'NNP'), (u'the', u'the', u'DT'), (u'now', u'now', u'RB'), (u'giant', u'giant', u'JJ'), (u'Walrus', u'walrus', u'NNS'), (u'named', u'name', u'VBD'), (u'Ted', u'Ted', u'NNP'), (u'joined', u'join', u'VBD'), (u'the', u'the', u'DT'), (u'circus', u'circus', u'NN'), (u'and', u'and', u'CC'), (u'became', u'become', u'VBD'), (u'a', u'a', u'DT'), (u'rich', u'rich', u'JJ'), (u'man', u'man', u'NN'), (u'with', u'with', u'IN'), (u'green', u'green', u'JJ'), (u'in', u'in', u'IN'), (u'his', u'he', u'PRP$'), (u'heart', u'heart', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'few', 'years', 'later', ',', 'Mitch', 'the', 'now', 'giant', 'Walrus', 'named', 'Ted', 'joined', 'the', 'circus', 'and', 'became', 'a', 'rich', 'man', 'with', 'green', 'in', 'his', 'heart', '.']}, {'string': ' He could not think of anything else but making more money at his circus.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (MD could) (RB not) (VP (VB think) (PP (IN of) (NP (NN anything) (RB else)))))) (CC but) (S (VP (VBG making) (NP (JJR more) (NN money)) (PP (IN at) (NP (PRP$ his) (NN circus))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'think', u'think', u'VB'), (u'of', u'of', u'IN'), (u'anything', u'anything', u'NN'), (u'else', u'else', u'RB'), (u'but', u'but', u'CC'), (u'making', u'make', u'VBG'), (u'more', u'more', u'JJR'), (u'money', u'money', u'NN'), (u'at', u'at', u'IN'), (u'his', u'he', u'PRP$'), (u'circus', u'circus', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'could', 'not', 'think', 'of', 'anything', 'else', 'but', 'making', 'more', 'money', 'at', 'his', 'circus', '.']}, {'string': ' One day Ted the giant Walrus, also known as Mitch the happy boy, remembered that his mother still wanted a big turkey for her late night breakfast.', 'parse': {'tree': '(ROOT (S (NP (NP (NP (CD One) (NN day) (NNP Ted)) (NP (DT the) (JJ giant) (NNS Walrus))) (, ,) (VP (ADVP (RB also)) (VBN known) (PP (IN as) (NP (NP (NNP Mitch)) (NP (DT the) (JJ happy) (NN boy))))) (, ,)) (VP (VBD remembered) (SBAR (IN that) (S (NP (PRP$ his) (NN mother)) (ADVP (RB still)) (VP (VBD wanted) (NP (DT a) (JJ big) (NN turkey)) (PP (IN for) (NP (PRP$ her) (JJ late) (NN night) (NN breakfast))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'Ted', u'Ted', u'NNP'), (u'the', u'the', u'DT'), (u'giant', u'giant', u'JJ'), (u'Walrus', u'walrus', u'NNS'), (u',', u',', u','), (u'also', u'also', u'RB'), (u'known', u'know', u'VBN'), (u'as', u'as', u'IN'), (u'Mitch', u'Mitch', u'NNP'), (u'the', u'the', u'DT'), (u'happy', u'happy', u'JJ'), (u'boy', u'boy', u'NN'), (u',', u',', u','), (u'remembered', u'remember', u'VBD'), (u'that', u'that', u'IN'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'still', u'still', u'RB'), (u'wanted', u'want', u'VBD'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'turkey', u'turkey', u'NN'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'late', u'late', u'JJ'), (u'night', u'night', u'NN'), (u'breakfast', u'breakfast', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'Ted', 'the', 'giant', 'Walrus', ',', 'also', 'known', 'as', 'Mitch', 'the', 'happy', 'boy', ',', 'remembered', 'that', 'his', 'mother', 'still', 'wanted', 'a', 'big', 'turkey', 'for', 'her', 'late', 'night', 'breakfast', '.']}, {'string': ' Now that Ted was a giant walrus making money hand over fist, he could buy his mommy a big old turkey for their night time breakfast.', 'parse': {'tree': '(ROOT (S (SBAR (RB Now) (IN that) (S (NP (NNP Ted)) (VP (VBD was) (NP (NP (DT a) (JJ giant) (NN walrus)) (VP (VBG making) (NP (NP (NN money) (NN hand)) (PP (IN over) (NP (NN fist))))))))) (, ,) (NP (PRP he)) (VP (MD could) (VP (VB buy) (NP (PRP$ his) (NN mommy)) (NP (NP (DT a) (JJ big) (JJ old) (NN turkey)) (PP (IN for) (NP (PRP$ their) (NN night) (NN time) (NN breakfast)))))) (. .)))', 'lemma': [(u'Now', u'now', u'RB'), (u'that', u'that', u'IN'), (u'Ted', u'Ted', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'giant', u'giant', u'JJ'), (u'walrus', u'walrus', u'NN'), (u'making', u'make', u'VBG'), (u'money', u'money', u'NN'), (u'hand', u'hand', u'NN'), (u'over', u'over', u'IN'), (u'fist', u'fist', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'buy', u'buy', u'VB'), (u'his', u'he', u'PRP$'), (u'mommy', u'mommy', u'NN'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'old', u'old', u'JJ'), (u'turkey', u'turkey', u'NN'), (u'for', u'for', u'IN'), (u'their', u'they', u'PRP$'), (u'night', u'night', u'NN'), (u'time', u'time', u'NN'), (u'breakfast', u'breakfast', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Now', 'that', 'Ted', 'was', 'a', 'giant', 'walrus', 'making', 'money', 'hand', 'over', 'fist', ',', 'he', 'could', 'buy', 'his', 'mommy', 'a', 'big', 'old', 'turkey', 'for', 'their', 'night', 'time', 'breakfast', '.']}, {'string': ' Ted the walrus also remembered that he had earlier built a time machine.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Ted)) (NP (DT the) (NN walrus))) (ADVP (RB also)) (VP (VBD remembered) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD had) (ADVP (RBR earlier)) (VP (VBN built) (NP (DT a) (NN time) (NN machine))))))) (. .)))', 'lemma': [(u'Ted', u'Ted', u'NNP'), (u'the', u'the', u'DT'), (u'walrus', u'walrus', u'NN'), (u'also', u'also', u'RB'), (u'remembered', u'remember', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'earlier', u'earlier', u'RBR'), (u'built', u'build', u'VBN'), (u'a', u'a', u'DT'), (u'time', u'time', u'NN'), (u'machine', u'machine', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ted', 'the', 'walrus', 'also', 'remembered', 'that', 'he', 'had', 'earlier', 'built', 'a', 'time', 'machine', '.']}, {'string': ' Ted the giant walrus used his time machine to go back in time to buy his mother who was now a dog named Herbert.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Ted)) (NP (DT the) (JJ giant) (NN walrus))) (VP (VBD used) (NP (PRP$ his) (NN time) (NN machine)) (S (VP (TO to) (VP (VB go) (PRT (RP back)) (PP (IN in) (NP (NN time))) (S (VP (TO to) (VP (VB buy) (NP (NP (PRP$ his) (NN mother)) (SBAR (WHNP (WP who)) (S (VP (VBD was) (ADVP (RB now) (NP (DT a) (NN dog))) (VP (VBN named) (NP (NNP Herbert)))))))))))))) (. .)))', 'lemma': [(u'Ted', u'Ted', u'NNP'), (u'the', u'the', u'DT'), (u'giant', u'giant', u'JJ'), (u'walrus', u'walrus', u'NN'), (u'used', u'use', u'VBD'), (u'his', u'he', u'PRP$'), (u'time', u'time', u'NN'), (u'machine', u'machine', u'NN'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'back', u'back', u'RP'), (u'in', u'in', u'IN'), (u'time', u'time', u'NN'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'now', u'now', u'RB'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'named', u'name', u'VBN'), (u'Herbert', u'Herbert', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Ted', 'the', 'giant', 'walrus', 'used', 'his', 'time', 'machine', 'to', 'go', 'back', 'in', 'time', 'to', 'buy', 'his', 'mother', 'who', 'was', 'now', 'a', 'dog', 'named', 'Herbert', '.']}, {'string': " Ted 's mother, Herbert loved the big turkey, but there was a small problem.", 'parse': {'tree': "(ROOT (S (S (S (NP (NP (NNP Ted) (POS 's)) (NN mother))) (, ,) (NP (NNP Herbert)) (VP (VBD loved) (NP (DT the) (JJ big) (NN turkey)))) (, ,) (CC but) (S (NP (EX there)) (VP (VBD was) (NP (DT a) (JJ small) (NN problem)))) (. .)))", 'lemma': [(u'Ted', u'Ted', u'NNP'), (u"'s", u"'s", u'POS'), (u'mother', u'mother', u'NN'), (u',', u',', u','), (u'Herbert', u'Herbert', u'NNP'), (u'loved', u'love', u'VBD'), (u'the', u'the', u'DT'), (u'big', u'big', u'JJ'), (u'turkey', u'turkey', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'small', u'small', u'JJ'), (u'problem', u'problem', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ted', "'s", 'mother', ',', 'Herbert', 'loved', 'the', 'big', 'turkey', ',', 'but', 'there', 'was', 'a', 'small', 'problem', '.']}, {'string': " Herbert the dog did n't have any teeth!", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Herbert)) (NP (DT the) (NN dog))) (VP (VBD did) (RB n't) (VP (VB have) (NP (DT any) (NNS teeth)))) (. !)))", 'lemma': [(u'Herbert', u'Herbert', u'NNP'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'have', u'have', u'VB'), (u'any', u'any', u'DT'), (u'teeth', u'tooth', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['Herbert', 'the', 'dog', 'did', "n't", 'have', 'any', 'teeth', '!']}], 'questions': [{'question': {'string': ' What are the different types of food found in the store?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ different) (NNS types)) (PP (IN of) (NP (NN food)))) (VP (VBN found) (PP (IN in) (NP (DT the) (NN store))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'the', u'the', u'DT'), (u'different', u'different', u'JJ'), (u'types', u'type', u'NNS'), (u'of', u'of', u'IN'), (u'food', u'food', u'NN'), (u'found', u'find', u'VBN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'are', 'the', 'different', 'types', 'of', 'food', 'found', 'in', 'the', 'store', '?']}, 'answers': [{'string': ' no food is in the story.', 'parse': {'tree': '(ROOT (S (NP (DT no) (NN food)) (VP (VBZ is) (PP (IN in) (NP (DT the) (NN story)))) (. .)))', 'lemma': [(u'no', u'no', u'DT'), (u'food', u'food', u'NN'), (u'is', u'be', u'VBZ'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['no', 'food', 'is', 'in', 'the', 'story', '.']}, {'string': ' Turkey and radishes.', 'parse': {'tree': '(ROOT (S (NP (NNP Turkey) (NNP and)) (VP (VBZ radishes)) (. .)))', 'lemma': [(u'Turkey', u'Turkey', u'NNP'), (u'and', u'and', u'NNP'), (u'radishes', u'radish', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['Turkey', 'and', 'radishes', '.']}, {'string': ' Turkey, chocolate, and radishes.', 'parse': {'tree': '(ROOT (NP (NP (NNP Turkey)) (, ,) (NP (NP (NN chocolate)) (, ,) (CC and) (NP (NNS radishes))) (. .)))', 'lemma': [(u'Turkey', u'Turkey', u'NNP'), (u',', u',', u','), (u'chocolate', u'chocolate', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'radishes', u'radish', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Turkey', ',', 'chocolate', ',', 'and', 'radishes', '.']}, {'string': ' Chocolate.', 'parse': {'tree': '(ROOT (S (VP (VB Chocolate)) (. .)))', 'lemma': [(u'Chocolate', u'chocolate', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Chocolate', '.']}], 'mode': 0}, {'question': {'string': " Mitch 's heart is ____, after joining the _____.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Mitch) (POS 's)) (NN heart)) (VP (VBZ is) (ADJP (JJ ____)) (, ,) (PP (IN after) (S (VP (VBG joining) (NP (DT the) (NN _____)))))) (. .)))", 'lemma': [(u'Mitch', u'Mitch', u'NNP'), (u"'s", u"'s", u'POS'), (u'heart', u'heart', u'NN'), (u'is', u'be', u'VBZ'), (u'____', u'____', u'JJ'), (u',', u',', u','), (u'after', u'after', u'IN'), (u'joining', u'join', u'VBG'), (u'the', u'the', u'DT'), (u'_____', u'_____', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Mitch', "'s", 'heart', 'is', '____', ',', 'after', 'joining', 'the', '_____', '.']}, 'answers': [{'string': ' red, circus', 'parse': {'tree': '(ROOT (NP (NP (NN red)) (, ,) (NP (NN circus))))', 'lemma': [(u'red', u'red', u'NN'), (u',', u',', u','), (u'circus', u'circus', u'NN')]}, 'tokens': ['red', ',', 'circus']}, {'string': ' blue, CIA', 'parse': {'tree': '(ROOT (NP (NP (NN blue)) (, ,) (NP (NNP CIA))))', 'lemma': [(u'blue', u'blue', u'NN'), (u',', u',', u','), (u'CIA', u'CIA', u'NNP')]}, 'tokens': ['blue', ',', 'CIA']}, {'string': ' green, circus', 'parse': {'tree': '(ROOT (NP (NP (JJ green)) (, ,) (NP (NN circus))))', 'lemma': [(u'green', u'green', u'JJ'), (u',', u',', u','), (u'circus', u'circus', u'NN')]}, 'tokens': ['green', ',', 'circus']}, {'string': ' pink, superheroes', 'parse': {'tree': '(ROOT (NP (NP (NN pink)) (, ,) (NP (NNS superheroes))))', 'lemma': [(u'pink', u'pink', u'NN'), (u',', u',', u','), (u'superheroes', u'superhero', u'NNS')]}, 'tokens': ['pink', ',', 'superheroes']}], 'mode': 0}, {'question': {'string': ' What did Mitch need to get for his mother at the store?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Mitch)) (VP (VB need) (S (VP (TO to) (VP (VB get) (PP (IN for) (NP (PRP$ his) (NN mother))) (PP (IN at) (NP (DT the) (NN store)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Mitch', u'Mitch', u'NNP'), (u'need', u'need', u'VB'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Mitch', 'need', 'to', 'get', 'for', 'his', 'mother', 'at', 'the', 'store', '?']}, 'answers': [{'string': ' Toys.', 'parse': {'tree': '(ROOT (NP (FW Toys) (. .)))', 'lemma': [(u'Toys', u'toys', u'FW'), (u'.', u'.', u'.')]}, 'tokens': ['Toys', '.']}, {'string': ' A fish soup.', 'parse': {'tree': '(ROOT (S (NP (DT A) (NN fish)) (VP (VBZ soup)) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'fish', u'fish', u'NN'), (u'soup', u'soup', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'fish', 'soup', '.']}, {'string': ' A big turkey.', 'parse': {'tree': '(ROOT (NP (DT A) (JJ big) (NN turkey) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'turkey', u'turkey', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'big', 'turkey', '.']}, {'string': ' A lion.', 'parse': {'tree': '(ROOT (NP (DT A) (NN lion) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'lion', u'lion', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'lion', '.']}], 'mode': 1}, {'question': {'string': ' Who was Ted the Walrus before he was a giant walrus?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (NNP Ted) (DT the) (NNP Walrus)) (SBAR (IN before) (S (NP (PRP he)) (VP (VBD was) (NP (DT a) (JJ giant) (NN walrus)))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'Ted', u'Ted', u'NNP'), (u'the', u'the', u'DT'), (u'Walrus', u'Walrus', u'NNP'), (u'before', u'before', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'giant', u'giant', u'JJ'), (u'walrus', u'walrus', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'Ted', 'the', 'Walrus', 'before', 'he', 'was', 'a', 'giant', 'walrus', '?']}, 'answers': [{'string': ' Mickey the mouse.', 'parse': {'tree': '(ROOT (NP (NP (NNP Mickey)) (NP (DT the) (NN mouse)) (. .)))', 'lemma': [(u'Mickey', u'Mickey', u'NNP'), (u'the', u'the', u'DT'), (u'mouse', u'mouse', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Mickey', 'the', 'mouse', '.']}, {'string': ' Mitch.', 'parse': {'tree': '(ROOT (S (VP (VB Mitch)) (. .)))', 'lemma': [(u'Mitch', u'mitch', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Mitch', '.']}, {'string': ' Ricky the bat.', 'parse': {'tree': '(ROOT (FRAG (ADVP (RB Ricky)) (NP (DT the) (NN bat)) (. .)))', 'lemma': [(u'Ricky', u'ricky', u'RB'), (u'the', u'the', u'DT'), (u'bat', u'bat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ricky', 'the', 'bat', '.']}, {'string': ' Dino the dog faced boy.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Dino)) (NP (DT the) (NN dog))) (VP (VBD faced) (INTJ (UH boy))) (. .)))', 'lemma': [(u'Dino', u'Dino', u'NNP'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'faced', u'face', u'VBD'), (u'boy', u'boy', u'UH'), (u'.', u'.', u'.')]}, 'tokens': ['Dino', 'the', 'dog', 'faced', 'boy', '.']}], 'mode': 1}]}
{'sentences': [{'string': ' As they went to the doors they saw they had the letters A, B, C, and D on them.', 'parse': {'tree': '(ROOT (S (SBAR (IN As) (S (NP (PRP they)) (VP (VBD went) (PP (TO to) (NP (DT the) (NNS doors)))))) (NP (PRP they)) (VP (VBD saw) (SBAR (S (NP (PRP they)) (VP (VBD had) (NP (NP (DT the) (NNS letters) (NN A)) (, ,) (NP (NNP B)) (, ,) (NP (NNP C)) (, ,) (CC and) (NP (NNP D))) (PP (IN on) (NP (PRP them))))))) (. .)))', 'lemma': [(u'As', u'as', u'IN'), (u'they', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'doors', u'door', u'NNS'), (u'they', u'they', u'PRP'), (u'saw', u'see', u'VBD'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'the', u'the', u'DT'), (u'letters', u'letter', u'NNS'), (u'A', u'a', u'NN'), (u',', u',', u','), (u'B', u'B', u'NNP'), (u',', u',', u','), (u'C', u'C', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'D', u'D', u'NNP'), (u'on', u'on', u'IN'), (u'them', u'they', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['As', 'they', 'went', 'to', 'the', 'doors', 'they', 'saw', 'they', 'had', 'the', 'letters', 'A', ',', 'B', ',', 'C', ',', 'and', 'D', 'on', 'them', '.']}, {'string': ' What did it mean?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (PRP it)) (VP (VB mean))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'it', u'it', u'PRP'), (u'mean', u'mean', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'it', 'mean', '?']}, {'string': ' Alpha, the leader, told everyone to stop and look at the doors, so as to see which door they would go through.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Alpha)) (, ,) (NP (DT the) (NN leader)) (, ,)) (VP (VBD told) (NP (NN everyone)) (S (VP (TO to) (VP (VB stop) (CC and) (VB look) (PP (IN at) (NP (DT the) (NNS doors))) (, ,) (ADVP (RB so) (RB as) (S (VP (TO to) (VP (VB see) (SBAR (WHNP (WDT which) (NN door)) (S (NP (PRP they)) (VP (MD would) (VP (VB go) (PRT (RP through)))))))))))))) (. .)))', 'lemma': [(u'Alpha', u'Alpha', u'NNP'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'leader', u'leader', u'NN'), (u',', u',', u','), (u'told', u'tell', u'VBD'), (u'everyone', u'everyone', u'NN'), (u'to', u'to', u'TO'), (u'stop', u'stop', u'VB'), (u'and', u'and', u'CC'), (u'look', u'look', u'VB'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'doors', u'door', u'NNS'), (u',', u',', u','), (u'so', u'so', u'RB'), (u'as', u'as', u'RB'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'which', u'which', u'WDT'), (u'door', u'door', u'NN'), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'go', u'go', u'VB'), (u'through', u'through', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['Alpha', ',', 'the', 'leader', ',', 'told', 'everyone', 'to', 'stop', 'and', 'look', 'at', 'the', 'doors', ',', 'so', 'as', 'to', 'see', 'which', 'door', 'they', 'would', 'go', 'through', '.']}, {'string': ' The walls were brown and dirty.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS walls)) (VP (VBD were) (ADJP (JJ brown) (CC and) (JJ dirty))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'walls', u'wall', u'NNS'), (u'were', u'be', u'VBD'), (u'brown', u'brown', u'JJ'), (u'and', u'and', u'CC'), (u'dirty', u'dirty', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'walls', 'were', 'brown', 'and', 'dirty', '.']}, {'string': ' The lights were yellow.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS lights)) (VP (VBD were) (ADJP (JJ yellow))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'lights', u'light', u'NNS'), (u'were', u'be', u'VBD'), (u'yellow', u'yellow', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'lights', 'were', 'yellow', '.']}, {'string': ' Door A was blue.', 'parse': {'tree': '(ROOT (S (NP (NNP Door) (NNP A)) (VP (VBD was) (ADJP (JJ blue))) (. .)))', 'lemma': [(u'Door', u'Door', u'NNP'), (u'A', u'A', u'NNP'), (u'was', u'be', u'VBD'), (u'blue', u'blue', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Door', 'A', 'was', 'blue', '.']}, {'string': " This was Beta 's choice.", 'parse': {'tree': "(ROOT (S (NP (DT This)) (VP (VBD was) (NP (NP (NNP Beta) (POS 's)) (NN choice))) (. .)))", 'lemma': [(u'This', u'this', u'DT'), (u'was', u'be', u'VBD'), (u'Beta', u'Beta', u'NNP'), (u"'s", u"'s", u'POS'), (u'choice', u'choice', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['This', 'was', 'Beta', "'s", 'choice', '.']}, {'string': ' Door B was red.', 'parse': {'tree': '(ROOT (S (NP (NNP Door) (NNP B)) (VP (VBD was) (ADJP (JJ red))) (. .)))', 'lemma': [(u'Door', u'Door', u'NNP'), (u'B', u'B', u'NNP'), (u'was', u'be', u'VBD'), (u'red', u'red', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Door', 'B', 'was', 'red', '.']}, {'string': ' Door C was the same color as door A. Door D a color no one had seen before.', 'parse': {'tree': '(ROOT (S (NP (NNP Door) (NNP C)) (VP (VBD was) (NP (DT the) (JJ same) (NN color)) (SBAR (IN as) (S (NP (NN door) (NN A.) (NNP Door) (NNP D)) (ADVP (NP (DT a) (NN color)) (RB no) (NP (CD one))) (VP (VBD had) (VP (VBN seen) (ADVP (RB before))))))) (. .)))', 'lemma': [(u'Door', u'Door', u'NNP'), (u'C', u'C', u'NNP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'same', u'same', u'JJ'), (u'color', u'color', u'NN'), (u'as', u'as', u'IN'), (u'door', u'door', u'NN'), (u'A.', u'a.', u'NN'), (u'Door', u'Door', u'NNP'), (u'D', u'D', u'NNP'), (u'a', u'a', u'DT'), (u'color', u'color', u'NN'), (u'no', u'no', u'RB'), (u'one', u'one', u'CD'), (u'had', u'have', u'VBD'), (u'seen', u'see', u'VBN'), (u'before', u'before', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Door', 'C', 'was', 'the', 'same', 'color', 'as', 'door', 'A.', 'Door', 'D', 'a', 'color', 'no', 'one', 'had', 'seen', 'before', '.']}, {'string': ' Gamma felt that Alpha needed to make a choice soon before the monsters caught their scent.', 'parse': {'tree': '(ROOT (S (NP (NNP Gamma)) (VP (VBD felt) (SBAR (IN that) (S (NP (NNP Alpha)) (VP (VBD needed) (S (VP (TO to) (VP (VB make) (NP (DT a) (NN choice)) (ADVP (RB soon)) (SBAR (IN before) (S (NP (DT the) (NNS monsters)) (VP (VBD caught) (NP (PRP$ their) (NN scent)))))))))))) (. .)))', 'lemma': [(u'Gamma', u'Gamma', u'NNP'), (u'felt', u'feel', u'VBD'), (u'that', u'that', u'IN'), (u'Alpha', u'Alpha', u'NNP'), (u'needed', u'need', u'VBD'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'a', u'a', u'DT'), (u'choice', u'choice', u'NN'), (u'soon', u'soon', u'RB'), (u'before', u'before', u'IN'), (u'the', u'the', u'DT'), (u'monsters', u'monster', u'NNS'), (u'caught', u'catch', u'VBD'), (u'their', u'they', u'PRP$'), (u'scent', u'scent', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Gamma', 'felt', 'that', 'Alpha', 'needed', 'to', 'make', 'a', 'choice', 'soon', 'before', 'the', 'monsters', 'caught', 'their', 'scent', '.']}, {'string': ' Delta was the first to voice a choice.', 'parse': {'tree': '(ROOT (S (NP (NNP Delta)) (VP (VBD was) (NP (DT the) (JJ first) (S (VP (TO to) (VP (VB voice) (NP (DT a) (NN choice))))))) (. .)))', 'lemma': [(u'Delta', u'Delta', u'NNP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'first', u'first', u'JJ'), (u'to', u'to', u'TO'), (u'voice', u'voice', u'VB'), (u'a', u'a', u'DT'), (u'choice', u'choice', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Delta', 'was', 'the', 'first', 'to', 'voice', 'a', 'choice', '.']}, {'string': ' He wanted to go in the red door.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD wanted) (S (VP (TO to) (VP (VB go) (PP (IN in) (NP (DT the) (JJ red) (NN door))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'red', u'red', u'JJ'), (u'door', u'door', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'wanted', 'to', 'go', 'in', 'the', 'red', 'door', '.']}, {'string': ' Alpha told him that the old books said to go in the blue door.', 'parse': {'tree': '(ROOT (S (NP (NNP Alpha)) (VP (VBD told) (NP (PRP him)) (SBAR (IN that) (S (NP (DT the) (JJ old) (NNS books)) (VP (VBD said) (S (VP (TO to) (VP (VB go) (PP (IN in) (NP (DT the) (JJ blue) (NN door)))))))))) (. .)))', 'lemma': [(u'Alpha', u'Alpha', u'NNP'), (u'told', u'tell', u'VBD'), (u'him', u'he', u'PRP'), (u'that', u'that', u'IN'), (u'the', u'the', u'DT'), (u'old', u'old', u'JJ'), (u'books', u'book', u'NNS'), (u'said', u'say', u'VBD'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'blue', u'blue', u'JJ'), (u'door', u'door', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Alpha', 'told', 'him', 'that', 'the', 'old', 'books', 'said', 'to', 'go', 'in', 'the', 'blue', 'door', '.']}, {'string': ' This is why it was so hard for Alpha right now.', 'parse': {'tree': '(ROOT (S (NP (DT This)) (VP (VBZ is) (SBAR (WHADVP (WRB why)) (S (NP (PRP it)) (VP (VBD was) (ADJP (RB so) (JJ hard) (PP (IN for) (NP (NNP Alpha)))) (ADVP (RB right) (RB now)))))) (. .)))', 'lemma': [(u'This', u'this', u'DT'), (u'is', u'be', u'VBZ'), (u'why', u'why', u'WRB'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'hard', u'hard', u'JJ'), (u'for', u'for', u'IN'), (u'Alpha', u'Alpha', u'NNP'), (u'right', u'right', u'RB'), (u'now', u'now', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['This', 'is', 'why', 'it', 'was', 'so', 'hard', 'for', 'Alpha', 'right', 'now', '.']}, {'string': ' Two doors were blue.', 'parse': {'tree': '(ROOT (S (NP (CD Two) (NNS doors)) (VP (VBD were) (ADJP (JJ blue))) (. .)))', 'lemma': [(u'Two', u'two', u'CD'), (u'doors', u'door', u'NNS'), (u'were', u'be', u'VBD'), (u'blue', u'blue', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Two', 'doors', 'were', 'blue', '.']}, {'string': ' Being a good leader, Alpha asked everyone what they wanted to do.', 'parse': {'tree': '(ROOT (S (S (VP (VBG Being) (NP (DT a) (JJ good) (NN leader)))) (, ,) (NP (NNP Alpha)) (VP (VBD asked) (NP (NP (NN everyone)) (SBAR (WHNP (WP what)) (S (NP (PRP they)) (VP (VBD wanted) (S (VP (TO to) (VP (VB do))))))))) (. .)))', 'lemma': [(u'Being', u'be', u'VBG'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'leader', u'leader', u'NN'), (u',', u',', u','), (u'Alpha', u'Alpha', u'NNP'), (u'asked', u'ask', u'VBD'), (u'everyone', u'everyone', u'NN'), (u'what', u'what', u'WP'), (u'they', u'they', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Being', 'a', 'good', 'leader', ',', 'Alpha', 'asked', 'everyone', 'what', 'they', 'wanted', 'to', 'do', '.']}, {'string': ' The final choice was door D.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ final) (NN choice)) (VP (VBD was) (ADVP (NN door)) (NP (NNP D))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'final', u'final', u'JJ'), (u'choice', u'choice', u'NN'), (u'was', u'be', u'VBD'), (u'door', u'door', u'NN'), (u'D', u'D', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'final', 'choice', 'was', 'door', 'D', '.']}, {'string': ' They went in and enjoyed all of time in a world with odd colors.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD went) (PRT (RP in))) (CC and) (VP (VBD enjoyed) (NP (NP (DT all)) (PP (IN of) (NP (NN time)))) (PP (IN in) (NP (NP (DT a) (NN world)) (PP (IN with) (NP (JJ odd) (NNS colors))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'in', u'in', u'RP'), (u'and', u'and', u'CC'), (u'enjoyed', u'enjoy', u'VBD'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'time', u'time', u'NN'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'world', u'world', u'NN'), (u'with', u'with', u'IN'), (u'odd', u'odd', u'JJ'), (u'colors', u'color', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'went', 'in', 'and', 'enjoyed', 'all', 'of', 'time', 'in', 'a', 'world', 'with', 'odd', 'colors', '.']}], 'questions': [{'question': {'string': ' What color was door C?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBD was) (NP (NN door) (NNP C))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'was', u'be', u'VBD'), (u'door', u'door', u'NN'), (u'C', u'C', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'was', 'door', 'C', '?']}, 'answers': [{'string': ' blue', 'parse': {'tree': '(ROOT (ADJP (JJ blue)))', 'lemma': [(u'blue', u'blue', u'JJ')]}, 'tokens': ['blue']}, {'string': ' red', 'parse': {'tree': '(ROOT (NP (NN red)))', 'lemma': [(u'red', u'red', u'NN')]}, 'tokens': ['red']}, {'string': ' yellow', 'parse': {'tree': '(ROOT (ADJP (JJ yellow)))', 'lemma': [(u'yellow', u'yellow', u'JJ')]}, 'tokens': ['yellow']}, {'string': ' brown', 'parse': {'tree': '(ROOT (INTJ (UH brown)))', 'lemma': [(u'brown', u'brown', u'UH')]}, 'tokens': ['brown']}], 'mode': 0}, {'question': {'string': ' Who was the leader?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD was) (NP (DT the) (NN leader))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'leader', u'leader', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'was', 'the', 'leader', '?']}, 'answers': [{'string': ' Beta', 'parse': {'tree': '(ROOT (NP (NN Beta)))', 'lemma': [(u'Beta', u'beta', u'NN')]}, 'tokens': ['Beta']}, {'string': ' Gamma', 'parse': {'tree': '(ROOT (NP (NNP Gamma)))', 'lemma': [(u'Gamma', u'Gamma', u'NNP')]}, 'tokens': ['Gamma']}, {'string': ' Alpha', 'parse': {'tree': '(ROOT (NP (NNP Alpha)))', 'lemma': [(u'Alpha', u'Alpha', u'NNP')]}, 'tokens': ['Alpha']}, {'string': ' Delta', 'parse': {'tree': '(ROOT (NP (NNP Delta)))', 'lemma': [(u'Delta', u'Delta', u'NNP')]}, 'tokens': ['Delta']}], 'mode': 1}, {'question': {'string': ' What color was the door that Delta wanted to go in?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBD was) (NP (DT the) (NN door)) (SBAR (IN that) (S (NP (NNP Delta)) (VP (VBD wanted) (S (VP (TO to) (VP (VB go) (PRT (RP in))))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'that', u'that', u'IN'), (u'Delta', u'Delta', u'NNP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'in', u'in', u'RP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'was', 'the', 'door', 'that', 'Delta', 'wanted', 'to', 'go', 'in', '?']}, 'answers': [{'string': ' blue', 'parse': {'tree': '(ROOT (ADJP (JJ blue)))', 'lemma': [(u'blue', u'blue', u'JJ')]}, 'tokens': ['blue']}, {'string': ' yellow', 'parse': {'tree': '(ROOT (ADJP (JJ yellow)))', 'lemma': [(u'yellow', u'yellow', u'JJ')]}, 'tokens': ['yellow']}, {'string': ' red', 'parse': {'tree': '(ROOT (NP (NN red)))', 'lemma': [(u'red', u'red', u'NN')]}, 'tokens': ['red']}, {'string': ' brown', 'parse': {'tree': '(ROOT (INTJ (UH brown)))', 'lemma': [(u'brown', u'brown', u'UH')]}, 'tokens': ['brown']}], 'mode': 0}, {'question': {'string': ' What color was door A?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBD was) (NP (NN door) (NN A))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'was', u'be', u'VBD'), (u'door', u'door', u'NN'), (u'A', u'a', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'was', 'door', 'A', '?']}, 'answers': [{'string': ' blue', 'parse': {'tree': '(ROOT (ADJP (JJ blue)))', 'lemma': [(u'blue', u'blue', u'JJ')]}, 'tokens': ['blue']}, {'string': ' red', 'parse': {'tree': '(ROOT (NP (NN red)))', 'lemma': [(u'red', u'red', u'NN')]}, 'tokens': ['red']}, {'string': ' yellow', 'parse': {'tree': '(ROOT (ADJP (JJ yellow)))', 'lemma': [(u'yellow', u'yellow', u'JJ')]}, 'tokens': ['yellow']}, {'string': ' brown', 'parse': {'tree': '(ROOT (INTJ (UH brown)))', 'lemma': [(u'brown', u'brown', u'UH')]}, 'tokens': ['brown']}], 'mode': 1}]}
{'sentences': [{'string': " Tommy 's birthday is next week.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Tommy) (POS 's)) (NN birthday)) (VP (VBZ is) (NP (JJ next) (NN week))) (. .)))", 'lemma': [(u'Tommy', u'Tommy', u'NNP'), (u"'s", u"'s", u'POS'), (u'birthday', u'birthday', u'NN'), (u'is', u'be', u'VBZ'), (u'next', u'next', u'JJ'), (u'week', u'week', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tommy', "'s", 'birthday', 'is', 'next', 'week', '.']}, {'string': ' He is hoping for a very special gift.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ is) (VP (VBG hoping) (PP (IN for) (NP (DT a) (RB very) (JJ special) (NN gift))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'hoping', u'hope', u'VBG'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'special', u'special', u'JJ'), (u'gift', u'gift', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'is', 'hoping', 'for', 'a', 'very', 'special', 'gift', '.']}, {'string': ' What are some things Tommy is hoping for?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT some) (NNS things)) (SBAR (S (NP (NNP Tommy)) (VP (VBZ is) (VP (VBG hoping) (PP (IN for)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'some', u'some', u'DT'), (u'things', u'thing', u'NNS'), (u'Tommy', u'Tommy', u'NNP'), (u'is', u'be', u'VBZ'), (u'hoping', u'hope', u'VBG'), (u'for', u'for', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'are', 'some', 'things', 'Tommy', 'is', 'hoping', 'for', '?']}, {'string': ' He would like a big, bouncy ball, like his friends Bobby and Joey have.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (MD would) (VP (VB like) (NP (DT a) (JJ big) (, ,) (JJ bouncy) (NN ball))))) (, ,) (S (PP (IN like) (NP (PRP$ his) (NNS friends))) (NP (NNP Bobby) (CC and) (NNP Joey)) (VP (VBP have))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'like', u'like', u'VB'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u',', u',', u','), (u'bouncy', u'bouncy', u'JJ'), (u'ball', u'ball', u'NN'), (u',', u',', u','), (u'like', u'like', u'IN'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'Bobby', u'Bobby', u'NNP'), (u'and', u'and', u'CC'), (u'Joey', u'Joey', u'NNP'), (u'have', u'have', u'VBP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'would', 'like', 'a', 'big', ',', 'bouncy', 'ball', ',', 'like', 'his', 'friends', 'Bobby', 'and', 'Joey', 'have', '.']}, {'string': ' One with blue stripes!', 'parse': {'tree': '(ROOT (NP (NP (CD One)) (PP (IN with) (NP (JJ blue) (NNS stripes))) (. !)))', 'lemma': [(u'One', u'one', u'CD'), (u'with', u'with', u'IN'), (u'blue', u'blue', u'JJ'), (u'stripes', u'stripe', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['One', 'with', 'blue', 'stripes', '!']}, {'string': ' He would really like some new sneakers.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (MD would) (ADVP (RB really)) (VP (VB like) (NP (DT some) (JJ new) (NNS sneakers)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'really', u'really', u'RB'), (u'like', u'like', u'VB'), (u'some', u'some', u'DT'), (u'new', u'new', u'JJ'), (u'sneakers', u'sneaker', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'would', 'really', 'like', 'some', 'new', 'sneakers', '.']}, {'string': " Danny, Tommy 's best friend, got a special pair of sneakers for HIS birthday last month.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Danny)) (, ,) (NP (NP (NNP Tommy) (POS 's)) (JJS best) (NN friend)) (, ,)) (VP (VBD got) (NP (NP (DT a) (JJ special) (NN pair)) (PP (IN of) (NP (NP (NNS sneakers)) (PP (IN for) (NP (PRP$ HIS) (NN birthday)))))) (NP (JJ last) (NN month))) (. .)))", 'lemma': [(u'Danny', u'Danny', u'NNP'), (u',', u',', u','), (u'Tommy', u'Tommy', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u',', u',', u','), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'special', u'special', u'JJ'), (u'pair', u'pair', u'NN'), (u'of', u'of', u'IN'), (u'sneakers', u'sneaker', u'NNS'), (u'for', u'for', u'IN'), (u'HIS', u'he', u'PRP$'), (u'birthday', u'birthday', u'NN'), (u'last', u'last', u'JJ'), (u'month', u'month', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Danny', ',', 'Tommy', "'s", 'best', 'friend', ',', 'got', 'a', 'special', 'pair', 'of', 'sneakers', 'for', 'HIS', 'birthday', 'last', 'month', '.']}, {'string': ' They have pictures of robots on them and even light up when you walk!', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBP have) (NP (NP (NNS pictures)) (PP (IN of) (NP (NP (NNS robots)) (PP (IN on) (NP (PRP them))))))) (CC and) (ADVP (RB even)) (VP (VB light) (PRT (RP up)) (SBAR (WHADVP (WRB when)) (S (NP (PRP you)) (VP (VBP walk)))))) (. !)))', 'lemma': [(u'They', u'they', u'PRP'), (u'have', u'have', u'VBP'), (u'pictures', u'picture', u'NNS'), (u'of', u'of', u'IN'), (u'robots', u'robot', u'NNS'), (u'on', u'on', u'IN'), (u'them', u'they', u'PRP'), (u'and', u'and', u'CC'), (u'even', u'even', u'RB'), (u'light', u'light', u'VB'), (u'up', u'up', u'RP'), (u'when', u'when', u'WRB'), (u'you', u'you', u'PRP'), (u'walk', u'walk', u'VBP'), (u'!', u'!', u'.')]}, 'tokens': ['They', 'have', 'pictures', 'of', 'robots', 'on', 'them', 'and', 'even', 'light', 'up', 'when', 'you', 'walk', '!']}, {'string': ' He would really, REALLY like a shiny new bicycle.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (MD would) (ADVP (RB really)))) (, ,) (NP (NNP REALLY)) (VP (VBP like) (NP (DT a) (JJ shiny) (JJ new) (NN bicycle))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'really', u'really', u'RB'), (u',', u',', u','), (u'REALLY', u'REALLY', u'NNP'), (u'like', u'like', u'VBP'), (u'a', u'a', u'DT'), (u'shiny', u'shiny', u'JJ'), (u'new', u'new', u'JJ'), (u'bicycle', u'bicycle', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'would', 'really', ',', 'REALLY', 'like', 'a', 'shiny', 'new', 'bicycle', '.']}, {'string': ' Tommy has an old bicycle now.', 'parse': {'tree': '(ROOT (S (NP (NNP Tommy)) (VP (VBZ has) (NP (DT an) (JJ old) (NN bicycle)) (ADVP (RB now))) (. .)))', 'lemma': [(u'Tommy', u'Tommy', u'NNP'), (u'has', u'have', u'VBZ'), (u'an', u'a', u'DT'), (u'old', u'old', u'JJ'), (u'bicycle', u'bicycle', u'NN'), (u'now', u'now', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Tommy', 'has', 'an', 'old', 'bicycle', 'now', '.']}, {'string': ' He is getting too big for it.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ is) (VP (VBG getting) (ADJP (RB too) (JJ big) (PP (IN for) (NP (PRP it)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'getting', u'get', u'VBG'), (u'too', u'too', u'RB'), (u'big', u'big', u'JJ'), (u'for', u'for', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'is', 'getting', 'too', 'big', 'for', 'it', '.']}, {'string': ' He saw a red one in the store yesterday when he was shopping with his Mom.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD saw) (NP (DT a) (JJ red) (NN one)) (PP (IN in) (NP (DT the) (NN store))) (NP (NN yesterday)) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBD was) (VP (VBG shopping) (PP (IN with) (NP (PRP$ his) (NN Mom)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'saw', u'see', u'VBD'), (u'a', u'a', u'DT'), (u'red', u'red', u'JJ'), (u'one', u'one', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'yesterday', u'yesterday', u'NN'), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'shopping', u'shop', u'VBG'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'Mom', u'mom', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'saw', 'a', 'red', 'one', 'in', 'the', 'store', 'yesterday', 'when', 'he', 'was', 'shopping', 'with', 'his', 'Mom', '.']}, {'string': ' It looked like it was the right size for him!', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD looked) (SBAR (IN like) (S (NP (PRP it)) (VP (VBD was) (NP (NP (DT the) (JJ right) (NN size)) (PP (IN for) (NP (PRP him)))))))) (. !)))', 'lemma': [(u'It', u'it', u'PRP'), (u'looked', u'look', u'VBD'), (u'like', u'like', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'right', u'right', u'JJ'), (u'size', u'size', u'NN'), (u'for', u'for', u'IN'), (u'him', u'he', u'PRP'), (u'!', u'!', u'.')]}, 'tokens': ['It', 'looked', 'like', 'it', 'was', 'the', 'right', 'size', 'for', 'him', '!']}, {'string': ' But what Tommy wants most of all is a new baby brother.', 'parse': {'tree': '(ROOT (S (CC But) (SBAR (WHNP (WP what)) (S (NP (NNP Tommy)) (VP (VBZ wants) (NP (NP (JJS most)) (PP (IN of) (NP (DT all))))))) (VP (VBZ is) (NP (DT a) (JJ new) (NN baby) (NN brother))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'what', u'what', u'WP'), (u'Tommy', u'Tommy', u'NNP'), (u'wants', u'want', u'VBZ'), (u'most', u'most', u'JJS'), (u'of', u'of', u'IN'), (u'all', u'all', u'DT'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'new', u'new', u'JJ'), (u'baby', u'baby', u'NN'), (u'brother', u'brother', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'what', 'Tommy', 'wants', 'most', 'of', 'all', 'is', 'a', 'new', 'baby', 'brother', '.']}, {'string': ' Today his Mom and Dad said that he might have one very, very soon.', 'parse': {'tree': '(ROOT (S (NP (NN Today)) (NP (NP (PRP$ his) (NN Mom)) (CC and) (NP (NNP Dad))) (VP (VBD said) (SBAR (IN that) (S (NP (PRP he)) (VP (MD might) (VP (VB have) (NP (NP (CD one) (RB very)) (, ,) (ADVP (RB very) (RB soon)))))))) (. .)))', 'lemma': [(u'Today', u'today', u'NN'), (u'his', u'he', u'PRP$'), (u'Mom', u'mom', u'NN'), (u'and', u'and', u'CC'), (u'Dad', u'Dad', u'NNP'), (u'said', u'say', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'might', u'might', u'MD'), (u'have', u'have', u'VB'), (u'one', u'one', u'CD'), (u'very', u'very', u'RB'), (u',', u',', u','), (u'very', u'very', u'RB'), (u'soon', u'soon', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Today', 'his', 'Mom', 'and', 'Dad', 'said', 'that', 'he', 'might', 'have', 'one', 'very', ',', 'very', 'soon', '.']}, {'string': ' Then Tommy and his little brother can have many fun birthdays together.', 'parse': {'tree': '(ROOT (S (ADVP (RB Then)) (NP (NP (NNP Tommy)) (CC and) (NP (PRP$ his) (JJ little) (NN brother))) (VP (MD can) (VP (VB have) (NP (JJ many) (NN fun) (NNS birthdays)) (ADVP (RB together)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'Tommy', u'Tommy', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'little', u'little', u'JJ'), (u'brother', u'brother', u'NN'), (u'can', u'can', u'MD'), (u'have', u'have', u'VB'), (u'many', u'many', u'JJ'), (u'fun', u'fun', u'NN'), (u'birthdays', u'birthday', u'NNS'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'Tommy', 'and', 'his', 'little', 'brother', 'can', 'have', 'many', 'fun', 'birthdays', 'together', '.']}, {'string': ' That would be the best gift of all!', 'parse': {'tree': '(ROOT (S (NP (DT That)) (VP (MD would) (VP (VB be) (NP (NP (DT the) (JJS best) (NN gift)) (PP (IN of) (NP (DT all)))))) (. !)))', 'lemma': [(u'That', u'that', u'DT'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'the', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'gift', u'gift', u'NN'), (u'of', u'of', u'IN'), (u'all', u'all', u'DT'), (u'!', u'!', u'.')]}, 'tokens': ['That', 'would', 'be', 'the', 'best', 'gift', 'of', 'all', '!']}], 'questions': [{'question': {'string': " What makes Danny 's sneakers special?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ makes) (S (NP (NP (NNP Danny) (POS 's)) (NNS sneakers)) (ADJP (JJ special))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'makes', u'make', u'VBZ'), (u'Danny', u'Danny', u'NNP'), (u"'s", u"'s", u'POS'), (u'sneakers', u'sneaker', u'NNS'), (u'special', u'special', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'makes', 'Danny', "'s", 'sneakers', 'special', '?']}, 'answers': [{'string': ' bouncy', 'parse': {'tree': '(ROOT (ADVP (RB bouncy)))', 'lemma': [(u'bouncy', u'bouncy', u'RB')]}, 'tokens': ['bouncy']}, {'string': ' shiny red', 'parse': {'tree': '(ROOT (NP (JJ shiny) (NN red)))', 'lemma': [(u'shiny', u'shiny', u'JJ'), (u'red', u'red', u'NN')]}, 'tokens': ['shiny', 'red']}, {'string': ' pictures of robots', 'parse': {'tree': '(ROOT (NP (NP (NNS pictures)) (PP (IN of) (NP (NNS robots)))))', 'lemma': [(u'pictures', u'picture', u'NNS'), (u'of', u'of', u'IN'), (u'robots', u'robot', u'NNS')]}, 'tokens': ['pictures', 'of', 'robots']}, {'string': ' blue stripes', 'parse': {'tree': '(ROOT (NP (JJ blue) (NNS stripes)))', 'lemma': [(u'blue', u'blue', u'JJ'), (u'stripes', u'stripe', u'NNS')]}, 'tokens': ['blue', 'stripes']}], 'mode': 0}, {'question': {'string': " When is Tommy 's birthday?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB When)) (SQ (VBZ is) (NP (NP (NNP Tommy) (POS 's)) (NN birthday))) (. ?)))", 'lemma': [(u'When', u'when', u'WRB'), (u'is', u'be', u'VBZ'), (u'Tommy', u'Tommy', u'NNP'), (u"'s", u"'s", u'POS'), (u'birthday', u'birthday', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['When', 'is', 'Tommy', "'s", 'birthday', '?']}, 'answers': [{'string': ' today', 'parse': {'tree': '(ROOT (NP (NN today)))', 'lemma': [(u'today', u'today', u'NN')]}, 'tokens': ['today']}, {'string': ' last month', 'parse': {'tree': '(ROOT (NP (JJ last) (NN month)))', 'lemma': [(u'last', u'last', u'JJ'), (u'month', u'month', u'NN')]}, 'tokens': ['last', 'month']}, {'string': ' yesterday', 'parse': {'tree': '(ROOT (NP (NN yesterday)))', 'lemma': [(u'yesterday', u'yesterday', u'NN')]}, 'tokens': ['yesterday']}, {'string': ' next week', 'parse': {'tree': '(ROOT (NP (JJ next) (NN week)))', 'lemma': [(u'next', u'next', u'JJ'), (u'week', u'week', u'NN')]}, 'tokens': ['next', 'week']}], 'mode': 1}, {'question': {'string': " What 's wrong with Tommy 's old bicycle?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ 's) (ADJP (JJ wrong) (PP (IN with) (NP (NP (NNP Tommy) (POS 's)) (JJ old) (NN bicycle)))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u"'s", u'be', u'VBZ'), (u'wrong', u'wrong', u'JJ'), (u'with', u'with', u'IN'), (u'Tommy', u'Tommy', u'NNP'), (u"'s", u"'s", u'POS'), (u'old', u'old', u'JJ'), (u'bicycle', u'bicycle', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', "'s", 'wrong', 'with', 'Tommy', "'s", 'old', 'bicycle', '?']}, 'answers': [{'string': " it 's not shiny", 'parse': {'tree': "(ROOT (S (NP (PRP it)) (VP (VBZ 's) (RB not) (ADJP (JJ shiny)))))", 'lemma': [(u'it', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'not', u'not', u'RB'), (u'shiny', u'shiny', u'JJ')]}, 'tokens': ['it', "'s", 'not', 'shiny']}, {'string': " it 's too small", 'parse': {'tree': "(ROOT (S (NP (PRP it)) (VP (VBZ 's) (ADJP (RB too) (JJ small)))))", 'lemma': [(u'it', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'too', u'too', u'RB'), (u'small', u'small', u'JJ')]}, 'tokens': ['it', "'s", 'too', 'small']}, {'string': " it 's old", 'parse': {'tree': "(ROOT (S (NP (PRP it)) (VP (VBZ 's) (ADJP (JJ old)))))", 'lemma': [(u'it', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'old', u'old', u'JJ')]}, 'tokens': ['it', "'s", 'old']}, {'string': " it 's red", 'parse': {'tree': "(ROOT (S (NP (PRP it)) (VP (VBZ 's) (ADJP (JJ red)))))", 'lemma': [(u'it', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'red', u'red', u'JJ')]}, 'tokens': ['it', "'s", 'red']}], 'mode': 0}, {'question': {'string': " Who is Tommy 's best friend?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (NNP Tommy) (POS 's)) (JJS best) (NN friend))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'Tommy', u'Tommy', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'is', 'Tommy', "'s", 'best', 'friend', '?']}, 'answers': [{'string': ' Danny', 'parse': {'tree': '(ROOT (NP (NNP Danny)))', 'lemma': [(u'Danny', u'Danny', u'NNP')]}, 'tokens': ['Danny']}, {'string': " Joey 's little brother", 'parse': {'tree': "(ROOT (X (NP (NP (NNP Joey) (POS 's)) (JJ little) (NN brother))))", 'lemma': [(u'Joey', u'Joey', u'NNP'), (u"'s", u"'s", u'POS'), (u'little', u'little', u'JJ'), (u'brother', u'brother', u'NN')]}, 'tokens': ['Joey', "'s", 'little', 'brother']}, {'string': ' Joey', 'parse': {'tree': '(ROOT (NP (NNP Joey)))', 'lemma': [(u'Joey', u'Joey', u'NNP')]}, 'tokens': ['Joey']}, {'string': ' Bobby', 'parse': {'tree': '(ROOT (NP (NNP Bobby)))', 'lemma': [(u'Bobby', u'Bobby', u'NNP')]}, 'tokens': ['Bobby']}], 'mode': 1}]}
{'sentences': [{'string': ' Once upon a time there were three rabbits, named Winston, Chester, and Francis.', 'parse': {'tree': '(ROOT (S (ADVP (RB Once) (PP (IN upon) (NP (DT a) (NN time)))) (NP (EX there)) (VP (VBD were) (NP (NP (CD three) (NNS rabbits)) (, ,) (VP (VBN named) (NP (NNP Winston) (, ,) (NNP Chester) (, ,) (CC and) (NNP Francis))))) (. .)))', 'lemma': [(u'Once', u'once', u'RB'), (u'upon', u'upon', u'IN'), (u'a', u'a', u'DT'), (u'time', u'time', u'NN'), (u'there', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'three', u'three', u'CD'), (u'rabbits', u'rabbit', u'NNS'), (u',', u',', u','), (u'named', u'name', u'VBN'), (u'Winston', u'Winston', u'NNP'), (u',', u',', u','), (u'Chester', u'Chester', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Francis', u'Francis', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Once', 'upon', 'a', 'time', 'there', 'were', 'three', 'rabbits', ',', 'named', 'Winston', ',', 'Chester', ',', 'and', 'Francis', '.']}, {'string': ' Chester was a brown rabbit with large eyes.', 'parse': {'tree': '(ROOT (S (NP (NNP Chester)) (VP (VBD was) (NP (NP (DT a) (JJ brown) (NN rabbit)) (PP (IN with) (NP (JJ large) (NNS eyes))))) (. .)))', 'lemma': [(u'Chester', u'Chester', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'brown', u'brown', u'JJ'), (u'rabbit', u'rabbit', u'NN'), (u'with', u'with', u'IN'), (u'large', u'large', u'JJ'), (u'eyes', u'eye', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Chester', 'was', 'a', 'brown', 'rabbit', 'with', 'large', 'eyes', '.']}, {'string': ' Francis was grey and white and had messy fur.', 'parse': {'tree': '(ROOT (S (NP (NNP Francis)) (VP (VP (VBD was) (ADJP (JJ grey) (CC and) (JJ white))) (CC and) (VP (VBD had) (NP (JJ messy) (NN fur)))) (. .)))', 'lemma': [(u'Francis', u'Francis', u'NNP'), (u'was', u'be', u'VBD'), (u'grey', u'grey', u'JJ'), (u'and', u'and', u'CC'), (u'white', u'white', u'JJ'), (u'and', u'and', u'CC'), (u'had', u'have', u'VBD'), (u'messy', u'messy', u'JJ'), (u'fur', u'fur', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Francis', 'was', 'grey', 'and', 'white', 'and', 'had', 'messy', 'fur', '.']}, {'string': ' Winston was black and very fat.', 'parse': {'tree': '(ROOT (S (NP (NNP Winston)) (VP (VBD was) (ADJP (ADJP (JJ black)) (CC and) (ADJP (RB very) (JJ fat)))) (. .)))', 'lemma': [(u'Winston', u'Winston', u'NNP'), (u'was', u'be', u'VBD'), (u'black', u'black', u'JJ'), (u'and', u'and', u'CC'), (u'very', u'very', u'RB'), (u'fat', u'fat', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Winston', 'was', 'black', 'and', 'very', 'fat', '.']}, {'string': ' They were very happy rabbits who loved to eat.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (NP (NP (ADJP (RB very) (JJ happy)) (NNS rabbits)) (SBAR (WHNP (WP who)) (S (VP (VBD loved) (S (VP (TO to) (VP (VB eat))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'happy', u'happy', u'JJ'), (u'rabbits', u'rabbit', u'NNS'), (u'who', u'who', u'WP'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'very', 'happy', 'rabbits', 'who', 'loved', 'to', 'eat', '.']}, {'string': ' Every day they would leave their home, cross a road, and go through a small forest to get to a meadow of grass.', 'parse': {'tree': '(ROOT (S (NP (DT Every) (NN day)) (NP (PRP they)) (VP (MD would) (VP (VP (VB leave) (NP (PRP$ their) (NN home))) (, ,) (VP (VB cross) (NP (DT a) (NN road))) (, ,) (CC and) (VP (VB go) (PP (IN through) (NP (DT a) (JJ small) (NN forest))) (S (VP (TO to) (VP (VB get) (PP (TO to) (NP (NP (DT a) (NN meadow)) (PP (IN of) (NP (NN grass))))))))))) (. .)))', 'lemma': [(u'Every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'leave', u'leave', u'VB'), (u'their', u'they', u'PRP$'), (u'home', u'home', u'NN'), (u',', u',', u','), (u'cross', u'cross', u'VB'), (u'a', u'a', u'DT'), (u'road', u'road', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'go', u'go', u'VB'), (u'through', u'through', u'IN'), (u'a', u'a', u'DT'), (u'small', u'small', u'JJ'), (u'forest', u'forest', u'NN'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'to', u'to', u'TO'), (u'a', u'a', u'DT'), (u'meadow', u'meadow', u'NN'), (u'of', u'of', u'IN'), (u'grass', u'grass', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Every', 'day', 'they', 'would', 'leave', 'their', 'home', ',', 'cross', 'a', 'road', ',', 'and', 'go', 'through', 'a', 'small', 'forest', 'to', 'get', 'to', 'a', 'meadow', 'of', 'grass', '.']}, {'string': ' They loved to eat that grass.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD loved) (S (VP (TO to) (VP (VB eat) (NP (DT that) (NN grass)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'that', u'that', u'DT'), (u'grass', u'grass', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'loved', 'to', 'eat', 'that', 'grass', '.']}, {'string': ' One day, Chester thought he smelled something interesting.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (, ,) (NP (NNP Chester)) (VP (VBD thought) (SBAR (S (NP (PRP he)) (VP (VBD smelled) (S (NP (NN something)) (ADJP (JJ interesting))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'Chester', u'Chester', u'NNP'), (u'thought', u'think', u'VBD'), (u'he', u'he', u'PRP'), (u'smelled', u'smell', u'VBD'), (u'something', u'something', u'NN'), (u'interesting', u'interesting', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', ',', 'Chester', 'thought', 'he', 'smelled', 'something', 'interesting', '.']}, {'string': ' At first he thought it might be dirt.', 'parse': {'tree': '(ROOT (S (PP (IN At) (NP (JJ first))) (NP (PRP he)) (VP (VBD thought) (SBAR (S (NP (PRP it)) (VP (MD might) (VP (VB be) (NP (NN dirt))))))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'first', u'first', u'JJ'), (u'he', u'he', u'PRP'), (u'thought', u'think', u'VBD'), (u'it', u'it', u'PRP'), (u'might', u'might', u'MD'), (u'be', u'be', u'VB'), (u'dirt', u'dirt', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'first', 'he', 'thought', 'it', 'might', 'be', 'dirt', '.']}, {'string': ' Then he thought maybe some sort of flower.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP he)) (VP (VBD thought) (NP (NP (RB maybe) (DT some) (NN sort)) (PP (IN of) (NP (NN flower))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'he', u'he', u'PRP'), (u'thought', u'think', u'VBD'), (u'maybe', u'maybe', u'RB'), (u'some', u'some', u'DT'), (u'sort', u'sort', u'NN'), (u'of', u'of', u'IN'), (u'flower', u'flower', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'he', 'thought', 'maybe', 'some', 'sort', 'of', 'flower', '.']}, {'string': ' So, he asked a nearby squirrel.', 'parse': {'tree': '(ROOT (S (ADVP (RB So)) (, ,) (NP (PRP he)) (VP (VBD asked) (NP (DT a) (JJ nearby) (NN squirrel))) (. .)))', 'lemma': [(u'So', u'so', u'RB'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'asked', u'ask', u'VBD'), (u'a', u'a', u'DT'), (u'nearby', u'nearby', u'JJ'), (u'squirrel', u'squirrel', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['So', ',', 'he', 'asked', 'a', 'nearby', 'squirrel', '.']}, {'string': " The squirrel 's name was Acorn.", 'parse': {'tree': "(ROOT (S (NP (NP (DT The) (NN squirrel) (POS 's)) (NN name)) (VP (VBD was) (ADJP (JJ Acorn))) (. .)))", 'lemma': [(u'The', u'the', u'DT'), (u'squirrel', u'squirrel', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Acorn', u'acorn', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'squirrel', "'s", 'name', 'was', 'Acorn', '.']}, {'string': ' Acorn said that he thought it was mushrooms.', 'parse': {'tree': '(ROOT (S (NP (NNP Acorn)) (VP (VBD said) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD thought) (SBAR (S (NP (PRP it)) (VP (VBD was) (NP (NNS mushrooms))))))))) (. .)))', 'lemma': [(u'Acorn', u'Acorn', u'NNP'), (u'said', u'say', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'thought', u'think', u'VBD'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'mushrooms', u'mushroom', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Acorn', 'said', 'that', 'he', 'thought', 'it', 'was', 'mushrooms', '.']}, {'string': ' However, Francis, the smartest rabbit, went to go look, and he learned that it was actually a garden of carrots.', 'parse': {'tree': '(ROOT (S (ADVP (RB However)) (, ,) (S (NP (NP (NNP Francis)) (, ,) (NP (DT the) (JJS smartest) (NN rabbit)) (, ,)) (VP (VBD went) (S (VP (TO to) (VP (VB go) (NP (NN look))))))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD learned) (SBAR (IN that) (S (NP (PRP it)) (VP (VBD was) (ADVP (RB actually)) (NP (NP (DT a) (NN garden)) (PP (IN of) (NP (NNS carrots))))))))) (. .)))', 'lemma': [(u'However', u'however', u'RB'), (u',', u',', u','), (u'Francis', u'Francis', u'NNP'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'smartest', u'smartest', u'JJS'), (u'rabbit', u'rabbit', u'NN'), (u',', u',', u','), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'look', u'look', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'learned', u'learn', u'VBD'), (u'that', u'that', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'actually', u'actually', u'RB'), (u'a', u'a', u'DT'), (u'garden', u'garden', u'NN'), (u'of', u'of', u'IN'), (u'carrots', u'carrot', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['However', ',', 'Francis', ',', 'the', 'smartest', 'rabbit', ',', 'went', 'to', 'go', 'look', ',', 'and', 'he', 'learned', 'that', 'it', 'was', 'actually', 'a', 'garden', 'of', 'carrots', '.']}, {'string': ' The rabbits were all excited.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS rabbits)) (VP (VBD were) (RB all) (ADJP (JJ excited))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'rabbits', u'rabbit', u'NNS'), (u'were', u'be', u'VBD'), (u'all', u'all', u'RB'), (u'excited', u'excited', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'rabbits', 'were', 'all', 'excited', '.']}, {'string': ' They all loved carrots!', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (DT all)) (VP (VBD loved) (NP (NNS carrots))) (. !)))', 'lemma': [(u'They', u'they', u'PRP'), (u'all', u'all', u'DT'), (u'loved', u'love', u'VBD'), (u'carrots', u'carrot', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['They', 'all', 'loved', 'carrots', '!']}, {'string': ' They ate all the carrots.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD ate) (NP (PDT all) (DT the) (NNS carrots))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'ate', u'eat', u'VBD'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'carrots', u'carrot', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'ate', 'all', 'the', 'carrots', '.']}], 'questions': [{'question': {'string': ' What was the interesting smell?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (DT the) (JJ interesting) (NN smell))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'interesting', u'interesting', u'JJ'), (u'smell', u'smell', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'interesting', 'smell', '?']}, 'answers': [{'string': ' Carrots', 'parse': {'tree': '(ROOT (NP (NNS Carrots)))', 'lemma': [(u'Carrots', u'carrot', u'NNS')]}, 'tokens': ['Carrots']}, {'string': ' A flower', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (NN flower))))', 'lemma': [(u'A', u'a', u'DT'), (u'flower', u'flower', u'NN')]}, 'tokens': ['A', 'flower']}, {'string': ' Mushrooms', 'parse': {'tree': '(ROOT (NP (NNS Mushrooms)))', 'lemma': [(u'Mushrooms', u'mushroom', u'NNS')]}, 'tokens': ['Mushrooms']}, {'string': ' Dirt', 'parse': {'tree': '(ROOT (NP (NNP Dirt)))', 'lemma': [(u'Dirt', u'Dirt', u'NNP')]}, 'tokens': ['Dirt']}], 'mode': 0}, {'question': {'string': ' What color is Winston?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBZ is) (NP (NNP Winston))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'is', u'be', u'VBZ'), (u'Winston', u'Winston', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'is', 'Winston', '?']}, 'answers': [{'string': ' White', 'parse': {'tree': '(ROOT (NP (NNP White)))', 'lemma': [(u'White', u'White', u'NNP')]}, 'tokens': ['White']}, {'string': ' Black', 'parse': {'tree': '(ROOT (NP (NNP Black)))', 'lemma': [(u'Black', u'Black', u'NNP')]}, 'tokens': ['Black']}, {'string': ' Brown', 'parse': {'tree': '(ROOT (NP (NNP Brown)))', 'lemma': [(u'Brown', u'Brown', u'NNP')]}, 'tokens': ['Brown']}, {'string': ' Grey', 'parse': {'tree': '(ROOT (NP (NNP Grey)))', 'lemma': [(u'Grey', u'Grey', u'NNP')]}, 'tokens': ['Grey']}], 'mode': 1}, {'question': {'string': ' Who smelled something interesting?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD smelled) (S (NP (NN something)) (ADJP (JJ interesting))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'smelled', u'smell', u'VBD'), (u'something', u'something', u'NN'), (u'interesting', u'interesting', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'smelled', 'something', 'interesting', '?']}, 'answers': [{'string': ' Francis', 'parse': {'tree': '(ROOT (NP (NNP Francis)))', 'lemma': [(u'Francis', u'Francis', u'NNP')]}, 'tokens': ['Francis']}, {'string': ' Winston', 'parse': {'tree': '(ROOT (NP (NNP Winston)))', 'lemma': [(u'Winston', u'Winston', u'NNP')]}, 'tokens': ['Winston']}, {'string': ' Chester', 'parse': {'tree': '(ROOT (NP (NNP Chester)))', 'lemma': [(u'Chester', u'Chester', u'NNP')]}, 'tokens': ['Chester']}, {'string': ' Acorn', 'parse': {'tree': '(ROOT (NP (NNP Acorn)))', 'lemma': [(u'Acorn', u'Acorn', u'NNP')]}, 'tokens': ['Acorn']}], 'mode': 1}, {'question': {'string': ' Where did the rabbits go to eat everyday?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (DT the) (NNS rabbits)) (VP (VB go) (S (VP (TO to) (VP (VB eat) (NP (NN everyday))))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'rabbits', u'rabbit', u'NNS'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'everyday', u'everyday', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'the', 'rabbits', 'go', 'to', 'eat', 'everyday', '?']}, 'answers': [{'string': ' The meadow', 'parse': {'tree': '(ROOT (X (DT The) (ADJP (JJ meadow))))', 'lemma': [(u'The', u'the', u'DT'), (u'meadow', u'meadow', u'JJ')]}, 'tokens': ['The', 'meadow']}, {'string': ' A forest', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (NN forest))))', 'lemma': [(u'A', u'a', u'DT'), (u'forest', u'forest', u'NN')]}, 'tokens': ['A', 'forest']}, {'string': ' Their home', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ Their) (NN home))))', 'lemma': [(u'Their', u'they', u'PRP$'), (u'home', u'home', u'NN')]}, 'tokens': ['Their', 'home']}, {'string': ' A road', 'parse': {'tree': '(ROOT (FRAG (NP (DT A) (NN road))))', 'lemma': [(u'A', u'a', u'DT'), (u'road', u'road', u'NN')]}, 'tokens': ['A', 'road']}], 'mode': 0}]}
{'sentences': [{'string': ' Late in the evening, the wind blew hard around the little house.', 'parse': {'tree': '(ROOT (S (ADVP (RB Late) (PP (IN in) (NP (DT the) (NN evening)))) (, ,) (NP (DT the) (NN wind)) (VP (VBD blew) (ADVP (RB hard)) (PP (IN around) (NP (DT the) (JJ little) (NN house)))) (. .)))', 'lemma': [(u'Late', u'late', u'RB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'evening', u'evening', u'NN'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'wind', u'wind', u'NN'), (u'blew', u'blow', u'VBD'), (u'hard', u'hard', u'RB'), (u'around', u'around', u'IN'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Late', 'in', 'the', 'evening', ',', 'the', 'wind', 'blew', 'hard', 'around', 'the', 'little', 'house', '.']}, {'string': ' The sound of the wind is like someone crying.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (NN sound)) (PP (IN of) (NP (DT the) (NN wind)))) (VP (VBZ is) (PP (IN like) (NP (NN someone) (NNS crying)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'sound', u'sound', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'wind', u'wind', u'NN'), (u'is', u'be', u'VBZ'), (u'like', u'like', u'IN'), (u'someone', u'someone', u'NN'), (u'crying', u'crying', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'sound', 'of', 'the', 'wind', 'is', 'like', 'someone', 'crying', '.']}, {'string': ' It made the old woman nervous.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD made) (S (NP (DT the) (JJ old) (NN woman)) (ADJP (JJ nervous)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'made', u'make', u'VBD'), (u'the', u'the', u'DT'), (u'old', u'old', u'JJ'), (u'woman', u'woman', u'NN'), (u'nervous', u'nervous', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'made', 'the', 'old', 'woman', 'nervous', '.']}, {'string': " She had not been getting much sleep lately, but with the wind making the spooky noise, she did n't know what else to do but lie down and try to rest a little.", 'parse': {'tree': "(ROOT (S (S (NP (PRP She)) (VP (VBD had) (RB not) (VP (VBN been) (VP (VBG getting) (NP (JJ much) (NN sleep)) (ADVP (RB lately)))))) (, ,) (CC but) (S (PP (IN with) (S (NP (DT the) (NN wind)) (VP (VBG making) (NP (DT the) (JJ spooky) (NN noise))))) (, ,) (NP (PRP she)) (VP (VBD did) (RB n't) (VP (VB know) (S (NP (WDT what)) (ADJP (RB else)) (S (VP (TO to) (VP (VB do) (S (VP (CC but) (VP (VB lie) (PRT (RP down))) (CC and) (VP (VB try) (PP (TO to) (NP (NN rest)))))) (NP (DT a) (JJ little))))))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'not', u'not', u'RB'), (u'been', u'be', u'VBN'), (u'getting', u'get', u'VBG'), (u'much', u'much', u'JJ'), (u'sleep', u'sleep', u'NN'), (u'lately', u'lately', u'RB'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'wind', u'wind', u'NN'), (u'making', u'make', u'VBG'), (u'the', u'the', u'DT'), (u'spooky', u'spooky', u'JJ'), (u'noise', u'noise', u'NN'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'know', u'know', u'VB'), (u'what', u'what', u'WDT'), (u'else', u'else', u'RB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'but', u'but', u'CC'), (u'lie', u'lie', u'VB'), (u'down', u'down', u'RP'), (u'and', u'and', u'CC'), (u'try', u'try', u'VB'), (u'to', u'to', u'TO'), (u'rest', u'rest', u'NN'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'had', 'not', 'been', 'getting', 'much', 'sleep', 'lately', ',', 'but', 'with', 'the', 'wind', 'making', 'the', 'spooky', 'noise', ',', 'she', 'did', "n't", 'know', 'what', 'else', 'to', 'do', 'but', 'lie', 'down', 'and', 'try', 'to', 'rest', 'a', 'little', '.']}, {'string': ' Once she lay down to try to sleep, many memories of her life in the little house kept her mind busy.', 'parse': {'tree': '(ROOT (S (SBAR (IN Once) (S (NP (PRP she)) (VP (VBD lay) (PRT (RP down)) (S (VP (TO to) (VP (VB try) (S (VP (TO to) (VP (VB sleep)))))))))) (, ,) (NP (NP (JJ many) (NNS memories)) (PP (IN of) (NP (NP (PRP$ her) (NN life)) (PP (IN in) (NP (DT the) (JJ little) (NN house)))))) (VP (VBD kept) (S (NP (PRP$ her) (NN mind)) (ADJP (JJ busy)))) (. .)))', 'lemma': [(u'Once', u'once', u'IN'), (u'she', u'she', u'PRP'), (u'lay', u'lay', u'VBD'), (u'down', u'down', u'RP'), (u'to', u'to', u'TO'), (u'try', u'try', u'VB'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u',', u',', u','), (u'many', u'many', u'JJ'), (u'memories', u'memory', u'NNS'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'life', u'life', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'house', u'house', u'NN'), (u'kept', u'keep', u'VBD'), (u'her', u'she', u'PRP$'), (u'mind', u'mind', u'NN'), (u'busy', u'busy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Once', 'she', 'lay', 'down', 'to', 'try', 'to', 'sleep', ',', 'many', 'memories', 'of', 'her', 'life', 'in', 'the', 'little', 'house', 'kept', 'her', 'mind', 'busy', '.']}, {'string': ' She still was having trouble falling asleep.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (ADVP (RB still)) (VP (VBD was) (VP (VBG having) (NP (NN trouble)) (S (VP (VBG falling) (ADJP (RB asleep)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'still', u'still', u'RB'), (u'was', u'be', u'VBD'), (u'having', u'have', u'VBG'), (u'trouble', u'trouble', u'NN'), (u'falling', u'fall', u'VBG'), (u'asleep', u'asleep', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'still', 'was', 'having', 'trouble', 'falling', 'asleep', '.']}, {'string': ' She remembered being a little girl and her dad putting the finishing touches on the house.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD remembered) (S (VP (VBG being) (NP (NP (DT a) (JJ little) (NN girl)) (CC and) (NP (NP (PRP$ her) (NN dad)) (VP (VBG putting) (NP (DT the) (VBG finishing) (NNS touches)) (PP (IN on) (NP (DT the) (NN house))))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'remembered', u'remember', u'VBD'), (u'being', u'be', u'VBG'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'girl', u'girl', u'NN'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'dad', u'dad', u'NN'), (u'putting', u'put', u'VBG'), (u'the', u'the', u'DT'), (u'finishing', u'finish', u'VBG'), (u'touches', u'touch', u'NNS'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'remembered', 'being', 'a', 'little', 'girl', 'and', 'her', 'dad', 'putting', 'the', 'finishing', 'touches', 'on', 'the', 'house', '.']}, {'string': ' Her mom loved the big kitchen, and she and her younger sister had their own room in the back.', 'parse': {'tree': '(ROOT (S (S (NP (PRP$ Her) (NN mom)) (VP (VBD loved) (NP (DT the) (JJ big) (NN kitchen)))) (, ,) (CC and) (S (NP (NP (PRP she)) (CC and) (NP (PRP$ her) (JJR younger) (NN sister))) (VP (VBD had) (NP (NP (PRP$ their) (JJ own) (NN room)) (PP (IN in) (NP (DT the) (NN back)))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'mom', u'mom', u'NN'), (u'loved', u'love', u'VBD'), (u'the', u'the', u'DT'), (u'big', u'big', u'JJ'), (u'kitchen', u'kitchen', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'she', u'she', u'PRP'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'younger', u'younger', u'JJR'), (u'sister', u'sister', u'NN'), (u'had', u'have', u'VBD'), (u'their', u'they', u'PRP$'), (u'own', u'own', u'JJ'), (u'room', u'room', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'back', u'back', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'mom', 'loved', 'the', 'big', 'kitchen', ',', 'and', 'she', 'and', 'her', 'younger', 'sister', 'had', 'their', 'own', 'room', 'in', 'the', 'back', '.']}, {'string': ' It was in this, her old bedroom, that she was trying to sleep.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (PP (IN in) (NP (NP (DT this)) (, ,) (NP (PRP$ her) (JJ old) (NN bedroom)) (, ,))) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD was) (VP (VBG trying) (S (VP (TO to) (VP (VB sleep))))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'in', u'in', u'IN'), (u'this', u'this', u'DT'), (u',', u',', u','), (u'her', u'she', u'PRP$'), (u'old', u'old', u'JJ'), (u'bedroom', u'bedroom', u'NN'), (u',', u',', u','), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'trying', u'try', u'VBG'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'in', 'this', ',', 'her', 'old', 'bedroom', ',', 'that', 'she', 'was', 'trying', 'to', 'sleep', '.']}, {'string': ' The crying sound got louder.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ crying) (NN sound)) (VP (VBD got) (ADVP (RBR louder))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'crying', u'crying', u'JJ'), (u'sound', u'sound', u'NN'), (u'got', u'get', u'VBD'), (u'louder', u'louder', u'RBR'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'crying', 'sound', 'got', 'louder', '.']}, {'string': " It did n't seem like it was outside.", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (VBD did) (RB n't) (VP (VB seem) (SBAR (IN like) (S (NP (PRP it)) (VP (VBD was) (ADVP (RB outside))))))) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'seem', u'seem', u'VB'), (u'like', u'like', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'outside', u'outside', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'did', "n't", 'seem', 'like', 'it', 'was', 'outside', '.']}, {'string': ' It sounded like it was coming from the other side of the bed.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD sounded) (SBAR (IN like) (S (NP (PRP it)) (VP (VBD was) (VP (VBG coming) (PP (IN from) (NP (NP (DT the) (JJ other) (NN side)) (PP (IN of) (NP (DT the) (NN bed)))))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'sounded', u'sound', u'VBD'), (u'like', u'like', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'coming', u'come', u'VBG'), (u'from', u'from', u'IN'), (u'the', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'side', u'side', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'bed', u'bed', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'sounded', 'like', 'it', 'was', 'coming', 'from', 'the', 'other', 'side', 'of', 'the', 'bed', '.']}, {'string': ' When she turned and looked, she saw her younger sister.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP she)) (VP (VP (VBD turned)) (CC and) (VP (VBD looked))))) (, ,) (NP (PRP she)) (VP (VBD saw) (NP (PRP$ her) (JJ younger) (NN sister))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'she', u'she', u'PRP'), (u'turned', u'turn', u'VBD'), (u'and', u'and', u'CC'), (u'looked', u'look', u'VBD'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'saw', u'see', u'VBD'), (u'her', u'she', u'PRP$'), (u'younger', u'younger', u'JJ'), (u'sister', u'sister', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'she', 'turned', 'and', 'looked', ',', 'she', 'saw', 'her', 'younger', 'sister', '.']}, {'string': ' She still looked five years old.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (ADVP (RB still)) (VP (VBD looked) (ADJP (NP (CD five) (NNS years)) (JJ old))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'still', u'still', u'RB'), (u'looked', u'look', u'VBD'), (u'five', u'five', u'CD'), (u'years', u'year', u'NNS'), (u'old', u'old', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'still', 'looked', 'five', 'years', 'old', '.']}, {'string': " The old woman could n't remember her any other way, as she had died from a sickness at age five.", 'parse': {'tree': "(ROOT (S (NP (DT The) (JJ old) (NN woman)) (VP (MD could) (RB n't) (VP (VB remember) (NP (PRP her)) (NP (NP (DT any) (JJ other) (NN way)) (, ,) (SBAR (IN as) (S (NP (PRP she)) (VP (VBD had) (VP (VBN died) (PP (IN from) (NP (NP (DT a) (NN sickness)) (PP (IN at) (NP (NN age) (CD five)))))))))))) (. .)))", 'lemma': [(u'The', u'the', u'DT'), (u'old', u'old', u'JJ'), (u'woman', u'woman', u'NN'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'remember', u'remember', u'VB'), (u'her', u'she', u'PRP'), (u'any', u'any', u'DT'), (u'other', u'other', u'JJ'), (u'way', u'way', u'NN'), (u',', u',', u','), (u'as', u'as', u'IN'), (u'she', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'died', u'die', u'VBN'), (u'from', u'from', u'IN'), (u'a', u'a', u'DT'), (u'sickness', u'sickness', u'NN'), (u'at', u'at', u'IN'), (u'age', u'age', u'NN'), (u'five', u'five', u'CD'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'old', 'woman', 'could', "n't", 'remember', 'her', 'any', 'other', 'way', ',', 'as', 'she', 'had', 'died', 'from', 'a', 'sickness', 'at', 'age', 'five', '.']}, {'string': " `` What 's wrong? ''", 'parse': {'tree': "(ROOT (SBARQ (`` ``) (WHNP (WP What)) (SQ (VBZ 's) (ADJP (JJ wrong))) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'What', u'what', u'WP'), (u"'s", u'be', u'VBZ'), (u'wrong', u'wrong', u'JJ'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'What', "'s", 'wrong', '?', "''"]}, {'string': ' she asked her sister.', 'parse': {'tree': '(ROOT (S (NP (PRP she)) (VP (VBD asked) (NP (PRP$ her) (NN sister))) (. .)))', 'lemma': [(u'she', u'she', u'PRP'), (u'asked', u'ask', u'VBD'), (u'her', u'she', u'PRP$'), (u'sister', u'sister', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['she', 'asked', 'her', 'sister', '.']}, {'string': ' `` I miss you.', 'parse': {'tree': '(ROOT (S (`` ``) (NP (PRP I)) (VP (VBP miss) (NP (PRP you))) (. .)))', 'lemma': [(u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'miss', u'miss', u'VBP'), (u'you', u'you', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'I', 'miss', 'you', '.']}, {'string': " I am so lonely, '' answered the little girl, who was so thin you could see through her.", 'parse': {'tree': "(ROOT (SINV (S (NP (PRP I)) (VP (VBP am) (ADJP (RB so) (JJ lonely)))) (, ,) ('' '') (VP (VBD answered)) (NP (NP (DT the) (JJ little) (NN girl)) (, ,) (SBAR (WHNP (WP who)) (S (VP (VBD was) (ADJP (RB so) (JJ thin) (SBAR (S (NP (PRP you)) (VP (MD could) (VP (VB see) (PP (IN through) (NP (PRP her)))))))))))) (. .)))", 'lemma': [(u'I', u'I', u'PRP'), (u'am', u'be', u'VBP'), (u'so', u'so', u'RB'), (u'lonely', u'lonely', u'JJ'), (u',', u',', u','), (u"''", u"''", u"''"), (u'answered', u'answer', u'VBD'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'girl', u'girl', u'NN'), (u',', u',', u','), (u'who', u'who', u'WP'), (u'was', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'thin', u'thin', u'JJ'), (u'you', u'you', u'PRP'), (u'could', u'could', u'MD'), (u'see', u'see', u'VB'), (u'through', u'through', u'IN'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'am', 'so', 'lonely', ',', "''", 'answered', 'the', 'little', 'girl', ',', 'who', 'was', 'so', 'thin', 'you', 'could', 'see', 'through', 'her', '.']}, {'string': ' The old lady closed her eyes and reached for her sister.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ old) (NN lady)) (VP (VP (VBD closed) (NP (PRP$ her) (NNS eyes))) (CC and) (VP (VBD reached) (PP (IN for) (NP (PRP$ her) (NN sister))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'old', u'old', u'JJ'), (u'lady', u'lady', u'NN'), (u'closed', u'close', u'VBD'), (u'her', u'she', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'and', u'and', u'CC'), (u'reached', u'reach', u'VBD'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'sister', u'sister', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'old', 'lady', 'closed', 'her', 'eyes', 'and', 'reached', 'for', 'her', 'sister', '.']}, {'string': ' That is how they found her the next day, holding her pillow and smiling.', 'parse': {'tree': '(ROOT (S (NP (DT That)) (VP (VBZ is) (SBAR (WHADVP (WRB how)) (S (NP (PRP they)) (VP (VBD found) (NP (PRP her)) (NP (DT the) (JJ next) (NN day)) (, ,) (S (VP (VP (VBG holding) (NP (PRP$ her) (NN pillow))) (CC and) (VP (VBG smiling)))))))) (. .)))', 'lemma': [(u'That', u'that', u'DT'), (u'is', u'be', u'VBZ'), (u'how', u'how', u'WRB'), (u'they', u'they', u'PRP'), (u'found', u'find', u'VBD'), (u'her', u'she', u'PRP'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'holding', u'hold', u'VBG'), (u'her', u'she', u'PRP$'), (u'pillow', u'pillow', u'NN'), (u'and', u'and', u'CC'), (u'smiling', u'smile', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['That', 'is', 'how', 'they', 'found', 'her', 'the', 'next', 'day', ',', 'holding', 'her', 'pillow', 'and', 'smiling', '.']}, {'string': " `` She died in her sleep. ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP She)) (VP (VBD died) (PP (IN in) (NP (PRP$ her) (NN sleep)))) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'She', u'she', u'PRP'), (u'died', u'die', u'VBD'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'sleep', u'sleep', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'She', 'died', 'in', 'her', 'sleep', '.', "''"]}, {'string': " `` It is best that way. ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP It)) (VP (VBZ is) (NP (NP (JJS best)) (NP (DT that) (NN way)))) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'best', u'best', u'JJS'), (u'that', u'that', u'DT'), (u'way', u'way', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'It', 'is', 'best', 'that', 'way', '.', "''"]}], 'questions': [{'question': {'string': ' What made the old woman nervous?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD made) (S (NP (DT the) (JJ old) (NN woman)) (ADJP (JJ nervous))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'made', u'make', u'VBD'), (u'the', u'the', u'DT'), (u'old', u'old', u'JJ'), (u'woman', u'woman', u'NN'), (u'nervous', u'nervous', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'made', 'the', 'old', 'woman', 'nervous', '?']}, 'answers': [{'string': ' the sound of the wind', 'parse': {'tree': '(ROOT (NP (NP (DT the) (NN sound)) (PP (IN of) (NP (DT the) (NN wind)))))', 'lemma': [(u'the', u'the', u'DT'), (u'sound', u'sound', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'wind', u'wind', u'NN')]}, 'tokens': ['the', 'sound', 'of', 'the', 'wind']}, {'string': ' ghosts', 'parse': {'tree': '(ROOT (NP (NNS ghosts)))', 'lemma': [(u'ghosts', u'ghost', u'NNS')]}, 'tokens': ['ghosts']}, {'string': ' cats', 'parse': {'tree': '(ROOT (NP (NNS cats)))', 'lemma': [(u'cats', u'cat', u'NNS')]}, 'tokens': ['cats']}, {'string': ' snakes', 'parse': {'tree': '(ROOT (NP (NNS snakes)))', 'lemma': [(u'snakes', u'snake', u'NNS')]}, 'tokens': ['snakes']}], 'mode': 0}, {'question': {'string': ' What was blowing outside the house?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (VP (VBG blowing) (PP (IN outside) (NP (DT the) (NN house))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'blowing', u'blow', u'VBG'), (u'outside', u'outside', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'blowing', 'outside', 'the', 'house', '?']}, 'answers': [{'string': ' bubbles', 'parse': {'tree': '(ROOT (NP (NNS bubbles)))', 'lemma': [(u'bubbles', u'bubble', u'NNS')]}, 'tokens': ['bubbles']}, {'string': ' a storm', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN storm))))', 'lemma': [(u'a', u'a', u'DT'), (u'storm', u'storm', u'NN')]}, 'tokens': ['a', 'storm']}, {'string': ' the wind', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN wind))))', 'lemma': [(u'the', u'the', u'DT'), (u'wind', u'wind', u'NN')]}, 'tokens': ['the', 'wind']}, {'string': ' clouds', 'parse': {'tree': '(ROOT (NP (NNS clouds)))', 'lemma': [(u'clouds', u'cloud', u'NNS')]}, 'tokens': ['clouds']}], 'mode': 1}, {'question': {'string': ' Who still looked five years old?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (ADVP (RB still)) (VBD looked) (ADJP (NP (CD five) (NNS years)) (JJ old)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'still', u'still', u'RB'), (u'looked', u'look', u'VBD'), (u'five', u'five', u'CD'), (u'years', u'year', u'NNS'), (u'old', u'old', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'still', 'looked', 'five', 'years', 'old', '?']}, 'answers': [{'string': " the old woman 's little sister", 'parse': {'tree': "(ROOT (X (NP (NP (DT the) (JJ old) (NN woman) (POS 's)) (JJ little) (NN sister))))", 'lemma': [(u'the', u'the', u'DT'), (u'old', u'old', u'JJ'), (u'woman', u'woman', u'NN'), (u"'s", u"'s", u'POS'), (u'little', u'little', u'JJ'), (u'sister', u'sister', u'NN')]}, 'tokens': ['the', 'old', 'woman', "'s", 'little', 'sister']}, {'string': ' the house', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN house))))', 'lemma': [(u'the', u'the', u'DT'), (u'house', u'house', u'NN')]}, 'tokens': ['the', 'house']}, {'string': ' her mom and dad', 'parse': {'tree': '(ROOT (NP (NP (PRP$ her) (NN mom)) (CC and) (NP (NN dad))))', 'lemma': [(u'her', u'she', u'PRP$'), (u'mom', u'mom', u'NN'), (u'and', u'and', u'CC'), (u'dad', u'dad', u'NN')]}, 'tokens': ['her', 'mom', 'and', 'dad']}, {'string': ' the bed', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN bed))))', 'lemma': [(u'the', u'the', u'DT'), (u'bed', u'bed', u'NN')]}, 'tokens': ['the', 'bed']}], 'mode': 0}, {'question': {'string': ' Who did the younger sister miss?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (DT the) (JJ younger) (NN sister)) (VP (VB miss))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'younger', u'younger', u'JJ'), (u'sister', u'sister', u'NN'), (u'miss', u'miss', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'did', 'the', 'younger', 'sister', 'miss', '?']}, 'answers': [{'string': ' the wind', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN wind))))', 'lemma': [(u'the', u'the', u'DT'), (u'wind', u'wind', u'NN')]}, 'tokens': ['the', 'wind']}, {'string': ' the old woman', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (JJ old) (NN woman))))', 'lemma': [(u'the', u'the', u'DT'), (u'old', u'old', u'JJ'), (u'woman', u'woman', u'NN')]}, 'tokens': ['the', 'old', 'woman']}, {'string': ' her mom', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ her) (NN mom))))', 'lemma': [(u'her', u'she', u'PRP$'), (u'mom', u'mom', u'NN')]}, 'tokens': ['her', 'mom']}, {'string': ' her pet bunny', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ her) (JJ pet) (NN bunny))))', 'lemma': [(u'her', u'she', u'PRP$'), (u'pet', u'pet', u'JJ'), (u'bunny', u'bunny', u'NN')]}, 'tokens': ['her', 'pet', 'bunny']}], 'mode': 0}]}
{'sentences': [{'string': ' A little boy named Joey did not like to brush his teeth.', 'parse': {'tree': '(ROOT (S (NP (DT A) (JJ little) (NN boy)) (VP (VBD named) (SBAR (S (NP (NNP Joey)) (VP (VBD did) (RB not) (VP (VB like) (S (VP (TO to) (VP (VB brush) (NP (PRP$ his) (NNS teeth)))))))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'boy', u'boy', u'NN'), (u'named', u'name', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'brush', u'brush', u'VB'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'little', 'boy', 'named', 'Joey', 'did', 'not', 'like', 'to', 'brush', 'his', 'teeth', '.']}, {'string': " One day, as his mother asked him to brush his teeth, Joey said, `` I do n't want to!", 'parse': {'tree': "(ROOT (S (NP (CD One) (NN day)) (, ,) (SBAR (IN as) (S (NP (PRP$ his) (NN mother)) (VP (VBD asked) (S (NP (PRP him)) (VP (TO to) (VP (VB brush) (NP (PRP$ his) (NNS teeth)))))))) (, ,) (NP (NNP Joey)) (VP (VBD said) (, ,) (`` ``) (S (NP (PRP I)) (VP (VBP do) (RB n't) (VP (VB want) (PP (TO to)))))) (. !)))", 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'as', u'as', u'IN'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'asked', u'ask', u'VBD'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'brush', u'brush', u'VB'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u',', u',', u','), (u'Joey', u'Joey', u'NNP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'do', u'do', u'VBP'), (u"n't", u'not', u'RB'), (u'want', u'want', u'VB'), (u'to', u'to', u'TO'), (u'!', u'!', u'.')]}, 'tokens': ['One', 'day', ',', 'as', 'his', 'mother', 'asked', 'him', 'to', 'brush', 'his', 'teeth', ',', 'Joey', 'said', ',', '``', 'I', 'do', "n't", 'want', 'to', '!']}, {'string': " It 's gross and a waste of time! ''", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (VBZ 's) (NP (NP (JJ gross) (CC and) (DT a) (NN waste)) (PP (IN of) (NP (NN time))))) (. !) ('' '')))", 'lemma': [(u'It', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'gross', u'gross', u'JJ'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'waste', u'waste', u'NN'), (u'of', u'of', u'IN'), (u'time', u'time', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['It', "'s", 'gross', 'and', 'a', 'waste', 'of', 'time', '!', "''"]}, {'string': " In response, Joey 's mom told him that in order for him to grow up and be big and strong like she is, he must brush his teeth.", 'parse': {'tree': "(ROOT (S (PP (IN In) (NP (NN response))) (, ,) (NP (NP (NNP Joey) (POS 's)) (NN mom)) (VP (VBD told) (NP (PRP him)) (SBAR (IN that) (S (PP (IN in) (NP (NP (NN order)) (PP (IN for) (NP (PRP him))) (S (VP (TO to) (VP (VP (VB grow) (PRT (RP up))) (CC and) (VP (VB be) (ADJP (JJ big) (CC and) (JJ strong)) (SBAR (IN like) (S (NP (PRP she)) (VP (VBZ is)))))))))) (, ,) (NP (PRP he)) (VP (MD must) (VP (VB brush) (NP (PRP$ his) (NNS teeth))))))) (. .)))", 'lemma': [(u'In', u'in', u'IN'), (u'response', u'response', u'NN'), (u',', u',', u','), (u'Joey', u'Joey', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'told', u'tell', u'VBD'), (u'him', u'he', u'PRP'), (u'that', u'that', u'IN'), (u'in', u'in', u'IN'), (u'order', u'order', u'NN'), (u'for', u'for', u'IN'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'grow', u'grow', u'VB'), (u'up', u'up', u'RP'), (u'and', u'and', u'CC'), (u'be', u'be', u'VB'), (u'big', u'big', u'JJ'), (u'and', u'and', u'CC'), (u'strong', u'strong', u'JJ'), (u'like', u'like', u'IN'), (u'she', u'she', u'PRP'), (u'is', u'be', u'VBZ'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'must', u'must', u'MD'), (u'brush', u'brush', u'VB'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'response', ',', 'Joey', "'s", 'mom', 'told', 'him', 'that', 'in', 'order', 'for', 'him', 'to', 'grow', 'up', 'and', 'be', 'big', 'and', 'strong', 'like', 'she', 'is', ',', 'he', 'must', 'brush', 'his', 'teeth', '.']}, {'string': ' In disgust, with his mom watching to make sure he brushed his teeth right, he brushed his teeth and whined until he was finished.', 'parse': {'tree': '(ROOT (S (PP (IN In) (NP (NN disgust))) (, ,) (PP (IN with) (NP (NP (PRP$ his) (NN mom)) (VP (VBG watching) (S (VP (TO to) (VP (VB make) (ADJP (JJ sure) (SBAR (S (NP (PRP he)) (VP (VBD brushed) (NP (PRP$ his) (NNS teeth)) (ADVP (RB right)))))))))))) (, ,) (NP (PRP he)) (VP (VP (VBD brushed) (NP (PRP$ his) (NNS teeth))) (CC and) (VP (VBD whined) (SBAR (IN until) (S (NP (PRP he)) (VP (VBD was) (VP (VBN finished))))))) (. .)))', 'lemma': [(u'In', u'in', u'IN'), (u'disgust', u'disgust', u'NN'), (u',', u',', u','), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'watching', u'watch', u'VBG'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'sure', u'sure', u'JJ'), (u'he', u'he', u'PRP'), (u'brushed', u'brush', u'VBD'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'right', u'right', u'RB'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'brushed', u'brush', u'VBD'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'and', u'and', u'CC'), (u'whined', u'whine', u'VBD'), (u'until', u'until', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'finished', u'finish', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'disgust', ',', 'with', 'his', 'mom', 'watching', 'to', 'make', 'sure', 'he', 'brushed', 'his', 'teeth', 'right', ',', 'he', 'brushed', 'his', 'teeth', 'and', 'whined', 'until', 'he', 'was', 'finished', '.']}, {'string': ' The next day, Joey did not brush his teeth and told his mom that he did.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ next) (NN day)) (, ,) (NP (NNP Joey)) (VP (VP (VBD did) (RB not) (VP (VB brush) (NP (PRP$ his) (NNS teeth)))) (CC and) (VP (VBD told) (NP (PRP$ his) (NN mom)) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD did)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'Joey', u'Joey', u'NNP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'brush', u'brush', u'VB'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'and', u'and', u'CC'), (u'told', u'tell', u'VBD'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'next', 'day', ',', 'Joey', 'did', 'not', 'brush', 'his', 'teeth', 'and', 'told', 'his', 'mom', 'that', 'he', 'did', '.']}, {'string': " After going to school, one of Joey 's friends said that his breath stunk and began to make fun of him.", 'parse': {'tree': "(ROOT (S (PP (IN After) (S (VP (VBG going) (PP (TO to) (NP (NN school)))))) (, ,) (NP (NP (CD one)) (PP (IN of) (NP (NP (NNP Joey) (POS 's)) (NNS friends)))) (VP (VBD said) (SBAR (IN that) (S (NP (PRP$ his) (NN breath)) (VP (VP (VBP stunk)) (CC and) (VP (VBD began) (S (VP (TO to) (VP (VB make) (NP (NP (NN fun)) (PP (IN of) (NP (PRP him)))))))))))) (. .)))", 'lemma': [(u'After', u'after', u'IN'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'school', u'school', u'NN'), (u',', u',', u','), (u'one', u'one', u'CD'), (u'of', u'of', u'IN'), (u'Joey', u'Joey', u'NNP'), (u"'s", u"'s", u'POS'), (u'friends', u'friend', u'NNS'), (u'said', u'say', u'VBD'), (u'that', u'that', u'IN'), (u'his', u'he', u'PRP$'), (u'breath', u'breath', u'NN'), (u'stunk', u'stink', u'VBP'), (u'and', u'and', u'CC'), (u'began', u'begin', u'VBD'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'fun', u'fun', u'NN'), (u'of', u'of', u'IN'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'going', 'to', 'school', ',', 'one', 'of', 'Joey', "'s", 'friends', 'said', 'that', 'his', 'breath', 'stunk', 'and', 'began', 'to', 'make', 'fun', 'of', 'him', '.']}, {'string': ' This made Joey very angry, so he pushed the boy over and started to cry.', 'parse': {'tree': '(ROOT (S (S (NP (DT This)) (VP (VBD made) (S (NP (NNP Joey)) (ADJP (RB very) (JJ angry))))) (, ,) (IN so) (S (NP (PRP he)) (VP (VP (VBD pushed) (NP (DT the) (NN boy)) (PRT (RP over))) (CC and) (VP (VBD started) (S (VP (TO to) (VP (VB cry))))))) (. .)))', 'lemma': [(u'This', u'this', u'DT'), (u'made', u'make', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u'very', u'very', u'RB'), (u'angry', u'angry', u'JJ'), (u',', u',', u','), (u'so', u'so', u'IN'), (u'he', u'he', u'PRP'), (u'pushed', u'push', u'VBD'), (u'the', u'the', u'DT'), (u'boy', u'boy', u'NN'), (u'over', u'over', u'RP'), (u'and', u'and', u'CC'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'cry', u'cry', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['This', 'made', 'Joey', 'very', 'angry', ',', 'so', 'he', 'pushed', 'the', 'boy', 'over', 'and', 'started', 'to', 'cry', '.']}, {'string': ' A teacher came over and called the principal as both kids were being loud and starting a fight.', 'parse': {'tree': '(ROOT (S (NP (DT A) (NN teacher)) (VP (VP (VBD came) (PRT (RP over))) (CC and) (VP (VBD called) (NP (DT the) (NN principal)) (SBAR (IN as) (S (NP (DT both) (NNS kids)) (VP (VBD were) (VP (VP (VBG being) (ADJP (JJ loud))) (CC and) (VP (VBG starting) (NP (DT a) (NN fight))))))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'teacher', u'teacher', u'NN'), (u'came', u'come', u'VBD'), (u'over', u'over', u'RP'), (u'and', u'and', u'CC'), (u'called', u'call', u'VBD'), (u'the', u'the', u'DT'), (u'principal', u'principal', u'NN'), (u'as', u'as', u'IN'), (u'both', u'both', u'DT'), (u'kids', u'kid', u'NNS'), (u'were', u'be', u'VBD'), (u'being', u'be', u'VBG'), (u'loud', u'loud', u'JJ'), (u'and', u'and', u'CC'), (u'starting', u'start', u'VBG'), (u'a', u'a', u'DT'), (u'fight', u'fight', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'teacher', 'came', 'over', 'and', 'called', 'the', 'principal', 'as', 'both', 'kids', 'were', 'being', 'loud', 'and', 'starting', 'a', 'fight', '.']}, {'string': " Joey 's mom came to school and took him home.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Joey) (POS 's)) (NN mom)) (VP (VP (VBD came) (PP (TO to) (NP (NN school)))) (CC and) (VP (VBD took) (NP (PRP him)) (ADVP (RB home)))) (. .)))", 'lemma': [(u'Joey', u'Joey', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'came', u'come', u'VBD'), (u'to', u'to', u'TO'), (u'school', u'school', u'NN'), (u'and', u'and', u'CC'), (u'took', u'take', u'VBD'), (u'him', u'he', u'PRP'), (u'home', u'home', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Joey', "'s", 'mom', 'came', 'to', 'school', 'and', 'took', 'him', 'home', '.']}, {'string': " After asking what was wrong, Joey told his mom that he did n't brush his teeth.", 'parse': {'tree': "(ROOT (S (PP (IN After) (S (VP (VBG asking) (SBAR (WHNP (WP what)) (S (VP (VBD was) (ADJP (JJ wrong)))))))) (, ,) (NP (NNP Joey)) (VP (VBD told) (NP (PRP$ his) (NN mom)) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD did) (RB n't) (VP (VB brush) (NP (PRP$ his) (NNS teeth))))))) (. .)))", 'lemma': [(u'After', u'after', u'IN'), (u'asking', u'ask', u'VBG'), (u'what', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'wrong', u'wrong', u'JJ'), (u',', u',', u','), (u'Joey', u'Joey', u'NNP'), (u'told', u'tell', u'VBD'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'brush', u'brush', u'VB'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'asking', 'what', 'was', 'wrong', ',', 'Joey', 'told', 'his', 'mom', 'that', 'he', 'did', "n't", 'brush', 'his', 'teeth', '.']}, {'string': ' After hearing this, his mom marched him up to the bathroom and forced him to brush his teeth.', 'parse': {'tree': '(ROOT (S (PP (IN After) (S (VP (VBG hearing) (NP (DT this))))) (, ,) (NP (PRP$ his) (NN mom)) (VP (VP (VBD marched) (NP (PRP him)) (PRT (RP up)) (PP (TO to) (NP (DT the) (NN bathroom)))) (CC and) (VP (VBD forced) (S (NP (PRP him)) (VP (TO to) (VP (VB brush) (NP (PRP$ his) (NNS teeth))))))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'hearing', u'hear', u'VBG'), (u'this', u'this', u'DT'), (u',', u',', u','), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'marched', u'march', u'VBD'), (u'him', u'he', u'PRP'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'bathroom', u'bathroom', u'NN'), (u'and', u'and', u'CC'), (u'forced', u'force', u'VBD'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'brush', u'brush', u'VB'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'hearing', 'this', ',', 'his', 'mom', 'marched', 'him', 'up', 'to', 'the', 'bathroom', 'and', 'forced', 'him', 'to', 'brush', 'his', 'teeth', '.']}, {'string': " `` You wo n't get teased if you brush your teeth, Joey! ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP You)) (VP (MD wo) (RB n't) (VP (VB get) (VP (VBN teased) (SBAR (IN if) (S (NP (PRP you)) (VP (VB brush) (NP (NP (PRP$ your) (NNS teeth)) (, ,) (NP (NNP Joey))))))))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'You', u'you', u'PRP'), (u'wo', u'will', u'MD'), (u"n't", u'not', u'RB'), (u'get', u'get', u'VB'), (u'teased', u'tease', u'VBN'), (u'if', u'if', u'IN'), (u'you', u'you', u'PRP'), (u'brush', u'brush', u'VB'), (u'your', u'you', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u',', u',', u','), (u'Joey', u'Joey', u'NNP'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'You', 'wo', "n't", 'get', 'teased', 'if', 'you', 'brush', 'your', 'teeth', ',', 'Joey', '!', "''"]}, {'string': ' she yelled, and then left the room.', 'parse': {'tree': '(ROOT (S (NP (PRP she)) (VP (VP (VBD yelled)) (, ,) (CC and) (VP (ADVP (RB then)) (VBD left) (NP (DT the) (NN room)))) (. .)))', 'lemma': [(u'she', u'she', u'PRP'), (u'yelled', u'yell', u'VBD'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'left', u'leave', u'VBD'), (u'the', u'the', u'DT'), (u'room', u'room', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['she', 'yelled', ',', 'and', 'then', 'left', 'the', 'room', '.']}, {'string': " From that day forward, Joey brushed his teeth every day so the other kids would n't make fun of him.", 'parse': {'tree': "(ROOT (S (PP (IN From) (NP (DT that) (NN day))) (ADVP (RB forward)) (, ,) (NP (NNP Joey)) (VP (VBD brushed) (NP (PRP$ his) (NNS teeth)) (NP (DT every) (NN day)) (SBAR (IN so) (S (NP (DT the) (JJ other) (NNS kids)) (VP (MD would) (RB n't) (VP (VB make) (NP (NP (NN fun)) (PP (IN of) (NP (PRP him))))))))) (. .)))", 'lemma': [(u'From', u'from', u'IN'), (u'that', u'that', u'DT'), (u'day', u'day', u'NN'), (u'forward', u'forward', u'RB'), (u',', u',', u','), (u'Joey', u'Joey', u'NNP'), (u'brushed', u'brush', u'VBD'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'so', u'so', u'IN'), (u'the', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'kids', u'kid', u'NNS'), (u'would', u'would', u'MD'), (u"n't", u'not', u'RB'), (u'make', u'make', u'VB'), (u'fun', u'fun', u'NN'), (u'of', u'of', u'IN'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['From', 'that', 'day', 'forward', ',', 'Joey', 'brushed', 'his', 'teeth', 'every', 'day', 'so', 'the', 'other', 'kids', 'would', "n't", 'make', 'fun', 'of', 'him', '.']}], 'questions': [{'question': {'string': " What did Joey 's friend do?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NP (NNP Joey) (POS 's)) (NN friend)) (VP (VB do))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u"'s", u"'s", u'POS'), (u'friend', u'friend', u'NN'), (u'do', u'do', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Joey', "'s", 'friend', 'do', '?']}, 'answers': [{'string': ' He hugged Joey.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD hugged) (NP (NNP Joey))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'hugged', u'hug', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'hugged', 'Joey', '.']}, {'string': ' He kicked Joey.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD kicked) (NP (NNP Joey))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'kicked', u'kick', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'kicked', 'Joey', '.']}, {'string': ' He made fun of his stinky breath.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD made) (NP (NP (NN fun)) (PP (IN of) (NP (PRP$ his) (JJ stinky) (NN breath))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'made', u'make', u'VBD'), (u'fun', u'fun', u'NN'), (u'of', u'of', u'IN'), (u'his', u'he', u'PRP$'), (u'stinky', u'stinky', u'JJ'), (u'breath', u'breath', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'made', 'fun', 'of', 'his', 'stinky', 'breath', '.']}, {'string': ' He gave Joey a high-five.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD gave) (NP (NNP Joey)) (NP (DT a) (NN high-five))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'gave', u'give', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u'a', u'a', u'DT'), (u'high-five', u'high-five', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'gave', 'Joey', 'a', 'high-five', '.']}], 'mode': 1}, {'question': {'string': " What did Joey 's mom say would happen if he brushed his teeth every day?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NP (NNP Joey) (POS 's)) (NN mom)) (VP (VB say) (SBAR (S (VP (MD would) (VP (VB happen) (SBAR (IN if) (S (NP (PRP he)) (VP (VBD brushed) (NP (PRP$ his) (NNS teeth)) (NP (DT every) (NN day))))))))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'say', u'say', u'VB'), (u'would', u'would', u'MD'), (u'happen', u'happen', u'VB'), (u'if', u'if', u'IN'), (u'he', u'he', u'PRP'), (u'brushed', u'brush', u'VBD'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Joey', "'s", 'mom', 'say', 'would', 'happen', 'if', 'he', 'brushed', 'his', 'teeth', 'every', 'day', '?']}, 'answers': [{'string': ' He would get smarter.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (MD would) (VP (VB get) (ADVP (RBR smarter)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'get', u'get', u'VB'), (u'smarter', u'smarter', u'RBR'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'would', 'get', 'smarter', '.']}, {'string': ' He would grow up to be big and strong.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (MD would) (VP (VB grow) (PRT (RP up)) (S (VP (TO to) (VP (VB be) (ADJP (JJ big) (CC and) (JJ strong))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'grow', u'grow', u'VB'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'big', u'big', u'JJ'), (u'and', u'and', u'CC'), (u'strong', u'strong', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'would', 'grow', 'up', 'to', 'be', 'big', 'and', 'strong', '.']}, {'string': ' He would run faster.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (MD would) (VP (VB run) (ADVP (RBR faster)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'run', u'run', u'VB'), (u'faster', u'faster', u'RBR'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'would', 'run', 'faster', '.']}, {'string': ' He would get a treat.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (MD would) (VP (VB get) (NP (DT a) (NN treat)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'get', u'get', u'VB'), (u'a', u'a', u'DT'), (u'treat', u'treat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'would', 'get', 'a', 'treat', '.']}], 'mode': 0}, {'question': {'string': ' What did Joey do after his mom yelled at him?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Joey)) (VP (VB do) (SBAR (IN after) (S (NP (PRP$ his) (NN mom)) (VP (VBD yelled) (PP (IN at) (NP (PRP him)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u'do', u'do', u'VB'), (u'after', u'after', u'IN'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'yelled', u'yell', u'VBD'), (u'at', u'at', u'IN'), (u'him', u'he', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Joey', 'do', 'after', 'his', 'mom', 'yelled', 'at', 'him', '?']}, 'answers': [{'string': ' He stopped brushing his teeth.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD stopped) (S (VP (VBG brushing) (NP (PRP$ his) (NNS teeth))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'stopped', u'stop', u'VBD'), (u'brushing', u'brush', u'VBG'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'stopped', 'brushing', 'his', 'teeth', '.']}, {'string': " He did n't go back to school.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD did) (RB n't) (VP (VB go) (PRT (RP back)) (PP (TO to) (NP (NN school))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'go', u'go', u'VB'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'did', "n't", 'go', 'back', 'to', 'school', '.']}, {'string': ' He only brushed his teeth sometimes.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB only)) (VP (VBD brushed) (NP (PRP$ his) (NNS teeth)) (ADVP (RB sometimes))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'only', u'only', u'RB'), (u'brushed', u'brush', u'VBD'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'sometimes', u'sometimes', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'only', 'brushed', 'his', 'teeth', 'sometimes', '.']}, {'string': ' He brushed his teeth every day after that.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD brushed) (NP (PRP$ his) (NNS teeth)) (NP (DT every) (NN day)) (PP (IN after) (NP (DT that)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'brushed', u'brush', u'VBD'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'after', u'after', u'IN'), (u'that', u'that', u'DT'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'brushed', 'his', 'teeth', 'every', 'day', 'after', 'that', '.']}], 'mode': 0}, {'question': {'string': ' What did Joey not like to do?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Joey)) (ADVP (RB not)) (VP (VB like) (S (VP (TO to) (VP (VB do)))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u'not', u'not', u'RB'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Joey', 'not', 'like', 'to', 'do', '?']}, 'answers': [{'string': " He did n't like to go to school.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD did) (RB n't) (VP (VB like) (S (VP (TO to) (VP (VB go) (PP (TO to) (NP (NN school)))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'did', "n't", 'like', 'to', 'go', 'to', 'school', '.']}, {'string': " He did n't like to eat his breakfast.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD did) (RB n't) (VP (VB like) (S (VP (TO to) (VP (VB eat) (NP (PRP$ his) (NN breakfast))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'his', u'he', u'PRP$'), (u'breakfast', u'breakfast', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'did', "n't", 'like', 'to', 'eat', 'his', 'breakfast', '.']}, {'string': " He did n't like to brush his teeth.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD did) (RB n't) (VP (VB like) (S (VP (TO to) (VP (VB brush) (NP (PRP$ his) (NNS teeth))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'brush', u'brush', u'VB'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'did', "n't", 'like', 'to', 'brush', 'his', 'teeth', '.']}, {'string': " He did n't like his bedtime.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD did) (RB n't) (VP (VB like) (NP (PRP$ his) (NN bedtime)))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'his', u'he', u'PRP$'), (u'bedtime', u'bedtime', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'did', "n't", 'like', 'his', 'bedtime', '.']}], 'mode': 1}]}
{'sentences': [{'string': ' Bailey and her friend Kara were bored one Saturday.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Bailey)) (CC and) (NP (PRP$ her) (NN friend) (NN Kara))) (VP (VBD were) (ADJP (JJ bored) (NP (CD one))) (NP (NNP Saturday))) (. .)))', 'lemma': [(u'Bailey', u'Bailey', u'NNP'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'friend', u'friend', u'NN'), (u'Kara', u'kara', u'NN'), (u'were', u'be', u'VBD'), (u'bored', u'bored', u'JJ'), (u'one', u'one', u'CD'), (u'Saturday', u'Saturday', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Bailey', 'and', 'her', 'friend', 'Kara', 'were', 'bored', 'one', 'Saturday', '.']}, {'string': ' It was a hot summer day.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (DT a) (JJ hot) (NN summer) (NN day))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'hot', u'hot', u'JJ'), (u'summer', u'summer', u'NN'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'a', 'hot', 'summer', 'day', '.']}, {'string': " They did n't want to stay inside any longer but they did n't know what to do.", 'parse': {'tree': "(ROOT (S (S (NP (PRP They)) (VP (VBD did) (RB n't) (VP (VB want) (S (VP (TO to) (VP (VB stay) (ADVP (RB inside) (DT any) (RB longer)))))))) (CC but) (S (NP (PRP they)) (VP (VBD did) (RB n't) (VP (VB know) (SBAR (WHNP (WP what)) (S (VP (TO to) (VP (VB do)))))))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'want', u'want', u'VB'), (u'to', u'to', u'TO'), (u'stay', u'stay', u'VB'), (u'inside', u'inside', u'RB'), (u'any', u'any', u'DT'), (u'longer', u'longer', u'RB'), (u'but', u'but', u'CC'), (u'they', u'they', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'know', u'know', u'VB'), (u'what', u'what', u'WP'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'did', "n't", 'want', 'to', 'stay', 'inside', 'any', 'longer', 'but', 'they', 'did', "n't", 'know', 'what', 'to', 'do', '.']}, {'string': ' They were tired of watching TV inside.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (ADJP (JJ tired) (PP (IN of) (S (VP (VBG watching) (NP (NN TV)) (ADVP (RB inside))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'tired', u'tired', u'JJ'), (u'of', u'of', u'IN'), (u'watching', u'watch', u'VBG'), (u'TV', u'tv', u'NN'), (u'inside', u'inside', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'tired', 'of', 'watching', 'TV', 'inside', '.']}, {'string': ' Suddenly, Kara had an idea.', 'parse': {'tree': '(ROOT (S (ADVP (RB Suddenly)) (, ,) (NP (NNP Kara)) (VP (VBD had) (NP (DT an) (NN idea))) (. .)))', 'lemma': [(u'Suddenly', u'suddenly', u'RB'), (u',', u',', u','), (u'Kara', u'Kara', u'NNP'), (u'had', u'have', u'VBD'), (u'an', u'a', u'DT'), (u'idea', u'idea', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Suddenly', ',', 'Kara', 'had', 'an', 'idea', '.']}, {'string': " She said, `` Bailey, we could make some money. ''", 'parse': {'tree': "(ROOT (S (S (NP (PRP She)) (VP (VBD said) (, ,) (`` ``) (INTJ (UH Bailey)))) (, ,) (NP (PRP we)) (VP (MD could) (VP (VB make) (NP (DT some) (NN money)))) (. .) ('' '')))", 'lemma': [(u'She', u'she', u'PRP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Bailey', u'bailey', u'UH'), (u',', u',', u','), (u'we', u'we', u'PRP'), (u'could', u'could', u'MD'), (u'make', u'make', u'VB'), (u'some', u'some', u'DT'), (u'money', u'money', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['She', 'said', ',', '``', 'Bailey', ',', 'we', 'could', 'make', 'some', 'money', '.', "''"]}, {'string': ' `` How?', 'parse': {'tree': '(ROOT (FRAG (`` ``) (INTJ (UH How)) (. ?)))', 'lemma': [(u'``', u'``', u'``'), (u'How', u'how', u'UH'), (u'?', u'?', u'.')]}, 'tokens': ['``', 'How', '?']}, {'string': ", '' asked Bailey.", 'parse': {'tree': "(ROOT (S (S (VP (VBG ,) ('' ''))) (VP (VBD asked) (NP (NNP Bailey))) (. .)))", 'lemma': [(u',', u',', u'VBG'), (u"''", u"''", u"''"), (u'asked', u'ask', u'VBD'), (u'Bailey', u'Bailey', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': [',', "''", 'asked', 'Bailey', '.']}, {'string': " `` Well, it is hot outside, '' said Kara.", 'parse': {'tree': "(ROOT (SINV (`` ``) (S (ADVP (RB Well)) (, ,) (NP (PRP it)) (VP (VBZ is) (NP (JJ hot) (NN outside)))) (, ,) ('' '') (VP (VBD said)) (NP (NNP Kara)) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Well', u'well', u'RB'), (u',', u',', u','), (u'it', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'hot', u'hot', u'JJ'), (u'outside', u'outside', u'NN'), (u',', u',', u','), (u"''", u"''", u"''"), (u'said', u'say', u'VBD'), (u'Kara', u'Kara', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Well', ',', 'it', 'is', 'hot', 'outside', ',', "''", 'said', 'Kara', '.']}, {'string': ' `` People are thirsty out there.', 'parse': {'tree': '(ROOT (S (`` ``) (NP (NNS People)) (VP (VBP are) (VP (VBG thirsty) (PRT (RP out)) (ADVP (RB there)))) (. .)))', 'lemma': [(u'``', u'``', u'``'), (u'People', u'people', u'NNS'), (u'are', u'be', u'VBP'), (u'thirsty', u'thirsty', u'VBG'), (u'out', u'out', u'RP'), (u'there', u'there', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'People', 'are', 'thirsty', 'out', 'there', '.']}, {'string': " We could make money by making some lemonade and iced tea and have people pay for it. ''", 'parse': {'tree': "(ROOT (S (NP (PRP We)) (VP (MD could) (VP (VP (VB make) (NP (NN money)) (PP (IN by) (S (VP (VBG making) (NP (NP (DT some) (NN lemonade)) (CC and) (NP (JJ iced) (NN tea))))))) (CC and) (VP (VB have) (S (NP (NNS people)) (VP (VB pay) (PP (IN for) (NP (PRP it)))))))) (. .) ('' '')))", 'lemma': [(u'We', u'we', u'PRP'), (u'could', u'could', u'MD'), (u'make', u'make', u'VB'), (u'money', u'money', u'NN'), (u'by', u'by', u'IN'), (u'making', u'make', u'VBG'), (u'some', u'some', u'DT'), (u'lemonade', u'lemonade', u'NN'), (u'and', u'and', u'CC'), (u'iced', u'iced', u'JJ'), (u'tea', u'tea', u'NN'), (u'and', u'and', u'CC'), (u'have', u'have', u'VB'), (u'people', u'people', u'NNS'), (u'pay', u'pay', u'VB'), (u'for', u'for', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['We', 'could', 'make', 'money', 'by', 'making', 'some', 'lemonade', 'and', 'iced', 'tea', 'and', 'have', 'people', 'pay', 'for', 'it', '.', "''"]}, {'string': " `` That is a great idea, '' answered Bailey, `` let 's do it! ''", 'parse': {'tree': "(ROOT (SINV (`` ``) (S (NP (DT That)) (VP (VBZ is) (NP (DT a) (JJ great) (NN idea)))) (, ,) ('' '') (VP (VBD answered)) (NP (NNP Bailey)) (, ,) (`` ``) (S (NP (NNP let) (POS 's)) (VP (VBP do) (NP (PRP it)))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'That', u'that', u'DT'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'idea', u'idea', u'NN'), (u',', u',', u','), (u"''", u"''", u"''"), (u'answered', u'answer', u'VBD'), (u'Bailey', u'Bailey', u'NNP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'let', u'let', u'NNP'), (u"'s", u"'s", u'POS'), (u'do', u'do', u'VBP'), (u'it', u'it', u'PRP'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'That', 'is', 'a', 'great', 'idea', ',', "''", 'answered', 'Bailey', ',', '``', 'let', "'s", 'do', 'it', '!', "''"]}, {'string': ' Kara had made some iced tea with her mom earlier that day.', 'parse': {'tree': '(ROOT (S (NP (NNP Kara)) (VP (VBD had) (VP (VBN made) (NP (NP (DT some) (JJ iced) (NN tea)) (PP (IN with) (NP (PRP$ her) (NN mom)))) (NP (RBR earlier) (DT that) (NN day)))) (. .)))', 'lemma': [(u'Kara', u'Kara', u'NNP'), (u'had', u'have', u'VBD'), (u'made', u'make', u'VBN'), (u'some', u'some', u'DT'), (u'iced', u'iced', u'JJ'), (u'tea', u'tea', u'NN'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'mom', u'mom', u'NN'), (u'earlier', u'earlier', u'RBR'), (u'that', u'that', u'DT'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Kara', 'had', 'made', 'some', 'iced', 'tea', 'with', 'her', 'mom', 'earlier', 'that', 'day', '.']}, {'string': ' She asked her mom permission to use it.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD asked) (NP (PRP$ her) (NN mom) (NN permission)) (S (VP (TO to) (VP (VB use) (NP (PRP it)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'asked', u'ask', u'VBD'), (u'her', u'she', u'PRP$'), (u'mom', u'mom', u'NN'), (u'permission', u'permission', u'NN'), (u'to', u'to', u'TO'), (u'use', u'use', u'VB'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'asked', 'her', 'mom', 'permission', 'to', 'use', 'it', '.']}, {'string': ' Her mom said yes.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (NN mom)) (VP (VBD said) (INTJ (UH yes))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'mom', u'mom', u'NN'), (u'said', u'say', u'VBD'), (u'yes', u'yes', u'UH'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'mom', 'said', 'yes', '.']}, {'string': ' She and Kara made two pitchers of lemonade.', 'parse': {'tree': '(ROOT (S (NP (PRP She) (CC and) (NNP Kara)) (VP (VBD made) (NP (NP (CD two) (NNS pitchers)) (PP (IN of) (NP (NN lemonade))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'and', u'and', u'CC'), (u'Kara', u'Kara', u'NNP'), (u'made', u'make', u'VBD'), (u'two', u'two', u'CD'), (u'pitchers', u'pitcher', u'NNS'), (u'of', u'of', u'IN'), (u'lemonade', u'lemonade', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'and', 'Kara', 'made', 'two', 'pitchers', 'of', 'lemonade', '.']}, {'string': ' They got a cooler full of ice and made a sign so people knew what was for sale.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD got) (NP (NP (DT a) (NN cooler)) (PP (JJ full) (IN of) (NP (NN ice))))) (CC and) (VP (VBD made) (NP (DT a) (NN sign)) (SBAR (IN so) (S (NP (NNS people)) (VP (VBD knew) (SBAR (WHNP (WP what)) (S (VP (VBD was) (PP (IN for) (NP (NN sale))))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'cooler', u'cooler', u'NN'), (u'full', u'full', u'JJ'), (u'of', u'of', u'IN'), (u'ice', u'ice', u'NN'), (u'and', u'and', u'CC'), (u'made', u'make', u'VBD'), (u'a', u'a', u'DT'), (u'sign', u'sign', u'NN'), (u'so', u'so', u'IN'), (u'people', u'people', u'NNS'), (u'knew', u'know', u'VBD'), (u'what', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'for', u'for', u'IN'), (u'sale', u'sale', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'got', 'a', 'cooler', 'full', 'of', 'ice', 'and', 'made', 'a', 'sign', 'so', 'people', 'knew', 'what', 'was', 'for', 'sale', '.']}, {'string': " Kara 's mom helped them get a table and chairs and set up out on the corner in their neighborhood.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Kara) (POS 's)) (NN mom)) (VP (VP (VBD helped) (SBAR (S (NP (PRP them)) (VP (VP (VBP get) (NP (DT a) (NN table))) (CC and) (VP (VBZ chairs)))))) (CC and) (VP (VBD set) (PRT (RP up)) (PRT (RP out)) (PP (IN on) (NP (NP (DT the) (NN corner)) (PP (IN in) (NP (PRP$ their) (NN neighborhood))))))) (. .)))", 'lemma': [(u'Kara', u'Kara', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'helped', u'help', u'VBD'), (u'them', u'they', u'PRP'), (u'get', u'get', u'VBP'), (u'a', u'a', u'DT'), (u'table', u'table', u'NN'), (u'and', u'and', u'CC'), (u'chairs', u'chair', u'VBZ'), (u'and', u'and', u'CC'), (u'set', u'set', u'VBD'), (u'up', u'up', u'RP'), (u'out', u'out', u'RP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'corner', u'corner', u'NN'), (u'in', u'in', u'IN'), (u'their', u'they', u'PRP$'), (u'neighborhood', u'neighborhood', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Kara', "'s", 'mom', 'helped', 'them', 'get', 'a', 'table', 'and', 'chairs', 'and', 'set', 'up', 'out', 'on', 'the', 'corner', 'in', 'their', 'neighborhood', '.']}, {'string': ' It was so hot out that people who saw their stand came to buy drinks right away.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (ADJP (RB so) (JJ hot) (PP (IN out) (NP (NP (DT that) (NNS people)) (SBAR (WHNP (WP who)) (S (VP (VBD saw) (SBAR (S (NP (PRP$ their) (NN stand)) (VP (VBD came) (S (VP (TO to) (VP (VB buy) (NP (NNS drinks)) (ADVP (RB right) (RB away))))))))))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'hot', u'hot', u'JJ'), (u'out', u'out', u'IN'), (u'that', u'that', u'DT'), (u'people', u'people', u'NNS'), (u'who', u'who', u'WP'), (u'saw', u'see', u'VBD'), (u'their', u'they', u'PRP$'), (u'stand', u'stand', u'NN'), (u'came', u'come', u'VBD'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'drinks', u'drink', u'NNS'), (u'right', u'right', u'RB'), (u'away', u'away', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'so', 'hot', 'out', 'that', 'people', 'who', 'saw', 'their', 'stand', 'came', 'to', 'buy', 'drinks', 'right', 'away', '.']}, {'string': ' Their first visitors to their stand were their friends, Abby and Molly.', 'parse': {'tree': '(ROOT (S (NP (NP (PRP$ Their) (JJ first) (NNS visitors)) (PP (TO to) (NP (PRP$ their) (NN stand)))) (VP (VBD were) (NP (NP (PRP$ their) (NNS friends)) (, ,) (NP (NNP Abby)) (CC and) (NP (NNP Molly)))) (. .)))', 'lemma': [(u'Their', u'they', u'PRP$'), (u'first', u'first', u'JJ'), (u'visitors', u'visitor', u'NNS'), (u'to', u'to', u'TO'), (u'their', u'they', u'PRP$'), (u'stand', u'stand', u'NN'), (u'were', u'be', u'VBD'), (u'their', u'they', u'PRP$'), (u'friends', u'friend', u'NNS'), (u',', u',', u','), (u'Abby', u'Abby', u'NNP'), (u'and', u'and', u'CC'), (u'Molly', u'Molly', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Their', 'first', 'visitors', 'to', 'their', 'stand', 'were', 'their', 'friends', ',', 'Abby', 'and', 'Molly', '.']}, {'string': ' In a half hour, they had to close their stand.', 'parse': {'tree': '(ROOT (S (PP (IN In) (NP (DT a) (NN half) (NN hour))) (, ,) (NP (PRP they)) (VP (VBD had) (S (VP (TO to) (VP (VB close) (NP (PRP$ their) (NN stand)))))) (. .)))', 'lemma': [(u'In', u'in', u'IN'), (u'a', u'a', u'DT'), (u'half', u'half', u'NN'), (u'hour', u'hour', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'close', u'close', u'VB'), (u'their', u'they', u'PRP$'), (u'stand', u'stand', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'a', 'half', 'hour', ',', 'they', 'had', 'to', 'close', 'their', 'stand', '.']}, {'string': ' They were all out of lemonade and iced tea.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (ADVP (DT all) (IN out)) (PP (IN of) (NP (JJ lemonade) (CC and) (JJ iced) (NN tea)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'all', u'all', u'DT'), (u'out', u'out', u'IN'), (u'of', u'of', u'IN'), (u'lemonade', u'lemonade', u'JJ'), (u'and', u'and', u'CC'), (u'iced', u'iced', u'JJ'), (u'tea', u'tea', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'all', 'out', 'of', 'lemonade', 'and', 'iced', 'tea', '.']}, {'string': ' They had made a lot of money.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD had) (VP (VBN made) (NP (NP (DT a) (NN lot)) (PP (IN of) (NP (NN money)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'made', u'make', u'VBN'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'of', u'of', u'IN'), (u'money', u'money', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'had', 'made', 'a', 'lot', 'of', 'money', '.']}, {'string': ' They split the money and each got ten dollars.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD split) (SBAR (S (NP (NP (DT the) (NN money)) (CC and) (NP (DT each))) (VP (VBD got) (NP (CD ten) (NNS dollars)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'split', u'split', u'VBD'), (u'the', u'the', u'DT'), (u'money', u'money', u'NN'), (u'and', u'and', u'CC'), (u'each', u'each', u'DT'), (u'got', u'get', u'VBD'), (u'ten', u'ten', u'CD'), (u'dollars', u'dollar', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'split', 'the', 'money', 'and', 'each', 'got', 'ten', 'dollars', '.']}, {'string': ' It was a great day.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (DT a) (JJ great) (NN day))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'a', 'great', 'day', '.']}], 'questions': [{'question': {'string': ' Which two friends were bored one Saturday?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT Which) (CD two) (NNS friends)) (SQ (VP (VBD were) (ADJP (JJ bored) (NP (CD one))) (NP (NNP Saturday)))) (. ?)))', 'lemma': [(u'Which', u'which', u'WDT'), (u'two', u'two', u'CD'), (u'friends', u'friend', u'NNS'), (u'were', u'be', u'VBD'), (u'bored', u'bored', u'JJ'), (u'one', u'one', u'CD'), (u'Saturday', u'Saturday', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Which', 'two', 'friends', 'were', 'bored', 'one', 'Saturday', '?']}, 'answers': [{'string': ' Abby and Molly', 'parse': {'tree': '(ROOT (NP (NP (NNP Abby)) (CC and) (NP (NNP Molly))))', 'lemma': [(u'Abby', u'Abby', u'NNP'), (u'and', u'and', u'CC'), (u'Molly', u'Molly', u'NNP')]}, 'tokens': ['Abby', 'and', 'Molly']}, {'string': ' Bailey and Kara', 'parse': {'tree': '(ROOT (NP (NP (NNP Bailey)) (CC and) (NP (NNP Kara))))', 'lemma': [(u'Bailey', u'Bailey', u'NNP'), (u'and', u'and', u'CC'), (u'Kara', u'Kara', u'NNP')]}, 'tokens': ['Bailey', 'and', 'Kara']}, {'string': ' Abby and Bailey', 'parse': {'tree': '(ROOT (NP (NP (NNP Abby)) (CC and) (NP (NNP Bailey))))', 'lemma': [(u'Abby', u'Abby', u'NNP'), (u'and', u'and', u'CC'), (u'Bailey', u'Bailey', u'NNP')]}, 'tokens': ['Abby', 'and', 'Bailey']}, {'string': ' Kara and Molly', 'parse': {'tree': '(ROOT (NP (NNS Kara) (CC and) (NNS Molly)))', 'lemma': [(u'Kara', u'kara', u'NNS'), (u'and', u'and', u'CC'), (u'Molly', u'molly', u'NNS')]}, 'tokens': ['Kara', 'and', 'Molly']}], 'mode': 1}, {'question': {'string': ' How many pitchers of lemonade did they make?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WHADJP (WRB How) (JJ many)) (NNS pitchers)) (PP (IN of) (NP (NN lemonade)))) (SQ (VBD did) (NP (PRP they)) (VP (VB make))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'many', u'many', u'JJ'), (u'pitchers', u'pitcher', u'NNS'), (u'of', u'of', u'IN'), (u'lemonade', u'lemonade', u'NN'), (u'did', u'do', u'VBD'), (u'they', u'they', u'PRP'), (u'make', u'make', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'many', 'pitchers', 'of', 'lemonade', 'did', 'they', 'make', '?']}, 'answers': [{'string': ' two', 'parse': {'tree': '(ROOT (FRAG (NP (CD two))))', 'lemma': [(u'two', u'two', u'CD')]}, 'tokens': ['two']}, {'string': ' four', 'parse': {'tree': '(ROOT (FRAG (NP (CD four))))', 'lemma': [(u'four', u'four', u'CD')]}, 'tokens': ['four']}, {'string': ' one', 'parse': {'tree': '(ROOT (NP (NN one)))', 'lemma': [(u'one', u'one', u'NN')]}, 'tokens': ['one']}, {'string': ' three', 'parse': {'tree': '(ROOT (FRAG (NP (CD three))))', 'lemma': [(u'three', u'three', u'CD')]}, 'tokens': ['three']}], 'mode': 1}, {'question': {'string': ' Who help them set up their stand?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VB help) (S (NP (PRP them)) (VP (VB set) (PRT (RP up)) (NP (PRP$ their) (NN stand)))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'help', u'help', u'VB'), (u'them', u'they', u'PRP'), (u'set', u'set', u'VB'), (u'up', u'up', u'RP'), (u'their', u'they', u'PRP$'), (u'stand', u'stand', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'help', 'them', 'set', 'up', 'their', 'stand', '?']}, 'answers': [{'string': " Abby 's mom", 'parse': {'tree': "(ROOT (NP (NP (NNP Abby) (POS 's)) (NN mom)))", 'lemma': [(u'Abby', u'Abby', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN')]}, 'tokens': ['Abby', "'s", 'mom']}, {'string': " Bailey 's mom", 'parse': {'tree': "(ROOT (NP (NP (NNP Bailey) (POS 's)) (NN mom)))", 'lemma': [(u'Bailey', u'Bailey', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN')]}, 'tokens': ['Bailey', "'s", 'mom']}, {'string': " Molly 's mom", 'parse': {'tree': "(ROOT (NP (NP (NNP Molly) (POS 's)) (NN mom)))", 'lemma': [(u'Molly', u'Molly', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN')]}, 'tokens': ['Molly', "'s", 'mom']}, {'string': " Kara 's mom", 'parse': {'tree': "(ROOT (NP (NP (NNP Kara) (POS 's)) (NN mom)))", 'lemma': [(u'Kara', u'Kara', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN')]}, 'tokens': ['Kara', "'s", 'mom']}], 'mode': 0}, {'question': {'string': ' How long was their stand open?', 'parse': {'tree': '(ROOT (SBARQ (WHADJP (WRB How) (JJ long)) (SQ (VBD was) (NP (PRP$ their) (NN stand)) (ADJP (JJ open))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'long', u'long', u'JJ'), (u'was', u'be', u'VBD'), (u'their', u'they', u'PRP$'), (u'stand', u'stand', u'NN'), (u'open', u'open', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'long', 'was', 'their', 'stand', 'open', '?']}, 'answers': [{'string': ' an hour', 'parse': {'tree': '(ROOT (FRAG (NP (DT an) (NN hour))))', 'lemma': [(u'an', u'a', u'DT'), (u'hour', u'hour', u'NN')]}, 'tokens': ['an', 'hour']}, {'string': ' three days', 'parse': {'tree': '(ROOT (X (NP (CD three) (NNS days))))', 'lemma': [(u'three', u'three', u'CD'), (u'days', u'day', u'NNS')]}, 'tokens': ['three', 'days']}, {'string': ' two days', 'parse': {'tree': '(ROOT (X (NP (CD two) (NNS days))))', 'lemma': [(u'two', u'two', u'CD'), (u'days', u'day', u'NNS')]}, 'tokens': ['two', 'days']}, {'string': ' a half hour', 'parse': {'tree': '(ROOT (NP (DT a) (NN half) (NN hour)))', 'lemma': [(u'a', u'a', u'DT'), (u'half', u'half', u'NN'), (u'hour', u'hour', u'NN')]}, 'tokens': ['a', 'half', 'hour']}], 'mode': 0}]}
{'sentences': [{'string': ' Bob walked out the door with a huge grin on his face.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (VP (VBD walked) (PRT (RP out)) (NP (DT the) (NN door)) (PP (IN with) (NP (DT a) (JJ huge) (NN grin))) (PP (IN on) (NP (PRP$ his) (NN face)))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'walked', u'walk', u'VBD'), (u'out', u'out', u'RP'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'huge', u'huge', u'JJ'), (u'grin', u'grin', u'NN'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'face', u'face', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'walked', 'out', 'the', 'door', 'with', 'a', 'huge', 'grin', 'on', 'his', 'face', '.']}, {'string': ' It was his first day of middle school.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (NP (PRP$ his) (JJ first) (NN day)) (PP (IN of) (NP (JJ middle) (NN school))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'first', u'first', u'JJ'), (u'day', u'day', u'NN'), (u'of', u'of', u'IN'), (u'middle', u'middle', u'JJ'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'his', 'first', 'day', 'of', 'middle', 'school', '.']}, {'string': ' His mom, who is a nurse at the high school, waved at him as he entered the bus.', 'parse': {'tree': '(ROOT (S (NP (NP (PRP$ His) (NN mom)) (, ,) (SBAR (WHNP (WP who)) (S (VP (VBZ is) (NP (NP (DT a) (NN nurse)) (PP (IN at) (NP (DT the) (JJ high) (NN school))))))) (, ,)) (VP (VBD waved) (PP (IN at) (NP (PRP him))) (SBAR (IN as) (S (NP (PRP he)) (VP (VBD entered) (NP (DT the) (NN bus)))))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u',', u',', u','), (u'who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'nurse', u'nurse', u'NN'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'high', u'high', u'JJ'), (u'school', u'school', u'NN'), (u',', u',', u','), (u'waved', u'wave', u'VBD'), (u'at', u'at', u'IN'), (u'him', u'he', u'PRP'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'entered', u'enter', u'VBD'), (u'the', u'the', u'DT'), (u'bus', u'bus', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'mom', ',', 'who', 'is', 'a', 'nurse', 'at', 'the', 'high', 'school', ',', 'waved', 'at', 'him', 'as', 'he', 'entered', 'the', 'bus', '.']}, {'string': " The bus driver said `` good to see you Bob ''.", 'parse': {'tree': "(ROOT (S (NP (DT The) (NN bus) (NN driver)) (VP (VBD said) (S (`` ``) (ADJP (JJ good) (S (VP (TO to) (VP (VB see) (S (NP (PRP you)) (NP (NNP Bob))))))) ('' ''))) (. .)))", 'lemma': [(u'The', u'the', u'DT'), (u'bus', u'bus', u'NN'), (u'driver', u'driver', u'NN'), (u'said', u'say', u'VBD'), (u'``', u'``', u'``'), (u'good', u'good', u'JJ'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'you', u'you', u'PRP'), (u'Bob', u'Bob', u'NNP'), (u"''", u"''", u"''"), (u'.', u'.', u'.')]}, 'tokens': ['The', 'bus', 'driver', 'said', '``', 'good', 'to', 'see', 'you', 'Bob', "''", '.']}, {'string': " Bob said `` you too Mr. Smith ''.", 'parse': {'tree': "(ROOT (S (NP (NNP Bob)) (VP (VBD said) (S (NP (`` ``) (PRP you)) (NP (RB too) (NNP Mr.) (NNP Smith) ('' '')))) (. .)))", 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'said', u'say', u'VBD'), (u'``', u'``', u'``'), (u'you', u'you', u'PRP'), (u'too', u'too', u'RB'), (u'Mr.', u'Mr.', u'NNP'), (u'Smith', u'Smith', u'NNP'), (u"''", u"''", u"''"), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'said', '``', 'you', 'too', 'Mr.', 'Smith', "''", '.']}, {'string': ' Bob was so excited to see his friends that he could barely breathe.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (VP (VBD was) (ADJP (RB so) (JJ excited) (S (VP (TO to) (VP (VB see) (NP (PRP$ his) (NNS friends)) (SBAR (IN that) (S (NP (PRP he)) (VP (MD could) (ADVP (RB barely)) (VP (VB breathe)))))))))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'was', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'excited', u'excited', u'JJ'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'barely', u'barely', u'RB'), (u'breathe', u'breathe', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'was', 'so', 'excited', 'to', 'see', 'his', 'friends', 'that', 'he', 'could', 'barely', 'breathe', '.']}, {'string': " As he walked down the school bus, Bob 's friends Jill, Jim, Jeff and Chris all waved to him.", 'parse': {'tree': "(ROOT (S (SBAR (IN As) (S (NP (PRP he)) (VP (VBD walked) (PRT (RP down)) (NP (NP (DT the) (NN school) (NN bus)) (, ,) (NP (NP (NP (NNP Bob) (POS 's)) (NNS friends)) (NP (NNP Jill) (, ,) (NNP Jim) (, ,) (NNP Jeff) (CC and) (NNP Chris))))))) (NP (DT all)) (VP (VBD waved) (PP (TO to) (NP (PRP him)))) (. .)))", 'lemma': [(u'As', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'walked', u'walk', u'VBD'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'school', u'school', u'NN'), (u'bus', u'bus', u'NN'), (u',', u',', u','), (u'Bob', u'Bob', u'NNP'), (u"'s", u"'s", u'POS'), (u'friends', u'friend', u'NNS'), (u'Jill', u'Jill', u'NNP'), (u',', u',', u','), (u'Jim', u'Jim', u'NNP'), (u',', u',', u','), (u'Jeff', u'Jeff', u'NNP'), (u'and', u'and', u'CC'), (u'Chris', u'Chris', u'NNP'), (u'all', u'all', u'DT'), (u'waved', u'wave', u'VBD'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['As', 'he', 'walked', 'down', 'the', 'school', 'bus', ',', 'Bob', "'s", 'friends', 'Jill', ',', 'Jim', ',', 'Jeff', 'and', 'Chris', 'all', 'waved', 'to', 'him', '.']}, {'string': ' Instead of sitting next to his best friend Chris, Bob turned left and sat next to Jill.', 'parse': {'tree': '(ROOT (S (PP (RB Instead) (IN of) (S (VP (VBG sitting) (ADVP (JJ next) (PP (TO to) (NP (PRP$ his) (JJS best) (NN friend)))) (NP (NNP Chris))))) (, ,) (NP (NNP Bob)) (VP (VP (VBD turned) (ADVP (RB left))) (CC and) (VP (VBD sat) (ADVP (JJ next)) (PP (TO to) (NP (NNP Jill))))) (. .)))', 'lemma': [(u'Instead', u'instead', u'RB'), (u'of', u'of', u'IN'), (u'sitting', u'sit', u'VBG'), (u'next', u'next', u'JJ'), (u'to', u'to', u'TO'), (u'his', u'he', u'PRP$'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'Chris', u'Chris', u'NNP'), (u',', u',', u','), (u'Bob', u'Bob', u'NNP'), (u'turned', u'turn', u'VBD'), (u'left', u'left', u'RB'), (u'and', u'and', u'CC'), (u'sat', u'sit', u'VBD'), (u'next', u'next', u'JJ'), (u'to', u'to', u'TO'), (u'Jill', u'Jill', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Instead', 'of', 'sitting', 'next', 'to', 'his', 'best', 'friend', 'Chris', ',', 'Bob', 'turned', 'left', 'and', 'sat', 'next', 'to', 'Jill', '.']}, {'string': " Jeff and Jim started laughing at him and teased `` Bob and Jill sitting in a tree, K-I-S-S-I-N-G ''.", 'parse': {'tree': "(ROOT (S (NP (NNP Jeff) (CC and) (NNP Jim)) (VP (VP (VBD started) (S (VP (VBG laughing) (PP (IN at) (NP (PRP him)))))) (CC and) (VP (VBN teased) (`` ``) (S (NP (NNP Bob) (CC and) (NNP Jill)) (VP (VBG sitting) (PP (IN in) (NP (NP (DT a) (NN tree)) (, ,) (NP (NNP K-I-S-S-I-N-G)))))) ('' ''))) (. .)))", 'lemma': [(u'Jeff', u'Jeff', u'NNP'), (u'and', u'and', u'CC'), (u'Jim', u'Jim', u'NNP'), (u'started', u'start', u'VBD'), (u'laughing', u'laugh', u'VBG'), (u'at', u'at', u'IN'), (u'him', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'teased', u'tease', u'VBN'), (u'``', u'``', u'``'), (u'Bob', u'Bob', u'NNP'), (u'and', u'and', u'CC'), (u'Jill', u'Jill', u'NNP'), (u'sitting', u'sit', u'VBG'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'tree', u'tree', u'NN'), (u',', u',', u','), (u'K-I-S-S-I-N-G', u'K-I-S-S-I-N-G', u'NNP'), (u"''", u"''", u"''"), (u'.', u'.', u'.')]}, 'tokens': ['Jeff', 'and', 'Jim', 'started', 'laughing', 'at', 'him', 'and', 'teased', '``', 'Bob', 'and', 'Jill', 'sitting', 'in', 'a', 'tree', ',', 'K-I-S-S-I-N-G', "''", '.']}, {'string': " Bob 's face turned red from embarrassment.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Bob) (POS 's)) (NN face)) (VP (VBD turned) (ADJP (JJ red)) (PP (IN from) (NP (NN embarrassment)))) (. .)))", 'lemma': [(u'Bob', u'Bob', u'NNP'), (u"'s", u"'s", u'POS'), (u'face', u'face', u'NN'), (u'turned', u'turn', u'VBD'), (u'red', u'red', u'JJ'), (u'from', u'from', u'IN'), (u'embarrassment', u'embarrassment', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', "'s", 'face', 'turned', 'red', 'from', 'embarrassment', '.']}, {'string': ' Chris felt bad for Bob and reached into his pockets to help his friend.', 'parse': {'tree': '(ROOT (S (NP (NNP Chris)) (VP (VP (VBD felt) (ADJP (JJ bad)) (PP (IN for) (NP (NNP Bob)))) (CC and) (VP (VBD reached) (PP (IN into) (NP (PRP$ his) (NNS pockets))) (S (VP (TO to) (VP (VB help) (NP (PRP$ his) (NN friend))))))) (. .)))', 'lemma': [(u'Chris', u'Chris', u'NNP'), (u'felt', u'feel', u'VBD'), (u'bad', u'bad', u'JJ'), (u'for', u'for', u'IN'), (u'Bob', u'Bob', u'NNP'), (u'and', u'and', u'CC'), (u'reached', u'reach', u'VBD'), (u'into', u'into', u'IN'), (u'his', u'he', u'PRP$'), (u'pockets', u'pocket', u'NNS'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Chris', 'felt', 'bad', 'for', 'Bob', 'and', 'reached', 'into', 'his', 'pockets', 'to', 'help', 'his', 'friend', '.']}, {'string': ' When he reached in, he felt a pencil, a rock and a folded up piece of paper.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP he)) (VP (VBD reached) (PRT (RP in))))) (, ,) (NP (PRP he)) (VP (VBD felt) (NP (NP (DT a) (NN pencil)) (, ,) (NP (DT a) (NN rock)) (CC and) (NP (NP (DT a) (ADJP (VBN folded) (PRT (RP up))) (NN piece)) (PP (IN of) (NP (NN paper)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'reached', u'reach', u'VBD'), (u'in', u'in', u'RP'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'felt', u'feel', u'VBD'), (u'a', u'a', u'DT'), (u'pencil', u'pencil', u'NN'), (u',', u',', u','), (u'a', u'a', u'DT'), (u'rock', u'rock', u'NN'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'folded', u'fold', u'VBN'), (u'up', u'up', u'RP'), (u'piece', u'piece', u'NN'), (u'of', u'of', u'IN'), (u'paper', u'paper', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'he', 'reached', 'in', ',', 'he', 'felt', 'a', 'pencil', ',', 'a', 'rock', 'and', 'a', 'folded', 'up', 'piece', 'of', 'paper', '.']}, {'string': " Chris 's eyes twinkled.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Chris) (POS 's)) (NNS eyes)) (VP (VBD twinkled)) (. .)))", 'lemma': [(u'Chris', u'Chris', u'NNP'), (u"'s", u"'s", u'POS'), (u'eyes', u'eye', u'NNS'), (u'twinkled', u'twinkle', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Chris', "'s", 'eyes', 'twinkled', '.']}, {'string': ' He had a plan.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (NP (DT a) (NN plan))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'plan', u'plan', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'a', 'plan', '.']}, {'string': ' Without Jim and Jeff seeing, Chris quickly made a paper airplane with the piece of paper he found in his pocket.', 'parse': {'tree': '(ROOT (S (S (PP (IN Without) (S (NP (NNP Jim) (CC and) (NNP Jeff)) (VP (VBG seeing)))) (, ,) (NP (NNP Chris)) (ADVP (RB quickly)) (VP (VBD made) (NP (DT a) (NN paper) (NN airplane)) (PP (IN with) (NP (NP (DT the) (NN piece)) (PP (IN of) (NP (NN paper))))))) (NP (PRP he)) (VP (VBD found) (PP (IN in) (NP (PRP$ his) (NN pocket)))) (. .)))', 'lemma': [(u'Without', u'without', u'IN'), (u'Jim', u'Jim', u'NNP'), (u'and', u'and', u'CC'), (u'Jeff', u'Jeff', u'NNP'), (u'seeing', u'see', u'VBG'), (u',', u',', u','), (u'Chris', u'Chris', u'NNP'), (u'quickly', u'quickly', u'RB'), (u'made', u'make', u'VBD'), (u'a', u'a', u'DT'), (u'paper', u'paper', u'NN'), (u'airplane', u'airplane', u'NN'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'piece', u'piece', u'NN'), (u'of', u'of', u'IN'), (u'paper', u'paper', u'NN'), (u'he', u'he', u'PRP'), (u'found', u'find', u'VBD'), (u'in', u'in', u'IN'), (u'his', u'he', u'PRP$'), (u'pocket', u'pocket', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Without', 'Jim', 'and', 'Jeff', 'seeing', ',', 'Chris', 'quickly', 'made', 'a', 'paper', 'airplane', 'with', 'the', 'piece', 'of', 'paper', 'he', 'found', 'in', 'his', 'pocket', '.']}, {'string': ' He threw the paper airplane at Jim.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD threw) (NP (DT the) (NN paper) (NN airplane)) (PP (IN at) (NP (NNP Jim)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'threw', u'throw', u'VBD'), (u'the', u'the', u'DT'), (u'paper', u'paper', u'NN'), (u'airplane', u'airplane', u'NN'), (u'at', u'at', u'IN'), (u'Jim', u'Jim', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'threw', 'the', 'paper', 'airplane', 'at', 'Jim', '.']}, {'string': ' The plane hit Jim in the face.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN plane)) (VP (VBD hit) (NP (NP (NNP Jim)) (PP (IN in) (NP (DT the) (NN face))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'plane', u'plane', u'NN'), (u'hit', u'hit', u'VBD'), (u'Jim', u'Jim', u'NNP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'face', u'face', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'plane', 'hit', 'Jim', 'in', 'the', 'face', '.']}, {'string': ' Both Jim and Jeff stopped laughing.', 'parse': {'tree': '(ROOT (S (NP (DT Both) (NNP Jim) (CC and) (NNP Jeff)) (VP (VBD stopped) (S (VP (VBG laughing)))) (. .)))', 'lemma': [(u'Both', u'both', u'DT'), (u'Jim', u'Jim', u'NNP'), (u'and', u'and', u'CC'), (u'Jeff', u'Jeff', u'NNP'), (u'stopped', u'stop', u'VBD'), (u'laughing', u'laugh', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['Both', 'Jim', 'and', 'Jeff', 'stopped', 'laughing', '.']}, {'string': ' Bob looked over to Chris and smiled.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (VP (VP (VBD looked) (PRT (RP over)) (PP (TO to) (NP (NNP Chris)))) (CC and) (VP (VBD smiled))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'looked', u'look', u'VBD'), (u'over', u'over', u'RP'), (u'to', u'to', u'TO'), (u'Chris', u'Chris', u'NNP'), (u'and', u'and', u'CC'), (u'smiled', u'smile', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'looked', 'over', 'to', 'Chris', 'and', 'smiled', '.']}], 'questions': [{'question': {'string': ' What did Chris pull out of his pocket?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Chris)) (VP (VB pull) (PRT (RP out)) (PP (IN of) (NP (PRP$ his) (NN pocket))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Chris', u'Chris', u'NNP'), (u'pull', u'pull', u'VB'), (u'out', u'out', u'RP'), (u'of', u'of', u'IN'), (u'his', u'he', u'PRP$'), (u'pocket', u'pocket', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Chris', 'pull', 'out', 'of', 'his', 'pocket', '?']}, 'answers': [{'string': ' Airplane', 'parse': {'tree': '(ROOT (NP (NNP Airplane)))', 'lemma': [(u'Airplane', u'Airplane', u'NNP')]}, 'tokens': ['Airplane']}, {'string': ' Paper', 'parse': {'tree': '(ROOT (NP (NNP Paper)))', 'lemma': [(u'Paper', u'Paper', u'NNP')]}, 'tokens': ['Paper']}, {'string': ' Pencil', 'parse': {'tree': '(ROOT (NP (NNP Pencil)))', 'lemma': [(u'Pencil', u'Pencil', u'NNP')]}, 'tokens': ['Pencil']}, {'string': ' Rock', 'parse': {'tree': '(ROOT (NP (NNP Rock)))', 'lemma': [(u'Rock', u'Rock', u'NNP')]}, 'tokens': ['Rock']}], 'mode': 0}, {'question': {'string': " Where does Bob 's mom work?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ does) (NP (NP (NNP Bob) (POS 's)) (NN mom)) (VP (VB work))) (. ?)))", 'lemma': [(u'Where', u'where', u'WRB'), (u'does', u'do', u'VBZ'), (u'Bob', u'Bob', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'work', u'work', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'does', 'Bob', "'s", 'mom', 'work', '?']}, 'answers': [{'string': ' the school bus', 'parse': {'tree': '(ROOT (NP (DT the) (NN school) (NN bus)))', 'lemma': [(u'the', u'the', u'DT'), (u'school', u'school', u'NN'), (u'bus', u'bus', u'NN')]}, 'tokens': ['the', 'school', 'bus']}, {'string': ' on an airplane', 'parse': {'tree': '(ROOT (PP (IN on) (NP (DT an) (NN airplane))))', 'lemma': [(u'on', u'on', u'IN'), (u'an', u'a', u'DT'), (u'airplane', u'airplane', u'NN')]}, 'tokens': ['on', 'an', 'airplane']}, {'string': ' The high school', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (JJ high) (NN school))))', 'lemma': [(u'The', u'the', u'DT'), (u'high', u'high', u'JJ'), (u'school', u'school', u'NN')]}, 'tokens': ['The', 'high', 'school']}, {'string': ' the middle school', 'parse': {'tree': '(ROOT (NP (DT the) (NN middle) (NN school)))', 'lemma': [(u'the', u'the', u'DT'), (u'middle', u'middle', u'NN'), (u'school', u'school', u'NN')]}, 'tokens': ['the', 'middle', 'school']}], 'mode': 1}, {'question': {'string': ' Who did the paper airplane hit in the face?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (DT the) (NN paper) (NN airplane)) (VP (VB hit) (PP (IN in) (NP (DT the) (NN face))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'paper', u'paper', u'NN'), (u'airplane', u'airplane', u'NN'), (u'hit', u'hit', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'face', u'face', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'did', 'the', 'paper', 'airplane', 'hit', 'in', 'the', 'face', '?']}, 'answers': [{'string': ' Chris', 'parse': {'tree': '(ROOT (NP (NNP Chris)))', 'lemma': [(u'Chris', u'Chris', u'NNP')]}, 'tokens': ['Chris']}, {'string': ' Jim', 'parse': {'tree': '(ROOT (NP (NNP Jim)))', 'lemma': [(u'Jim', u'Jim', u'NNP')]}, 'tokens': ['Jim']}, {'string': ' Jill', 'parse': {'tree': '(ROOT (NP (NNP Jill)))', 'lemma': [(u'Jill', u'Jill', u'NNP')]}, 'tokens': ['Jill']}, {'string': ' Jeff', 'parse': {'tree': '(ROOT (NP (NNP Jeff)))', 'lemma': [(u'Jeff', u'Jeff', u'NNP')]}, 'tokens': ['Jeff']}], 'mode': 1}, {'question': {'string': " Who is Bob 's best friend?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (NNP Bob) (POS 's)) (JJS best) (NN friend))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'Bob', u'Bob', u'NNP'), (u"'s", u"'s", u'POS'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'is', 'Bob', "'s", 'best', 'friend', '?']}, 'answers': [{'string': ' Chris', 'parse': {'tree': '(ROOT (NP (NNP Chris)))', 'lemma': [(u'Chris', u'Chris', u'NNP')]}, 'tokens': ['Chris']}, {'string': ' Jim', 'parse': {'tree': '(ROOT (NP (NNP Jim)))', 'lemma': [(u'Jim', u'Jim', u'NNP')]}, 'tokens': ['Jim']}, {'string': ' Jill', 'parse': {'tree': '(ROOT (NP (NNP Jill)))', 'lemma': [(u'Jill', u'Jill', u'NNP')]}, 'tokens': ['Jill']}, {'string': ' Jeff', 'parse': {'tree': '(ROOT (NP (NNP Jeff)))', 'lemma': [(u'Jeff', u'Jeff', u'NNP')]}, 'tokens': ['Jeff']}], 'mode': 0}]}
{'sentences': [{'string': ' Johnny is a nine year old boy.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VBZ is) (NP (DT a) (ADJP (NP (CD nine) (NN year)) (JJ old)) (NN boy))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'nine', u'nine', u'CD'), (u'year', u'year', u'NN'), (u'old', u'old', u'JJ'), (u'boy', u'boy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'is', 'a', 'nine', 'year', 'old', 'boy', '.']}, {'string': ' On one hot summer day, Johnny is outside his house playing with his dog.', 'parse': {'tree': '(ROOT (S (PP (IN On) (NP (NP (CD one)) (NP (JJ hot) (NN summer)))) (NP (NN day)) (, ,) (NP (NNP Johnny)) (VP (VBZ is) (PP (IN outside) (NP (NP (PRP$ his) (NN house)) (VP (VBG playing) (PP (IN with) (NP (PRP$ his) (NN dog))))))) (. .)))', 'lemma': [(u'On', u'on', u'IN'), (u'one', u'one', u'CD'), (u'hot', u'hot', u'JJ'), (u'summer', u'summer', u'NN'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'Johnny', u'Johnny', u'NNP'), (u'is', u'be', u'VBZ'), (u'outside', u'outside', u'IN'), (u'his', u'he', u'PRP$'), (u'house', u'house', u'NN'), (u'playing', u'play', u'VBG'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'one', 'hot', 'summer', 'day', ',', 'Johnny', 'is', 'outside', 'his', 'house', 'playing', 'with', 'his', 'dog', '.']}, {'string': ' He is very hot and wants to have some ice cream.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ is) (ADJP (RB very) (JJ hot))) (CC and) (VP (VBZ wants) (S (VP (TO to) (VP (VB have) (NP (DT some) (NN ice) (NN cream))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'very', u'very', u'RB'), (u'hot', u'hot', u'JJ'), (u'and', u'and', u'CC'), (u'wants', u'want', u'VBZ'), (u'to', u'to', u'TO'), (u'have', u'have', u'VB'), (u'some', u'some', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'is', 'very', 'hot', 'and', 'wants', 'to', 'have', 'some', 'ice', 'cream', '.']}, {'string': ' He looks in his freezer and sees that he does not have ice cream.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ looks) (PP (IN in) (NP (PRP$ his) (NN freezer)))) (CC and) (VP (VBZ sees) (SBAR (IN that) (S (NP (PRP he)) (VP (VBZ does) (RB not) (VP (VB have) (NP (NN ice) (NN cream)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'looks', u'look', u'VBZ'), (u'in', u'in', u'IN'), (u'his', u'he', u'PRP$'), (u'freezer', u'freezer', u'NN'), (u'and', u'and', u'CC'), (u'sees', u'see', u'VBZ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'does', u'do', u'VBZ'), (u'not', u'not', u'RB'), (u'have', u'have', u'VB'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'looks', 'in', 'his', 'freezer', 'and', 'sees', 'that', 'he', 'does', 'not', 'have', 'ice', 'cream', '.']}, {'string': ' Johnny then hears the song of the ice cream truck.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (ADVP (RB then)) (VP (VBZ hears) (NP (NP (DT the) (NN song)) (PP (IN of) (NP (DT the) (NN ice) (NN cream) (NN truck))))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'then', u'then', u'RB'), (u'hears', u'hear', u'VBZ'), (u'the', u'the', u'DT'), (u'song', u'song', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'truck', u'truck', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'then', 'hears', 'the', 'song', 'of', 'the', 'ice', 'cream', 'truck', '.']}, {'string': ' Johnny runs outside but does not see the ice cream truck.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VP (VBZ runs) (ADVP (RB outside))) (CC but) (VP (VBZ does) (RB not) (VP (VB see) (NP (DT the) (NN ice) (NN cream) (NN truck))))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'runs', u'run', u'VBZ'), (u'outside', u'outside', u'RB'), (u'but', u'but', u'CC'), (u'does', u'do', u'VBZ'), (u'not', u'not', u'RB'), (u'see', u'see', u'VB'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'truck', u'truck', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'runs', 'outside', 'but', 'does', 'not', 'see', 'the', 'ice', 'cream', 'truck', '.']}, {'string': ' He looks down the street but the ice cream truck is nowhere to be found.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBZ looks) (PRT (RP down)) (NP (DT the) (NN street)))) (CC but) (S (NP (DT the) (NN ice) (NN cream) (NN truck)) (VP (VBZ is) (ADVP (RB nowhere)) (S (VP (TO to) (VP (VB be) (VP (VBN found))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'looks', u'look', u'VBZ'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'street', u'street', u'NN'), (u'but', u'but', u'CC'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'truck', u'truck', u'NN'), (u'is', u'be', u'VBZ'), (u'nowhere', u'nowhere', u'RB'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'found', u'find', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'looks', 'down', 'the', 'street', 'but', 'the', 'ice', 'cream', 'truck', 'is', 'nowhere', 'to', 'be', 'found', '.']}, {'string': ' The music of the truck starts to get softer and then louder.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (NN music)) (PP (IN of) (NP (DT the) (NN truck)))) (VP (VBZ starts) (S (VP (TO to) (VP (VB get) (ADVP (ADVP (JJR softer)) (CC and) (RB then) (ADVP (RBR louder))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'music', u'music', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'truck', u'truck', u'NN'), (u'starts', u'start', u'VBZ'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'softer', u'softer', u'JJR'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'louder', u'louder', u'RBR'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'music', 'of', 'the', 'truck', 'starts', 'to', 'get', 'softer', 'and', 'then', 'louder', '.']}, {'string': ' Johnny waits outside for an hour.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VBZ waits) (ADVP (RB outside)) (PP (IN for) (NP (DT an) (NN hour)))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'waits', u'wait', u'VBZ'), (u'outside', u'outside', u'RB'), (u'for', u'for', u'IN'), (u'an', u'a', u'DT'), (u'hour', u'hour', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'waits', 'outside', 'for', 'an', 'hour', '.']}, {'string': ' Johnny then thinks that he needs money when the ice cream truck comes.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (ADVP (RB then)) (VP (VBZ thinks) (SBAR (IN that) (S (NP (PRP he)) (VP (VBZ needs) (NP (NP (NN money)) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN ice) (NN cream) (NN truck)) (VP (VBZ comes))))))))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'then', u'then', u'RB'), (u'thinks', u'think', u'VBZ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'needs', u'need', u'VBZ'), (u'money', u'money', u'NN'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'truck', u'truck', u'NN'), (u'comes', u'come', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'then', 'thinks', 'that', 'he', 'needs', 'money', 'when', 'the', 'ice', 'cream', 'truck', 'comes', '.']}, {'string': ' He runs inside and finds five dollars in his room.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ runs) (ADVP (RB inside))) (CC and) (VP (VBZ finds) (NP (NP (CD five) (NNS dollars)) (PP (IN in) (NP (PRP$ his) (NN room)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'runs', u'run', u'VBZ'), (u'inside', u'inside', u'RB'), (u'and', u'and', u'CC'), (u'finds', u'find', u'VBZ'), (u'five', u'five', u'CD'), (u'dollars', u'dollar', u'NNS'), (u'in', u'in', u'IN'), (u'his', u'he', u'PRP$'), (u'room', u'room', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'runs', 'inside', 'and', 'finds', 'five', 'dollars', 'in', 'his', 'room', '.']}, {'string': ' He then hears the ice cream truck song get very loud.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB then)) (VP (VBZ hears) (S (NP (DT the) (NN ice) (NN cream) (NN truck) (NN song)) (VP (VB get) (ADJP (RB very) (JJ loud))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'then', u'then', u'RB'), (u'hears', u'hear', u'VBZ'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'truck', u'truck', u'NN'), (u'song', u'song', u'NN'), (u'get', u'get', u'VB'), (u'very', u'very', u'RB'), (u'loud', u'loud', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'then', 'hears', 'the', 'ice', 'cream', 'truck', 'song', 'get', 'very', 'loud', '.']}, {'string': ' He runs back outside and sees the truck pass his house.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ runs) (ADVP (RB back) (JJ outside))) (CC and) (VP (VBZ sees) (S (NP (DT the) (NN truck)) (VP (VB pass) (NP (PRP$ his) (NN house)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'runs', u'run', u'VBZ'), (u'back', u'back', u'RB'), (u'outside', u'outside', u'JJ'), (u'and', u'and', u'CC'), (u'sees', u'see', u'VBZ'), (u'the', u'the', u'DT'), (u'truck', u'truck', u'NN'), (u'pass', u'pass', u'VB'), (u'his', u'he', u'PRP$'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'runs', 'back', 'outside', 'and', 'sees', 'the', 'truck', 'pass', 'his', 'house', '.']}, {'string': ' Johnny runs after the truck and catches up with it.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VP (VBZ runs) (PP (IN after) (NP (DT the) (NN truck)))) (CC and) (VP (VBZ catches) (PRT (RP up)) (PP (IN with) (NP (PRP it))))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'runs', u'run', u'VBZ'), (u'after', u'after', u'IN'), (u'the', u'the', u'DT'), (u'truck', u'truck', u'NN'), (u'and', u'and', u'CC'), (u'catches', u'catch', u'VBZ'), (u'up', u'up', u'RP'), (u'with', u'with', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'runs', 'after', 'the', 'truck', 'and', 'catches', 'up', 'with', 'it', '.']}, {'string': ' Johnny buys 4 ice cream pops and some candy.', 'parse': {'tree': '(ROOT (S (NP (NNP Johnny)) (VP (VBZ buys) (NP (NP (CD 4) (NN ice) (NN cream) (NNS pops)) (CC and) (NP (DT some) (NN candy)))) (. .)))', 'lemma': [(u'Johnny', u'Johnny', u'NNP'), (u'buys', u'buy', u'VBZ'), (u'4', u'4', u'CD'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'pops', u'pop', u'NNS'), (u'and', u'and', u'CC'), (u'some', u'some', u'DT'), (u'candy', u'candy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Johnny', 'buys', '4', 'ice', 'cream', 'pops', 'and', 'some', 'candy', '.']}, {'string': ' He gives his five dollars to the ice cream man and gets one dollar back.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ gives) (NP (PRP$ his) (CD five) (NNS dollars)) (PP (TO to) (NP (DT the) (NN ice) (NN cream) (NN man)))) (CC and) (VP (VBZ gets) (NP (CD one) (NN dollar)) (ADVP (RB back)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'gives', u'give', u'VBZ'), (u'his', u'he', u'PRP$'), (u'five', u'five', u'CD'), (u'dollars', u'dollar', u'NNS'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'man', u'man', u'NN'), (u'and', u'and', u'CC'), (u'gets', u'get', u'VBZ'), (u'one', u'one', u'CD'), (u'dollar', u'dollar', u'NN'), (u'back', u'back', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'gives', 'his', 'five', 'dollars', 'to', 'the', 'ice', 'cream', 'man', 'and', 'gets', 'one', 'dollar', 'back', '.']}, {'string': ' He walks home and happily eats all of his candy and ice cream.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ walks) (NP (NN home))) (CC and) (VP (ADVP (RB happily)) (VBZ eats) (NP (NP (DT all)) (PP (IN of) (NP (PRP$ his) (NN candy) (CC and) (NN ice) (NN cream)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'walks', u'walk', u'VBZ'), (u'home', u'home', u'NN'), (u'and', u'and', u'CC'), (u'happily', u'happily', u'RB'), (u'eats', u'eat', u'VBZ'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'his', u'he', u'PRP$'), (u'candy', u'candy', u'NN'), (u'and', u'and', u'CC'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'walks', 'home', 'and', 'happily', 'eats', 'all', 'of', 'his', 'candy', 'and', 'ice', 'cream', '.']}], 'questions': [{'question': {'string': ' How much money does Johnny spend one ice cream and candy?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ much)) (NN money)) (SQ (VBZ does) (NP (NNP Johnny)) (VP (VB spend) (NP (NP (CD one) (NN ice) (NN cream)) (CC and) (NP (NN candy))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'much', u'much', u'JJ'), (u'money', u'money', u'NN'), (u'does', u'do', u'VBZ'), (u'Johnny', u'Johnny', u'NNP'), (u'spend', u'spend', u'VB'), (u'one', u'one', u'CD'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'and', u'and', u'CC'), (u'candy', u'candy', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'much', 'money', 'does', 'Johnny', 'spend', 'one', 'ice', 'cream', 'and', 'candy', '?']}, 'answers': [{'string': ' four dollars', 'parse': {'tree': '(ROOT (X (NP (CD four) (NNS dollars))))', 'lemma': [(u'four', u'four', u'CD'), (u'dollars', u'dollar', u'NNS')]}, 'tokens': ['four', 'dollars']}, {'string': ' nine dollars', 'parse': {'tree': '(ROOT (X (NP (CD nine) (NNS dollars))))', 'lemma': [(u'nine', u'nine', u'CD'), (u'dollars', u'dollar', u'NNS')]}, 'tokens': ['nine', 'dollars']}, {'string': ' one dollar', 'parse': {'tree': '(ROOT (NP (CD one) (NN dollar)))', 'lemma': [(u'one', u'one', u'CD'), (u'dollar', u'dollar', u'NN')]}, 'tokens': ['one', 'dollar']}, {'string': ' five dollars', 'parse': {'tree': '(ROOT (X (NP (CD five) (NNS dollars))))', 'lemma': [(u'five', u'five', u'CD'), (u'dollars', u'dollar', u'NNS')]}, 'tokens': ['five', 'dollars']}], 'mode': 0}, {'question': {'string': ' What pet does Johnny play with outside?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN pet)) (SQ (VBZ does) (NP (NNP Johnny)) (VP (VB play) (PP (IN with) (NP (RB outside))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'pet', u'pet', u'NN'), (u'does', u'do', u'VBZ'), (u'Johnny', u'Johnny', u'NNP'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'outside', u'outside', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'pet', 'does', 'Johnny', 'play', 'with', 'outside', '?']}, 'answers': [{'string': ' bird', 'parse': {'tree': '(ROOT (NP (NN bird)))', 'lemma': [(u'bird', u'bird', u'NN')]}, 'tokens': ['bird']}, {'string': ' Dog', 'parse': {'tree': '(ROOT (NP (NNP Dog)))', 'lemma': [(u'Dog', u'Dog', u'NNP')]}, 'tokens': ['Dog']}, {'string': ' fish', 'parse': {'tree': '(ROOT (NP (NN fish)))', 'lemma': [(u'fish', u'fish', u'NN')]}, 'tokens': ['fish']}, {'string': ' cat', 'parse': {'tree': '(ROOT (NP (NN cat)))', 'lemma': [(u'cat', u'cat', u'NN')]}, 'tokens': ['cat']}], 'mode': 1}, {'question': {'string': ' How old is Johnny?', 'parse': {'tree': '(ROOT (SBARQ (WHADJP (WRB How) (JJ old)) (SQ (VBZ is) (NP (NNP Johnny))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'old', u'old', u'JJ'), (u'is', u'be', u'VBZ'), (u'Johnny', u'Johnny', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'old', 'is', 'Johnny', '?']}, 'answers': [{'string': ' nine', 'parse': {'tree': '(ROOT (FRAG (NP (CD nine))))', 'lemma': [(u'nine', u'nine', u'CD')]}, 'tokens': ['nine']}, {'string': ' eight', 'parse': {'tree': '(ROOT (FRAG (NP (CD eight))))', 'lemma': [(u'eight', u'eight', u'CD')]}, 'tokens': ['eight']}, {'string': ' four', 'parse': {'tree': '(ROOT (FRAG (NP (CD four))))', 'lemma': [(u'four', u'four', u'CD')]}, 'tokens': ['four']}, {'string': ' seven', 'parse': {'tree': '(ROOT (FRAG (NP (CD seven))))', 'lemma': [(u'seven', u'seven', u'CD')]}, 'tokens': ['seven']}], 'mode': 1}, {'question': {'string': ' What does Johnny want to eat when he is playing outside?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Johnny)) (VP (VB want) (S (VP (TO to) (VP (VB eat) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBZ is) (VP (VBG playing) (ADVP (RB outside))))))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Johnny', u'Johnny', u'NNP'), (u'want', u'want', u'VB'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'playing', u'play', u'VBG'), (u'outside', u'outside', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Johnny', 'want', 'to', 'eat', 'when', 'he', 'is', 'playing', 'outside', '?']}, 'answers': [{'string': ' ice cream', 'parse': {'tree': '(ROOT (NP (NN ice) (NN cream)))', 'lemma': [(u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN')]}, 'tokens': ['ice', 'cream']}, {'string': ' pizza', 'parse': {'tree': '(ROOT (NP (NN pizza)))', 'lemma': [(u'pizza', u'pizza', u'NN')]}, 'tokens': ['pizza']}, {'string': ' soda', 'parse': {'tree': '(ROOT (NP (NN soda)))', 'lemma': [(u'soda', u'soda', u'NN')]}, 'tokens': ['soda']}, {'string': ' candy', 'parse': {'tree': '(ROOT (NP (NN candy)))', 'lemma': [(u'candy', u'candy', u'NN')]}, 'tokens': ['candy']}], 'mode': 0}]}
{'sentences': [{'string': ' Two kittens were playing.', 'parse': {'tree': '(ROOT (S (NP (CD Two) (NNS kittens)) (VP (VBD were) (VP (VBG playing))) (. .)))', 'lemma': [(u'Two', u'two', u'CD'), (u'kittens', u'kitten', u'NNS'), (u'were', u'be', u'VBD'), (u'playing', u'play', u'VBG'), (u'.', u'.', u'.')]}, 'tokens': ['Two', 'kittens', 'were', 'playing', '.']}, {'string': ' They had come in from outside.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD had) (VP (VBN come) (PP (IN in) (PP (IN from) (NP (RB outside)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'come', u'come', u'VBN'), (u'in', u'in', u'IN'), (u'from', u'from', u'IN'), (u'outside', u'outside', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'had', 'come', 'in', 'from', 'outside', '.']}, {'string': ' Now they were in the living room in the house.', 'parse': {'tree': '(ROOT (S (ADVP (RB Now)) (NP (PRP they)) (VP (VBD were) (PP (IN in) (NP (NP (DT the) (VBG living) (NN room)) (PP (IN in) (NP (DT the) (NN house)))))) (. .)))', 'lemma': [(u'Now', u'now', u'RB'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'living', u'live', u'VBG'), (u'room', u'room', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Now', 'they', 'were', 'in', 'the', 'living', 'room', 'in', 'the', 'house', '.']}, {'string': ' One kitten was named Snowball and one kitten was named Fuzzy.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN kitten)) (VP (VBD was) (VP (VBN named) (SBAR (S (NP (NP (NNP Snowball)) (CC and) (NP (CD one) (NN kitten))) (VP (VBD was) (VP (VBN named) (ADVP (RB Fuzzy)))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'kitten', u'kitten', u'NN'), (u'was', u'be', u'VBD'), (u'named', u'name', u'VBN'), (u'Snowball', u'Snowball', u'NNP'), (u'and', u'and', u'CC'), (u'one', u'one', u'CD'), (u'kitten', u'kitten', u'NN'), (u'was', u'be', u'VBD'), (u'named', u'name', u'VBN'), (u'Fuzzy', u'fuzzy', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'kitten', 'was', 'named', 'Snowball', 'and', 'one', 'kitten', 'was', 'named', 'Fuzzy', '.']}, {'string': ' Suddenly, Snowball saw something interesting.', 'parse': {'tree': '(ROOT (S (ADVP (RB Suddenly)) (, ,) (NP (NNP Snowball)) (VP (VBD saw) (S (NP (NN something)) (ADJP (JJ interesting)))) (. .)))', 'lemma': [(u'Suddenly', u'suddenly', u'RB'), (u',', u',', u','), (u'Snowball', u'Snowball', u'NNP'), (u'saw', u'see', u'VBD'), (u'something', u'something', u'NN'), (u'interesting', u'interesting', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Suddenly', ',', 'Snowball', 'saw', 'something', 'interesting', '.']}, {'string': " `` Look at that! ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Look) (PP (IN at) (NP (DT that)))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Look', u'look', u'VB'), (u'at', u'at', u'IN'), (u'that', u'that', u'DT'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Look', 'at', 'that', '!', "''"]}, {'string': ' said Snowball.', 'parse': {'tree': '(ROOT (S (VP (VBD said) (NP (NNP Snowball))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Snowball', u'Snowball', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Snowball', '.']}, {'string': " `` What is it? ''", 'parse': {'tree': "(ROOT (SBARQ (`` ``) (WHNP (WP What)) (SQ (VBZ is) (NP (PRP it))) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'it', u'it', u'PRP'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'What', 'is', 'it', '?', "''"]}, {'string': ' asked Fuzzy.', 'parse': {'tree': '(ROOT (S (VP (VBN asked) (ADVP (RB Fuzzy))) (. .)))', 'lemma': [(u'asked', u'ask', u'VBN'), (u'Fuzzy', u'fuzzy', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['asked', 'Fuzzy', '.']}, {'string': " `` It 's a ball of yarn.", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP It)) (VP (VBZ 's) (NP (NP (DT a) (NN ball)) (PP (IN of) (NP (NN yarn))))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'It', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'ball', u'ball', u'NN'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'It', "'s", 'a', 'ball', 'of', 'yarn', '.']}, {'string': " On the top shelf! ''", 'parse': {'tree': "(ROOT (PP (IN On) (NP (DT the) (JJ top) (NN shelf)) (. !) ('' '')))", 'lemma': [(u'On', u'on', u'IN'), (u'the', u'the', u'DT'), (u'top', u'top', u'JJ'), (u'shelf', u'shelf', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['On', 'the', 'top', 'shelf', '!', "''"]}, {'string': ' said Snowball.', 'parse': {'tree': '(ROOT (S (VP (VBD said) (NP (NNP Snowball))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Snowball', u'Snowball', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Snowball', '.']}, {'string': ' She had seen the yarn that was kept in a basket up there!', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD had) (VP (VBN seen) (NP (NP (DT the) (NN yarn)) (SBAR (WHNP (WDT that)) (S (VP (VBD was) (VP (VBN kept) (PP (IN in) (NP (DT a) (NN basket))) (ADVP (RB up) (RB there))))))))) (. !)))', 'lemma': [(u'She', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'seen', u'see', u'VBN'), (u'the', u'the', u'DT'), (u'yarn', u'yarn', u'NN'), (u'that', u'that', u'WDT'), (u'was', u'be', u'VBD'), (u'kept', u'keep', u'VBN'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'basket', u'basket', u'NN'), (u'up', u'up', u'RB'), (u'there', u'there', u'RB'), (u'!', u'!', u'.')]}, 'tokens': ['She', 'had', 'seen', 'the', 'yarn', 'that', 'was', 'kept', 'in', 'a', 'basket', 'up', 'there', '!']}, {'string': " `` That looks like it 's fun to play with! ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (DT That)) (VP (VBZ looks) (PP (IN like) (NP (NP (PRP it) (POS 's)) (NN fun) (S (VP (TO to) (VP (VB play) (PP (IN with)))))))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'That', u'that', u'DT'), (u'looks', u'look', u'VBZ'), (u'like', u'like', u'IN'), (u'it', u'it', u'PRP'), (u"'s", u"'s", u'POS'), (u'fun', u'fun', u'NN'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'That', 'looks', 'like', 'it', "'s", 'fun', 'to', 'play', 'with', '!', "''"]}, {'string': ' said Fuzzy.', 'parse': {'tree': '(ROOT (S (VP (VBD said) (NP (NNP Fuzzy))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Fuzzy', u'Fuzzy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Fuzzy', '.']}, {'string': ' `` But how could we get to it?', 'parse': {'tree': '(ROOT (S (`` ``) (ADVP (CC But)) (S (SBAR (WHADVP (WRB how)) (S (VP (MD could)))) (NP (PRP we)) (VP (VBP get) (PP (TO to) (NP (PRP it))))) (. ?)))', 'lemma': [(u'``', u'``', u'``'), (u'But', u'but', u'CC'), (u'how', u'how', u'WRB'), (u'could', u'could', u'MD'), (u'we', u'we', u'PRP'), (u'get', u'get', u'VBP'), (u'to', u'to', u'TO'), (u'it', u'it', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['``', 'But', 'how', 'could', 'we', 'get', 'to', 'it', '?']}, {'string': " It 's so high up, '' he wondered.", 'parse': {'tree': "(ROOT (S (S (NP (PRP It)) (VP (VBZ 's) (ADJP (RB so) (JJ high)) (ADVP (RB up)))) (, ,) ('' '') (NP (PRP he)) (VP (VBD wondered)) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'so', u'so', u'RB'), (u'high', u'high', u'JJ'), (u'up', u'up', u'RB'), (u',', u',', u','), (u"''", u"''", u"''"), (u'he', u'he', u'PRP'), (u'wondered', u'wonder', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['It', "'s", 'so', 'high', 'up', ',', "''", 'he', 'wondered', '.']}, {'string': " `` I have an idea, '' said Snowball.", 'parse': {'tree': "(ROOT (SINV (`` ``) (S (NP (PRP I)) (VP (VBP have) (NP (DT an) (NN idea)))) (, ,) ('' '') (VP (VBD said)) (NP (NNP Snowball)) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'have', u'have', u'VBP'), (u'an', u'a', u'DT'), (u'idea', u'idea', u'NN'), (u',', u',', u','), (u"''", u"''", u"''"), (u'said', u'say', u'VBD'), (u'Snowball', u'Snowball', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'I', 'have', 'an', 'idea', ',', "''", 'said', 'Snowball', '.']}, {'string': " `` Watch this! ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Watch) (NP (DT this))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Watch', u'watch', u'VB'), (u'this', u'this', u'DT'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Watch', 'this', '!', "''"]}, {'string': ' Suddenly, Snowball jumped up on to the couch.', 'parse': {'tree': '(ROOT (S (ADVP (RB Suddenly)) (, ,) (NP (NNP Snowball)) (VP (VBD jumped) (PRT (RP up)) (PP (IN on) (PP (TO to) (NP (DT the) (NN couch))))) (. .)))', 'lemma': [(u'Suddenly', u'suddenly', u'RB'), (u',', u',', u','), (u'Snowball', u'Snowball', u'NNP'), (u'jumped', u'jump', u'VBD'), (u'up', u'up', u'RP'), (u'on', u'on', u'IN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'couch', u'couch', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Suddenly', ',', 'Snowball', 'jumped', 'up', 'on', 'to', 'the', 'couch', '.']}, {'string': " `` What are you doing? ''", 'parse': {'tree': "(ROOT (SBARQ (`` ``) (WHNP (WP What)) (SQ (VBP are) (NP (PRP you)) (VP (VBG doing))) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'What', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'you', u'you', u'PRP'), (u'doing', u'do', u'VBG'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'What', 'are', 'you', 'doing', '?', "''"]}, {'string': ' asked Fuzzy.', 'parse': {'tree': '(ROOT (S (VP (VBN asked) (ADVP (RB Fuzzy))) (. .)))', 'lemma': [(u'asked', u'ask', u'VBN'), (u'Fuzzy', u'fuzzy', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['asked', 'Fuzzy', '.']}, {'string': " `` Just watch! ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (NNP Just)) (VP (VBP watch)) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Just', u'Just', u'NNP'), (u'watch', u'watch', u'VBP'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Just', 'watch', '!', "''"]}, {'string': ' said Snowball.', 'parse': {'tree': '(ROOT (S (VP (VBD said) (NP (NNP Snowball))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Snowball', u'Snowball', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Snowball', '.']}, {'string': ' Snowball then jumped to the table next to the couch.', 'parse': {'tree': '(ROOT (S (NP (NNP Snowball)) (ADVP (RB then)) (VP (VBD jumped) (PP (TO to) (NP (DT the) (NN table) (JJ next))) (PP (TO to) (NP (DT the) (NN couch)))) (. .)))', 'lemma': [(u'Snowball', u'Snowball', u'NNP'), (u'then', u'then', u'RB'), (u'jumped', u'jump', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'table', u'table', u'NN'), (u'next', u'next', u'JJ'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'couch', u'couch', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Snowball', 'then', 'jumped', 'to', 'the', 'table', 'next', 'to', 'the', 'couch', '.']}, {'string': ' Then, she jumped to the middle shelf.', 'parse': {'tree': '(ROOT (S (ADVP (RB Then)) (, ,) (NP (PRP she)) (VP (VBD jumped) (PP (TO to) (NP (DT the) (JJ middle) (NN shelf)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'jumped', u'jump', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'middle', u'middle', u'JJ'), (u'shelf', u'shelf', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', ',', 'she', 'jumped', 'to', 'the', 'middle', 'shelf', '.']}, {'string': " `` That 's dangerous! ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (DT That)) (VP (VBZ 's) (ADJP (JJ dangerous))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'That', u'that', u'DT'), (u"'s", u'be', u'VBZ'), (u'dangerous', u'dangerous', u'JJ'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'That', "'s", 'dangerous', '!', "''"]}, {'string': ' said Fuzzy.', 'parse': {'tree': '(ROOT (S (VP (VBD said) (NP (NNP Fuzzy))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Fuzzy', u'Fuzzy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Fuzzy', '.']}, {'string': ' Snowball and Fuzzy were still small kittens.', 'parse': {'tree': '(ROOT (S (NP (NNP Snowball) (CC and) (NNP Fuzzy)) (VP (VBD were) (ADVP (RB still)) (NP (JJ small) (NNS kittens))) (. .)))', 'lemma': [(u'Snowball', u'Snowball', u'NNP'), (u'and', u'and', u'CC'), (u'Fuzzy', u'Fuzzy', u'NNP'), (u'were', u'be', u'VBD'), (u'still', u'still', u'RB'), (u'small', u'small', u'JJ'), (u'kittens', u'kitten', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Snowball', 'and', 'Fuzzy', 'were', 'still', 'small', 'kittens', '.']}, {'string': " They were n't used to jumping very high yet.", 'parse': {'tree': "(ROOT (S (NP (PRP They)) (VP (VBD were) (RB n't) (VP (VBN used) (PP (TO to) (S (VP (VBG jumping) (ADJP (RB very) (JJ high)) (ADVP (RB yet))))))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'used', u'use', u'VBN'), (u'to', u'to', u'TO'), (u'jumping', u'jump', u'VBG'), (u'very', u'very', u'RB'), (u'high', u'high', u'JJ'), (u'yet', u'yet', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', "n't", 'used', 'to', 'jumping', 'very', 'high', 'yet', '.']}, {'string': " `` Do n't worry, I 'll be careful.", 'parse': {'tree': "(ROOT (S (`` ``) (S (VP (VBP Do) (RB n't) (VP (VB worry)))) (, ,) (NP (PRP I)) (VP (MD 'll) (VP (VB be) (ADJP (JJ careful)))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Do', u'do', u'VBP'), (u"n't", u'not', u'RB'), (u'worry', u'worry', u'VB'), (u',', u',', u','), (u'I', u'I', u'PRP'), (u"'ll", u"'ll", u'MD'), (u'be', u'be', u'VB'), (u'careful', u'careful', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Do', "n't", 'worry', ',', 'I', "'ll", 'be', 'careful', '.']}, {'string': " I think we 're allowed to be up here. ''", 'parse': {'tree': "(ROOT (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (PRP we)) (VP (VBP 're) (VP (VBN allowed) (S (VP (TO to) (VP (VB be) (ADVP (RB up) (RB here)))))))))) (. .) ('' '')))", 'lemma': [(u'I', u'I', u'PRP'), (u'think', u'think', u'VBP'), (u'we', u'we', u'PRP'), (u"'re", u'be', u'VBP'), (u'allowed', u'allow', u'VBN'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'up', u'up', u'RB'), (u'here', u'here', u'RB'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['I', 'think', 'we', "'re", 'allowed', 'to', 'be', 'up', 'here', '.', "''"]}, {'string': ' said Snowball.', 'parse': {'tree': '(ROOT (S (VP (VBD said) (NP (NNP Snowball))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Snowball', u'Snowball', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Snowball', '.']}, {'string': ' Then, she jumped all the way to the top shelf, where the yarn was.', 'parse': {'tree': '(ROOT (S (ADVP (RB Then)) (, ,) (NP (PRP she)) (VP (VBD jumped) (NP (PDT all) (DT the) (NN way)) (PP (TO to) (NP (DT the) (JJ top) (NN shelf))) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (NN yarn)) (VP (VBD was))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'jumped', u'jump', u'VBD'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'way', u'way', u'NN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'top', u'top', u'JJ'), (u'shelf', u'shelf', u'NN'), (u',', u',', u','), (u'where', u'where', u'WRB'), (u'the', u'the', u'DT'), (u'yarn', u'yarn', u'NN'), (u'was', u'be', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Then', ',', 'she', 'jumped', 'all', 'the', 'way', 'to', 'the', 'top', 'shelf', ',', 'where', 'the', 'yarn', 'was', '.']}, {'string': " `` Look out below! ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Look) (PRT (RP out)) (PP (IN below))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Look', u'look', u'VB'), (u'out', u'out', u'RP'), (u'below', u'below', u'IN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Look', 'out', 'below', '!', "''"]}, {'string': ' she yelled, and pushed the ball of yarn off the shelf and on to the floor.', 'parse': {'tree': '(ROOT (S (NP (PRP she)) (VP (VP (VBD yelled)) (, ,) (CC and) (VP (VBD pushed) (NP (NP (DT the) (NN ball)) (PP (IN of) (NP (NN yarn)))) (PP (PP (IN off) (NP (DT the) (NN shelf))) (CC and) (PP (IN on) (PP (TO to) (NP (DT the) (NN floor))))))) (. .)))', 'lemma': [(u'she', u'she', u'PRP'), (u'yelled', u'yell', u'VBD'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'pushed', u'push', u'VBD'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'off', u'off', u'IN'), (u'the', u'the', u'DT'), (u'shelf', u'shelf', u'NN'), (u'and', u'and', u'CC'), (u'on', u'on', u'IN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'floor', u'floor', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['she', 'yelled', ',', 'and', 'pushed', 'the', 'ball', 'of', 'yarn', 'off', 'the', 'shelf', 'and', 'on', 'to', 'the', 'floor', '.']}, {'string': " `` Whoa! ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Whoa)) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Whoa', u'whoa', u'VB'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Whoa', '!', "''"]}, {'string': ' said Fuzzy.', 'parse': {'tree': '(ROOT (S (VP (VBD said) (NP (NNP Fuzzy))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Fuzzy', u'Fuzzy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Fuzzy', '.']}, {'string': " `` Thanks! ''", 'parse': {'tree': "(ROOT (INTJ (`` ``) (UH Thanks) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Thanks', u'thanks', u'UH'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Thanks', '!', "''"]}, {'string': ' Snowball then jumped down to the middle shelf, and down to the table, and down to the couch, and back to the floor.', 'parse': {'tree': '(ROOT (S (NP (NNP Snowball)) (ADVP (RB then)) (VP (VBD jumped) (PRT (RP down)) (PP (PP (TO to) (NP (DT the) (JJ middle) (NN shelf))) (, ,) (CC and) (ADVP (RB down)) (PP (TO to) (NP (DT the) (NN table))) (, ,) (CC and) (RB down) (PP (TO to) (NP (DT the) (NN couch))) (, ,) (CC and) (RB back) (PP (TO to) (NP (DT the) (NN floor))))) (. .)))', 'lemma': [(u'Snowball', u'Snowball', u'NNP'), (u'then', u'then', u'RB'), (u'jumped', u'jump', u'VBD'), (u'down', u'down', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'middle', u'middle', u'JJ'), (u'shelf', u'shelf', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'down', u'down', u'RB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'table', u'table', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'down', u'down', u'RB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'couch', u'couch', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'back', u'back', u'RB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'floor', u'floor', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Snowball', 'then', 'jumped', 'down', 'to', 'the', 'middle', 'shelf', ',', 'and', 'down', 'to', 'the', 'table', ',', 'and', 'down', 'to', 'the', 'couch', ',', 'and', 'back', 'to', 'the', 'floor', '.']}, {'string': ' There, she and her brother played with the ball of yarn until they got tired and took a nap.', 'parse': {'tree': '(ROOT (S (ADVP (RB There)) (, ,) (NP (NP (PRP she)) (CC and) (NP (PRP$ her) (NN brother))) (VP (VBD played) (PP (IN with) (NP (NP (DT the) (NN ball)) (PP (IN of) (NP (NN yarn))))) (SBAR (IN until) (S (NP (PRP they)) (VP (VP (VBD got) (S (ADJP (JJ tired)))) (CC and) (VP (VBD took) (NP (DT a) (NN nap))))))) (. .)))', 'lemma': [(u'There', u'there', u'RB'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'brother', u'brother', u'NN'), (u'played', u'play', u'VBD'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'until', u'until', u'IN'), (u'they', u'they', u'PRP'), (u'got', u'get', u'VBD'), (u'tired', u'tired', u'JJ'), (u'and', u'and', u'CC'), (u'took', u'take', u'VBD'), (u'a', u'a', u'DT'), (u'nap', u'nap', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', ',', 'she', 'and', 'her', 'brother', 'played', 'with', 'the', 'ball', 'of', 'yarn', 'until', 'they', 'got', 'tired', 'and', 'took', 'a', 'nap', '.']}], 'questions': [{'question': {'string': ' Why was it dangerous for Snowball to get the ball of yarn?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD was) (NP (PRP it)) (VP (VBN dangerous) (PP (IN for) (NP (NNP Snowball))) (S (VP (TO to) (VP (VB get) (NP (NP (DT the) (NN ball)) (PP (IN of) (NP (NN yarn))))))))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'was', u'be', u'VBD'), (u'it', u'it', u'PRP'), (u'dangerous', u'dangerous', u'VBN'), (u'for', u'for', u'IN'), (u'Snowball', u'Snowball', u'NNP'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'was', 'it', 'dangerous', 'for', 'Snowball', 'to', 'get', 'the', 'ball', 'of', 'yarn', '?']}, 'answers': [{'string': ' Balls of yarn are dangerous for kittens to play with.', 'parse': {'tree': '(ROOT (S (NP (NP (NNS Balls)) (PP (IN of) (NP (NN yarn)))) (VP (VBP are) (ADJP (JJ dangerous) (PP (IN for) (NP (NNS kittens) (S (VP (TO to) (VP (VB play) (PP (IN with))))))))) (. .)))', 'lemma': [(u'Balls', u'ball', u'NNS'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'are', u'be', u'VBP'), (u'dangerous', u'dangerous', u'JJ'), (u'for', u'for', u'IN'), (u'kittens', u'kitten', u'NNS'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['Balls', 'of', 'yarn', 'are', 'dangerous', 'for', 'kittens', 'to', 'play', 'with', '.']}, {'string': ' Jumping is bad for her.', 'parse': {'tree': '(ROOT (S (NP (NNP Jumping)) (VP (VBZ is) (ADJP (JJ bad) (PP (IN for) (NP (PRP her))))) (. .)))', 'lemma': [(u'Jumping', u'Jumping', u'NNP'), (u'is', u'be', u'VBZ'), (u'bad', u'bad', u'JJ'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Jumping', 'is', 'bad', 'for', 'her', '.']}, {'string': ' She is not allowed to be on the shelf.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ is) (RB not) (VP (VBN allowed) (S (VP (TO to) (VP (VB be) (PP (IN on) (NP (DT the) (NN shelf)))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'is', u'be', u'VBZ'), (u'not', u'not', u'RB'), (u'allowed', u'allow', u'VBN'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'shelf', u'shelf', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'is', 'not', 'allowed', 'to', 'be', 'on', 'the', 'shelf', '.']}, {'string': " She is still small, and was n't used to jumping very high yet.", 'parse': {'tree': "(ROOT (S (NP (PRP She)) (VP (VP (VBZ is) (ADVP (RB still)) (ADJP (JJ small))) (, ,) (CC and) (VP (VBD was) (RB n't) (VP (VBN used) (PP (TO to) (S (VP (VBG jumping) (ADJP (RB very) (JJ high)) (ADVP (RB yet)))))))) (. .)))", 'lemma': [(u'She', u'she', u'PRP'), (u'is', u'be', u'VBZ'), (u'still', u'still', u'RB'), (u'small', u'small', u'JJ'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'used', u'use', u'VBN'), (u'to', u'to', u'TO'), (u'jumping', u'jump', u'VBG'), (u'very', u'very', u'RB'), (u'high', u'high', u'JJ'), (u'yet', u'yet', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'is', 'still', 'small', ',', 'and', 'was', "n't", 'used', 'to', 'jumping', 'very', 'high', 'yet', '.']}], 'mode': 0}, {'question': {'string': ' Where were the kittens playing?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD were) (NP (DT the) (JJ kittens) (NN playing))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'were', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'kittens', u'kittens', u'JJ'), (u'playing', u'playing', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'were', 'the', 'kittens', 'playing', '?']}, 'answers': [{'string': ' In the living room in the house', 'parse': {'tree': '(ROOT (PP (IN In) (NP (NP (DT the) (VBG living) (NN room)) (PP (IN in) (NP (DT the) (NN house))))))', 'lemma': [(u'In', u'in', u'IN'), (u'the', u'the', u'DT'), (u'living', u'live', u'VBG'), (u'room', u'room', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN')]}, 'tokens': ['In', 'the', 'living', 'room', 'in', 'the', 'house']}, {'string': ' The bathroom', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN bathroom))))', 'lemma': [(u'The', u'the', u'DT'), (u'bathroom', u'bathroom', u'NN')]}, 'tokens': ['The', 'bathroom']}, {'string': ' Outside', 'parse': {'tree': '(ROOT (ADVP (JJ Outside)))', 'lemma': [(u'Outside', u'outside', u'JJ')]}, 'tokens': ['Outside']}, {'string': ' The bedroom', 'parse': {'tree': '(ROOT (X (DT The) (ADJP (NN bedroom))))', 'lemma': [(u'The', u'the', u'DT'), (u'bedroom', u'bedroom', u'NN')]}, 'tokens': ['The', 'bedroom']}], 'mode': 0}, {'question': {'string': ' What did the kittens do after they finished playing with each other?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (DT the) (NNS kittens)) (VP (VB do) (SBAR (IN after) (S (NP (PRP they)) (VP (VBD finished) (S (VP (VBG playing) (PP (IN with) (NP (DT each) (JJ other)))))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'kittens', u'kitten', u'NNS'), (u'do', u'do', u'VB'), (u'after', u'after', u'IN'), (u'they', u'they', u'PRP'), (u'finished', u'finish', u'VBD'), (u'playing', u'play', u'VBG'), (u'with', u'with', u'IN'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'the', 'kittens', 'do', 'after', 'they', 'finished', 'playing', 'with', 'each', 'other', '?']}, 'answers': [{'string': ' Went outside.', 'parse': {'tree': '(ROOT (S (VP (VB Went) (ADVP (RB outside))) (. .)))', 'lemma': [(u'Went', u'go', u'VB'), (u'outside', u'outside', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Went', 'outside', '.']}, {'string': ' Took a nap.', 'parse': {'tree': '(ROOT (S (VP (VB Took) (NP (DT a) (NN nap))) (. .)))', 'lemma': [(u'Took', u'take', u'VB'), (u'a', u'a', u'DT'), (u'nap', u'nap', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Took', 'a', 'nap', '.']}, {'string': ' Played with their humans.', 'parse': {'tree': '(ROOT (S (VP (VBN Played) (PP (IN with) (NP (PRP$ their) (NNS humans)))) (. .)))', 'lemma': [(u'Played', u'play', u'VBN'), (u'with', u'with', u'IN'), (u'their', u'they', u'PRP$'), (u'humans', u'human', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Played', 'with', 'their', 'humans', '.']}, {'string': ' Ate their food.', 'parse': {'tree': '(ROOT (S (VP (VBD Ate) (NP (PRP$ their) (NN food))) (. .)))', 'lemma': [(u'Ate', u'eat', u'VBD'), (u'their', u'they', u'PRP$'), (u'food', u'food', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ate', 'their', 'food', '.']}], 'mode': 1}, {'question': {'string': ' Which kitten got the ball of yarn?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT Which) (NP (NN kitten))) (SQ (VP (VBD got) (NP (NP (DT the) (NN ball)) (PP (IN of) (NP (NN yarn)))))) (. ?)))', 'lemma': [(u'Which', u'which', u'WDT'), (u'kitten', u'kitten', u'NN'), (u'got', u'get', u'VBD'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Which', 'kitten', 'got', 'the', 'ball', 'of', 'yarn', '?']}, 'answers': [{'string': ' Fuzzy', 'parse': {'tree': '(ROOT (ADVP (RB Fuzzy)))', 'lemma': [(u'Fuzzy', u'fuzzy', u'RB')]}, 'tokens': ['Fuzzy']}, {'string': ' Snowball', 'parse': {'tree': '(ROOT (NP (NNP Snowball)))', 'lemma': [(u'Snowball', u'Snowball', u'NNP')]}, 'tokens': ['Snowball']}, {'string': ' A kitten that is not Fuzzy or Snowball.', 'parse': {'tree': '(ROOT (NP (DT A) (NN kitten) (SBAR (WHNP (WDT that)) (S (VP (VBZ is) (RB not) (NP (NNP Fuzzy) (CC or) (NNP Snowball))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'kitten', u'kitten', u'NN'), (u'that', u'that', u'WDT'), (u'is', u'be', u'VBZ'), (u'not', u'not', u'RB'), (u'Fuzzy', u'Fuzzy', u'NNP'), (u'or', u'or', u'CC'), (u'Snowball', u'Snowball', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'kitten', 'that', 'is', 'not', 'Fuzzy', 'or', 'Snowball', '.']}, {'string': ' They got the ball of yarn together.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD got) (NP (NP (DT the) (NN ball)) (PP (IN of) (NP (NN yarn)))) (ADVP (RB together))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'got', u'get', u'VBD'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'of', u'of', u'IN'), (u'yarn', u'yarn', u'NN'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'got', 'the', 'ball', 'of', 'yarn', 'together', '.']}], 'mode': 0}]}
{'sentences': [{'string': " Bobby 's grandmother was studying at a school in New York City.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Bobby) (POS 's)) (NN grandmother)) (VP (VBD was) (VP (VBG studying) (PP (IN at) (NP (NP (DT a) (NN school)) (PP (IN in) (NP (NNP New) (NNP York) (NNP City))))))) (. .)))", 'lemma': [(u'Bobby', u'Bobby', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandmother', u'grandmother', u'NN'), (u'was', u'be', u'VBD'), (u'studying', u'study', u'VBG'), (u'at', u'at', u'IN'), (u'a', u'a', u'DT'), (u'school', u'school', u'NN'), (u'in', u'in', u'IN'), (u'New', u'New', u'NNP'), (u'York', u'York', u'NNP'), (u'City', u'City', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Bobby', "'s", 'grandmother', 'was', 'studying', 'at', 'a', 'school', 'in', 'New', 'York', 'City', '.']}, {'string': ' She lived at the school year round.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD lived) (PP (IN at) (NP (DT the) (NN school) (NN year) (NN round)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'lived', u'live', u'VBD'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'school', u'school', u'NN'), (u'year', u'year', u'NN'), (u'round', u'round', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'lived', 'at', 'the', 'school', 'year', 'round', '.']}, {'string': " So Bobby 's mother put him on a bus to the city and his grandmother picked him up at the Port Authority bus stop.", 'parse': {'tree': "(ROOT (S (CC So) (S (NP (NP (NNP Bobby) (POS 's)) (NN mother)) (VP (VBD put) (NP (PRP him)) (PP (IN on) (NP (DT a) (NN bus))) (PP (TO to) (NP (DT the) (NN city))))) (CC and) (S (NP (PRP$ his) (NN grandmother)) (VP (VBD picked) (NP (PRP him)) (PRT (RP up)) (PP (IN at) (NP (DT the) (NNP Port) (NNP Authority) (NN bus) (NN stop))))) (. .)))", 'lemma': [(u'So', u'so', u'CC'), (u'Bobby', u'Bobby', u'NNP'), (u"'s", u"'s", u'POS'), (u'mother', u'mother', u'NN'), (u'put', u'put', u'VBD'), (u'him', u'he', u'PRP'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'bus', u'bus', u'NN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'grandmother', u'grandmother', u'NN'), (u'picked', u'pick', u'VBD'), (u'him', u'he', u'PRP'), (u'up', u'up', u'RP'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'Port', u'Port', u'NNP'), (u'Authority', u'Authority', u'NNP'), (u'bus', u'bus', u'NN'), (u'stop', u'stop', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'Bobby', "'s", 'mother', 'put', 'him', 'on', 'a', 'bus', 'to', 'the', 'city', 'and', 'his', 'grandmother', 'picked', 'him', 'up', 'at', 'the', 'Port', 'Authority', 'bus', 'stop', '.']}, {'string': ' They took the train back to the school.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD took) (NP (DT the) (NN train)) (ADVP (RB back)) (PP (TO to) (NP (DT the) (NN school)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'took', u'take', u'VBD'), (u'the', u'the', u'DT'), (u'train', u'train', u'NN'), (u'back', u'back', u'RB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'took', 'the', 'train', 'back', 'to', 'the', 'school', '.']}, {'string': " They put Bobby 's backpack on a rack in the guest room.", 'parse': {'tree': "(ROOT (S (NP (PRP They)) (VP (VBD put) (NP (NP (NNP Bobby) (POS 's)) (NN backpack)) (PP (IN on) (NP (NP (DT a) (NN rack)) (PP (IN in) (NP (DT the) (NN guest) (NN room)))))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u'put', u'put', u'VBD'), (u'Bobby', u'Bobby', u'NNP'), (u"'s", u"'s", u'POS'), (u'backpack', u'backpack', u'NN'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'rack', u'rack', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'guest', u'guest', u'NN'), (u'room', u'room', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'put', 'Bobby', "'s", 'backpack', 'on', 'a', 'rack', 'in', 'the', 'guest', 'room', '.']}, {'string': ' Then Bobby and his grandmother went out for a walk.', 'parse': {'tree': '(ROOT (S (ADVP (RB Then)) (NP (NP (NNP Bobby)) (CC and) (NP (PRP$ his) (NN grandmother))) (VP (VBD went) (PRT (RP out)) (PP (IN for) (NP (DT a) (NN walk)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'Bobby', u'Bobby', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'grandmother', u'grandmother', u'NN'), (u'went', u'go', u'VBD'), (u'out', u'out', u'RP'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'walk', u'walk', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'Bobby', 'and', 'his', 'grandmother', 'went', 'out', 'for', 'a', 'walk', '.']}, {'string': ' They stopped at a corner shop for pizza and sodas.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD stopped) (PP (IN at) (NP (DT a) (NN corner) (NN shop))) (PP (IN for) (NP (NN pizza) (CC and) (NNS sodas)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'stopped', u'stop', u'VBD'), (u'at', u'at', u'IN'), (u'a', u'a', u'DT'), (u'corner', u'corner', u'NN'), (u'shop', u'shop', u'NN'), (u'for', u'for', u'IN'), (u'pizza', u'pizza', u'NN'), (u'and', u'and', u'CC'), (u'sodas', u'soda', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'stopped', 'at', 'a', 'corner', 'shop', 'for', 'pizza', 'and', 'sodas', '.']}, {'string': ' Then they walked to the Empire State Building.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VBD walked) (PP (TO to) (NP (DT the) (NNP Empire) (NNP State) (NNP Building)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'walked', u'walk', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'Empire', u'Empire', u'NNP'), (u'State', u'State', u'NNP'), (u'Building', u'Building', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'walked', 'to', 'the', 'Empire', 'State', 'Building', '.']}, {'string': ' At the top of the Empire State Building they looked out over the city.', 'parse': {'tree': '(ROOT (S (PP (IN At) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT the) (NNP Empire) (NNP State) (NNP Building))))) (NP (PRP they)) (VP (VBD looked) (PRT (RP out)) (PP (IN over) (NP (DT the) (NN city)))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'the', u'the', u'DT'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'Empire', u'Empire', u'NNP'), (u'State', u'State', u'NNP'), (u'Building', u'Building', u'NNP'), (u'they', u'they', u'PRP'), (u'looked', u'look', u'VBD'), (u'out', u'out', u'RP'), (u'over', u'over', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'the', 'top', 'of', 'the', 'Empire', 'State', 'Building', 'they', 'looked', 'out', 'over', 'the', 'city', '.']}, {'string': ' They counted all the bridges and looked at all the tall buildings.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD counted) (NP (PDT all) (DT the) (NNS bridges))) (CC and) (VP (VBD looked) (PP (IN at) (NP (PDT all) (DT the) (JJ tall) (NNS buildings))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'counted', u'count', u'VBD'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'bridges', u'bridge', u'NNS'), (u'and', u'and', u'CC'), (u'looked', u'look', u'VBD'), (u'at', u'at', u'IN'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'tall', u'tall', u'JJ'), (u'buildings', u'building', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'counted', 'all', 'the', 'bridges', 'and', 'looked', 'at', 'all', 'the', 'tall', 'buildings', '.']}, {'string': ' Bobby bought three postcards and a little snow globe in the shop.', 'parse': {'tree': '(ROOT (S (NP (NNP Bobby)) (VP (VBD bought) (NP (NP (CD three) (NNS postcards)) (CC and) (NP (DT a) (JJ little) (NN snow) (NN globe))) (PP (IN in) (NP (DT the) (NN shop)))) (. .)))', 'lemma': [(u'Bobby', u'Bobby', u'NNP'), (u'bought', u'buy', u'VBD'), (u'three', u'three', u'CD'), (u'postcards', u'postcard', u'NNS'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'snow', u'snow', u'NN'), (u'globe', u'globe', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'shop', u'shop', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bobby', 'bought', 'three', 'postcards', 'and', 'a', 'little', 'snow', 'globe', 'in', 'the', 'shop', '.']}, {'string': ' Then they took the elevator back to the ground floor.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VBD took) (NP (DT the) (NN elevator)) (ADVP (RB back)) (PP (TO to) (NP (DT the) (NN ground) (NN floor)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'took', u'take', u'VBD'), (u'the', u'the', u'DT'), (u'elevator', u'elevator', u'NN'), (u'back', u'back', u'RB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'ground', u'ground', u'NN'), (u'floor', u'floor', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'took', 'the', 'elevator', 'back', 'to', 'the', 'ground', 'floor', '.']}, {'string': ' Next they took a yellow cab to Central Park.', 'parse': {'tree': '(ROOT (S (ADVP (RB Next)) (NP (PRP they)) (VP (VBD took) (NP (DT a) (JJ yellow) (NN cab)) (PP (TO to) (NP (NNP Central) (NNP Park)))) (. .)))', 'lemma': [(u'Next', u'next', u'RB'), (u'they', u'they', u'PRP'), (u'took', u'take', u'VBD'), (u'a', u'a', u'DT'), (u'yellow', u'yellow', u'JJ'), (u'cab', u'cab', u'NN'), (u'to', u'to', u'TO'), (u'Central', u'Central', u'NNP'), (u'Park', u'Park', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Next', 'they', 'took', 'a', 'yellow', 'cab', 'to', 'Central', 'Park', '.']}, {'string': ' They rode the carousel and went to the zoo.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD rode) (NP (DT the) (NN carousel))) (CC and) (VP (VBD went) (PP (TO to) (NP (DT the) (NN zoo))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'rode', u'ride', u'VBD'), (u'the', u'the', u'DT'), (u'carousel', u'carousel', u'NN'), (u'and', u'and', u'CC'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'zoo', u'zoo', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'rode', 'the', 'carousel', 'and', 'went', 'to', 'the', 'zoo', '.']}, {'string': " Bobby 's favorite animals were the monkeys.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Bobby) (POS 's)) (JJ favorite) (NNS animals)) (VP (VBD were) (NP (DT the) (NNS monkeys))) (. .)))", 'lemma': [(u'Bobby', u'Bobby', u'NNP'), (u"'s", u"'s", u'POS'), (u'favorite', u'favorite', u'JJ'), (u'animals', u'animal', u'NNS'), (u'were', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'monkeys', u'monkey', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Bobby', "'s", 'favorite', 'animals', 'were', 'the', 'monkeys', '.']}, {'string': ' He did not like the snakes at all.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD did) (RB not) (VP (VB like) (NP (DT the) (NNS snakes)) (ADVP (IN at) (DT all)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'like', u'like', u'VB'), (u'the', u'the', u'DT'), (u'snakes', u'snake', u'NNS'), (u'at', u'at', u'IN'), (u'all', u'all', u'DT'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'did', 'not', 'like', 'the', 'snakes', 'at', 'all', '.']}, {'string': ' After they had ice cream cones, Bobby and his grandmother took the train back to her school.', 'parse': {'tree': '(ROOT (S (SBAR (IN After) (S (NP (PRP they)) (VP (VBD had) (NP (NN ice) (NN cream) (NNS cones))))) (, ,) (NP (NP (NNP Bobby)) (CC and) (NP (PRP$ his) (NN grandmother))) (VP (VBD took) (NP (DT the) (NN train)) (ADVP (RB back)) (PP (TO to) (NP (PRP$ her) (NN school)))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cones', u'cone', u'NNS'), (u',', u',', u','), (u'Bobby', u'Bobby', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'grandmother', u'grandmother', u'NN'), (u'took', u'take', u'VBD'), (u'the', u'the', u'DT'), (u'train', u'train', u'NN'), (u'back', u'back', u'RB'), (u'to', u'to', u'TO'), (u'her', u'she', u'PRP$'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'they', 'had', 'ice', 'cream', 'cones', ',', 'Bobby', 'and', 'his', 'grandmother', 'took', 'the', 'train', 'back', 'to', 'her', 'school', '.']}, {'string': ' They had salads for supper.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD had) (NP (NP (NNS salads)) (PP (IN for) (NP (NN supper))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'salads', u'salad', u'NNS'), (u'for', u'for', u'IN'), (u'supper', u'supper', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'had', 'salads', 'for', 'supper', '.']}, {'string': ' Then they read a story together.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VBP read) (NP (DT a) (NN story)) (ADVP (RB together))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'read', u'read', u'VBP'), (u'a', u'a', u'DT'), (u'story', u'story', u'NN'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'read', 'a', 'story', 'together', '.']}, {'string': " Bobby 's grandmother made up her sofa bed for Bobby as they made plans for the next day.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Bobby) (POS 's)) (NN grandmother)) (VP (VBD made) (PRT (RP up)) (NP (NP (PRP$ her) (NN sofa) (NN bed)) (PP (IN for) (NP (NNP Bobby)))) (SBAR (IN as) (S (NP (PRP they)) (VP (VBD made) (NP (NNS plans)) (PP (IN for) (NP (DT the) (JJ next) (NN day))))))) (. .)))", 'lemma': [(u'Bobby', u'Bobby', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandmother', u'grandmother', u'NN'), (u'made', u'make', u'VBD'), (u'up', u'up', u'RP'), (u'her', u'she', u'PRP$'), (u'sofa', u'sofa', u'NN'), (u'bed', u'bed', u'NN'), (u'for', u'for', u'IN'), (u'Bobby', u'Bobby', u'NNP'), (u'as', u'as', u'IN'), (u'they', u'they', u'PRP'), (u'made', u'make', u'VBD'), (u'plans', u'plan', u'NNS'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bobby', "'s", 'grandmother', 'made', 'up', 'her', 'sofa', 'bed', 'for', 'Bobby', 'as', 'they', 'made', 'plans', 'for', 'the', 'next', 'day', '.']}, {'string': ' Bobby wanted to know if they could go to a baseball game.', 'parse': {'tree': '(ROOT (S (NP (NNP Bobby)) (VP (VBD wanted) (S (VP (TO to) (VP (VB know) (SBAR (IN if) (S (NP (PRP they)) (VP (MD could) (VP (VB go) (PP (TO to) (NP (DT a) (NN baseball) (NN game))))))))))) (. .)))', 'lemma': [(u'Bobby', u'Bobby', u'NNP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'know', u'know', u'VB'), (u'if', u'if', u'IN'), (u'they', u'they', u'PRP'), (u'could', u'could', u'MD'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'a', u'a', u'DT'), (u'baseball', u'baseball', u'NN'), (u'game', u'game', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bobby', 'wanted', 'to', 'know', 'if', 'they', 'could', 'go', 'to', 'a', 'baseball', 'game', '.']}, {'string': ' His grandmother said she would get tickets.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN grandmother)) (VP (VBD said) (SBAR (S (NP (PRP she)) (VP (MD would) (VP (VB get) (NP (NNS tickets))))))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'grandmother', u'grandmother', u'NN'), (u'said', u'say', u'VBD'), (u'she', u'she', u'PRP'), (u'would', u'would', u'MD'), (u'get', u'get', u'VB'), (u'tickets', u'ticket', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'grandmother', 'said', 'she', 'would', 'get', 'tickets', '.']}], 'questions': [{'question': {'string': ' Where were Bobby and his grandmother when they counted all the bridges?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD were) (NP (NP (NP (NNP Bobby)) (CC and) (NP (PRP$ his) (NN grandmother))) (SBAR (WHADVP (WRB when)) (S (NP (PRP they)) (VP (VBD counted) (NP (PDT all) (DT the) (NNS bridges))))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'were', u'be', u'VBD'), (u'Bobby', u'Bobby', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'grandmother', u'grandmother', u'NN'), (u'when', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'counted', u'count', u'VBD'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'bridges', u'bridge', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'were', 'Bobby', 'and', 'his', 'grandmother', 'when', 'they', 'counted', 'all', 'the', 'bridges', '?']}, 'answers': [{'string': " At Bobby 's grandmother 's school.", 'parse': {'tree': "(ROOT (S (ADVP (IN At)) (NP (NP (NNP Bobby) (POS 's)) (NN grandmother)) (VP (VBZ 's) (NP (NN school))) (. .)))", 'lemma': [(u'At', u'at', u'IN'), (u'Bobby', u'Bobby', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandmother', u'grandmother', u'NN'), (u"'s", u'be', u'VBZ'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'Bobby', "'s", 'grandmother', "'s", 'school', '.']}, {'string': ' In a yellow cab.', 'parse': {'tree': '(ROOT (FRAG (PP (IN In) (NP (DT a) (JJ yellow) (NN cab))) (. .)))', 'lemma': [(u'In', u'in', u'IN'), (u'a', u'a', u'DT'), (u'yellow', u'yellow', u'JJ'), (u'cab', u'cab', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['In', 'a', 'yellow', 'cab', '.']}, {'string': ' At the zoo.', 'parse': {'tree': '(ROOT (FRAG (PP (IN At) (NP (DT the) (NN zoo))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'the', u'the', u'DT'), (u'zoo', u'zoo', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'the', 'zoo', '.']}, {'string': ' At the top of the Empire State Building.', 'parse': {'tree': '(ROOT (FRAG (PP (IN At) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT the) (NNP Empire) (NNP State) (NNP Building))))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'the', u'the', u'DT'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'Empire', u'Empire', u'NNP'), (u'State', u'State', u'NNP'), (u'Building', u'Building', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'the', 'top', 'of', 'the', 'Empire', 'State', 'Building', '.']}], 'mode': 1}, {'question': {'string': ' How did Bobby and his grandmother get back to her school from the Port Authority bus stop?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (NP (NNP Bobby)) (CC and) (NP (PRP$ his) (NN grandmother))) (VP (VB get) (ADVP (RB back) (PP (TO to) (NP (PRP$ her) (NN school)))) (PP (IN from) (NP (DT the) (NNP Port) (NNP Authority) (NN bus) (NN stop))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'did', u'do', u'VBD'), (u'Bobby', u'Bobby', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'grandmother', u'grandmother', u'NN'), (u'get', u'get', u'VB'), (u'back', u'back', u'RB'), (u'to', u'to', u'TO'), (u'her', u'she', u'PRP$'), (u'school', u'school', u'NN'), (u'from', u'from', u'IN'), (u'the', u'the', u'DT'), (u'Port', u'Port', u'NNP'), (u'Authority', u'Authority', u'NNP'), (u'bus', u'bus', u'NN'), (u'stop', u'stop', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'did', 'Bobby', 'and', 'his', 'grandmother', 'get', 'back', 'to', 'her', 'school', 'from', 'the', 'Port', 'Authority', 'bus', 'stop', '?']}, 'answers': [{'string': ' They took the bus.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD took) (NP (DT the) (NN bus))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'took', u'take', u'VBD'), (u'the', u'the', u'DT'), (u'bus', u'bus', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'took', 'the', 'bus', '.']}, {'string': ' They rode in a yellow cab.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD rode) (PP (IN in) (NP (DT a) (JJ yellow) (NN cab)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'rode', u'ride', u'VBD'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'yellow', u'yellow', u'JJ'), (u'cab', u'cab', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'rode', 'in', 'a', 'yellow', 'cab', '.']}, {'string': ' They took the train.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD took) (NP (DT the) (NN train))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'took', u'take', u'VBD'), (u'the', u'the', u'DT'), (u'train', u'train', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'took', 'the', 'train', '.']}, {'string': ' They walked.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD walked)) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'walked', u'walk', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'walked', '.']}], 'mode': 1}, {'question': {'string': ' What did Bobby buy before taking the elevator to the ground floor?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Bobby)) (VP (VB buy) (PP (IN before) (S (VP (VBG taking) (NP (DT the) (NN elevator)) (PP (TO to) (NP (DT the) (NN ground) (NN floor)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Bobby', u'Bobby', u'NNP'), (u'buy', u'buy', u'VB'), (u'before', u'before', u'IN'), (u'taking', u'take', u'VBG'), (u'the', u'the', u'DT'), (u'elevator', u'elevator', u'NN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'ground', u'ground', u'NN'), (u'floor', u'floor', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Bobby', 'buy', 'before', 'taking', 'the', 'elevator', 'to', 'the', 'ground', 'floor', '?']}, 'answers': [{'string': ' A monkey.', 'parse': {'tree': '(ROOT (NP (DT A) (NN monkey) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'monkey', u'monkey', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'monkey', '.']}, {'string': ' Three postcards and a snow globe.', 'parse': {'tree': '(ROOT (S (NP (NP (CD Three) (NNS postcards)) (CC and) (NP (DT a) (NN snow))) (VP (VBZ globe)) (. .)))', 'lemma': [(u'Three', u'three', u'CD'), (u'postcards', u'postcard', u'NNS'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'snow', u'snow', u'NN'), (u'globe', u'globe', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['Three', 'postcards', 'and', 'a', 'snow', 'globe', '.']}, {'string': ' Pizza and sodas.', 'parse': {'tree': '(ROOT (NP (NP (NP (NNP Pizza)) (CC and) (NP (NNS sodas))) (. .)))', 'lemma': [(u'Pizza', u'Pizza', u'NNP'), (u'and', u'and', u'CC'), (u'sodas', u'soda', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Pizza', 'and', 'sodas', '.']}, {'string': ' An ice cream cone.', 'parse': {'tree': '(ROOT (S (NP (DT An) (NN ice) (NN cream)) (VP (VBZ cone)) (. .)))', 'lemma': [(u'An', u'a', u'DT'), (u'ice', u'ice', u'NN'), (u'cream', u'cream', u'NN'), (u'cone', u'cone', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['An', 'ice', 'cream', 'cone', '.']}], 'mode': 0}, {'question': {'string': " What kind of tickets did Bobby 's grandmother say she would try to get?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (NNS tickets)))) (SQ (VBD did) (NP (NP (NNP Bobby) (POS 's)) (NN grandmother)) (VP (VB say) (SBAR (S (NP (PRP she)) (VP (MD would) (VP (VB try) (S (VP (TO to) (VP (VB get)))))))))) (. ?)))", 'lemma': [(u'What', u'what', u'WDT'), (u'kind', u'kind', u'NN'), (u'of', u'of', u'IN'), (u'tickets', u'ticket', u'NNS'), (u'did', u'do', u'VBD'), (u'Bobby', u'Bobby', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandmother', u'grandmother', u'NN'), (u'say', u'say', u'VB'), (u'she', u'she', u'PRP'), (u'would', u'would', u'MD'), (u'try', u'try', u'VB'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'kind', 'of', 'tickets', 'did', 'Bobby', "'s", 'grandmother', 'say', 'she', 'would', 'try', 'to', 'get', '?']}, 'answers': [{'string': ' Train tickets.', 'parse': {'tree': '(ROOT (NP (NN Train) (NNS tickets) (. .)))', 'lemma': [(u'Train', u'train', u'NN'), (u'tickets', u'ticket', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Train', 'tickets', '.']}, {'string': ' Elevator tickets.', 'parse': {'tree': '(ROOT (S (VP (VB Elevator) (NP (NNS tickets))) (. .)))', 'lemma': [(u'Elevator', u'elevator', u'VB'), (u'tickets', u'ticket', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Elevator', 'tickets', '.']}, {'string': ' Baseball game tickets.', 'parse': {'tree': '(ROOT (NP (NP (NNP Baseball)) (NP (NN game) (NNS tickets)) (. .)))', 'lemma': [(u'Baseball', u'Baseball', u'NNP'), (u'game', u'game', u'NN'), (u'tickets', u'ticket', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Baseball', 'game', 'tickets', '.']}, {'string': ' Zoo tickets.', 'parse': {'tree': '(ROOT (S (VP (VB Zoo) (NP (NNS tickets))) (. .)))', 'lemma': [(u'Zoo', u'zoo', u'VB'), (u'tickets', u'ticket', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Zoo', 'tickets', '.']}], 'mode': 0}]}
{'sentences': [{'string': ' James was a nice old man who lived by himself.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBD was) (NP (NP (DT a) (JJ nice) (JJ old) (NN man)) (SBAR (WHNP (WP who)) (S (VP (VBD lived) (PP (IN by) (NP (PRP himself)))))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'nice', u'nice', u'JJ'), (u'old', u'old', u'JJ'), (u'man', u'man', u'NN'), (u'who', u'who', u'WP'), (u'lived', u'live', u'VBD'), (u'by', u'by', u'IN'), (u'himself', u'himself', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'was', 'a', 'nice', 'old', 'man', 'who', 'lived', 'by', 'himself', '.']}, {'string': ' Every day he would walk down the road by his house and say hello to everyone.', 'parse': {'tree': '(ROOT (S (NP (DT Every) (NN day)) (NP (PRP he)) (VP (MD would) (VP (VP (VB walk) (PRT (RP down)) (NP (DT the) (NN road)) (PP (IN by) (NP (PRP$ his) (NN house)))) (CC and) (VP (VB say) (NP (UH hello)) (PP (TO to) (NP (NN everyone)))))) (. .)))', 'lemma': [(u'Every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'he', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'walk', u'walk', u'VB'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'road', u'road', u'NN'), (u'by', u'by', u'IN'), (u'his', u'he', u'PRP$'), (u'house', u'house', u'NN'), (u'and', u'and', u'CC'), (u'say', u'say', u'VB'), (u'hello', u'hello', u'UH'), (u'to', u'to', u'TO'), (u'everyone', u'everyone', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Every', 'day', 'he', 'would', 'walk', 'down', 'the', 'road', 'by', 'his', 'house', 'and', 'say', 'hello', 'to', 'everyone', '.']}, {'string': ' It was fun saying hello to everyone but he felt lonely sometimes.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBD was) (NP (NP (NN fun)) (VP (VBG saying) (NP (UH hello)) (PP (TO to) (NP (NN everyone))))))) (CC but) (S (NP (PRP he)) (VP (VBD felt) (ADJP (JJ lonely)) (ADVP (RB sometimes)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'fun', u'fun', u'NN'), (u'saying', u'say', u'VBG'), (u'hello', u'hello', u'UH'), (u'to', u'to', u'TO'), (u'everyone', u'everyone', u'NN'), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'felt', u'feel', u'VBD'), (u'lonely', u'lonely', u'JJ'), (u'sometimes', u'sometimes', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'fun', 'saying', 'hello', 'to', 'everyone', 'but', 'he', 'felt', 'lonely', 'sometimes', '.']}, {'string': ' He wanted a pet to take care of.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD wanted) (NP (DT a) (NN pet) (S (VP (TO to) (VP (VB take) (NP (VB care) (IN of))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'a', u'a', u'DT'), (u'pet', u'pet', u'NN'), (u'to', u'to', u'TO'), (u'take', u'take', u'VB'), (u'care', u'care', u'VB'), (u'of', u'of', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'wanted', 'a', 'pet', 'to', 'take', 'care', 'of', '.']}, {'string': ' One day as he was walking down the road a little brown and spotted puppy came up to him and wanted James to pet him.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day) (SBAR (IN as) (S (NP (PRP he)) (VP (VBD was) (VP (VBG walking) (ADVP (RB down) (NP (DT the) (NN road))) (NP (DT a) (JJ little) (JJ brown) (CC and) (JJ spotted))))))) (ADVP (RB puppy)) (VP (VP (VBD came) (PRT (RP up)) (PP (TO to) (NP (PRP him)))) (CC and) (VP (VBD wanted) (S (NP (NNP James)) (VP (TO to) (VP (VB pet) (NP (PRP him))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'walking', u'walk', u'VBG'), (u'down', u'down', u'RB'), (u'the', u'the', u'DT'), (u'road', u'road', u'NN'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'brown', u'brown', u'JJ'), (u'and', u'and', u'CC'), (u'spotted', u'spotted', u'JJ'), (u'puppy', u'puppy', u'RB'), (u'came', u'come', u'VBD'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'wanted', u'want', u'VBD'), (u'James', u'James', u'NNP'), (u'to', u'to', u'TO'), (u'pet', u'pet', u'VB'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'as', 'he', 'was', 'walking', 'down', 'the', 'road', 'a', 'little', 'brown', 'and', 'spotted', 'puppy', 'came', 'up', 'to', 'him', 'and', 'wanted', 'James', 'to', 'pet', 'him', '.']}, {'string': ' James reached down and petted the puppy and smiled.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VP (VBN reached) (PRT (RP down))) (CC and) (VP (VBN petted) (NP (DT the) (NN puppy))) (CC and) (VP (VBD smiled))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'reached', u'reach', u'VBN'), (u'down', u'down', u'RP'), (u'and', u'and', u'CC'), (u'petted', u'pet', u'VBN'), (u'the', u'the', u'DT'), (u'puppy', u'puppy', u'NN'), (u'and', u'and', u'CC'), (u'smiled', u'smile', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'reached', 'down', 'and', 'petted', 'the', 'puppy', 'and', 'smiled', '.']}, {'string': ' James hoped to see the puppy again.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBD hoped) (S (VP (TO to) (VP (VB see) (NP (DT the) (NN puppy)) (ADVP (RB again)))))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'hoped', u'hope', u'VBD'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'the', u'the', u'DT'), (u'puppy', u'puppy', u'NN'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'hoped', 'to', 'see', 'the', 'puppy', 'again', '.']}, {'string': ' Many days later James went for a walk again.', 'parse': {'tree': '(ROOT (S (ADVP (NP (JJ Many) (NNS days)) (RB later)) (NP (NNP James)) (VP (VBD went) (PP (IN for) (NP (DT a) (NN walk))) (ADVP (RB again))) (. .)))', 'lemma': [(u'Many', u'many', u'JJ'), (u'days', u'day', u'NNS'), (u'later', u'later', u'RB'), (u'James', u'James', u'NNP'), (u'went', u'go', u'VBD'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'walk', u'walk', u'NN'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Many', 'days', 'later', 'James', 'went', 'for', 'a', 'walk', 'again', '.']}, {'string': " He thought to himself, `` I guess I wo n't ever see the brown puppy again.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD thought) (PP (TO to) (NP (PRP himself))) (, ,) (`` ``) (S (NP (PRP I)) (VP (VBP guess) (SBAR (S (NP (PRP I)) (VP (MD wo) (RB n't) (ADVP (RB ever)) (VP (VB see) (NP (DT the) (JJ brown) (NN puppy)) (ADVP (RB again))))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'thought', u'think', u'VBD'), (u'to', u'to', u'TO'), (u'himself', u'himself', u'PRP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'guess', u'guess', u'VBP'), (u'I', u'I', u'PRP'), (u'wo', u'will', u'MD'), (u"n't", u'not', u'RB'), (u'ever', u'ever', u'RB'), (u'see', u'see', u'VB'), (u'the', u'the', u'DT'), (u'brown', u'brown', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'thought', 'to', 'himself', ',', '``', 'I', 'guess', 'I', 'wo', "n't", 'ever', 'see', 'the', 'brown', 'puppy', 'again', '.']}, {'string': " I hoped to see him again. ''", 'parse': {'tree': "(ROOT (S (NP (PRP I)) (VP (VBD hoped) (S (VP (TO to) (VP (VB see) (NP (PRP him)) (ADVP (RB again)))))) (. .) ('' '')))", 'lemma': [(u'I', u'I', u'PRP'), (u'hoped', u'hope', u'VBD'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'him', u'he', u'PRP'), (u'again', u'again', u'RB'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['I', 'hoped', 'to', 'see', 'him', 'again', '.', "''"]}, {'string': " A nice young lady said to James, `` Would you like a puppy? ''", 'parse': {'tree': "(ROOT (S (NP (DT A) (JJ nice) (JJ young) (NN lady)) (VP (VBD said) (PP (TO to) (NP (NNP James))) (, ,) (`` ``) (S (VP (VBG Would) (NP (PRP you)) (PP (IN like) (NP (DT a) (NN puppy)))))) (. ?) ('' '')))", 'lemma': [(u'A', u'a', u'DT'), (u'nice', u'nice', u'JJ'), (u'young', u'young', u'JJ'), (u'lady', u'lady', u'NN'), (u'said', u'say', u'VBD'), (u'to', u'to', u'TO'), (u'James', u'James', u'NNP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Would', u'would', u'VBG'), (u'you', u'you', u'PRP'), (u'like', u'like', u'IN'), (u'a', u'a', u'DT'), (u'puppy', u'puppy', u'NN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['A', 'nice', 'young', 'lady', 'said', 'to', 'James', ',', '``', 'Would', 'you', 'like', 'a', 'puppy', '?', "''"]}, {'string': " James said, `` I would like a puppy that was like the one I petted before. ''", 'parse': {'tree': "(ROOT (S (NP (NNP James)) (VP (VBD said) (, ,) (`` ``) (S (NP (PRP I)) (VP (MD would) (VP (VB like) (NP (NP (DT a) (NN puppy)) (SBAR (WHNP (WDT that)) (S (VP (VBD was) (PP (IN like) (NP (NP (DT the) (NN one)) (SBAR (S (NP (PRP I)) (VP (VBD petted) (ADVP (RB before))))))))))))))) (. .) ('' '')))", 'lemma': [(u'James', u'James', u'NNP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'would', u'would', u'MD'), (u'like', u'like', u'VB'), (u'a', u'a', u'DT'), (u'puppy', u'puppy', u'NN'), (u'that', u'that', u'WDT'), (u'was', u'be', u'VBD'), (u'like', u'like', u'IN'), (u'the', u'the', u'DT'), (u'one', u'one', u'NN'), (u'I', u'I', u'PRP'), (u'petted', u'pet', u'VBD'), (u'before', u'before', u'RB'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['James', 'said', ',', '``', 'I', 'would', 'like', 'a', 'puppy', 'that', 'was', 'like', 'the', 'one', 'I', 'petted', 'before', '.', "''"]}, {'string': ' The lady smiled.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN lady)) (VP (VBD smiled)) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'lady', u'lady', u'NN'), (u'smiled', u'smile', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'lady', 'smiled', '.']}, {'string': ' She was holding the little brown and spotted puppy.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD was) (VP (VBG holding) (NP (DT the) (JJ little) (JJ brown) (CC and) (JJ spotted)) (ADVP (RB puppy)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'holding', u'hold', u'VBG'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'brown', u'brown', u'JJ'), (u'and', u'and', u'CC'), (u'spotted', u'spotted', u'JJ'), (u'puppy', u'puppy', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'was', 'holding', 'the', 'little', 'brown', 'and', 'spotted', 'puppy', '.']}, {'string': ' She told James that she found the little puppy in the woods.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD told) (NP (NNP James)) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD found) (NP (DT the) (JJ little) (NN puppy)) (PP (IN in) (NP (DT the) (NNS woods))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'told', u'tell', u'VBD'), (u'James', u'James', u'NNP'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'found', u'find', u'VBD'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'told', 'James', 'that', 'she', 'found', 'the', 'little', 'puppy', 'in', 'the', 'woods', '.']}, {'string': ' She said that the little puppy did not have a family.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD said) (SBAR (IN that) (S (NP (DT the) (JJ little) (NN puppy)) (VP (VBD did) (RB not) (VP (VB have) (NP (DT a) (NN family))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'said', u'say', u'VBD'), (u'that', u'that', u'IN'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'have', u'have', u'VB'), (u'a', u'a', u'DT'), (u'family', u'family', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'said', 'that', 'the', 'little', 'puppy', 'did', 'not', 'have', 'a', 'family', '.']}, {'string': " James said happily, `` I would love to give the puppy a home! ''", 'parse': {'tree': "(ROOT (S (NP (NNP James)) (VP (VBD said) (ADVP (RB happily)) (, ,) (`` ``) (S (NP (PRP I)) (VP (MD would) (VP (VB love) (S (VP (TO to) (VP (VB give) (NP (DT the) (NN puppy)) (NP (DT a) (NN home))))))))) (. !) ('' '')))", 'lemma': [(u'James', u'James', u'NNP'), (u'said', u'say', u'VBD'), (u'happily', u'happily', u'RB'), (u',', u',', u','), (u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'would', u'would', u'MD'), (u'love', u'love', u'VB'), (u'to', u'to', u'TO'), (u'give', u'give', u'VB'), (u'the', u'the', u'DT'), (u'puppy', u'puppy', u'NN'), (u'a', u'a', u'DT'), (u'home', u'home', u'NN'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['James', 'said', 'happily', ',', '``', 'I', 'would', 'love', 'to', 'give', 'the', 'puppy', 'a', 'home', '!', "''"]}, {'string': ' So James grabbed the little brown and spotted puppy and took him home.', 'parse': {'tree': '(ROOT (S (IN So) (NP (NNP James)) (VP (VP (VBD grabbed) (NP (DT the) (JJ little) (JJ brown) (CC and) (JJ spotted)) (ADVP (RB puppy))) (CC and) (VP (VBD took) (NP (PRP him)) (ADVP (RB home)))) (. .)))', 'lemma': [(u'So', u'so', u'IN'), (u'James', u'James', u'NNP'), (u'grabbed', u'grab', u'VBD'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'brown', u'brown', u'JJ'), (u'and', u'and', u'CC'), (u'spotted', u'spotted', u'JJ'), (u'puppy', u'puppy', u'RB'), (u'and', u'and', u'CC'), (u'took', u'take', u'VBD'), (u'him', u'he', u'PRP'), (u'home', u'home', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'James', 'grabbed', 'the', 'little', 'brown', 'and', 'spotted', 'puppy', 'and', 'took', 'him', 'home', '.']}, {'string': ' James and the little brown puppy became great friends.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP James)) (CC and) (NP (DT the) (JJ little) (JJ brown) (NN puppy))) (VP (VBD became) (NP (JJ great) (NNS friends))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'brown', u'brown', u'JJ'), (u'puppy', u'puppy', u'NN'), (u'became', u'become', u'VBD'), (u'great', u'great', u'JJ'), (u'friends', u'friend', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'and', 'the', 'little', 'brown', 'puppy', 'became', 'great', 'friends', '.']}, {'string': ' James named him Spotty.', 'parse': {'tree': '(ROOT (S (NP (NNP James)) (VP (VBD named) (NP (PRP him)) (ADVP (RB Spotty))) (. .)))', 'lemma': [(u'James', u'James', u'NNP'), (u'named', u'name', u'VBD'), (u'him', u'he', u'PRP'), (u'Spotty', u'spotty', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['James', 'named', 'him', 'Spotty', '.']}], 'questions': [{'question': {'string': ' How many times did James meet the puppy before he took him home?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS times)) (SQ (VBD did) (NP (NNP James)) (VP (VB meet) (NP (DT the) (NN puppy)) (SBAR (IN before) (S (NP (PRP he)) (VP (VBD took) (NP (PRP him)) (ADVP (RB home))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'many', u'many', u'JJ'), (u'times', u'time', u'NNS'), (u'did', u'do', u'VBD'), (u'James', u'James', u'NNP'), (u'meet', u'meet', u'VB'), (u'the', u'the', u'DT'), (u'puppy', u'puppy', u'NN'), (u'before', u'before', u'IN'), (u'he', u'he', u'PRP'), (u'took', u'take', u'VBD'), (u'him', u'he', u'PRP'), (u'home', u'home', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'many', 'times', 'did', 'James', 'meet', 'the', 'puppy', 'before', 'he', 'took', 'him', 'home', '?']}, 'answers': [{'string': ' seven times', 'parse': {'tree': '(ROOT (X (NP (CD seven) (NNS times))))', 'lemma': [(u'seven', u'seven', u'CD'), (u'times', u'time', u'NNS')]}, 'tokens': ['seven', 'times']}, {'string': ' five times', 'parse': {'tree': '(ROOT (X (NP (CD five) (NNS times))))', 'lemma': [(u'five', u'five', u'CD'), (u'times', u'time', u'NNS')]}, 'tokens': ['five', 'times']}, {'string': ' two times', 'parse': {'tree': '(ROOT (X (NP (CD two) (NNS times))))', 'lemma': [(u'two', u'two', u'CD'), (u'times', u'time', u'NNS')]}, 'tokens': ['two', 'times']}, {'string': ' three times', 'parse': {'tree': '(ROOT (X (NP (CD three) (NNS times))))', 'lemma': [(u'three', u'three', u'CD'), (u'times', u'time', u'NNS')]}, 'tokens': ['three', 'times']}], 'mode': 0}, {'question': {'string': ' What was James doing when he met the young lady?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NNP James)) (VP (VBG doing) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBD met) (NP (DT the) (JJ young) (NN lady))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'James', u'James', u'NNP'), (u'doing', u'do', u'VBG'), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'met', u'meet', u'VBD'), (u'the', u'the', u'DT'), (u'young', u'young', u'JJ'), (u'lady', u'lady', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'James', 'doing', 'when', 'he', 'met', 'the', 'young', 'lady', '?']}, 'answers': [{'string': ' Eating.', 'parse': {'tree': '(ROOT (NP (FW Eating) (. .)))', 'lemma': [(u'Eating', u'eating', u'FW'), (u'.', u'.', u'.')]}, 'tokens': ['Eating', '.']}, {'string': ' Walking down the road', 'parse': {'tree': '(ROOT (S (VP (VB Walking) (PRT (RP down)) (NP (DT the) (NN road)))))', 'lemma': [(u'Walking', u'walk', u'VB'), (u'down', u'down', u'RP'), (u'the', u'the', u'DT'), (u'road', u'road', u'NN')]}, 'tokens': ['Walking', 'down', 'the', 'road']}, {'string': ' Planting a garden', 'parse': {'tree': '(ROOT (S (VP (VBG Planting) (NP (DT a) (NN garden)))))', 'lemma': [(u'Planting', u'plant', u'VBG'), (u'a', u'a', u'DT'), (u'garden', u'garden', u'NN')]}, 'tokens': ['Planting', 'a', 'garden']}, {'string': ' Playing ball', 'parse': {'tree': '(ROOT (S (VP (VBG Playing) (NP (NN ball)))))', 'lemma': [(u'Playing', u'play', u'VBG'), (u'ball', u'ball', u'NN')]}, 'tokens': ['Playing', 'ball']}], 'mode': 0}, {'question': {'string': ' What did James name the puppy?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP James)) (VP (VB name) (NP (DT the) (NN puppy)))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'James', u'James', u'NNP'), (u'name', u'name', u'VB'), (u'the', u'the', u'DT'), (u'puppy', u'puppy', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'James', 'name', 'the', 'puppy', '?']}, 'answers': [{'string': ' Spotty', 'parse': {'tree': '(ROOT (ADVP (RB Spotty)))', 'lemma': [(u'Spotty', u'spotty', u'RB')]}, 'tokens': ['Spotty']}, {'string': ' Brownie', 'parse': {'tree': '(ROOT (NP (NNP Brownie)))', 'lemma': [(u'Brownie', u'Brownie', u'NNP')]}, 'tokens': ['Brownie']}, {'string': ' Jack', 'parse': {'tree': '(ROOT (NP (NNP Jack)))', 'lemma': [(u'Jack', u'Jack', u'NNP')]}, 'tokens': ['Jack']}, {'string': ' Scoot', 'parse': {'tree': '(ROOT (NP (NNP Scoot)))', 'lemma': [(u'Scoot', u'Scoot', u'NNP')]}, 'tokens': ['Scoot']}], 'mode': 1}, {'question': {'string': ' Who gave James the puppy?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD gave) (NP (NNP James)) (NP (DT the) (NN puppy)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'gave', u'give', u'VBD'), (u'James', u'James', u'NNP'), (u'the', u'the', u'DT'), (u'puppy', u'puppy', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'gave', 'James', 'the', 'puppy', '?']}, 'answers': [{'string': ' His sister', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN sister))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'sister', u'sister', u'NN')]}, 'tokens': ['His', 'sister']}, {'string': ' His son', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN son))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'son', u'son', u'NN')]}, 'tokens': ['His', 'son']}, {'string': ' a nice young lady', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (ADJP (JJ nice) (JJ young)) (NN lady))))', 'lemma': [(u'a', u'a', u'DT'), (u'nice', u'nice', u'JJ'), (u'young', u'young', u'JJ'), (u'lady', u'lady', u'NN')]}, 'tokens': ['a', 'nice', 'young', 'lady']}, {'string': ' His uncle', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN uncle))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'uncle', u'uncle', u'NN')]}, 'tokens': ['His', 'uncle']}], 'mode': 1}]}
{'sentences': [{'string': ' The best afternoon I ever had with my grandfather was when we went down to the river and fished.', 'parse': {'tree': '(ROOT (S (NP (NP (DT The) (JJS best) (NN afternoon)) (SBAR (S (NP (PRP I)) (ADVP (RB ever)) (VP (VBD had) (PP (IN with) (NP (PRP$ my) (NN grandfather))))))) (VP (VBD was) (SBAR (WHADVP (WRB when)) (S (NP (PRP we)) (VP (VP (VBD went) (PRT (RP down)) (PP (TO to) (NP (DT the) (NN river)))) (CC and) (VP (VBD fished)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'afternoon', u'afternoon', u'NN'), (u'I', u'I', u'PRP'), (u'ever', u'ever', u'RB'), (u'had', u'have', u'VBD'), (u'with', u'with', u'IN'), (u'my', u'my', u'PRP$'), (u'grandfather', u'grandfather', u'NN'), (u'was', u'be', u'VBD'), (u'when', u'when', u'WRB'), (u'we', u'we', u'PRP'), (u'went', u'go', u'VBD'), (u'down', u'down', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'river', u'river', u'NN'), (u'and', u'and', u'CC'), (u'fished', u'fish', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'best', 'afternoon', 'I', 'ever', 'had', 'with', 'my', 'grandfather', 'was', 'when', 'we', 'went', 'down', 'to', 'the', 'river', 'and', 'fished', '.']}, {'string': ' It was a hot July day, and I was bored.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBD was) (NP (DT a) (JJ hot) (NNP July) (NN day)))) (, ,) (CC and) (S (NP (PRP I)) (VP (VBD was) (ADJP (VBN bored)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'hot', u'hot', u'JJ'), (u'July', u'July', u'NNP'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'I', u'I', u'PRP'), (u'was', u'be', u'VBD'), (u'bored', u'bore', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'a', 'hot', 'July', 'day', ',', 'and', 'I', 'was', 'bored', '.']}, {'string': ' My grandfather was sitting in the backyard, reading.', 'parse': {'tree': '(ROOT (S (NP (PRP$ My) (NN grandfather)) (VP (VBD was) (VP (VBG sitting) (PP (IN in) (NP (NP (DT the) (NN backyard)) (, ,) (NP (NN reading)))))) (. .)))', 'lemma': [(u'My', u'my', u'PRP$'), (u'grandfather', u'grandfather', u'NN'), (u'was', u'be', u'VBD'), (u'sitting', u'sit', u'VBG'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'backyard', u'backyard', u'NN'), (u',', u',', u','), (u'reading', u'reading', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['My', 'grandfather', 'was', 'sitting', 'in', 'the', 'backyard', ',', 'reading', '.']}, {'string': " `` Hey, you look like you need some fun, '' he said.", 'parse': {'tree': "(ROOT (S (`` ``) (S (INTJ (UH Hey)) (, ,) (NP (PRP you)) (VP (VBP look) (SBAR (IN like) (S (NP (PRP you)) (VP (VBP need) (NP (DT some) (NN fun))))))) (, ,) ('' '') (NP (PRP he)) (VP (VBD said)) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'Hey', u'hey', u'UH'), (u',', u',', u','), (u'you', u'you', u'PRP'), (u'look', u'look', u'VBP'), (u'like', u'like', u'IN'), (u'you', u'you', u'PRP'), (u'need', u'need', u'VBP'), (u'some', u'some', u'DT'), (u'fun', u'fun', u'NN'), (u',', u',', u','), (u"''", u"''", u"''"), (u'he', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'Hey', ',', 'you', 'look', 'like', 'you', 'need', 'some', 'fun', ',', "''", 'he', 'said', '.']}, {'string': " `` Want to go fishing? ''", 'parse': {'tree': "(ROOT (FRAG (`` ``) (NP (NP (NNP Want)) (SBAR (S (VP (TO to) (VP (VB go) (NP (NN fishing))))))) (. ?) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Want', u'Want', u'NNP'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'fishing', u'fishing', u'NN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Want', 'to', 'go', 'fishing', '?', "''"]}, {'string': ' I said sure, and he went to the garage.', 'parse': {'tree': '(ROOT (S (S (NP (PRP I)) (VP (VBD said) (ADJP (JJ sure)))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD went) (PP (TO to) (NP (DT the) (NN garage))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'said', u'say', u'VBD'), (u'sure', u'sure', u'JJ'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'garage', u'garage', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'said', 'sure', ',', 'and', 'he', 'went', 'to', 'the', 'garage', '.']}, {'string': ' He came out with two poles, some hooks, and some fishing line.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD came) (PRT (RP out)) (PP (IN with) (NP (NP (CD two) (NNS poles)) (, ,) (NP (DT some) (NNS hooks)) (, ,) (CC and) (NP (DT some) (NN fishing) (NN line))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'came', u'come', u'VBD'), (u'out', u'out', u'RP'), (u'with', u'with', u'IN'), (u'two', u'two', u'CD'), (u'poles', u'pole', u'NNS'), (u',', u',', u','), (u'some', u'some', u'DT'), (u'hooks', u'hook', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'some', u'some', u'DT'), (u'fishing', u'fishing', u'NN'), (u'line', u'line', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'came', 'out', 'with', 'two', 'poles', ',', 'some', 'hooks', ',', 'and', 'some', 'fishing', 'line', '.']}, {'string': ' Everything was in pieces, but he showed me how to put it all together.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Everything)) (VP (VBD was) (PP (IN in) (NP (NNS pieces))))) (, ,) (CC but) (S (NP (PRP he)) (VP (VBD showed) (NP (PRP me)) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (VB put) (NP (PRP it)) (ADVP (DT all) (RB together)))))))) (. .)))', 'lemma': [(u'Everything', u'Everything', u'NNP'), (u'was', u'be', u'VBD'), (u'in', u'in', u'IN'), (u'pieces', u'piece', u'NNS'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'showed', u'show', u'VBD'), (u'me', u'I', u'PRP'), (u'how', u'how', u'WRB'), (u'to', u'to', u'TO'), (u'put', u'put', u'VB'), (u'it', u'it', u'PRP'), (u'all', u'all', u'DT'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Everything', 'was', 'in', 'pieces', ',', 'but', 'he', 'showed', 'me', 'how', 'to', 'put', 'it', 'all', 'together', '.']}, {'string': ' I asked if we needed worms, and he said no.', 'parse': {'tree': '(ROOT (S (S (NP (PRP I)) (VP (VBD asked) (SBAR (IN if) (S (NP (PRP we)) (VP (VBD needed) (NP (NNS worms))))))) (, ,) (CC and) (S (NP (PRP he)) (VP (VBD said) (INTJ (UH no)))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'asked', u'ask', u'VBD'), (u'if', u'if', u'IN'), (u'we', u'we', u'PRP'), (u'needed', u'need', u'VBD'), (u'worms', u'worm', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u'no', u'no', u'UH'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'asked', 'if', 'we', 'needed', 'worms', ',', 'and', 'he', 'said', 'no', '.']}, {'string': ' Then, we set off to the river.', 'parse': {'tree': '(ROOT (S (ADVP (RB Then)) (, ,) (NP (PRP we)) (VP (VBD set) (PRT (RP off)) (PP (TO to) (NP (DT the) (NN river)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u',', u',', u','), (u'we', u'we', u'PRP'), (u'set', u'set', u'VBD'), (u'off', u'off', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'river', u'river', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', ',', 'we', 'set', 'off', 'to', 'the', 'river', '.']}, {'string': ' It was only about ten blocks to the river, but walking along past the library and the store, he told me about how he used to go fishing with his friend Steve.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBD was) (NP (QP (RB only) (RB about) (CD ten)) (NNS blocks)) (PP (TO to) (NP (DT the) (NN river))))) (, ,) (CC but) (S (S (VP (VBG walking) (PRT (RP along)) (PP (IN past) (NP (NP (DT the) (NN library)) (CC and) (NP (DT the) (NN store)))))) (, ,) (NP (PRP he)) (VP (VBD told) (NP (PRP me)) (PP (IN about) (SBAR (WHADVP (WRB how)) (S (NP (PRP he)) (VP (VBD used) (S (VP (TO to) (VP (VB go) (NP (NN fishing)) (PP (IN with) (NP (PRP$ his) (NN friend) (NN Steve)))))))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'only', u'only', u'RB'), (u'about', u'about', u'RB'), (u'ten', u'ten', u'CD'), (u'blocks', u'block', u'NNS'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'river', u'river', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'walking', u'walk', u'VBG'), (u'along', u'along', u'RP'), (u'past', u'past', u'IN'), (u'the', u'the', u'DT'), (u'library', u'library', u'NN'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'told', u'tell', u'VBD'), (u'me', u'I', u'PRP'), (u'about', u'about', u'IN'), (u'how', u'how', u'WRB'), (u'he', u'he', u'PRP'), (u'used', u'use', u'VBD'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'fishing', u'fishing', u'NN'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'Steve', u'steve', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'only', 'about', 'ten', 'blocks', 'to', 'the', 'river', ',', 'but', 'walking', 'along', 'past', 'the', 'library', 'and', 'the', 'store', ',', 'he', 'told', 'me', 'about', 'how', 'he', 'used', 'to', 'go', 'fishing', 'with', 'his', 'friend', 'Steve', '.']}, {'string': ' They used to catch catfish, then take them home so that their mothers could cook them for dinner.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD used) (S (VP (TO to) (VP (VP (VB catch) (NP (NN catfish))) (, ,) (RB then) (VP (VB take) (NP (PRP them)) (SBAR (ADVP (NN home) (RB so)) (IN that) (S (NP (PRP$ their) (NNS mothers)) (VP (MD could) (VP (VB cook) (NP (PRP them)) (PP (IN for) (NP (NN dinner)))))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'used', u'use', u'VBD'), (u'to', u'to', u'TO'), (u'catch', u'catch', u'VB'), (u'catfish', u'catfish', u'NN'), (u',', u',', u','), (u'then', u'then', u'RB'), (u'take', u'take', u'VB'), (u'them', u'they', u'PRP'), (u'home', u'home', u'NN'), (u'so', u'so', u'RB'), (u'that', u'that', u'IN'), (u'their', u'they', u'PRP$'), (u'mothers', u'mother', u'NNS'), (u'could', u'could', u'MD'), (u'cook', u'cook', u'VB'), (u'them', u'they', u'PRP'), (u'for', u'for', u'IN'), (u'dinner', u'dinner', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'used', 'to', 'catch', 'catfish', ',', 'then', 'take', 'them', 'home', 'so', 'that', 'their', 'mothers', 'could', 'cook', 'them', 'for', 'dinner', '.']}, {'string': ' When we got to the park at the river, my grandfather went right to the bank, then turned and walked up along the side of the river until we were off in the shade under the trees right at the edge of the park.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP we)) (VP (VBD got) (PP (TO to) (NP (DT the) (NN park))) (PP (IN at) (NP (DT the) (NN river)))))) (, ,) (NP (PRP$ my) (NN grandfather)) (VP (VP (VBD went) (ADVP (RB right)) (PP (TO to) (NP (DT the) (NN bank)))) (, ,) (VP (ADVP (RB then)) (VBD turned)) (CC and) (VP (VBD walked) (PRT (RP up)) (PP (IN along) (NP (NP (DT the) (NN side)) (PP (IN of) (NP (NP (DT the) (NN river)) (SBAR (IN until) (S (NP (PRP we)) (VP (VBD were) (ADVP (RB off) (PP (IN in) (NP (NP (DT the) (NN shade)) (PP (IN under) (NP (DT the) (NNS trees)))))) (ADJP (JJ right) (PP (IN at) (NP (NP (DT the) (NN edge)) (PP (IN of) (NP (DT the) (NN park))))))))))))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'we', u'we', u'PRP'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'river', u'river', u'NN'), (u',', u',', u','), (u'my', u'my', u'PRP$'), (u'grandfather', u'grandfather', u'NN'), (u'went', u'go', u'VBD'), (u'right', u'right', u'RB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'bank', u'bank', u'NN'), (u',', u',', u','), (u'then', u'then', u'RB'), (u'turned', u'turn', u'VBD'), (u'and', u'and', u'CC'), (u'walked', u'walk', u'VBD'), (u'up', u'up', u'RP'), (u'along', u'along', u'IN'), (u'the', u'the', u'DT'), (u'side', u'side', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'river', u'river', u'NN'), (u'until', u'until', u'IN'), (u'we', u'we', u'PRP'), (u'were', u'be', u'VBD'), (u'off', u'off', u'RB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'shade', u'shade', u'NN'), (u'under', u'under', u'IN'), (u'the', u'the', u'DT'), (u'trees', u'tree', u'NNS'), (u'right', u'right', u'JJ'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'edge', u'edge', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'we', 'got', 'to', 'the', 'park', 'at', 'the', 'river', ',', 'my', 'grandfather', 'went', 'right', 'to', 'the', 'bank', ',', 'then', 'turned', 'and', 'walked', 'up', 'along', 'the', 'side', 'of', 'the', 'river', 'until', 'we', 'were', 'off', 'in', 'the', 'shade', 'under', 'the', 'trees', 'right', 'at', 'the', 'edge', 'of', 'the', 'park', '.']}, {'string': ' There, he taught me how to throw my line in the water.', 'parse': {'tree': '(ROOT (S (ADVP (RB There)) (, ,) (NP (PRP he)) (VP (VBD taught) (NP (PRP me)) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (VB throw) (NP (PRP$ my) (NN line)) (PP (IN in) (NP (DT the) (NN water)))))))) (. .)))', 'lemma': [(u'There', u'there', u'RB'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'taught', u'teach', u'VBD'), (u'me', u'I', u'PRP'), (u'how', u'how', u'WRB'), (u'to', u'to', u'TO'), (u'throw', u'throw', u'VB'), (u'my', u'my', u'PRP$'), (u'line', u'line', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'water', u'water', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', ',', 'he', 'taught', 'me', 'how', 'to', 'throw', 'my', 'line', 'in', 'the', 'water', '.']}, {'string': ' Then we sat down to wait.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP we)) (VP (VBD sat) (PRT (RP down)) (S (VP (TO to) (VP (VB wait))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'we', u'we', u'PRP'), (u'sat', u'sit', u'VBD'), (u'down', u'down', u'RP'), (u'to', u'to', u'TO'), (u'wait', u'wait', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'we', 'sat', 'down', 'to', 'wait', '.']}, {'string': ' While we were fishing, my grandfather told me lots of stories about what he and Steve did as kids.', 'parse': {'tree': '(ROOT (S (SBAR (IN While) (S (NP (PRP we)) (VP (VBD were) (VP (VBG fishing))))) (, ,) (NP (PRP$ my) (NN grandfather)) (VP (VBD told) (S (NP (PRP me)) (NP (NP (NNS lots)) (PP (IN of) (NP (NP (NNS stories)) (PP (IN about) (SBAR (WHNP (WP what)) (S (NP (PRP he) (CC and) (NNP Steve)) (VP (VBD did) (PP (IN as) (NP (NNS kids)))))))))))) (. .)))', 'lemma': [(u'While', u'while', u'IN'), (u'we', u'we', u'PRP'), (u'were', u'be', u'VBD'), (u'fishing', u'fish', u'VBG'), (u',', u',', u','), (u'my', u'my', u'PRP$'), (u'grandfather', u'grandfather', u'NN'), (u'told', u'tell', u'VBD'), (u'me', u'I', u'PRP'), (u'lots', u'lot', u'NNS'), (u'of', u'of', u'IN'), (u'stories', u'story', u'NNS'), (u'about', u'about', u'IN'), (u'what', u'what', u'WP'), (u'he', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'Steve', u'Steve', u'NNP'), (u'did', u'do', u'VBD'), (u'as', u'as', u'IN'), (u'kids', u'kid', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['While', 'we', 'were', 'fishing', ',', 'my', 'grandfather', 'told', 'me', 'lots', 'of', 'stories', 'about', 'what', 'he', 'and', 'Steve', 'did', 'as', 'kids', '.']}, {'string': " We did n't have any worms, so we never caught any fish, but sitting there as he told me stories made it a great afternoon.", 'parse': {'tree': "(ROOT (S (S (NP (PRP We)) (VP (VBD did) (RB n't) (VP (VB have) (NP (DT any) (NNS worms)) (, ,) (SBAR (IN so) (S (NP (PRP we)) (ADVP (RB never)) (VP (VBD caught) (NP (DT any) (NN fish)))))))) (, ,) (CC but) (S (S (VP (VBG sitting) (ADVP (RB there)) (SBAR (IN as) (S (NP (PRP he)) (VP (VBD told) (NP (PRP me))))))) (NP (NNS stories)) (VP (VBD made) (NP (PRP it)) (NP (DT a) (JJ great) (NN afternoon)))) (. .)))", 'lemma': [(u'We', u'we', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'have', u'have', u'VB'), (u'any', u'any', u'DT'), (u'worms', u'worm', u'NNS'), (u',', u',', u','), (u'so', u'so', u'IN'), (u'we', u'we', u'PRP'), (u'never', u'never', u'RB'), (u'caught', u'catch', u'VBD'), (u'any', u'any', u'DT'), (u'fish', u'fish', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'sitting', u'sit', u'VBG'), (u'there', u'there', u'RB'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'told', u'tell', u'VBD'), (u'me', u'I', u'PRP'), (u'stories', u'story', u'NNS'), (u'made', u'make', u'VBD'), (u'it', u'it', u'PRP'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'afternoon', u'afternoon', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['We', 'did', "n't", 'have', 'any', 'worms', ',', 'so', 'we', 'never', 'caught', 'any', 'fish', ',', 'but', 'sitting', 'there', 'as', 'he', 'told', 'me', 'stories', 'made', 'it', 'a', 'great', 'afternoon', '.']}], 'questions': [{'question': {'string': ' What did they walk past?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (PRP they)) (VP (VB walk) (NP (NN past)))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'they', u'they', u'PRP'), (u'walk', u'walk', u'VB'), (u'past', u'past', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'they', 'walk', 'past', '?']}, 'answers': [{'string': ' Park', 'parse': {'tree': '(ROOT (NP (NNP Park)))', 'lemma': [(u'Park', u'Park', u'NNP')]}, 'tokens': ['Park']}, {'string': ' River', 'parse': {'tree': '(ROOT (NP (NNP River)))', 'lemma': [(u'River', u'River', u'NNP')]}, 'tokens': ['River']}, {'string': ' Garage', 'parse': {'tree': '(ROOT (NP (NNP Garage)))', 'lemma': [(u'Garage', u'Garage', u'NNP')]}, 'tokens': ['Garage']}, {'string': ' Library and store', 'parse': {'tree': '(ROOT (NP (NN Library) (CC and) (NN store)))', 'lemma': [(u'Library', u'library', u'NN'), (u'and', u'and', u'CC'), (u'store', u'store', u'NN')]}, 'tokens': ['Library', 'and', 'store']}], 'mode': 0}, {'question': {'string': ' Who cooked the catfish?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBD cooked) (NP (DT the) (NN catfish)))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'cooked', u'cook', u'VBD'), (u'the', u'the', u'DT'), (u'catfish', u'catfish', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'cooked', 'the', 'catfish', '?']}, 'answers': [{'string': ' The grandfather', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN grandfather))))', 'lemma': [(u'The', u'the', u'DT'), (u'grandfather', u'grandfather', u'NN')]}, 'tokens': ['The', 'grandfather']}, {'string': ' Steve', 'parse': {'tree': '(ROOT (NP (NNP Steve)))', 'lemma': [(u'Steve', u'Steve', u'NNP')]}, 'tokens': ['Steve']}, {'string': ' The mothers', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NNS mothers))))', 'lemma': [(u'The', u'the', u'DT'), (u'mothers', u'mother', u'NNS')]}, 'tokens': ['The', 'mothers']}, {'string': ' Me', 'parse': {'tree': '(ROOT (NP (NNP Me)))', 'lemma': [(u'Me', u'Me', u'NNP')]}, 'tokens': ['Me']}], 'mode': 1}, {'question': {'string': ' What did the grandfather get from the garage?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (DT the) (NN grandfather)) (VP (VB get) (PP (IN from) (NP (DT the) (NN garage))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'grandfather', u'grandfather', u'NN'), (u'get', u'get', u'VB'), (u'from', u'from', u'IN'), (u'the', u'the', u'DT'), (u'garage', u'garage', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'the', 'grandfather', 'get', 'from', 'the', 'garage', '?']}, 'answers': [{'string': ' River', 'parse': {'tree': '(ROOT (NP (NNP River)))', 'lemma': [(u'River', u'River', u'NNP')]}, 'tokens': ['River']}, {'string': ' Worms', 'parse': {'tree': '(ROOT (INTJ (UH Worms)))', 'lemma': [(u'Worms', u'worms', u'UH')]}, 'tokens': ['Worms']}, {'string': ' Stories', 'parse': {'tree': '(ROOT (NP (NNS Stories)))', 'lemma': [(u'Stories', u'story', u'NNS')]}, 'tokens': ['Stories']}, {'string': ' Poles, fishing line, hooks', 'parse': {'tree': '(ROOT (S (NP (NP (NNPS Poles)) (, ,) (NP (NN fishing) (NN line)) (, ,)) (VP (VBZ hooks))))', 'lemma': [(u'Poles', u'Poles', u'NNPS'), (u',', u',', u','), (u'fishing', u'fishing', u'NN'), (u'line', u'line', u'NN'), (u',', u',', u','), (u'hooks', u'hook', u'VBZ')]}, 'tokens': ['Poles', ',', 'fishing', 'line', ',', 'hooks']}], 'mode': 0}, {'question': {'string': ' What was the grandfather doing in the back yard?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (DT the) (NN grandfather)) (VP (VBG doing) (PP (IN in) (NP (DT the) (JJ back) (NN yard))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'grandfather', u'grandfather', u'NN'), (u'doing', u'do', u'VBG'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'back', u'back', u'JJ'), (u'yard', u'yard', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'grandfather', 'doing', 'in', 'the', 'back', 'yard', '?']}, 'answers': [{'string': ' Sitting under a tree', 'parse': {'tree': '(ROOT (S (VP (VBG Sitting) (PP (IN under) (NP (DT a) (NN tree))))))', 'lemma': [(u'Sitting', u'sit', u'VBG'), (u'under', u'under', u'IN'), (u'a', u'a', u'DT'), (u'tree', u'tree', u'NN')]}, 'tokens': ['Sitting', 'under', 'a', 'tree']}, {'string': ' Being bored', 'parse': {'tree': '(ROOT (S (VP (VBG Being) (ADJP (VBN bored)))))', 'lemma': [(u'Being', u'be', u'VBG'), (u'bored', u'bore', u'VBN')]}, 'tokens': ['Being', 'bored']}, {'string': ' Reading', 'parse': {'tree': '(ROOT (NP (NNP Reading)))', 'lemma': [(u'Reading', u'Reading', u'NNP')]}, 'tokens': ['Reading']}, {'string': ' Fishing', 'parse': {'tree': '(ROOT (NP (NN Fishing)))', 'lemma': [(u'Fishing', u'fishing', u'NN')]}, 'tokens': ['Fishing']}], 'mode': 1}]}
{'sentences': [{'string': ' Billy had a pet turtle that he took good care of, everyday.', 'parse': {'tree': '(ROOT (S (NP (NNP Billy)) (VP (VBD had) (NP (DT a) (JJ pet) (NN turtle)) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD took) (NP (JJ good) (NN care)) (PP (IN of)) (, ,) (ADVP (RB everyday)))))) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'pet', u'pet', u'JJ'), (u'turtle', u'turtle', u'NN'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'took', u'take', u'VBD'), (u'good', u'good', u'JJ'), (u'care', u'care', u'NN'), (u'of', u'of', u'IN'), (u',', u',', u','), (u'everyday', u'everyday', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'had', 'a', 'pet', 'turtle', 'that', 'he', 'took', 'good', 'care', 'of', ',', 'everyday', '.']}, {'string': " His turtle 's name was Tumble.", 'parse': {'tree': "(ROOT (S (NP (NP (PRP$ His) (NN turtle) (POS 's)) (NN name)) (VP (VBD was) (ADJP (JJ Tumble))) (. .)))", 'lemma': [(u'His', u'he', u'PRP$'), (u'turtle', u'turtle', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Tumble', u'tumble', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'turtle', "'s", 'name', 'was', 'Tumble', '.']}, {'string': ' Tumble liked to walk around outside in the garden and dig small holes to sleep in.', 'parse': {'tree': '(ROOT (S (NP (NNP Tumble)) (VP (VBD liked) (S (VP (TO to) (VP (VP (VB walk) (PRT (RP around)) (ADVP (RB outside)) (PP (IN in) (NP (DT the) (NN garden)))) (CC and) (VP (VB dig) (NP (JJ small) (NNS holes)) (S (VP (TO to) (VP (VB sleep) (PRT (RP in)))))))))) (. .)))', 'lemma': [(u'Tumble', u'Tumble', u'NNP'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'walk', u'walk', u'VB'), (u'around', u'around', u'RP'), (u'outside', u'outside', u'RB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'garden', u'garden', u'NN'), (u'and', u'and', u'CC'), (u'dig', u'dig', u'VB'), (u'small', u'small', u'JJ'), (u'holes', u'hole', u'NNS'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'in', u'in', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['Tumble', 'liked', 'to', 'walk', 'around', 'outside', 'in', 'the', 'garden', 'and', 'dig', 'small', 'holes', 'to', 'sleep', 'in', '.']}, {'string': ' Billy loved Tumble and would visit him outside when he got home from school.', 'parse': {'tree': '(ROOT (S (NP (NNP Billy)) (VP (VP (VBD loved) (NP (NNP Tumble))) (CC and) (VP (MD would) (VP (VB visit) (NP (PRP him)) (PP (IN outside) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBD got) (NP (NN home)) (PP (IN from) (NP (NN school)))))))))) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'loved', u'love', u'VBD'), (u'Tumble', u'Tumble', u'NNP'), (u'and', u'and', u'CC'), (u'would', u'would', u'MD'), (u'visit', u'visit', u'VB'), (u'him', u'he', u'PRP'), (u'outside', u'outside', u'IN'), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'home', u'home', u'NN'), (u'from', u'from', u'IN'), (u'school', u'school', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'loved', 'Tumble', 'and', 'would', 'visit', 'him', 'outside', 'when', 'he', 'got', 'home', 'from', 'school', '.']}, {'string': " Tumble 's favorite food was oatmeal.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Tumble) (POS 's)) (JJ favorite) (NN food)) (VP (VBD was) (ADJP (JJ oatmeal))) (. .)))", 'lemma': [(u'Tumble', u'Tumble', u'NNP'), (u"'s", u"'s", u'POS'), (u'favorite', u'favorite', u'JJ'), (u'food', u'food', u'NN'), (u'was', u'be', u'VBD'), (u'oatmeal', u'oatmeal', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Tumble', "'s", 'favorite', 'food', 'was', 'oatmeal', '.']}, {'string': ' So, every day after school, Billy would make Tumble a big bowl of oatmeal and take it outside for Tumble to enjoy.', 'parse': {'tree': '(ROOT (S (ADVP (RB So)) (, ,) (NP (DT every) (NN day)) (PP (IN after) (NP (NN school))) (, ,) (NP (NNP Billy)) (VP (MD would) (VP (VP (VB make) (S (NP (NNP Tumble)) (NP (NP (DT a) (JJ big) (NN bowl)) (PP (IN of) (NP (NN oatmeal)))))) (CC and) (VP (VB take) (NP (PRP it)) (ADVP (IN outside) (PP (IN for) (NP (NNP Tumble)))) (S (VP (TO to) (VP (VB enjoy))))))) (. .)))', 'lemma': [(u'So', u'so', u'RB'), (u',', u',', u','), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'after', u'after', u'IN'), (u'school', u'school', u'NN'), (u',', u',', u','), (u'Billy', u'Billy', u'NNP'), (u'would', u'would', u'MD'), (u'make', u'make', u'VB'), (u'Tumble', u'Tumble', u'NNP'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'bowl', u'bowl', u'NN'), (u'of', u'of', u'IN'), (u'oatmeal', u'oatmeal', u'NN'), (u'and', u'and', u'CC'), (u'take', u'take', u'VB'), (u'it', u'it', u'PRP'), (u'outside', u'outside', u'IN'), (u'for', u'for', u'IN'), (u'Tumble', u'Tumble', u'NNP'), (u'to', u'to', u'TO'), (u'enjoy', u'enjoy', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['So', ',', 'every', 'day', 'after', 'school', ',', 'Billy', 'would', 'make', 'Tumble', 'a', 'big', 'bowl', 'of', 'oatmeal', 'and', 'take', 'it', 'outside', 'for', 'Tumble', 'to', 'enjoy', '.']}, {'string': ' Tumble would see Billy and walk up to him as fast as a turtle can go.', 'parse': {'tree': '(ROOT (S (NP (NNP Tumble)) (VP (MD would) (VP (VP (VB see) (NP (NNP Billy))) (CC and) (VP (VB walk) (PRT (RP up)) (PP (TO to) (NP (PRP him))) (SBAR (ADVP (RB as) (RB fast)) (IN as) (S (NP (DT a) (NN turtle)) (VP (MD can) (VP (VB go)))))))) (. .)))', 'lemma': [(u'Tumble', u'Tumble', u'NNP'), (u'would', u'would', u'MD'), (u'see', u'see', u'VB'), (u'Billy', u'Billy', u'NNP'), (u'and', u'and', u'CC'), (u'walk', u'walk', u'VB'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'as', u'as', u'RB'), (u'fast', u'fast', u'RB'), (u'as', u'as', u'IN'), (u'a', u'a', u'DT'), (u'turtle', u'turtle', u'NN'), (u'can', u'can', u'MD'), (u'go', u'go', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Tumble', 'would', 'see', 'Billy', 'and', 'walk', 'up', 'to', 'him', 'as', 'fast', 'as', 'a', 'turtle', 'can', 'go', '.']}, {'string': ' Billy would put the bowl down and wait for Tumble to come up to the bowl to eat from it.', 'parse': {'tree': '(ROOT (S (NP (NNP Billy)) (VP (MD would) (VP (VP (VB put) (NP (DT the) (NN bowl)) (PRT (RP down))) (CC and) (VP (VB wait) (PP (IN for) (NP (NNP Tumble))) (S (VP (TO to) (VP (VB come) (PRT (RP up)) (PP (TO to) (NP (DT the) (NN bowl) (S (VP (TO to) (VP (VB eat) (PP (IN from) (NP (PRP it)))))))))))))) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'would', u'would', u'MD'), (u'put', u'put', u'VB'), (u'the', u'the', u'DT'), (u'bowl', u'bowl', u'NN'), (u'down', u'down', u'RP'), (u'and', u'and', u'CC'), (u'wait', u'wait', u'VB'), (u'for', u'for', u'IN'), (u'Tumble', u'Tumble', u'NNP'), (u'to', u'to', u'TO'), (u'come', u'come', u'VB'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'bowl', u'bowl', u'NN'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'from', u'from', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'would', 'put', 'the', 'bowl', 'down', 'and', 'wait', 'for', 'Tumble', 'to', 'come', 'up', 'to', 'the', 'bowl', 'to', 'eat', 'from', 'it', '.']}, {'string': ' When Tumble reached the bowl, he put his nose on it.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Tumble)) (VP (VBD reached) (NP (DT the) (NN bowl))))) (, ,) (NP (PRP he)) (VP (VBD put) (NP (PRP$ his) (NN nose)) (PP (IN on) (NP (PRP it)))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Tumble', u'Tumble', u'NNP'), (u'reached', u'reach', u'VBD'), (u'the', u'the', u'DT'), (u'bowl', u'bowl', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'put', u'put', u'VBD'), (u'his', u'he', u'PRP$'), (u'nose', u'nose', u'NN'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Tumble', 'reached', 'the', 'bowl', ',', 'he', 'put', 'his', 'nose', 'on', 'it', '.']}, {'string': ' But, the oatmeal was too hot to eat.', 'parse': {'tree': '(ROOT (S (CC But) (, ,) (NP (DT the) (NN oatmeal)) (VP (VBD was) (ADJP (RB too) (JJ hot) (S (VP (TO to) (VP (VB eat)))))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'oatmeal', u'oatmeal', u'NN'), (u'was', u'be', u'VBD'), (u'too', u'too', u'RB'), (u'hot', u'hot', u'JJ'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['But', ',', 'the', 'oatmeal', 'was', 'too', 'hot', 'to', 'eat', '.']}, {'string': ' Billy reached down and blew on the hot oatmeal, to cool it down for Tumble to eat.', 'parse': {'tree': '(ROOT (S (NP (NNP Billy)) (VP (VP (VBD reached) (PRT (RP down))) (CC and) (VP (VBD blew) (PP (IN on) (NP (DT the) (JJ hot) (NN oatmeal))) (, ,) (S (VP (TO to) (VP (VB cool) (NP (PRP it)) (PRT (RP down)) (PP (IN for) (NP (NNP Tumble))) (S (VP (TO to) (VP (VB eat))))))))) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'reached', u'reach', u'VBD'), (u'down', u'down', u'RP'), (u'and', u'and', u'CC'), (u'blew', u'blow', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'hot', u'hot', u'JJ'), (u'oatmeal', u'oatmeal', u'NN'), (u',', u',', u','), (u'to', u'to', u'TO'), (u'cool', u'cool', u'VB'), (u'it', u'it', u'PRP'), (u'down', u'down', u'RP'), (u'for', u'for', u'IN'), (u'Tumble', u'Tumble', u'NNP'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'reached', 'down', 'and', 'blew', 'on', 'the', 'hot', 'oatmeal', ',', 'to', 'cool', 'it', 'down', 'for', 'Tumble', 'to', 'eat', '.']}, {'string': ' Once the oatmeal was cool enough, Tumble could dig in and eat his big bowl of oatmeal.', 'parse': {'tree': '(ROOT (S (SBAR (IN Once) (S (NP (DT the) (NN oatmeal)) (VP (VBD was) (ADJP (JJ cool) (RB enough))))) (, ,) (NP (NNP Tumble)) (VP (MD could) (VP (VP (VB dig) (PRT (RP in))) (CC and) (VP (VB eat) (NP (NP (PRP$ his) (JJ big) (NN bowl)) (PP (IN of) (NP (NN oatmeal))))))) (. .)))', 'lemma': [(u'Once', u'once', u'IN'), (u'the', u'the', u'DT'), (u'oatmeal', u'oatmeal', u'NN'), (u'was', u'be', u'VBD'), (u'cool', u'cool', u'JJ'), (u'enough', u'enough', u'RB'), (u',', u',', u','), (u'Tumble', u'Tumble', u'NNP'), (u'could', u'could', u'MD'), (u'dig', u'dig', u'VB'), (u'in', u'in', u'RP'), (u'and', u'and', u'CC'), (u'eat', u'eat', u'VB'), (u'his', u'he', u'PRP$'), (u'big', u'big', u'JJ'), (u'bowl', u'bowl', u'NN'), (u'of', u'of', u'IN'), (u'oatmeal', u'oatmeal', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Once', 'the', 'oatmeal', 'was', 'cool', 'enough', ',', 'Tumble', 'could', 'dig', 'in', 'and', 'eat', 'his', 'big', 'bowl', 'of', 'oatmeal', '.']}, {'string': ' Billy loved to watch as Tumble ate his bowl of oatmeal, because Billy took good care of Tumble, everyday.', 'parse': {'tree': '(ROOT (S (NP (NNP Billy)) (VP (VBD loved) (S (VP (TO to) (VP (VB watch) (SBAR (IN as) (S (NP (NNP Tumble)) (VP (VBD ate) (NP (NP (PRP$ his) (NN bowl)) (PP (IN of) (NP (NP (NN oatmeal)) (, ,) (SBAR (IN because) (S (NP (NNP Billy)) (VP (VBD took) (NP (NP (JJ good) (NN care)) (PP (IN of) (NP (NNP Tumble))))))) (, ,)))))))))) (NP (NN everyday))) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'loved', u'love', u'VBD'), (u'to', u'to', u'TO'), (u'watch', u'watch', u'VB'), (u'as', u'as', u'IN'), (u'Tumble', u'Tumble', u'NNP'), (u'ate', u'eat', u'VBD'), (u'his', u'he', u'PRP$'), (u'bowl', u'bowl', u'NN'), (u'of', u'of', u'IN'), (u'oatmeal', u'oatmeal', u'NN'), (u',', u',', u','), (u'because', u'because', u'IN'), (u'Billy', u'Billy', u'NNP'), (u'took', u'take', u'VBD'), (u'good', u'good', u'JJ'), (u'care', u'care', u'NN'), (u'of', u'of', u'IN'), (u'Tumble', u'Tumble', u'NNP'), (u',', u',', u','), (u'everyday', u'everyday', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'loved', 'to', 'watch', 'as', 'Tumble', 'ate', 'his', 'bowl', 'of', 'oatmeal', ',', 'because', 'Billy', 'took', 'good', 'care', 'of', 'Tumble', ',', 'everyday', '.']}], 'questions': [{'question': {'string': " Why could n't Tumble eat his oatmeal, at first?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (MD could) (RB n't) (NP (NNP Tumble)) (VP (VB eat) (NP (PRP$ his) (NN oatmeal)) (, ,) (PP (IN at) (NP (JJ first))))) (. ?)))", 'lemma': [(u'Why', u'why', u'WRB'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'Tumble', u'Tumble', u'NNP'), (u'eat', u'eat', u'VB'), (u'his', u'he', u'PRP$'), (u'oatmeal', u'oatmeal', u'NN'), (u',', u',', u','), (u'at', u'at', u'IN'), (u'first', u'first', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'could', "n't", 'Tumble', 'eat', 'his', 'oatmeal', ',', 'at', 'first', '?']}, 'answers': [{'string': ' The oatmeal was too hot to eat', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN oatmeal)) (VP (VBD was) (ADJP (RB too) (JJ hot) (S (VP (TO to) (VP (VB eat))))))))', 'lemma': [(u'The', u'the', u'DT'), (u'oatmeal', u'oatmeal', u'NN'), (u'was', u'be', u'VBD'), (u'too', u'too', u'RB'), (u'hot', u'hot', u'JJ'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB')]}, 'tokens': ['The', 'oatmeal', 'was', 'too', 'hot', 'to', 'eat']}, {'string': " he did n't like hot oatmeal", 'parse': {'tree': "(ROOT (S (NP (PRP he)) (VP (VBD did) (RB n't) (VP (VB like) (NP (JJ hot) (NN oatmeal))))))", 'lemma': [(u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'hot', u'hot', u'JJ'), (u'oatmeal', u'oatmeal', u'NN')]}, 'tokens': ['he', 'did', "n't", 'like', 'hot', 'oatmeal']}, {'string': " it was n't his turtle bowl", 'parse': {'tree': "(ROOT (S (NP (PRP it)) (VP (VBD was) (RB n't) (NP (PRP$ his) (NN turtle) (NN bowl)))))", 'lemma': [(u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'his', u'he', u'PRP$'), (u'turtle', u'turtle', u'NN'), (u'bowl', u'bowl', u'NN')]}, 'tokens': ['it', 'was', "n't", 'his', 'turtle', 'bowl']}, {'string': ' his nose was too big for the bowl', 'parse': {'tree': '(ROOT (S (NP (PRP$ his) (NN nose)) (VP (VBD was) (ADJP (RB too) (JJ big)) (PP (IN for) (NP (DT the) (NN bowl))))))', 'lemma': [(u'his', u'he', u'PRP$'), (u'nose', u'nose', u'NN'), (u'was', u'be', u'VBD'), (u'too', u'too', u'RB'), (u'big', u'big', u'JJ'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'bowl', u'bowl', u'NN')]}, 'tokens': ['his', 'nose', 'was', 'too', 'big', 'for', 'the', 'bowl']}], 'mode': 0}, {'question': {'string': ' What did Tumble like to do?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Tumble)) (VP (VB like) (S (VP (TO to) (VP (VB do)))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Tumble', u'Tumble', u'NNP'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Tumble', 'like', 'to', 'do', '?']}, 'answers': [{'string': ' eat grass', 'parse': {'tree': '(ROOT (S (VP (VB eat) (NP (NN grass)))))', 'lemma': [(u'eat', u'eat', u'VB'), (u'grass', u'grass', u'NN')]}, 'tokens': ['eat', 'grass']}, {'string': ' walk around in the garden and dig small holes to sleep in', 'parse': {'tree': '(ROOT (S (VP (VP (VB walk) (PRT (RP around)) (PP (IN in) (NP (DT the) (NN garden)))) (CC and) (VP (VB dig) (NP (JJ small) (NNS holes)) (S (VP (TO to) (VP (VB sleep) (PRT (RP in)))))))))', 'lemma': [(u'walk', u'walk', u'VB'), (u'around', u'around', u'RP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'garden', u'garden', u'NN'), (u'and', u'and', u'CC'), (u'dig', u'dig', u'VB'), (u'small', u'small', u'JJ'), (u'holes', u'hole', u'NNS'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'in', u'in', u'RP')]}, 'tokens': ['walk', 'around', 'in', 'the', 'garden', 'and', 'dig', 'small', 'holes', 'to', 'sleep', 'in']}, {'string': ' take care of Billy', 'parse': {'tree': '(ROOT (S (VP (VB take) (NP (NP (NN care)) (PP (IN of) (NP (NNP Billy)))))))', 'lemma': [(u'take', u'take', u'VB'), (u'care', u'care', u'NN'), (u'of', u'of', u'IN'), (u'Billy', u'Billy', u'NNP')]}, 'tokens': ['take', 'care', 'of', 'Billy']}, {'string': ' cool down', 'parse': {'tree': '(ROOT (S (VP (VB cool) (PRT (RP down)))))', 'lemma': [(u'cool', u'cool', u'VB'), (u'down', u'down', u'RP')]}, 'tokens': ['cool', 'down']}], 'mode': 1}, {'question': {'string': " What was Billy 's turtle name?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (NNP Billy) (POS 's)) (NN turtle) (NN name))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'Billy', u'Billy', u'NNP'), (u"'s", u"'s", u'POS'), (u'turtle', u'turtle', u'NN'), (u'name', u'name', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'Billy', "'s", 'turtle', 'name', '?']}, 'answers': [{'string': ' Toby', 'parse': {'tree': '(ROOT (ADVP (RB Toby)))', 'lemma': [(u'Toby', u'toby', u'RB')]}, 'tokens': ['Toby']}, {'string': ' Tumble', 'parse': {'tree': '(ROOT (NP (NNP Tumble)))', 'lemma': [(u'Tumble', u'Tumble', u'NNP')]}, 'tokens': ['Tumble']}, {'string': ' Tutti', 'parse': {'tree': '(ROOT (NP (NNP Tutti)))', 'lemma': [(u'Tutti', u'Tutti', u'NNP')]}, 'tokens': ['Tutti']}, {'string': ' Timmie', 'parse': {'tree': '(ROOT (NP (NNP Timmie)))', 'lemma': [(u'Timmie', u'Timmie', u'NNP')]}, 'tokens': ['Timmie']}], 'mode': 1}, {'question': {'string': ' What did Billy do everyday after school?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Billy)) (VP (VB do) (NP (JJ everyday)) (PP (IN after) (NP (NN school))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Billy', u'Billy', u'NNP'), (u'do', u'do', u'VB'), (u'everyday', u'everyday', u'JJ'), (u'after', u'after', u'IN'), (u'school', u'school', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Billy', 'do', 'everyday', 'after', 'school', '?']}, 'answers': [{'string': ' watch TV', 'parse': {'tree': '(ROOT (S (VP (VB watch) (NP (NN TV)))))', 'lemma': [(u'watch', u'watch', u'VB'), (u'TV', u'tv', u'NN')]}, 'tokens': ['watch', 'TV']}, {'string': ' dig small holes', 'parse': {'tree': '(ROOT (S (VP (VB dig) (NP (JJ small) (NNS holes)))))', 'lemma': [(u'dig', u'dig', u'VB'), (u'small', u'small', u'JJ'), (u'holes', u'hole', u'NNS')]}, 'tokens': ['dig', 'small', 'holes']}, {'string': ' walk around the garden', 'parse': {'tree': '(ROOT (S (VP (VB walk) (PRT (RP around)) (NP (DT the) (NN garden)))))', 'lemma': [(u'walk', u'walk', u'VB'), (u'around', u'around', u'RP'), (u'the', u'the', u'DT'), (u'garden', u'garden', u'NN')]}, 'tokens': ['walk', 'around', 'the', 'garden']}, {'string': ' Feed Tumble a big bowl of oatmeal', 'parse': {'tree': '(ROOT (NP (NP (NNP Feed) (NNP Tumble)) (NP (NP (DT a) (JJ big) (NN bowl)) (PP (IN of) (NP (NN oatmeal))))))', 'lemma': [(u'Feed', u'Feed', u'NNP'), (u'Tumble', u'Tumble', u'NNP'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'bowl', u'bowl', u'NN'), (u'of', u'of', u'IN'), (u'oatmeal', u'oatmeal', u'NN')]}, 'tokens': ['Feed', 'Tumble', 'a', 'big', 'bowl', 'of', 'oatmeal']}], 'mode': 0}]}
{'sentences': [{'string': ' Jenny was a 13 year old girl with blond hair and blue eyes.', 'parse': {'tree': '(ROOT (S (NP (NNP Jenny)) (VP (VBD was) (NP (DT a) (ADJP (NP (CD 13) (NN year)) (JJ old)) (NN girl)) (PP (IN with) (NP (NP (JJ blond) (NN hair)) (CC and) (NP (JJ blue) (NNS eyes))))) (. .)))', 'lemma': [(u'Jenny', u'Jenny', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'13', u'13', u'CD'), (u'year', u'year', u'NN'), (u'old', u'old', u'JJ'), (u'girl', u'girl', u'NN'), (u'with', u'with', u'IN'), (u'blond', u'blond', u'JJ'), (u'hair', u'hair', u'NN'), (u'and', u'and', u'CC'), (u'blue', u'blue', u'JJ'), (u'eyes', u'eye', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Jenny', 'was', 'a', '13', 'year', 'old', 'girl', 'with', 'blond', 'hair', 'and', 'blue', 'eyes', '.']}, {'string': ' She had gotten out of her last day of school and was free for the summer.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VP (VBD had) (VP (VBN gotten) (PRT (RP out)) (PP (IN of) (NP (NP (PRP$ her) (JJ last) (NN day)) (PP (IN of) (NP (NN school))))))) (CC and) (VP (VBD was) (ADJP (JJ free)) (PP (IN for) (NP (DT the) (NN summer))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'gotten', u'get', u'VBN'), (u'out', u'out', u'RP'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'last', u'last', u'JJ'), (u'day', u'day', u'NN'), (u'of', u'of', u'IN'), (u'school', u'school', u'NN'), (u'and', u'and', u'CC'), (u'was', u'be', u'VBD'), (u'free', u'free', u'JJ'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'summer', u'summer', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'had', 'gotten', 'out', 'of', 'her', 'last', 'day', 'of', 'school', 'and', 'was', 'free', 'for', 'the', 'summer', '.']}, {'string': ' Two of her friends were going to the nearby beach to do some swimming and enjoy the sun.', 'parse': {'tree': '(ROOT (S (NP (NP (CD Two)) (PP (IN of) (NP (PRP$ her) (NNS friends)))) (VP (VBD were) (VP (VBG going) (PP (TO to) (NP (DT the) (JJ nearby) (NN beach))) (S (VP (TO to) (VP (VP (VB do) (NP (DT some) (NN swimming))) (CC and) (VP (VB enjoy) (NP (DT the) (NN sun)))))))) (. .)))', 'lemma': [(u'Two', u'two', u'CD'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'were', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'nearby', u'nearby', u'JJ'), (u'beach', u'beach', u'NN'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'some', u'some', u'DT'), (u'swimming', u'swimming', u'NN'), (u'and', u'and', u'CC'), (u'enjoy', u'enjoy', u'VB'), (u'the', u'the', u'DT'), (u'sun', u'sun', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Two', 'of', 'her', 'friends', 'were', 'going', 'to', 'the', 'nearby', 'beach', 'to', 'do', 'some', 'swimming', 'and', 'enjoy', 'the', 'sun', '.']}, {'string': ' Jenny went with them and when they got there the beach was very full and there were people everywhere.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Jenny)) (VP (VBD went) (PP (IN with) (NP (PRP them))))) (CC and) (S (S (SBAR (WHADVP (WRB when)) (S (NP (PRP they)) (VP (VBD got)))) (ADVP (RB there)) (NP (DT the) (NN beach)) (VP (VBD was) (ADJP (RB very) (JJ full)))) (CC and) (S (NP (EX there)) (VP (VBD were) (NP (NNS people)) (ADVP (RB everywhere))))) (. .)))', 'lemma': [(u'Jenny', u'Jenny', u'NNP'), (u'went', u'go', u'VBD'), (u'with', u'with', u'IN'), (u'them', u'they', u'PRP'), (u'and', u'and', u'CC'), (u'when', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'got', u'get', u'VBD'), (u'there', u'there', u'RB'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'full', u'full', u'JJ'), (u'and', u'and', u'CC'), (u'there', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'people', u'people', u'NNS'), (u'everywhere', u'everywhere', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Jenny', 'went', 'with', 'them', 'and', 'when', 'they', 'got', 'there', 'the', 'beach', 'was', 'very', 'full', 'and', 'there', 'were', 'people', 'everywhere', '.']}, {'string': ' They changed into their bathing suits and went to the water.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD changed) (PP (IN into) (NP (PRP$ their) (NN bathing) (NNS suits)))) (CC and) (VP (VBD went) (PP (TO to) (NP (DT the) (NN water))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'changed', u'change', u'VBD'), (u'into', u'into', u'IN'), (u'their', u'they', u'PRP$'), (u'bathing', u'bathing', u'NN'), (u'suits', u'suit', u'NNS'), (u'and', u'and', u'CC'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'water', u'water', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'changed', 'into', 'their', 'bathing', 'suits', 'and', 'went', 'to', 'the', 'water', '.']}, {'string': ' The water was very cold.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN water)) (VP (VBD was) (ADJP (RB very) (JJ cold))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'water', u'water', u'NN'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'cold', u'cold', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'water', 'was', 'very', 'cold', '.']}, {'string': ' They chose not swim and walked to the sand.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD chose) (RB not) (VP (VB swim))) (CC and) (VP (VBD walked) (PP (TO to) (NP (DT the) (NN sand))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'chose', u'choose', u'VBD'), (u'not', u'not', u'RB'), (u'swim', u'swim', u'VB'), (u'and', u'and', u'CC'), (u'walked', u'walk', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'sand', u'sand', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'chose', 'not', 'swim', 'and', 'walked', 'to', 'the', 'sand', '.']}, {'string': ' Then they laid down on some towels and enjoyed the sun.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VP (VBD laid) (PRT (RP down)) (PP (IN on) (NP (DT some) (NNS towels)))) (CC and) (VP (VBD enjoyed) (NP (DT the) (NN sun)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'laid', u'lay', u'VBD'), (u'down', u'down', u'RP'), (u'on', u'on', u'IN'), (u'some', u'some', u'DT'), (u'towels', u'towel', u'NNS'), (u'and', u'and', u'CC'), (u'enjoyed', u'enjoy', u'VBD'), (u'the', u'the', u'DT'), (u'sun', u'sun', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'laid', 'down', 'on', 'some', 'towels', 'and', 'enjoyed', 'the', 'sun', '.']}, {'string': ' After several hours Jenny and her friends fell asleep.', 'parse': {'tree': '(ROOT (S (PP (IN After) (NP (JJ several) (NNS hours))) (NP (NP (NNP Jenny)) (CC and) (NP (PRP$ her) (NNS friends))) (VP (VBD fell) (ADJP (RB asleep))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'several', u'several', u'JJ'), (u'hours', u'hour', u'NNS'), (u'Jenny', u'Jenny', u'NNP'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'fell', u'fall', u'VBD'), (u'asleep', u'asleep', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'several', 'hours', 'Jenny', 'and', 'her', 'friends', 'fell', 'asleep', '.']}, {'string': ' They woke up and the sun was beginning to set.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VBD woke) (PRT (RP up)))) (CC and) (S (NP (DT the) (NN sun)) (VP (VBD was) (VP (VBG beginning) (S (VP (TO to) (VP (VB set))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'woke', u'wake', u'VBD'), (u'up', u'up', u'RP'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'sun', u'sun', u'NN'), (u'was', u'be', u'VBD'), (u'beginning', u'begin', u'VBG'), (u'to', u'to', u'TO'), (u'set', u'set', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'woke', 'up', 'and', 'the', 'sun', 'was', 'beginning', 'to', 'set', '.']}, {'string': ' When Jenny sat up she found that it was painful to touch her skin.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Jenny)) (VP (VBD sat) (PRT (RP up))))) (NP (PRP she)) (VP (VBD found) (SBAR (IN that) (S (NP (PRP it)) (VP (VBD was) (ADJP (JJ painful) (S (VP (TO to) (VP (VB touch) (NP (PRP$ her) (NN skin)))))))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Jenny', u'Jenny', u'NNP'), (u'sat', u'sit', u'VBD'), (u'up', u'up', u'RP'), (u'she', u'she', u'PRP'), (u'found', u'find', u'VBD'), (u'that', u'that', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'painful', u'painful', u'JJ'), (u'to', u'to', u'TO'), (u'touch', u'touch', u'VB'), (u'her', u'she', u'PRP$'), (u'skin', u'skin', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Jenny', 'sat', 'up', 'she', 'found', 'that', 'it', 'was', 'painful', 'to', 'touch', 'her', 'skin', '.']}, {'string': ' When she looked down she saw that she had a very bad sunburn.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP she)) (VP (VBD looked) (PRT (RP down))))) (NP (PRP she)) (VP (VBD saw) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD had) (NP (DT a) (ADJP (RB very) (JJ bad)) (NN sunburn)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'she', u'she', u'PRP'), (u'looked', u'look', u'VBD'), (u'down', u'down', u'RP'), (u'she', u'she', u'PRP'), (u'saw', u'see', u'VBD'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'bad', u'bad', u'JJ'), (u'sunburn', u'sunburn', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'she', 'looked', 'down', 'she', 'saw', 'that', 'she', 'had', 'a', 'very', 'bad', 'sunburn', '.']}, {'string': ' Her friends were also very badly sunburned so they went home.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (NNS friends)) (VP (VBD were) (ADVP (RB also)) (ADJP (RB very) (RB badly) (JJ sunburned)) (SBAR (IN so) (S (NP (PRP they)) (VP (VBD went) (NP (NN home)))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'were', u'be', u'VBD'), (u'also', u'also', u'RB'), (u'very', u'very', u'RB'), (u'badly', u'badly', u'RB'), (u'sunburned', u'sunburned', u'JJ'), (u'so', u'so', u'IN'), (u'they', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'friends', 'were', 'also', 'very', 'badly', 'sunburned', 'so', 'they', 'went', 'home', '.']}, {'string': " Jenny 's mother gave her a cream to put on the sunburn.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Jenny) (POS 's)) (NN mother)) (VP (VBD gave) (NP (PRP her)) (NP (DT a) (NN cream) (S (VP (TO to) (VP (VB put) (PP (IN on) (NP (DT the) (NN sunburn)))))))) (. .)))", 'lemma': [(u'Jenny', u'Jenny', u'NNP'), (u"'s", u"'s", u'POS'), (u'mother', u'mother', u'NN'), (u'gave', u'give', u'VBD'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'cream', u'cream', u'NN'), (u'to', u'to', u'TO'), (u'put', u'put', u'VB'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'sunburn', u'sunburn', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Jenny', "'s", 'mother', 'gave', 'her', 'a', 'cream', 'to', 'put', 'on', 'the', 'sunburn', '.']}, {'string': ' Afterwards she felt a lot better and went to sleep.', 'parse': {'tree': '(ROOT (S (ADVP (RB Afterwards)) (NP (PRP she)) (VP (VP (VBD felt) (S (ADJP (NP (DT a) (RB lot)) (JJR better)))) (CC and) (VP (VBD went) (S (VP (TO to) (VP (VB sleep)))))) (. .)))', 'lemma': [(u'Afterwards', u'afterwards', u'RB'), (u'she', u'she', u'PRP'), (u'felt', u'feel', u'VBD'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'RB'), (u'better', u'better', u'JJR'), (u'and', u'and', u'CC'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Afterwards', 'she', 'felt', 'a', 'lot', 'better', 'and', 'went', 'to', 'sleep', '.']}], 'questions': [{'question': {'string': ' Where was Jenny when her mother gave her the cream for the sunburn?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD was) (NP (NNP Jenny)) (SBAR (WHADVP (WRB when)) (S (NP (PRP$ her) (NN mother)) (VP (VBD gave) (NP (PRP her)) (NP (NP (DT the) (NN cream)) (PP (IN for) (NP (DT the) (NN sunburn)))))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'was', u'be', u'VBD'), (u'Jenny', u'Jenny', u'NNP'), (u'when', u'when', u'WRB'), (u'her', u'she', u'PRP$'), (u'mother', u'mother', u'NN'), (u'gave', u'give', u'VBD'), (u'her', u'she', u'PRP'), (u'the', u'the', u'DT'), (u'cream', u'cream', u'NN'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'sunburn', u'sunburn', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'was', 'Jenny', 'when', 'her', 'mother', 'gave', 'her', 'the', 'cream', 'for', 'the', 'sunburn', '?']}, 'answers': [{'string': ' the beach', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN beach))))', 'lemma': [(u'the', u'the', u'DT'), (u'beach', u'beach', u'NN')]}, 'tokens': ['the', 'beach']}, {'string': ' school', 'parse': {'tree': '(ROOT (NP (NN school)))', 'lemma': [(u'school', u'school', u'NN')]}, 'tokens': ['school']}, {'string': ' home', 'parse': {'tree': '(ROOT (NP (NN home)))', 'lemma': [(u'home', u'home', u'NN')]}, 'tokens': ['home']}, {'string': ' the mall', 'parse': {'tree': '(ROOT (FRAG (NP (DT the) (NN mall))))', 'lemma': [(u'the', u'the', u'DT'), (u'mall', u'mall', u'NN')]}, 'tokens': ['the', 'mall']}], 'mode': 0}, {'question': {'string': ' How many friends did Jenny have with her?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS friends)) (SQ (VBD did) (NP (NNP Jenny)) (VP (VB have) (PP (IN with) (NP (PRP her))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'many', u'many', u'JJ'), (u'friends', u'friend', u'NNS'), (u'did', u'do', u'VBD'), (u'Jenny', u'Jenny', u'NNP'), (u'have', u'have', u'VB'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'many', 'friends', 'did', 'Jenny', 'have', 'with', 'her', '?']}, 'answers': [{'string': ' 4', 'parse': {'tree': '(ROOT (FRAG (NP (CD 4))))', 'lemma': [(u'4', u'4', u'CD')]}, 'tokens': ['4']}, {'string': ' 1', 'parse': {'tree': '(ROOT (FRAG (NP (CD 1))))', 'lemma': [(u'1', u'1', u'CD')]}, 'tokens': ['1']}, {'string': ' 2', 'parse': {'tree': '(ROOT (FRAG (NP (CD 2))))', 'lemma': [(u'2', u'2', u'CD')]}, 'tokens': ['2']}, {'string': ' 6', 'parse': {'tree': '(ROOT (FRAG (NP (CD 6))))', 'lemma': [(u'6', u'6', u'CD')]}, 'tokens': ['6']}], 'mode': 1}, {'question': {'string': ' Where did Jenny and her friends lay down on the towels to enjoy the sun?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NP (NNP Jenny)) (CC and) (NP (PRP$ her) (NNS friends))) (VP (VB lay) (PRT (RP down)) (PP (IN on) (NP (DT the) (NNS towels))) (S (VP (TO to) (VP (VB enjoy) (NP (DT the) (NN sun))))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'Jenny', u'Jenny', u'NNP'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'lay', u'lay', u'VB'), (u'down', u'down', u'RP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'towels', u'towel', u'NNS'), (u'to', u'to', u'TO'), (u'enjoy', u'enjoy', u'VB'), (u'the', u'the', u'DT'), (u'sun', u'sun', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'Jenny', 'and', 'her', 'friends', 'lay', 'down', 'on', 'the', 'towels', 'to', 'enjoy', 'the', 'sun', '?']}, 'answers': [{'string': ' The water', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN water))))', 'lemma': [(u'The', u'the', u'DT'), (u'water', u'water', u'NN')]}, 'tokens': ['The', 'water']}, {'string': ' Home', 'parse': {'tree': '(ROOT (NP (NNP Home)))', 'lemma': [(u'Home', u'Home', u'NNP')]}, 'tokens': ['Home']}, {'string': ' The sand', 'parse': {'tree': '(ROOT (FRAG (NP (DT The) (NN sand))))', 'lemma': [(u'The', u'the', u'DT'), (u'sand', u'sand', u'NN')]}, 'tokens': ['The', 'sand']}, {'string': ' School', 'parse': {'tree': '(ROOT (NP (NNP School)))', 'lemma': [(u'School', u'School', u'NNP')]}, 'tokens': ['School']}], 'mode': 0}, {'question': {'string': ' What was the name of the girl with blond hair and blue eyes?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN girl)) (PP (IN with) (NP (JJ blond) (NN hair) (CC and) (NN blue) (NNS eyes))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'name', u'name', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'girl', u'girl', u'NN'), (u'with', u'with', u'IN'), (u'blond', u'blond', u'JJ'), (u'hair', u'hair', u'NN'), (u'and', u'and', u'CC'), (u'blue', u'blue', u'NN'), (u'eyes', u'eye', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'name', 'of', 'the', 'girl', 'with', 'blond', 'hair', 'and', 'blue', 'eyes', '?']}, 'answers': [{'string': ' Jenny', 'parse': {'tree': '(ROOT (NP (NNP Jenny)))', 'lemma': [(u'Jenny', u'Jenny', u'NNP')]}, 'tokens': ['Jenny']}, {'string': ' Helga', 'parse': {'tree': '(ROOT (NP (NNP Helga)))', 'lemma': [(u'Helga', u'Helga', u'NNP')]}, 'tokens': ['Helga']}, {'string': ' Sarah', 'parse': {'tree': '(ROOT (NP (NNP Sarah)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP')]}, 'tokens': ['Sarah']}, {'string': ' Suzy', 'parse': {'tree': '(ROOT (ADVP (RB Suzy)))', 'lemma': [(u'Suzy', u'suzy', u'RB')]}, 'tokens': ['Suzy']}], 'mode': 1}]}
{'sentences': [{'string': ' Sarah is a girl.', 'parse': {'tree': '(ROOT (S (NP (NNP Sarah)) (VP (VBZ is) (NP (DT a) (NN girl))) (. .)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'girl', u'girl', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sarah', 'is', 'a', 'girl', '.']}, {'string': ' Sarah has one brother.', 'parse': {'tree': '(ROOT (S (NP (NNP Sarah)) (VP (VBZ has) (NP (CD one) (NN brother))) (. .)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP'), (u'has', u'have', u'VBZ'), (u'one', u'one', u'CD'), (u'brother', u'brother', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sarah', 'has', 'one', 'brother', '.']}, {'string': " Sarah 's brother 's name is Timothy.", 'parse': {'tree': "(ROOT (S (NP (NP (NP (NNP Sarah) (POS 's)) (NN brother) (POS 's)) (NN name)) (VP (VBZ is) (NP (NNP Timothy))) (. .)))", 'lemma': [(u'Sarah', u'Sarah', u'NNP'), (u"'s", u"'s", u'POS'), (u'brother', u'brother', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'Timothy', u'Timothy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Sarah', "'s", 'brother', "'s", 'name', 'is', 'Timothy', '.']}, {'string': ' Sarah has one sister.', 'parse': {'tree': '(ROOT (S (NP (NNP Sarah)) (VP (VBZ has) (NP (CD one) (NN sister))) (. .)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP'), (u'has', u'have', u'VBZ'), (u'one', u'one', u'CD'), (u'sister', u'sister', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sarah', 'has', 'one', 'sister', '.']}, {'string': " Sarah 's sister 's name is Annabelle.", 'parse': {'tree': "(ROOT (S (NP (NP (NP (NNP Sarah) (POS 's)) (NN sister) (POS 's)) (NN name)) (VP (VBZ is) (ADJP (JJ Annabelle))) (. .)))", 'lemma': [(u'Sarah', u'Sarah', u'NNP'), (u"'s", u"'s", u'POS'), (u'sister', u'sister', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'Annabelle', u'annabelle', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Sarah', "'s", 'sister', "'s", 'name', 'is', 'Annabelle', '.']}, {'string': ' Their last name is MacGregor.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Their) (JJ last) (NN name)) (VP (VBZ is) (NP (NNP MacGregor))) (. .)))', 'lemma': [(u'Their', u'they', u'PRP$'), (u'last', u'last', u'JJ'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'MacGregor', u'MacGregor', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Their', 'last', 'name', 'is', 'MacGregor', '.']}, {'string': ' One day Sarah went to the park with her brother Timothy.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (NP (NNP Sarah)) (VP (VBD went) (PP (TO to) (NP (DT the) (NN park))) (PP (IN with) (NP (PRP$ her) (NN brother) (NN Timothy)))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'Sarah', u'Sarah', u'NNP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'brother', u'brother', u'NN'), (u'Timothy', u'timothy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'Sarah', 'went', 'to', 'the', 'park', 'with', 'her', 'brother', 'Timothy', '.']}, {'string': ' They swung on the swings for a short time.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD swung) (PP (IN on) (NP (DT the) (NNS swings))) (PP (IN for) (NP (DT a) (JJ short) (NN time)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'swung', u'swing', u'VBD'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'swings', u'swing', u'NNS'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'short', u'short', u'JJ'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'swung', 'on', 'the', 'swings', 'for', 'a', 'short', 'time', '.']}, {'string': ' Then Annabelle came out and swung with them.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (NNP Annabelle)) (VP (VP (VBD came) (PRT (RP out))) (CC and) (VP (VBD swung) (PP (IN with) (NP (PRP them))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'Annabelle', u'Annabelle', u'NNP'), (u'came', u'come', u'VBD'), (u'out', u'out', u'RP'), (u'and', u'and', u'CC'), (u'swung', u'swing', u'VBD'), (u'with', u'with', u'IN'), (u'them', u'they', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'Annabelle', 'came', 'out', 'and', 'swung', 'with', 'them', '.']}, {'string': ' They all sang some nice songs together.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (DT all)) (VP (VBD sang) (NP (DT some) (JJ nice) (NNS songs)) (ADVP (RB together))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'all', u'all', u'DT'), (u'sang', u'sing', u'VBD'), (u'some', u'some', u'DT'), (u'nice', u'nice', u'JJ'), (u'songs', u'song', u'NNS'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'all', 'sang', 'some', 'nice', 'songs', 'together', '.']}, {'string': ' They all became very happy.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (DT all)) (VP (VBD became) (ADJP (RB very) (JJ happy))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'all', u'all', u'DT'), (u'became', u'become', u'VBD'), (u'very', u'very', u'RB'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'all', 'became', 'very', 'happy', '.']}, {'string': " Then Timothy 's friend came.", 'parse': {'tree': "(ROOT (S (RB Then) (NP (NP (NNP Timothy) (POS 's)) (NN friend)) (VP (VBD came)) (. .)))", 'lemma': [(u'Then', u'then', u'RB'), (u'Timothy', u'Timothy', u'NNP'), (u"'s", u"'s", u'POS'), (u'friend', u'friend', u'NN'), (u'came', u'come', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'Timothy', "'s", 'friend', 'came', '.']}, {'string': ' Timothy liked his friend very much.', 'parse': {'tree': '(ROOT (S (NP (NNP Timothy)) (VP (VBD liked) (NP (PRP$ his) (NN friend)) (ADVP (RB very) (RB much))) (. .)))', 'lemma': [(u'Timothy', u'Timothy', u'NNP'), (u'liked', u'like', u'VBD'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'very', u'very', u'RB'), (u'much', u'much', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Timothy', 'liked', 'his', 'friend', 'very', 'much', '.']}, {'string': ' Timothy went off the swing and went away with his friend.', 'parse': {'tree': '(ROOT (S (NP (NNP Timothy)) (VP (VP (VBD went) (PRT (RP off)) (NP (DT the) (NN swing))) (CC and) (VP (VBD went) (PRT (RP away)) (PP (IN with) (NP (PRP$ his) (NN friend))))) (. .)))', 'lemma': [(u'Timothy', u'Timothy', u'NNP'), (u'went', u'go', u'VBD'), (u'off', u'off', u'RP'), (u'the', u'the', u'DT'), (u'swing', u'swing', u'NN'), (u'and', u'and', u'CC'), (u'went', u'go', u'VBD'), (u'away', u'away', u'RP'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Timothy', 'went', 'off', 'the', 'swing', 'and', 'went', 'away', 'with', 'his', 'friend', '.']}, {'string': ' Then Annabelle and Sarah felt very very sad.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (NNP Annabelle) (CC and) (NNP Sarah)) (VP (VBD felt) (ADJP (RB very) (RB very) (JJ sad))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'Annabelle', u'Annabelle', u'NNP'), (u'and', u'and', u'CC'), (u'Sarah', u'Sarah', u'NNP'), (u'felt', u'feel', u'VBD'), (u'very', u'very', u'RB'), (u'very', u'very', u'RB'), (u'sad', u'sad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'Annabelle', 'and', 'Sarah', 'felt', 'very', 'very', 'sad', '.']}, {'string': " Happily then Annabelle and Sarah 's friend came.", 'parse': {'tree': "(ROOT (S (ADVP (RB Happily)) (ADVP (RB then)) (NP (NP (NNP Annabelle)) (CC and) (NP (NP (NNP Sarah) (POS 's)) (NN friend))) (VP (VBD came)) (. .)))", 'lemma': [(u'Happily', u'happily', u'RB'), (u'then', u'then', u'RB'), (u'Annabelle', u'Annabelle', u'NNP'), (u'and', u'and', u'CC'), (u'Sarah', u'Sarah', u'NNP'), (u"'s", u"'s", u'POS'), (u'friend', u'friend', u'NN'), (u'came', u'come', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Happily', 'then', 'Annabelle', 'and', 'Sarah', "'s", 'friend', 'came', '.']}, {'string': " Their friend 's name was Kate Smith.", 'parse': {'tree': "(ROOT (S (NP (NP (PRP$ Their) (NN friend) (POS 's)) (NN name)) (VP (VBD was) (NP (NNP Kate) (NNP Smith))) (. .)))", 'lemma': [(u'Their', u'they', u'PRP$'), (u'friend', u'friend', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Kate', u'Kate', u'NNP'), (u'Smith', u'Smith', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Their', 'friend', "'s", 'name', 'was', 'Kate', 'Smith', '.']}, {'string': ' She was the same age as Sarah.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD was) (NP (NP (DT the) (JJ same) (NN age)) (PP (IN as) (NP (NNP Sarah))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'same', u'same', u'JJ'), (u'age', u'age', u'NN'), (u'as', u'as', u'IN'), (u'Sarah', u'Sarah', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'was', 'the', 'same', 'age', 'as', 'Sarah', '.']}, {'string': ' They wanted to go to the slide together.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD wanted) (S (VP (TO to) (VP (VB go) (PP (TO to) (NP (DT the) (NN slide))) (ADVP (RB together)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'slide', u'slide', u'NN'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'wanted', 'to', 'go', 'to', 'the', 'slide', 'together', '.']}, {'string': ' So they went to the slide and played for a long time.', 'parse': {'tree': '(ROOT (S (IN So) (NP (PRP they)) (VP (VP (VBD went) (PP (TO to) (NP (DT the) (NN slide)))) (CC and) (VP (VBD played) (PP (IN for) (NP (DT a) (JJ long) (NN time))))) (. .)))', 'lemma': [(u'So', u'so', u'IN'), (u'they', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'slide', u'slide', u'NN'), (u'and', u'and', u'CC'), (u'played', u'play', u'VBD'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'long', u'long', u'JJ'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['So', 'they', 'went', 'to', 'the', 'slide', 'and', 'played', 'for', 'a', 'long', 'time', '.']}, {'string': ' Then Annabelle became happy.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (NNP Annabelle)) (VP (VBD became) (ADJP (JJ happy))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'Annabelle', u'Annabelle', u'NNP'), (u'became', u'become', u'VBD'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'Annabelle', 'became', 'happy', '.']}, {'string': ' And Sarah also became happy.', 'parse': {'tree': '(ROOT (S (CC And) (NP (NNP Sarah)) (ADVP (RB also)) (VP (VBD became) (ADJP (JJ happy))) (. .)))', 'lemma': [(u'And', u'and', u'CC'), (u'Sarah', u'Sarah', u'NNP'), (u'also', u'also', u'RB'), (u'became', u'become', u'VBD'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['And', 'Sarah', 'also', 'became', 'happy', '.']}, {'string': ' Then they went home together and had some food.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VP (VBD went) (NP (NN home)) (ADVP (RB together))) (CC and) (VP (VBD had) (NP (DT some) (NN food)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'home', u'home', u'NN'), (u'together', u'together', u'RB'), (u'and', u'and', u'CC'), (u'had', u'have', u'VBD'), (u'some', u'some', u'DT'), (u'food', u'food', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'went', 'home', 'together', 'and', 'had', 'some', 'food', '.']}], 'questions': [{'question': {'string': ' Who is the main character in the story?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (DT the) (JJ main) (NN character)) (PP (IN in) (NP (DT the) (NN story))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'main', u'main', u'JJ'), (u'character', u'character', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'is', 'the', 'main', 'character', 'in', 'the', 'story', '?']}, 'answers': [{'string': ' Timothy', 'parse': {'tree': '(ROOT (NP (NNP Timothy)))', 'lemma': [(u'Timothy', u'Timothy', u'NNP')]}, 'tokens': ['Timothy']}, {'string': ' Sarah', 'parse': {'tree': '(ROOT (NP (NNP Sarah)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP')]}, 'tokens': ['Sarah']}, {'string': ' Kate', 'parse': {'tree': '(ROOT (NP (NNP Kate)))', 'lemma': [(u'Kate', u'Kate', u'NNP')]}, 'tokens': ['Kate']}, {'string': ' Annabelle', 'parse': {'tree': '(ROOT (NP (NNP Annabelle)))', 'lemma': [(u'Annabelle', u'Annabelle', u'NNP')]}, 'tokens': ['Annabelle']}], 'mode': 0}, {'question': {'string': ' How many brothers and sisters does Sarah have?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NP (NP (NNS brothers)) (CC and) (NP (NNS sisters)))) (SQ (VBZ does) (NP (NNP Sarah)) (VP (VB have))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'many', u'many', u'JJ'), (u'brothers', u'brother', u'NNS'), (u'and', u'and', u'CC'), (u'sisters', u'sister', u'NNS'), (u'does', u'do', u'VBZ'), (u'Sarah', u'Sarah', u'NNP'), (u'have', u'have', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'many', 'brothers', 'and', 'sisters', 'does', 'Sarah', 'have', '?']}, 'answers': [{'string': ' 1', 'parse': {'tree': '(ROOT (FRAG (NP (CD 1))))', 'lemma': [(u'1', u'1', u'CD')]}, 'tokens': ['1']}, {'string': ' 2', 'parse': {'tree': '(ROOT (FRAG (NP (CD 2))))', 'lemma': [(u'2', u'2', u'CD')]}, 'tokens': ['2']}, {'string': ' 0', 'parse': {'tree': '(ROOT (INTJ (UH 0)))', 'lemma': [(u'0', u'0', u'UH')]}, 'tokens': ['0']}, {'string': ' 3', 'parse': {'tree': '(ROOT (FRAG (NP (CD 3))))', 'lemma': [(u'3', u'3', u'CD')]}, 'tokens': ['3']}], 'mode': 0}, {'question': {'string': ' Why did Timothy Leave?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NNP Timothy)) (VP (VB Leave))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'Timothy', u'Timothy', u'NNP'), (u'Leave', u'leave', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'Timothy', 'Leave', '?']}, 'answers': [{'string': ' He was bored.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (VBN bored))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'bored', u'bore', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'bored', '.']}, {'string': ' he was annoyed.', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBD was) (ADJP (JJ annoyed))) (. .)))', 'lemma': [(u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'annoyed', u'annoyed', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['he', 'was', 'annoyed', '.']}, {'string': ' He went home.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD went) (NP (NN home))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'went', u'go', u'VBD'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'went', 'home', '.']}, {'string': ' His friend came.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN friend)) (VP (VBD came)) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u'came', u'come', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'friend', 'came', '.']}], 'mode': 0}, {'question': {'string': " Who is Annabelle and Sarah 's friend?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NP (NNP Annabelle) (CC and) (NNP Sarah) (POS 's)) (NN friend))) (. ?)))", 'lemma': [(u'Who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'Annabelle', u'Annabelle', u'NNP'), (u'and', u'and', u'CC'), (u'Sarah', u'Sarah', u'NNP'), (u"'s", u"'s", u'POS'), (u'friend', u'friend', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'is', 'Annabelle', 'and', 'Sarah', "'s", 'friend', '?']}, 'answers': [{'string': ' Annabelle', 'parse': {'tree': '(ROOT (NP (NNP Annabelle)))', 'lemma': [(u'Annabelle', u'Annabelle', u'NNP')]}, 'tokens': ['Annabelle']}, {'string': ' Kate', 'parse': {'tree': '(ROOT (NP (NNP Kate)))', 'lemma': [(u'Kate', u'Kate', u'NNP')]}, 'tokens': ['Kate']}, {'string': ' Timothy', 'parse': {'tree': '(ROOT (NP (NNP Timothy)))', 'lemma': [(u'Timothy', u'Timothy', u'NNP')]}, 'tokens': ['Timothy']}, {'string': ' Sarah', 'parse': {'tree': '(ROOT (NP (NNP Sarah)))', 'lemma': [(u'Sarah', u'Sarah', u'NNP')]}, 'tokens': ['Sarah']}], 'mode': 1}]}
{'sentences': [{'string': ' One day Billy and Sandy went to the neighborhood fair.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (NP (NNP Billy) (CC and) (NNP Sandy)) (VP (VBD went) (PP (TO to) (NP (DT the) (NN neighborhood) (NN fair)))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'Billy', u'Billy', u'NNP'), (u'and', u'and', u'CC'), (u'Sandy', u'Sandy', u'NNP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'neighborhood', u'neighborhood', u'NN'), (u'fair', u'fair', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'Billy', 'and', 'Sandy', 'went', 'to', 'the', 'neighborhood', 'fair', '.']}, {'string': ' They were so exited because this year Bob the clown was going to be there.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (ADJP (RB so) (JJ exited)) (SBAR (IN because) (S (NP (DT this) (NN year)) (VP (VBD Bob) (SBAR (S (NP (DT the) (NN clown)) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB be) (ADVP (RB there))))))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'exited', u'exited', u'JJ'), (u'because', u'because', u'IN'), (u'this', u'this', u'DT'), (u'year', u'year', u'NN'), (u'Bob', u'bob', u'VBD'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'there', u'there', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'so', 'exited', 'because', 'this', 'year', 'Bob', 'the', 'clown', 'was', 'going', 'to', 'be', 'there', '.']}, {'string': ' They had heard a lot about Bob the clown, he was funny and knew a lot of balloon tricks.', 'parse': {'tree': '(ROOT (S (S (NP (PRP They)) (VP (VBD had) (VP (VBN heard) (NP (NP (DT a) (NN lot)) (PP (IN about) (NP (NNP Bob) (DT the) (NN clown))))))) (, ,) (NP (PRP he)) (VP (VP (VBD was) (ADJP (JJ funny))) (CC and) (VP (VBD knew) (NP (NP (DT a) (NN lot)) (PP (IN of) (NP (NN balloon) (NNS tricks)))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'heard', u'hear', u'VBN'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'about', u'about', u'IN'), (u'Bob', u'Bob', u'NNP'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'funny', u'funny', u'JJ'), (u'and', u'and', u'CC'), (u'knew', u'know', u'VBD'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'of', u'of', u'IN'), (u'balloon', u'balloon', u'NN'), (u'tricks', u'trick', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'had', 'heard', 'a', 'lot', 'about', 'Bob', 'the', 'clown', ',', 'he', 'was', 'funny', 'and', 'knew', 'a', 'lot', 'of', 'balloon', 'tricks', '.']}, {'string': ' He always made the kids laugh and gave out small prizes to many of the children at the fair.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB always)) (VP (VP (VBD made) (S (NP (DT the) (NNS kids)) (VP (NN laugh)))) (CC and) (VP (VBD gave) (PRT (RP out)) (NP (JJ small) (NNS prizes)) (PP (TO to) (NP (NP (JJ many)) (PP (IN of) (NP (DT the) (NNS children))))) (PP (IN at) (NP (DT the) (NN fair))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'always', u'always', u'RB'), (u'made', u'make', u'VBD'), (u'the', u'the', u'DT'), (u'kids', u'kid', u'NNS'), (u'laugh', u'laugh', u'NN'), (u'and', u'and', u'CC'), (u'gave', u'give', u'VBD'), (u'out', u'out', u'RP'), (u'small', u'small', u'JJ'), (u'prizes', u'prize', u'NNS'), (u'to', u'to', u'TO'), (u'many', u'many', u'JJ'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'children', u'child', u'NNS'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'fair', u'fair', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'always', 'made', 'the', 'kids', 'laugh', 'and', 'gave', 'out', 'small', 'prizes', 'to', 'many', 'of', 'the', 'children', 'at', 'the', 'fair', '.']}, {'string': ' Billy and Sandy had even heard that sometimes Bob the clown would give out free cotton candy and candy apples.', 'parse': {'tree': '(ROOT (S (NP (NNP Billy) (CC and) (NNP Sandy)) (VP (VBD had) (ADVP (RB even)) (VP (VBN heard) (SBAR (IN that) (S (ADVP (RB sometimes)) (NP (NP (NNP Bob)) (NP (DT the) (NN clown))) (VP (MD would) (VP (VB give) (PRT (RP out)) (NP (ADJP (JJ free) (NN cotton)) (ADJP (NN candy) (CC and) (NN candy)) (NNS apples)))))))) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'and', u'and', u'CC'), (u'Sandy', u'Sandy', u'NNP'), (u'had', u'have', u'VBD'), (u'even', u'even', u'RB'), (u'heard', u'hear', u'VBN'), (u'that', u'that', u'IN'), (u'sometimes', u'sometimes', u'RB'), (u'Bob', u'Bob', u'NNP'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'would', u'would', u'MD'), (u'give', u'give', u'VB'), (u'out', u'out', u'RP'), (u'free', u'free', u'JJ'), (u'cotton', u'cotton', u'NN'), (u'candy', u'candy', u'NN'), (u'and', u'and', u'CC'), (u'candy', u'candy', u'NN'), (u'apples', u'apple', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'and', 'Sandy', 'had', 'even', 'heard', 'that', 'sometimes', 'Bob', 'the', 'clown', 'would', 'give', 'out', 'free', 'cotton', 'candy', 'and', 'candy', 'apples', '.']}, {'string': ' They had waited all year and were so excited.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD had) (VP (VBN waited) (NP (DT all) (NN year)))) (CC and) (VP (VBD were) (ADJP (RB so) (JJ excited)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'waited', u'wait', u'VBN'), (u'all', u'all', u'DT'), (u'year', u'year', u'NN'), (u'and', u'and', u'CC'), (u'were', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'excited', u'excited', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'had', 'waited', 'all', 'year', 'and', 'were', 'so', 'excited', '.']}, {'string': ' They did all their chores and cleaned their rooms so they could go to the fair.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD did) (NP (PDT all) (PRP$ their) (NNS chores))) (CC and) (VP (VBD cleaned) (NP (PRP$ their) (NNS rooms)) (SBAR (IN so) (S (NP (PRP they)) (VP (MD could) (VP (VB go) (PP (TO to) (NP (DT the) (NN fair))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'did', u'do', u'VBD'), (u'all', u'all', u'PDT'), (u'their', u'they', u'PRP$'), (u'chores', u'chore', u'NNS'), (u'and', u'and', u'CC'), (u'cleaned', u'clean', u'VBD'), (u'their', u'they', u'PRP$'), (u'rooms', u'room', u'NNS'), (u'so', u'so', u'IN'), (u'they', u'they', u'PRP'), (u'could', u'could', u'MD'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'fair', u'fair', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'did', 'all', 'their', 'chores', 'and', 'cleaned', 'their', 'rooms', 'so', 'they', 'could', 'go', 'to', 'the', 'fair', '.']}, {'string': ' When they got to the fair they were so happy to see that Bob the clown was handing out cotton candy and candy apples.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP they)) (VP (VBD got) (PP (TO to) (NP (DT the) (NN fair)))))) (NP (PRP they)) (VP (VBD were) (ADJP (RB so) (JJ happy) (S (VP (TO to) (VP (VB see) (SBAR (IN that) (S (NP (NP (NNP Bob)) (NP (DT the) (NN clown))) (VP (VBD was) (VP (VBG handing) (NP (ADJP (IN out) (NN cotton)) (ADJP (NN candy) (CC and) (NN candy)) (NNS apples))))))))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'fair', u'fair', u'NN'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'happy', u'happy', u'JJ'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'that', u'that', u'IN'), (u'Bob', u'Bob', u'NNP'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'was', u'be', u'VBD'), (u'handing', u'hand', u'VBG'), (u'out', u'out', u'IN'), (u'cotton', u'cotton', u'NN'), (u'candy', u'candy', u'NN'), (u'and', u'and', u'CC'), (u'candy', u'candy', u'NN'), (u'apples', u'apple', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'they', 'got', 'to', 'the', 'fair', 'they', 'were', 'so', 'happy', 'to', 'see', 'that', 'Bob', 'the', 'clown', 'was', 'handing', 'out', 'cotton', 'candy', 'and', 'candy', 'apples', '.']}, {'string': ' Billy and Sandy waited in line and then once it was their turn Billy got a balloon in the shape of a dog and Sandy got a big bag of cotton candy.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Billy) (CC and) (NNP Sandy)) (VP (VBD waited) (PP (IN in) (NP (NP (NN line)) (CC and) (NP (RB then)))) (SBAR (IN once) (S (NP (PRP it)) (VP (VBD was) (NP (NP (PRP$ their) (NN turn)) (SBAR (S (NP (NNP Billy)) (VP (VBD got) (NP (DT a) (NN balloon)) (PP (IN in) (NP (NP (DT the) (NN shape)) (PP (IN of) (NP (DT a) (NN dog)))))))))))))) (CC and) (S (NP (NNP Sandy)) (VP (VBD got) (NP (NP (DT a) (JJ big) (NN bag)) (PP (IN of) (NP (NN cotton) (NN candy)))))) (. .)))', 'lemma': [(u'Billy', u'Billy', u'NNP'), (u'and', u'and', u'CC'), (u'Sandy', u'Sandy', u'NNP'), (u'waited', u'wait', u'VBD'), (u'in', u'in', u'IN'), (u'line', u'line', u'NN'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'once', u'once', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'their', u'they', u'PRP$'), (u'turn', u'turn', u'NN'), (u'Billy', u'Billy', u'NNP'), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'balloon', u'balloon', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'shape', u'shape', u'NN'), (u'of', u'of', u'IN'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'and', u'and', u'CC'), (u'Sandy', u'Sandy', u'NNP'), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'big', u'big', u'JJ'), (u'bag', u'bag', u'NN'), (u'of', u'of', u'IN'), (u'cotton', u'cotton', u'NN'), (u'candy', u'candy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Billy', 'and', 'Sandy', 'waited', 'in', 'line', 'and', 'then', 'once', 'it', 'was', 'their', 'turn', 'Billy', 'got', 'a', 'balloon', 'in', 'the', 'shape', 'of', 'a', 'dog', 'and', 'Sandy', 'got', 'a', 'big', 'bag', 'of', 'cotton', 'candy', '.']}, {'string': ' They were both happy and could not wait to tell their friends all about Bob the clown.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD were) (ADJP (DT both) (JJ happy))) (CC and) (VP (MD could) (RB not) (VP (VB wait) (S (VP (TO to) (VP (VB tell) (NP (PRP$ their) (NNS friends)) (NP (NP (DT all)) (PP (IN about) (NP (NNP Bob))))))))) (NP (DT the) (NN clown))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'both', u'both', u'DT'), (u'happy', u'happy', u'JJ'), (u'and', u'and', u'CC'), (u'could', u'could', u'MD'), (u'not', u'not', u'RB'), (u'wait', u'wait', u'VB'), (u'to', u'to', u'TO'), (u'tell', u'tell', u'VB'), (u'their', u'they', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'all', u'all', u'DT'), (u'about', u'about', u'IN'), (u'Bob', u'Bob', u'NNP'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'both', 'happy', 'and', 'could', 'not', 'wait', 'to', 'tell', 'their', 'friends', 'all', 'about', 'Bob', 'the', 'clown', '.']}], 'questions': [{'question': {'string': ' Where were Billy and Sandy going, and why were they so excited?', 'parse': {'tree': '(ROOT (SBARQ (SBARQ (WHADVP (WRB Where)) (SQ (VBD were) (NP (NNP Billy) (CC and) (NNP Sandy)) (VP (VBG going)))) (, ,) (CC and) (SBARQ (WHADVP (WRB why)) (SQ (VBD were) (NP (PRP they)) (ADJP (RB so) (JJ excited))) (. ?))))', 'lemma': [(u'Where', u'where', u'WRB'), (u'were', u'be', u'VBD'), (u'Billy', u'Billy', u'NNP'), (u'and', u'and', u'CC'), (u'Sandy', u'Sandy', u'NNP'), (u'going', u'go', u'VBG'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'why', u'why', u'WRB'), (u'were', u'be', u'VBD'), (u'they', u'they', u'PRP'), (u'so', u'so', u'RB'), (u'excited', u'excited', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'were', 'Billy', 'and', 'Sandy', 'going', ',', 'and', 'why', 'were', 'they', 'so', 'excited', '?']}, 'answers': [{'string': ' The Fair, and because the rides were fun', 'parse': {'tree': '(ROOT (UCP (NP (DT The) (NN Fair)) (, ,) (CC and) (SBAR (IN because) (S (NP (DT the) (NNS rides)) (VP (VBD were) (NP (NN fun)))))))', 'lemma': [(u'The', u'the', u'DT'), (u'Fair', u'fair', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'because', u'because', u'IN'), (u'the', u'the', u'DT'), (u'rides', u'ride', u'NNS'), (u'were', u'be', u'VBD'), (u'fun', u'fun', u'NN')]}, 'tokens': ['The', 'Fair', ',', 'and', 'because', 'the', 'rides', 'were', 'fun']}, {'string': ' The park, and because Bob the clown was going to be there', 'parse': {'tree': '(ROOT (UCP (NP (DT The) (NN park)) (, ,) (CC and) (SBAR (IN because) (S (NP (NP (NNP Bob)) (NP (DT the) (NN clown))) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB be) (ADVP (RB there)))))))))))', 'lemma': [(u'The', u'the', u'DT'), (u'park', u'park', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'because', u'because', u'IN'), (u'Bob', u'Bob', u'NNP'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'there', u'there', u'RB')]}, 'tokens': ['The', 'park', ',', 'and', 'because', 'Bob', 'the', 'clown', 'was', 'going', 'to', 'be', 'there']}, {'string': ' The art show, and because Bob the clown was going to be there', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NN art)) (VP (VBP show))) (, ,) (CC and) (S (PP (IN because) (NP (NNP Bob))) (NP (DT the) (NN clown)) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB be) (ADVP (RB there))))))))))', 'lemma': [(u'The', u'the', u'DT'), (u'art', u'art', u'NN'), (u'show', u'show', u'VBP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'because', u'because', u'IN'), (u'Bob', u'Bob', u'NNP'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'there', u'there', u'RB')]}, 'tokens': ['The', 'art', 'show', ',', 'and', 'because', 'Bob', 'the', 'clown', 'was', 'going', 'to', 'be', 'there']}, {'string': ' The fair, and because Bob the clown was going to be there', 'parse': {'tree': '(ROOT (UCP (NP (DT The) (NN fair)) (, ,) (CC and) (SBAR (IN because) (S (NP (NP (NNP Bob)) (NP (DT the) (NN clown))) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB be) (ADVP (RB there)))))))))))', 'lemma': [(u'The', u'the', u'DT'), (u'fair', u'fair', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'because', u'because', u'IN'), (u'Bob', u'Bob', u'NNP'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'there', u'there', u'RB')]}, 'tokens': ['The', 'fair', ',', 'and', 'because', 'Bob', 'the', 'clown', 'was', 'going', 'to', 'be', 'there']}], 'mode': 0}, {'question': {'string': ' The clowns name is what?', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS clowns) (NN name)) (VP (VBZ is) (WHNP (WP what))) (. ?)))', 'lemma': [(u'The', u'the', u'DT'), (u'clowns', u'clown', u'NNS'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'what', u'what', u'WP'), (u'?', u'?', u'.')]}, 'tokens': ['The', 'clowns', 'name', 'is', 'what', '?']}, 'answers': [{'string': ' Bosco', 'parse': {'tree': '(ROOT (NP (NNP Bosco)))', 'lemma': [(u'Bosco', u'Bosco', u'NNP')]}, 'tokens': ['Bosco']}, {'string': ' Bob', 'parse': {'tree': '(ROOT (NP (NNP Bob)))', 'lemma': [(u'Bob', u'Bob', u'NNP')]}, 'tokens': ['Bob']}, {'string': ' Sam', 'parse': {'tree': '(ROOT (NP (NNP Sam)))', 'lemma': [(u'Sam', u'Sam', u'NNP')]}, 'tokens': ['Sam']}, {'string': ' Tim', 'parse': {'tree': '(ROOT (NP (NNP Tim)))', 'lemma': [(u'Tim', u'Tim', u'NNP')]}, 'tokens': ['Tim']}], 'mode': 1}, {'question': {'string': ' What was Bob the clown doing when Billy and Sandy got to the fair, and what did they have to do before they could get something from the clown too?', 'parse': {'tree': '(ROOT (SBARQ (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NNP Bob) (DT the) (NN clown)) (VP (VBG doing) (SBAR (WHADVP (WRB when)) (S (NP (NNP Billy) (CC and) (NNP Sandy)) (VP (VBD got) (PP (TO to) (NP (DT the) (NN fair))))))))) (, ,) (CC and) (SBARQ (WHNP (WP what)) (SQ (VBD did) (NP (PRP they)) (VP (VB have) (S (VP (TO to) (VP (VB do) (SBAR (IN before) (S (NP (PRP they)) (VP (MD could) (VP (VB get) (NP (NN something)) (PP (IN from) (NP (DT the) (NN clown))) (ADVP (RB too))))))))))) (. ?))))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'Bob', u'Bob', u'NNP'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'doing', u'do', u'VBG'), (u'when', u'when', u'WRB'), (u'Billy', u'Billy', u'NNP'), (u'and', u'and', u'CC'), (u'Sandy', u'Sandy', u'NNP'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'fair', u'fair', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'what', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'they', u'they', u'PRP'), (u'have', u'have', u'VB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'before', u'before', u'IN'), (u'they', u'they', u'PRP'), (u'could', u'could', u'MD'), (u'get', u'get', u'VB'), (u'something', u'something', u'NN'), (u'from', u'from', u'IN'), (u'the', u'the', u'DT'), (u'clown', u'clown', u'NN'), (u'too', u'too', u'RB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'Bob', 'the', 'clown', 'doing', 'when', 'Billy', 'and', 'Sandy', 'got', 'to', 'the', 'fair', ',', 'and', 'what', 'did', 'they', 'have', 'to', 'do', 'before', 'they', 'could', 'get', 'something', 'from', 'the', 'clown', 'too', '?']}, 'answers': [{'string': ' Handing out cotton candy and candy apples, and pay to get in', 'parse': {'tree': '(ROOT (S (VP (VP (VB Handing) (PRT (RP out)) (NP (NN cotton) (NN candy) (CC and) (NN candy) (NNS apples))) (, ,) (CC and) (VP (VB pay) (S (VP (TO to) (VP (VB get) (PRT (RP in)))))))))', 'lemma': [(u'Handing', u'hand', u'VB'), (u'out', u'out', u'RP'), (u'cotton', u'cotton', u'NN'), (u'candy', u'candy', u'NN'), (u'and', u'and', u'CC'), (u'candy', u'candy', u'NN'), (u'apples', u'apple', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'pay', u'pay', u'VB'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'in', u'in', u'RP')]}, 'tokens': ['Handing', 'out', 'cotton', 'candy', 'and', 'candy', 'apples', ',', 'and', 'pay', 'to', 'get', 'in']}, {'string': ' Doing a clown dance, and and wait in line', 'parse': {'tree': '(ROOT (UCP (VP (VBG Doing) (NP (DT a) (NN clown) (NN dance))) (, ,) (CC and) (PP (CC and) (NP (NP (NN wait)) (PP (IN in) (NP (NN line)))))))', 'lemma': [(u'Doing', u'do', u'VBG'), (u'a', u'a', u'DT'), (u'clown', u'clown', u'NN'), (u'dance', u'dance', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'and', u'and', u'CC'), (u'wait', u'wait', u'NN'), (u'in', u'in', u'IN'), (u'line', u'line', u'NN')]}, 'tokens': ['Doing', 'a', 'clown', 'dance', ',', 'and', 'and', 'wait', 'in', 'line']}, {'string': ' Handing out cotton candy and candy apples, and go on a ride', 'parse': {'tree': '(ROOT (S (VP (VP (VB Handing) (PRT (RP out)) (NP (NN cotton) (NN candy) (CC and) (NN candy) (NNS apples))) (, ,) (CC and) (VP (VB go) (PP (IN on) (NP (DT a) (NN ride)))))))', 'lemma': [(u'Handing', u'hand', u'VB'), (u'out', u'out', u'RP'), (u'cotton', u'cotton', u'NN'), (u'candy', u'candy', u'NN'), (u'and', u'and', u'CC'), (u'candy', u'candy', u'NN'), (u'apples', u'apple', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'go', u'go', u'VB'), (u'on', u'on', u'IN'), (u'a', u'a', u'DT'), (u'ride', u'ride', u'NN')]}, 'tokens': ['Handing', 'out', 'cotton', 'candy', 'and', 'candy', 'apples', ',', 'and', 'go', 'on', 'a', 'ride']}, {'string': ' Handing out cotton candy and candy apples, and wait in line', 'parse': {'tree': '(ROOT (S (VP (VP (VB Handing) (PRT (RP out)) (NP (NN cotton) (NN candy) (CC and) (NN candy) (NNS apples))) (, ,) (CC and) (VP (VB wait) (PP (IN in) (NP (NN line)))))))', 'lemma': [(u'Handing', u'hand', u'VB'), (u'out', u'out', u'RP'), (u'cotton', u'cotton', u'NN'), (u'candy', u'candy', u'NN'), (u'and', u'and', u'CC'), (u'candy', u'candy', u'NN'), (u'apples', u'apple', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'wait', u'wait', u'VB'), (u'in', u'in', u'IN'), (u'line', u'line', u'NN')]}, 'tokens': ['Handing', 'out', 'cotton', 'candy', 'and', 'candy', 'apples', ',', 'and', 'wait', 'in', 'line']}], 'mode': 0}, {'question': {'string': ' What did Billy and Sandy have to do before they could go to the fair?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Billy) (CC and) (NNP Sandy)) (VP (VB have) (S (VP (TO to) (VP (VB do) (SBAR (IN before) (S (NP (PRP they)) (VP (MD could) (VP (VB go) (PP (TO to) (NP (DT the) (NN fair)))))))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Billy', u'Billy', u'NNP'), (u'and', u'and', u'CC'), (u'Sandy', u'Sandy', u'NNP'), (u'have', u'have', u'VB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'before', u'before', u'IN'), (u'they', u'they', u'PRP'), (u'could', u'could', u'MD'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'fair', u'fair', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Billy', 'and', 'Sandy', 'have', 'to', 'do', 'before', 'they', 'could', 'go', 'to', 'the', 'fair', '?']}, 'answers': [{'string': ' do chores and clean the kitchen', 'parse': {'tree': '(ROOT (S (VP (VP (VB do) (NP (NNS chores))) (CC and) (VP (VB clean) (NP (DT the) (NN kitchen))))))', 'lemma': [(u'do', u'do', u'VB'), (u'chores', u'chore', u'NNS'), (u'and', u'and', u'CC'), (u'clean', u'clean', u'VB'), (u'the', u'the', u'DT'), (u'kitchen', u'kitchen', u'NN')]}, 'tokens': ['do', 'chores', 'and', 'clean', 'the', 'kitchen']}, {'string': ' rake the lawn and clean their rooms', 'parse': {'tree': '(ROOT (S (VP (VP (VB rake) (NP (DT the) (NN lawn))) (CC and) (VP (VB clean) (NP (PRP$ their) (NNS rooms))))))', 'lemma': [(u'rake', u'rake', u'VB'), (u'the', u'the', u'DT'), (u'lawn', u'lawn', u'NN'), (u'and', u'and', u'CC'), (u'clean', u'clean', u'VB'), (u'their', u'they', u'PRP$'), (u'rooms', u'room', u'NNS')]}, 'tokens': ['rake', 'the', 'lawn', 'and', 'clean', 'their', 'rooms']}, {'string': ' do their chores and clean their rooms', 'parse': {'tree': '(ROOT (S (VP (VP (VB do) (NP (PRP$ their) (NNS chores))) (CC and) (VP (VB clean) (NP (PRP$ their) (NNS rooms))))))', 'lemma': [(u'do', u'do', u'VB'), (u'their', u'they', u'PRP$'), (u'chores', u'chore', u'NNS'), (u'and', u'and', u'CC'), (u'clean', u'clean', u'VB'), (u'their', u'they', u'PRP$'), (u'rooms', u'room', u'NNS')]}, 'tokens': ['do', 'their', 'chores', 'and', 'clean', 'their', 'rooms']}, {'string': ' sweep the sidewalk and wash the dishes', 'parse': {'tree': '(ROOT (NP (NP (NN sweep)) (NP (DT the) (NN sidewalk) (CC and) (NN wash)) (NP (DT the) (NNS dishes))))', 'lemma': [(u'sweep', u'sweep', u'NN'), (u'the', u'the', u'DT'), (u'sidewalk', u'sidewalk', u'NN'), (u'and', u'and', u'CC'), (u'wash', u'wash', u'NN'), (u'the', u'the', u'DT'), (u'dishes', u'dish', u'NNS')]}, 'tokens': ['sweep', 'the', 'sidewalk', 'and', 'wash', 'the', 'dishes']}], 'mode': 1}]}
{'sentences': [{'string': ' Bob is a young child who eats potatoes.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (VP (VBZ is) (NP (NP (DT a) (JJ young) (NN child)) (SBAR (WHNP (WP who)) (S (VP (VBZ eats) (NP (NNS potatoes))))))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'young', u'young', u'JJ'), (u'child', u'child', u'NN'), (u'who', u'who', u'WP'), (u'eats', u'eat', u'VBZ'), (u'potatoes', u'potato', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'is', 'a', 'young', 'child', 'who', 'eats', 'potatoes', '.']}, {'string': ' He normally wakes up around 7 in the morning.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB normally)) (VP (VBZ wakes) (PRT (RP up)) (NP (NP (QP (RB around) (CD 7))) (PP (IN in) (NP (DT the) (NN morning))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'normally', u'normally', u'RB'), (u'wakes', u'wake', u'VBZ'), (u'up', u'up', u'RP'), (u'around', u'around', u'RB'), (u'7', u'7', u'CD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'morning', u'morning', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'normally', 'wakes', 'up', 'around', '7', 'in', 'the', 'morning', '.']}, {'string': ' He has a dog named Gob.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (NP (NP (DT a) (NN dog)) (VP (VBN named) (NP (NNP Gob))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'named', u'name', u'VBN'), (u'Gob', u'Gob', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'a', 'dog', 'named', 'Gob', '.']}, {'string': ' Gob is a very smart dog.', 'parse': {'tree': '(ROOT (S (NP (NNP Gob)) (VP (VBZ is) (NP (DT a) (ADJP (RB very) (JJ smart)) (NN dog))) (. .)))', 'lemma': [(u'Gob', u'Gob', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'smart', u'smart', u'JJ'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Gob', 'is', 'a', 'very', 'smart', 'dog', '.']}, {'string': ' Bob also owns a farm.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (ADVP (RB also)) (VP (VBZ owns) (NP (DT a) (NN farm))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'also', u'also', u'RB'), (u'owns', u'own', u'VBZ'), (u'a', u'a', u'DT'), (u'farm', u'farm', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'also', 'owns', 'a', 'farm', '.']}, {'string': ' He grows potatoes on it.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ grows) (NP (NP (NNS potatoes)) (PP (IN on) (NP (PRP it))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'grows', u'grow', u'VBZ'), (u'potatoes', u'potato', u'NNS'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'grows', 'potatoes', 'on', 'it', '.']}, {'string': ' One day he went out with his dog to go check on the farm.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (NP (PRP he)) (VP (VBD went) (PRT (RP out)) (PP (IN with) (NP (PRP$ his) (NN dog) (S (VP (TO to) (VP (VB go) (NP (NN check)) (PP (IN on) (NP (DT the) (NN farm))))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u'he', u'he', u'PRP'), (u'went', u'go', u'VBD'), (u'out', u'out', u'RP'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'dog', u'dog', u'NN'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'check', u'check', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'farm', u'farm', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', 'he', 'went', 'out', 'with', 'his', 'dog', 'to', 'go', 'check', 'on', 'the', 'farm', '.']}, {'string': ' There they found a wild duck, a cat, and a pumpkin.', 'parse': {'tree': '(ROOT (S (ADVP (RB There)) (NP (PRP they)) (VP (VBD found) (NP (NP (DT a) (JJ wild) (NN duck)) (, ,) (NP (DT a) (NN cat)) (, ,) (CC and) (NP (DT a) (NN pumpkin)))) (. .)))', 'lemma': [(u'There', u'there', u'RB'), (u'they', u'they', u'PRP'), (u'found', u'find', u'VBD'), (u'a', u'a', u'DT'), (u'wild', u'wild', u'JJ'), (u'duck', u'duck', u'NN'), (u',', u',', u','), (u'a', u'a', u'DT'), (u'cat', u'cat', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'pumpkin', u'pumpkin', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'they', 'found', 'a', 'wild', 'duck', ',', 'a', 'cat', ',', 'and', 'a', 'pumpkin', '.']}, {'string': ' Gob started to chase the duck.', 'parse': {'tree': '(ROOT (S (NP (NNP Gob)) (VP (VBD started) (S (VP (TO to) (VP (VB chase) (NP (DT the) (NN duck)))))) (. .)))', 'lemma': [(u'Gob', u'Gob', u'NNP'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'chase', u'chase', u'VB'), (u'the', u'the', u'DT'), (u'duck', u'duck', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Gob', 'started', 'to', 'chase', 'the', 'duck', '.']}, {'string': ' The duck flew away.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN duck)) (VP (VBD flew) (PRT (RP away))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'duck', u'duck', u'NN'), (u'flew', u'fly', u'VBD'), (u'away', u'away', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'duck', 'flew', 'away', '.']}, {'string': ' Gob started to get hungry.', 'parse': {'tree': '(ROOT (S (NP (NNP Gob)) (VP (VBD started) (S (VP (TO to) (VP (VB get) (ADJP (JJ hungry)))))) (. .)))', 'lemma': [(u'Gob', u'Gob', u'NNP'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'hungry', u'hungry', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Gob', 'started', 'to', 'get', 'hungry', '.']}, {'string': ' Gob then ate the pumpkin.', 'parse': {'tree': '(ROOT (S (NP (NNP Gob)) (ADVP (RB then)) (VP (VBD ate) (NP (DT the) (NN pumpkin))) (. .)))', 'lemma': [(u'Gob', u'Gob', u'NNP'), (u'then', u'then', u'RB'), (u'ate', u'eat', u'VBD'), (u'the', u'the', u'DT'), (u'pumpkin', u'pumpkin', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Gob', 'then', 'ate', 'the', 'pumpkin', '.']}, {'string': ' Bob got mad at Gob for eating the pumpkin.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (VP (VBD got) (ADJP (JJ mad) (PP (IN at) (NP (NNP Gob)))) (PP (IN for) (S (VP (VBG eating) (NP (DT the) (NN pumpkin)))))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'got', u'get', u'VBD'), (u'mad', u'mad', u'JJ'), (u'at', u'at', u'IN'), (u'Gob', u'Gob', u'NNP'), (u'for', u'for', u'IN'), (u'eating', u'eat', u'VBG'), (u'the', u'the', u'DT'), (u'pumpkin', u'pumpkin', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'got', 'mad', 'at', 'Gob', 'for', 'eating', 'the', 'pumpkin', '.']}, {'string': ' Bob then threw Gob into the house.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (ADVP (RB then)) (VP (VBD threw) (NP (NNP Gob)) (PP (IN into) (NP (DT the) (NN house)))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'then', u'then', u'RB'), (u'threw', u'throw', u'VBD'), (u'Gob', u'Gob', u'NNP'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'then', 'threw', 'Gob', 'into', 'the', 'house', '.']}, {'string': ' Bob then grabbed a bucket.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (ADVP (RB then)) (VP (VBD grabbed) (NP (DT a) (NN bucket))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'then', u'then', u'RB'), (u'grabbed', u'grab', u'VBD'), (u'a', u'a', u'DT'), (u'bucket', u'bucket', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'then', 'grabbed', 'a', 'bucket', '.']}, {'string': ' He started to collect as many potatoes as he could find.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD started) (S (VP (TO to) (VP (VB collect) (PP (IN as) (NP (JJ many) (NNS potatoes))) (SBAR (IN as) (S (NP (PRP he)) (VP (MD could) (VP (VB find))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'collect', u'collect', u'VB'), (u'as', u'as', u'IN'), (u'many', u'many', u'JJ'), (u'potatoes', u'potato', u'NNS'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'find', u'find', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'started', 'to', 'collect', 'as', 'many', 'potatoes', 'as', 'he', 'could', 'find', '.']}, {'string': ' Bob loved potatoes.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (VP (VBD loved) (NP (NNS potatoes))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'loved', u'love', u'VBD'), (u'potatoes', u'potato', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'loved', 'potatoes', '.']}, {'string': ' He collected around 600 potatoes!', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD collected) (NP (QP (RB around) (CD 600)) (NNS potatoes))) (. !)))', 'lemma': [(u'He', u'he', u'PRP'), (u'collected', u'collect', u'VBD'), (u'around', u'around', u'RB'), (u'600', u'600', u'CD'), (u'potatoes', u'potato', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['He', 'collected', 'around', '600', 'potatoes', '!']}, {'string': ' Bob started to run out of room for all the potatoes he found.', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (VP (VBD started) (S (VP (TO to) (VP (VB run) (PRT (RP out)) (PP (IN of) (NP (NP (NN room)) (PP (IN for) (NP (NP (PDT all) (DT the) (NNS potatoes)) (SBAR (S (NP (PRP he)) (VP (VBD found)))))))))))) (. .)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'run', u'run', u'VB'), (u'out', u'out', u'RP'), (u'of', u'of', u'IN'), (u'room', u'room', u'NN'), (u'for', u'for', u'IN'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'potatoes', u'potato', u'NNS'), (u'he', u'he', u'PRP'), (u'found', u'find', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Bob', 'started', 'to', 'run', 'out', 'of', 'room', 'for', 'all', 'the', 'potatoes', 'he', 'found', '.']}, {'string': ' He then started to eat as many as he could.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB then)) (VP (VBD started) (S (VP (TO to) (VP (VB eat) (ADJP (RB as) (JJ many)) (SBAR (IN as) (S (NP (PRP he)) (VP (MD could)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'then', u'then', u'RB'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'as', u'as', u'RB'), (u'many', u'many', u'JJ'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'then', 'started', 'to', 'eat', 'as', 'many', 'as', 'he', 'could', '.']}, {'string': ' In 1 hour he ate 100 potatoes!', 'parse': {'tree': '(ROOT (S (PP (IN In) (NP (CD 1) (NN hour))) (NP (PRP he)) (VP (VBD ate) (NP (CD 100) (NNS potatoes))) (. !)))', 'lemma': [(u'In', u'in', u'IN'), (u'1', u'1', u'CD'), (u'hour', u'hour', u'NN'), (u'he', u'he', u'PRP'), (u'ate', u'eat', u'VBD'), (u'100', u'100', u'CD'), (u'potatoes', u'potato', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['In', '1', 'hour', 'he', 'ate', '100', 'potatoes', '!']}, {'string': ' He got so full he took a nap.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD got) (ADJP (RB so) (JJ full)) (SBAR (S (NP (PRP he)) (VP (VBD took) (NP (DT a) (NN nap)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'so', u'so', u'RB'), (u'full', u'full', u'JJ'), (u'he', u'he', u'PRP'), (u'took', u'take', u'VBD'), (u'a', u'a', u'DT'), (u'nap', u'nap', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'got', 'so', 'full', 'he', 'took', 'a', 'nap', '.']}, {'string': ' When he awoke he found the cat eating all the potatoes!', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP he)) (VP (VBD awoke)))) (NP (PRP he)) (VP (VBD found) (NP (DT the) (NN cat)) (S (VP (VBG eating) (NP (PDT all) (DT the) (NNS potatoes))))) (. !)))', 'lemma': [(u'When', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'awoke', u'awake', u'VBD'), (u'he', u'he', u'PRP'), (u'found', u'find', u'VBD'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'eating', u'eat', u'VBG'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'potatoes', u'potato', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['When', 'he', 'awoke', 'he', 'found', 'the', 'cat', 'eating', 'all', 'the', 'potatoes', '!']}, {'string': ' The cat ate 200 potatoes before Bob awoke.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN cat)) (VP (VBD ate) (NP (CD 200) (NNS potatoes)) (SBAR (IN before) (S (NP (NNP Bob)) (VP (VBD awoke))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'ate', u'eat', u'VBD'), (u'200', u'200', u'CD'), (u'potatoes', u'potato', u'NNS'), (u'before', u'before', u'IN'), (u'Bob', u'Bob', u'NNP'), (u'awoke', u'awake', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'cat', 'ate', '200', 'potatoes', 'before', 'Bob', 'awoke', '.']}, {'string': ' However, Bob was too full and fat to move.', 'parse': {'tree': '(ROOT (S (ADVP (RB However)) (, ,) (NP (NNP Bob)) (VP (VBD was) (ADJP (RB too) (JJ full) (CC and) (JJ fat) (S (VP (TO to) (VP (VB move)))))) (. .)))', 'lemma': [(u'However', u'however', u'RB'), (u',', u',', u','), (u'Bob', u'Bob', u'NNP'), (u'was', u'be', u'VBD'), (u'too', u'too', u'RB'), (u'full', u'full', u'JJ'), (u'and', u'and', u'CC'), (u'fat', u'fat', u'JJ'), (u'to', u'to', u'TO'), (u'move', u'move', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['However', ',', 'Bob', 'was', 'too', 'full', 'and', 'fat', 'to', 'move', '.']}, {'string': ' The cat laughed and wanted to eat the potatoes again.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN cat)) (VP (VP (VBD laughed)) (CC and) (VP (VBD wanted) (S (VP (TO to) (VP (VB eat) (NP (DT the) (NNS potatoes)) (ADVP (RB again))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'laughed', u'laugh', u'VBD'), (u'and', u'and', u'CC'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'the', u'the', u'DT'), (u'potatoes', u'potato', u'NNS'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'cat', 'laughed', 'and', 'wanted', 'to', 'eat', 'the', 'potatoes', 'again', '.']}, {'string': ' Just then, Gob comes running out to chase the cat away!', 'parse': {'tree': '(ROOT (S (ADVP (RB Just)) (ADVP (RB then)) (, ,) (NP (NNP Gob)) (VP (VBZ comes) (S (VP (VBG running) (PRT (RP out)) (S (VP (TO to) (VP (VB chase) (NP (DT the) (NN cat)) (ADVP (RB away)))))))) (. !)))', 'lemma': [(u'Just', u'just', u'RB'), (u'then', u'then', u'RB'), (u',', u',', u','), (u'Gob', u'Gob', u'NNP'), (u'comes', u'come', u'VBZ'), (u'running', u'run', u'VBG'), (u'out', u'out', u'RP'), (u'to', u'to', u'TO'), (u'chase', u'chase', u'VB'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'away', u'away', u'RB'), (u'!', u'!', u'.')]}, 'tokens': ['Just', 'then', ',', 'Gob', 'comes', 'running', 'out', 'to', 'chase', 'the', 'cat', 'away', '!']}, {'string': ' The cat was too fat to run away.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN cat)) (VP (VBD was) (ADJP (RB too) (JJ fat) (S (VP (TO to) (VP (VB run) (PRT (RP away))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'was', u'be', u'VBD'), (u'too', u'too', u'RB'), (u'fat', u'fat', u'JJ'), (u'to', u'to', u'TO'), (u'run', u'run', u'VB'), (u'away', u'away', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'cat', 'was', 'too', 'fat', 'to', 'run', 'away', '.']}, {'string': ' It had eaten too many potatoes!', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD had) (VP (VBN eaten) (NP (ADJP (RB too) (JJ many)) (NNS potatoes)))) (. !)))', 'lemma': [(u'It', u'it', u'PRP'), (u'had', u'have', u'VBD'), (u'eaten', u'eat', u'VBN'), (u'too', u'too', u'RB'), (u'many', u'many', u'JJ'), (u'potatoes', u'potato', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['It', 'had', 'eaten', 'too', 'many', 'potatoes', '!']}, {'string': ' Gob grabbed the cat with his teeth and tossed the cat down a well.', 'parse': {'tree': '(ROOT (S (NP (NNP Gob)) (VP (VP (VBD grabbed) (NP (DT the) (NN cat)) (PP (IN with) (NP (PRP$ his) (NNS teeth)))) (CC and) (VP (VBD tossed) (NP (DT the) (NN cat)) (ADVP (RB down) (NP (DT a) (NN well))))) (. .)))', 'lemma': [(u'Gob', u'Gob', u'NNP'), (u'grabbed', u'grab', u'VBD'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'teeth', u'tooth', u'NNS'), (u'and', u'and', u'CC'), (u'tossed', u'toss', u'VBD'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'down', u'down', u'RB'), (u'a', u'a', u'DT'), (u'well', u'well', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Gob', 'grabbed', 'the', 'cat', 'with', 'his', 'teeth', 'and', 'tossed', 'the', 'cat', 'down', 'a', 'well', '.']}, {'string': ' Gob became a hero for saving the potatoes!', 'parse': {'tree': '(ROOT (S (NP (NNP Gob)) (VP (VBD became) (NP (DT a) (NN hero)) (PP (IN for) (S (VP (VBG saving) (NP (DT the) (NNS potatoes)))))) (. !)))', 'lemma': [(u'Gob', u'Gob', u'NNP'), (u'became', u'become', u'VBD'), (u'a', u'a', u'DT'), (u'hero', u'hero', u'NN'), (u'for', u'for', u'IN'), (u'saving', u'save', u'VBG'), (u'the', u'the', u'DT'), (u'potatoes', u'potato', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['Gob', 'became', 'a', 'hero', 'for', 'saving', 'the', 'potatoes', '!']}, {'string': ' Bob now lets Gob eat whatever he wants, including pumpkins!', 'parse': {'tree': '(ROOT (S (NP (NNP Bob)) (ADVP (RB now)) (VP (VBZ lets) (SBAR (S (NP (NNP Gob)) (VP (VBP eat) (SBAR (WHNP (WDT whatever)) (S (NP (PRP he)) (VP (VBZ wants) (, ,) (PP (VBG including) (NP (NNS pumpkins)))))))))) (. !)))', 'lemma': [(u'Bob', u'Bob', u'NNP'), (u'now', u'now', u'RB'), (u'lets', u'let', u'VBZ'), (u'Gob', u'Gob', u'NNP'), (u'eat', u'eat', u'VBP'), (u'whatever', u'whatever', u'WDT'), (u'he', u'he', u'PRP'), (u'wants', u'want', u'VBZ'), (u',', u',', u','), (u'including', u'include', u'VBG'), (u'pumpkins', u'pumpkin', u'NNS'), (u'!', u'!', u'.')]}, 'tokens': ['Bob', 'now', 'lets', 'Gob', 'eat', 'whatever', 'he', 'wants', ',', 'including', 'pumpkins', '!']}, {'string': ' Gob is a very happy dog now!', 'parse': {'tree': '(ROOT (S (NP (NNP Gob)) (VP (VBZ is) (NP (DT a) (ADJP (RB very) (JJ happy)) (NN dog)) (ADVP (RB now))) (. !)))', 'lemma': [(u'Gob', u'Gob', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'happy', u'happy', u'JJ'), (u'dog', u'dog', u'NN'), (u'now', u'now', u'RB'), (u'!', u'!', u'.')]}, 'tokens': ['Gob', 'is', 'a', 'very', 'happy', 'dog', 'now', '!']}], 'questions': [{'question': {'string': ' How many potatoes did Bob find that were not eaten?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS potatoes)) (SQ (VBD did) (NP (NNP Bob)) (VP (VB find) (SBAR (IN that) (S (VP (VBD were) (RB not) (VP (VBN eaten))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'many', u'many', u'JJ'), (u'potatoes', u'potato', u'NNS'), (u'did', u'do', u'VBD'), (u'Bob', u'Bob', u'NNP'), (u'find', u'find', u'VB'), (u'that', u'that', u'IN'), (u'were', u'be', u'VBD'), (u'not', u'not', u'RB'), (u'eaten', u'eat', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'many', 'potatoes', 'did', 'Bob', 'find', 'that', 'were', 'not', 'eaten', '?']}, 'answers': [{'string': ' 400', 'parse': {'tree': '(ROOT (FRAG (NP (CD 400))))', 'lemma': [(u'400', u'400', u'CD')]}, 'tokens': ['400']}, {'string': ' 200', 'parse': {'tree': '(ROOT (FRAG (NP (CD 200))))', 'lemma': [(u'200', u'200', u'CD')]}, 'tokens': ['200']}, {'string': ' 300', 'parse': {'tree': '(ROOT (FRAG (NP (CD 300))))', 'lemma': [(u'300', u'300', u'CD')]}, 'tokens': ['300']}, {'string': ' 600', 'parse': {'tree': '(ROOT (FRAG (NP (CD 600))))', 'lemma': [(u'600', u'600', u'CD')]}, 'tokens': ['600']}], 'mode': 0}, {'question': {'string': ' Why could the cat not run away?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (MD could) (NP (DT the) (NN cat)) (VP (RB not) (VB run) (PRT (RP away)))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'could', u'could', u'MD'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'not', u'not', u'RB'), (u'run', u'run', u'VB'), (u'away', u'away', u'RP'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'could', 'the', 'cat', 'not', 'run', 'away', '?']}, 'answers': [{'string': ' It ate the pumpkin.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD ate) (NP (DT the) (NN pumpkin))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'ate', u'eat', u'VBD'), (u'the', u'the', u'DT'), (u'pumpkin', u'pumpkin', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'ate', 'the', 'pumpkin', '.']}, {'string': ' It was stuck in a well.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (VP (VBN stuck) (PP (IN in) (NP (DT a) (NN well))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'stuck', u'stick', u'VBN'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'well', u'well', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'stuck', 'in', 'a', 'well', '.']}, {'string': ' it ate too many potatoes.', 'parse': {'tree': '(ROOT (S (NP (PRP it)) (VP (VBD ate) (NP (ADJP (RB too) (JJ many)) (NNS potatoes))) (. .)))', 'lemma': [(u'it', u'it', u'PRP'), (u'ate', u'eat', u'VBD'), (u'too', u'too', u'RB'), (u'many', u'many', u'JJ'), (u'potatoes', u'potato', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['it', 'ate', 'too', 'many', 'potatoes', '.']}, {'string': ' It was lazy.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (ADJP (JJ lazy))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'lazy', u'lazy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'lazy', '.']}], 'mode': 0}, {'question': {'string': ' What is the name of the dog?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (DT the) (NN dog))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'name', u'name', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'the', 'name', 'of', 'the', 'dog', '?']}, 'answers': [{'string': ' Cat', 'parse': {'tree': '(ROOT (NP (NNP Cat)))', 'lemma': [(u'Cat', u'Cat', u'NNP')]}, 'tokens': ['Cat']}, {'string': ' Pumpkin', 'parse': {'tree': '(ROOT (NP (NNP Pumpkin)))', 'lemma': [(u'Pumpkin', u'Pumpkin', u'NNP')]}, 'tokens': ['Pumpkin']}, {'string': ' Bob', 'parse': {'tree': '(ROOT (NP (NNP Bob)))', 'lemma': [(u'Bob', u'Bob', u'NNP')]}, 'tokens': ['Bob']}, {'string': ' Gob', 'parse': {'tree': '(ROOT (NP (NNP Gob)))', 'lemma': [(u'Gob', u'Gob', u'NNP')]}, 'tokens': ['Gob']}], 'mode': 1}, {'question': {'string': ' Why did Bob throw Gob into the house?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NNP Bob)) (VP (VB throw) (NP (NNP Gob)) (PP (IN into) (NP (DT the) (NN house))))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'Bob', u'Bob', u'NNP'), (u'throw', u'throw', u'VB'), (u'Gob', u'Gob', u'NNP'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'Bob', 'throw', 'Gob', 'into', 'the', 'house', '?']}, 'answers': [{'string': ' He chased the duck.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD chased) (NP (DT the) (NN duck))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'chased', u'chase', u'VBD'), (u'the', u'the', u'DT'), (u'duck', u'duck', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'chased', 'the', 'duck', '.']}, {'string': ' Gob ate a pumpkin.', 'parse': {'tree': '(ROOT (S (NP (NNP Gob)) (VP (VBD ate) (NP (DT a) (NN pumpkin))) (. .)))', 'lemma': [(u'Gob', u'Gob', u'NNP'), (u'ate', u'eat', u'VBD'), (u'a', u'a', u'DT'), (u'pumpkin', u'pumpkin', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Gob', 'ate', 'a', 'pumpkin', '.']}, {'string': ' He ate a potato.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD ate) (NP (DT a) (NN potato))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'ate', u'eat', u'VBD'), (u'a', u'a', u'DT'), (u'potato', u'potato', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'ate', 'a', 'potato', '.']}, {'string': ' He got hungry.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD got) (ADJP (JJ hungry))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'hungry', u'hungry', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'got', 'hungry', '.']}], 'mode': 0}]}
{'sentences': [{'string': ' On a snowy winter morning, the brown-haired lady saw a squirrel that was hurt.', 'parse': {'tree': '(ROOT (S (PP (IN On) (NP (DT a) (JJ snowy) (NN winter))) (NP (NN morning)) (, ,) (NP (DT the) (JJ brown-haired) (NN lady)) (VP (VBD saw) (NP (NP (DT a) (NN squirrel)) (SBAR (WHNP (WDT that)) (S (VP (VBD was) (VP (VBN hurt))))))) (. .)))', 'lemma': [(u'On', u'on', u'IN'), (u'a', u'a', u'DT'), (u'snowy', u'snowy', u'JJ'), (u'winter', u'winter', u'NN'), (u'morning', u'morning', u'NN'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'brown-haired', u'brown-haired', u'JJ'), (u'lady', u'lady', u'NN'), (u'saw', u'see', u'VBD'), (u'a', u'a', u'DT'), (u'squirrel', u'squirrel', u'NN'), (u'that', u'that', u'WDT'), (u'was', u'be', u'VBD'), (u'hurt', u'hurt', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'a', 'snowy', 'winter', 'morning', ',', 'the', 'brown-haired', 'lady', 'saw', 'a', 'squirrel', 'that', 'was', 'hurt', '.']}, {'string': ' It only had three legs, and it looked hungry.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (ADVP (RB only)) (VP (VBD had) (NP (CD three) (NNS legs)))) (, ,) (CC and) (S (NP (PRP it)) (VP (VBD looked) (ADJP (JJ hungry)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'only', u'only', u'RB'), (u'had', u'have', u'VBD'), (u'three', u'three', u'CD'), (u'legs', u'leg', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'it', u'it', u'PRP'), (u'looked', u'look', u'VBD'), (u'hungry', u'hungry', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'only', 'had', 'three', 'legs', ',', 'and', 'it', 'looked', 'hungry', '.']}, {'string': ' She put some corn out for the squirrel to eat, but other bully squirrels came, too.', 'parse': {'tree': '(ROOT (S (S (NP (PRP She)) (VP (VBD put) (NP (DT some) (NN corn)) (PRT (RP out)) (PP (IN for) (NP (DT the) (NN squirrel))) (S (VP (TO to) (VP (VB eat)))))) (, ,) (CC but) (S (NP (JJ other) (NN bully) (NNS squirrels)) (VP (VBD came) (, ,) (ADVP (RB too)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'put', u'put', u'VBD'), (u'some', u'some', u'DT'), (u'corn', u'corn', u'NN'), (u'out', u'out', u'RP'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'squirrel', u'squirrel', u'NN'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'other', u'other', u'JJ'), (u'bully', u'bully', u'NN'), (u'squirrels', u'squirrel', u'NNS'), (u'came', u'come', u'VBD'), (u',', u',', u','), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'put', 'some', 'corn', 'out', 'for', 'the', 'squirrel', 'to', 'eat', ',', 'but', 'other', 'bully', 'squirrels', 'came', ',', 'too', '.']}, {'string': ' The brown-haired lady started giving the little squirrel peanuts to eat.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ brown-haired) (NN lady)) (VP (VBD started) (S (VP (VBG giving) (NP (DT the) (JJ little) (NN squirrel)) (NP (NNS peanuts) (S (VP (TO to) (VP (VB eat)))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'brown-haired', u'brown-haired', u'JJ'), (u'lady', u'lady', u'NN'), (u'started', u'start', u'VBD'), (u'giving', u'give', u'VBG'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'squirrel', u'squirrel', u'NN'), (u'peanuts', u'peanut', u'NNS'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'brown-haired', 'lady', 'started', 'giving', 'the', 'little', 'squirrel', 'peanuts', 'to', 'eat', '.']}, {'string': ' She gave some to the bully squirrels, too, so they would leave the three-legged squirrel alone.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD gave) (NP (DT some)) (PP (TO to) (NP (DT the) (NN bully) (NNS squirrels))) (, ,) (ADVP (RB too)) (, ,) (SBAR (IN so) (S (NP (PRP they)) (VP (MD would) (VP (VB leave) (NP (DT the) (JJ three-legged) (NN squirrel)) (ADVP (RB alone))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'gave', u'give', u'VBD'), (u'some', u'some', u'DT'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'bully', u'bully', u'NN'), (u'squirrels', u'squirrel', u'NNS'), (u',', u',', u','), (u'too', u'too', u'RB'), (u',', u',', u','), (u'so', u'so', u'IN'), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'leave', u'leave', u'VB'), (u'the', u'the', u'DT'), (u'three-legged', u'three-legged', u'JJ'), (u'squirrel', u'squirrel', u'NN'), (u'alone', u'alone', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'gave', 'some', 'to', 'the', 'bully', 'squirrels', ',', 'too', ',', 'so', 'they', 'would', 'leave', 'the', 'three-legged', 'squirrel', 'alone', '.']}, {'string': ' The winter snow melted and then it was spring.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NN winter) (NN snow)) (VP (VBD melted))) (CC and) (RB then) (S (NP (PRP it)) (VP (VBD was) (NP (NN spring)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'winter', u'winter', u'NN'), (u'snow', u'snow', u'NN'), (u'melted', u'melt', u'VBD'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'spring', u'spring', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'winter', 'snow', 'melted', 'and', 'then', 'it', 'was', 'spring', '.']}, {'string': ' The grass turned green and the air was warm.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NN grass)) (VP (VBD turned) (ADJP (JJ green)))) (CC and) (S (NP (DT the) (NN air)) (VP (VBD was) (ADJP (JJ warm)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'grass', u'grass', u'NN'), (u'turned', u'turn', u'VBD'), (u'green', u'green', u'JJ'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'air', u'air', u'NN'), (u'was', u'be', u'VBD'), (u'warm', u'warm', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'grass', 'turned', 'green', 'and', 'the', 'air', 'was', 'warm', '.']}, {'string': ' Now, when the little squirrel with three legs would come to see the brown-haired lady with the peanuts, it would take the peanuts and dig a little hole and hide the peanuts for later.', 'parse': {'tree': '(ROOT (S (ADVP (RB Now)) (, ,) (SBAR (WHADVP (WRB when)) (S (NP (NP (DT the) (JJ little) (NN squirrel)) (PP (IN with) (NP (CD three) (NNS legs)))) (VP (MD would) (VP (VB come) (S (VP (TO to) (VP (VB see) (NP (DT the) (JJ brown-haired) (NN lady)) (PP (IN with) (NP (DT the) (NNS peanuts)))))))))) (, ,) (NP (PRP it)) (VP (MD would) (VP (VP (VB take) (NP (DT the) (NNS peanuts))) (CC and) (VP (VP (VB dig) (NP (DT a) (JJ little) (NN hole))) (CC and) (VP (VB hide) (NP (DT the) (NNS peanuts)) (PP (IN for) (ADVP (RB later))))))) (. .)))', 'lemma': [(u'Now', u'now', u'RB'), (u',', u',', u','), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'squirrel', u'squirrel', u'NN'), (u'with', u'with', u'IN'), (u'three', u'three', u'CD'), (u'legs', u'leg', u'NNS'), (u'would', u'would', u'MD'), (u'come', u'come', u'VB'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'the', u'the', u'DT'), (u'brown-haired', u'brown-haired', u'JJ'), (u'lady', u'lady', u'NN'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u',', u',', u','), (u'it', u'it', u'PRP'), (u'would', u'would', u'MD'), (u'take', u'take', u'VB'), (u'the', u'the', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u'and', u'and', u'CC'), (u'dig', u'dig', u'VB'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'hole', u'hole', u'NN'), (u'and', u'and', u'CC'), (u'hide', u'hide', u'VB'), (u'the', u'the', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u'for', u'for', u'IN'), (u'later', u'later', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Now', ',', 'when', 'the', 'little', 'squirrel', 'with', 'three', 'legs', 'would', 'come', 'to', 'see', 'the', 'brown-haired', 'lady', 'with', 'the', 'peanuts', ',', 'it', 'would', 'take', 'the', 'peanuts', 'and', 'dig', 'a', 'little', 'hole', 'and', 'hide', 'the', 'peanuts', 'for', 'later', '.']}, {'string': ' The squirrel would hold the peanut in its mouth and dig and dig and dig, and then it would put the peanut in the hole and pat it down with its little front paw.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NN squirrel)) (VP (MD would) (VP (VP (VB hold) (NP (NP (DT the) (NN peanut)) (PP (IN in) (NP (PRP$ its) (NN mouth) (CC and) (NN dig))))) (CC and) (VP (VB dig) (CC and) (VB dig))))) (, ,) (CC and) (S (ADVP (RB then)) (NP (PRP it)) (VP (MD would) (VP (VP (VB put) (NP (NP (DT the) (NN peanut)) (PP (IN in) (NP (DT the) (NN hole))))) (CC and) (VP (VB pat) (NP (PRP it)) (PRT (RP down)) (PP (IN with) (NP (PRP$ its) (JJ little) (NN front) (NN paw))))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'squirrel', u'squirrel', u'NN'), (u'would', u'would', u'MD'), (u'hold', u'hold', u'VB'), (u'the', u'the', u'DT'), (u'peanut', u'peanut', u'NN'), (u'in', u'in', u'IN'), (u'its', u'its', u'PRP$'), (u'mouth', u'mouth', u'NN'), (u'and', u'and', u'CC'), (u'dig', u'dig', u'NN'), (u'and', u'and', u'CC'), (u'dig', u'dig', u'VB'), (u'and', u'and', u'CC'), (u'dig', u'dig', u'VB'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'it', u'it', u'PRP'), (u'would', u'would', u'MD'), (u'put', u'put', u'VB'), (u'the', u'the', u'DT'), (u'peanut', u'peanut', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'hole', u'hole', u'NN'), (u'and', u'and', u'CC'), (u'pat', u'pat', u'VB'), (u'it', u'it', u'PRP'), (u'down', u'down', u'RP'), (u'with', u'with', u'IN'), (u'its', u'its', u'PRP$'), (u'little', u'little', u'JJ'), (u'front', u'front', u'NN'), (u'paw', u'paw', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'squirrel', 'would', 'hold', 'the', 'peanut', 'in', 'its', 'mouth', 'and', 'dig', 'and', 'dig', 'and', 'dig', ',', 'and', 'then', 'it', 'would', 'put', 'the', 'peanut', 'in', 'the', 'hole', 'and', 'pat', 'it', 'down', 'with', 'its', 'little', 'front', 'paw', '.']}, {'string': ' Then it would run back over to the brown-haired lady and get some more peanuts to eat.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP it)) (VP (MD would) (VP (VP (VB run) (PRT (RP back)) (PRT (RP over)) (PP (TO to) (NP (DT the) (JJ brown-haired) (NN lady)))) (CC and) (VP (VB get) (S (NP (DT some) (JJR more) (NNS peanuts)) (VP (TO to) (VP (VB eat))))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'it', u'it', u'PRP'), (u'would', u'would', u'MD'), (u'run', u'run', u'VB'), (u'back', u'back', u'RP'), (u'over', u'over', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'brown-haired', u'brown-haired', u'JJ'), (u'lady', u'lady', u'NN'), (u'and', u'and', u'CC'), (u'get', u'get', u'VB'), (u'some', u'some', u'DT'), (u'more', u'more', u'JJR'), (u'peanuts', u'peanut', u'NNS'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'it', 'would', 'run', 'back', 'over', 'to', 'the', 'brown-haired', 'lady', 'and', 'get', 'some', 'more', 'peanuts', 'to', 'eat', '.']}], 'questions': [{'question': {'string': ' What color hair did the lady have?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color) (NN hair)) (SQ (VBD did) (NP (DT the) (NN lady)) (VP (VB have))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'hair', u'hair', u'NN'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'lady', u'lady', u'NN'), (u'have', u'have', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'hair', 'did', 'the', 'lady', 'have', '?']}, 'answers': [{'string': ' red', 'parse': {'tree': '(ROOT (NP (NN red)))', 'lemma': [(u'red', u'red', u'NN')]}, 'tokens': ['red']}, {'string': ' gray', 'parse': {'tree': '(ROOT (ADJP (JJ gray)))', 'lemma': [(u'gray', u'gray', u'JJ')]}, 'tokens': ['gray']}, {'string': ' brown', 'parse': {'tree': '(ROOT (INTJ (UH brown)))', 'lemma': [(u'brown', u'brown', u'UH')]}, 'tokens': ['brown']}, {'string': ' blonde', 'parse': {'tree': '(ROOT (INTJ (UH blonde)))', 'lemma': [(u'blonde', u'blonde', u'UH')]}, 'tokens': ['blonde']}], 'mode': 1}, {'question': {'string': ' What was wrong with the squirrel?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD was) (ADJP (JJ wrong)) (PP (IN with) (NP (DT the) (NN squirrel))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'wrong', u'wrong', u'JJ'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'squirrel', u'squirrel', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'wrong', 'with', 'the', 'squirrel', '?']}, 'answers': [{'string': ' It ran into the street.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD ran) (PP (IN into) (NP (DT the) (NN street)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'ran', u'run', u'VBD'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'street', u'street', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'ran', 'into', 'the', 'street', '.']}, {'string': ' It was stuck in a tree.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (VP (VBN stuck) (PP (IN in) (NP (DT a) (NN tree))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'stuck', u'stick', u'VBN'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'tree', u'tree', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'stuck', 'in', 'a', 'tree', '.']}, {'string': ' It got hurt, and it only had three legs, and it was hungry.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBD got) (VP (VBN hurt)))) (, ,) (CC and) (S (S (NP (PRP it)) (ADVP (RB only)) (VP (VBD had) (NP (CD three) (NNS legs)))) (, ,) (CC and) (S (NP (PRP it)) (VP (VBD was) (ADJP (JJ hungry))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'got', u'get', u'VBD'), (u'hurt', u'hurt', u'VBN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'it', u'it', u'PRP'), (u'only', u'only', u'RB'), (u'had', u'have', u'VBD'), (u'three', u'three', u'CD'), (u'legs', u'leg', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'hungry', u'hungry', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'got', 'hurt', ',', 'and', 'it', 'only', 'had', 'three', 'legs', ',', 'and', 'it', 'was', 'hungry', '.']}, {'string': ' It had a bent tail.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD had) (NP (DT a) (NN bent) (NN tail))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'bent', u'bent', u'NN'), (u'tail', u'tail', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'had', 'a', 'bent', 'tail', '.']}], 'mode': 0}, {'question': {'string': ' In the spring, what did the squirrel do with the peanuts?', 'parse': {'tree': '(ROOT (SBARQ (PP (IN In) (NP (DT the) (NN spring))) (, ,) (WHNP (WP what)) (SQ (VBD did) (NP (DT the) (NN squirrel)) (VP (VB do) (PP (IN with) (NP (DT the) (NNS peanuts))))) (. ?)))', 'lemma': [(u'In', u'in', u'IN'), (u'the', u'the', u'DT'), (u'spring', u'spring', u'NN'), (u',', u',', u','), (u'what', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'the', u'the', u'DT'), (u'squirrel', u'squirrel', u'NN'), (u'do', u'do', u'VB'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['In', 'the', 'spring', ',', 'what', 'did', 'the', 'squirrel', 'do', 'with', 'the', 'peanuts', '?']}, 'answers': [{'string': ' It stuck the peanuts in its mouth and ran away.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VP (VBD stuck) (NP (DT the) (NNS peanuts)) (PP (IN in) (NP (PRP$ its) (NN mouth)))) (CC and) (VP (VBD ran) (PRT (RP away)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'stuck', u'stick', u'VBD'), (u'the', u'the', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u'in', u'in', u'IN'), (u'its', u'its', u'PRP$'), (u'mouth', u'mouth', u'NN'), (u'and', u'and', u'CC'), (u'ran', u'run', u'VBD'), (u'away', u'away', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'stuck', 'the', 'peanuts', 'in', 'its', 'mouth', 'and', 'ran', 'away', '.']}, {'string': ' It chewed up the peanuts and spit them out.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VP (VBD chewed) (PRT (RP up)) (NP (DT the) (NNS peanuts))) (CC and) (VP (VBP spit) (NP (PRP them)) (PRT (RP out)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'chewed', u'chew', u'VBD'), (u'up', u'up', u'RP'), (u'the', u'the', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u'and', u'and', u'CC'), (u'spit', u'spit', u'VBP'), (u'them', u'they', u'PRP'), (u'out', u'out', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'chewed', 'up', 'the', 'peanuts', 'and', 'spit', 'them', 'out', '.']}, {'string': ' It put the peanuts in the pool.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD put) (NP (DT the) (NNS peanuts)) (PP (IN in) (NP (DT the) (NN pool)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'put', u'put', u'VBD'), (u'the', u'the', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'pool', u'pool', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'put', 'the', 'peanuts', 'in', 'the', 'pool', '.']}, {'string': ' It would take the peanuts and dig a hold and hide them, and then it would come back and get some peanuts to eat.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (MD would) (VP (VP (VB take) (NP (DT the) (NNS peanuts))) (CC and) (VP (VP (VB dig) (NP (DT a) (NN hold))) (CC and) (VP (VB hide) (NP (PRP them))))))) (, ,) (CC and) (S (ADVP (RB then)) (NP (PRP it)) (VP (MD would) (VP (VP (VB come) (ADVP (RB back))) (CC and) (VP (VB get) (S (NP (DT some) (NNS peanuts)) (VP (TO to) (VP (VB eat)))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'would', u'would', u'MD'), (u'take', u'take', u'VB'), (u'the', u'the', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u'and', u'and', u'CC'), (u'dig', u'dig', u'VB'), (u'a', u'a', u'DT'), (u'hold', u'hold', u'NN'), (u'and', u'and', u'CC'), (u'hide', u'hide', u'VB'), (u'them', u'they', u'PRP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'it', u'it', u'PRP'), (u'would', u'would', u'MD'), (u'come', u'come', u'VB'), (u'back', u'back', u'RB'), (u'and', u'and', u'CC'), (u'get', u'get', u'VB'), (u'some', u'some', u'DT'), (u'peanuts', u'peanut', u'NNS'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'would', 'take', 'the', 'peanuts', 'and', 'dig', 'a', 'hold', 'and', 'hide', 'them', ',', 'and', 'then', 'it', 'would', 'come', 'back', 'and', 'get', 'some', 'peanuts', 'to', 'eat', '.']}], 'mode': 0}, {'question': {'string': ' What other squirrels were there?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (JJ other) (NN squirrels)) (SQ (VBD were) (NP (EX there))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'other', u'other', u'JJ'), (u'squirrels', u'squirrel', u'NN'), (u'were', u'be', u'VBD'), (u'there', u'there', u'EX'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'other', 'squirrels', 'were', 'there', '?']}, 'answers': [{'string': ' giant squirrels', 'parse': {'tree': '(ROOT (NP (JJ giant) (NNS squirrels)))', 'lemma': [(u'giant', u'giant', u'JJ'), (u'squirrels', u'squirrel', u'NNS')]}, 'tokens': ['giant', 'squirrels']}, {'string': ' flying squirrels', 'parse': {'tree': '(ROOT (S (VP (VBG flying) (NP (NNS squirrels)))))', 'lemma': [(u'flying', u'fly', u'VBG'), (u'squirrels', u'squirrel', u'NNS')]}, 'tokens': ['flying', 'squirrels']}, {'string': ' Bully squirrels', 'parse': {'tree': '(ROOT (NP (NNP Bully) (NNS squirrels)))', 'lemma': [(u'Bully', u'Bully', u'NNP'), (u'squirrels', u'squirrel', u'NNS')]}, 'tokens': ['Bully', 'squirrels']}, {'string': ' baby squirrels', 'parse': {'tree': '(ROOT (NP (NN baby) (NNS squirrels)))', 'lemma': [(u'baby', u'baby', u'NN'), (u'squirrels', u'squirrel', u'NNS')]}, 'tokens': ['baby', 'squirrels']}], 'mode': 1}]}
{'sentences': [{'string': ' The dog was playing in the street outside.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN dog)) (VP (VBD was) (VP (VBG playing) (PP (IN in) (NP (DT the) (NN street) (NN outside))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'was', u'be', u'VBD'), (u'playing', u'play', u'VBG'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'street', u'street', u'NN'), (u'outside', u'outside', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'dog', 'was', 'playing', 'in', 'the', 'street', 'outside', '.']}, {'string': ' I walked past the dog and threw the ball to him.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VP (VBD walked) (PP (IN past) (NP (DT the) (NN dog)))) (CC and) (VP (VBD threw) (NP (DT the) (NN ball)) (PP (TO to) (NP (PRP him))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'walked', u'walk', u'VBD'), (u'past', u'past', u'IN'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'and', u'and', u'CC'), (u'threw', u'throw', u'VBD'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'walked', 'past', 'the', 'dog', 'and', 'threw', 'the', 'ball', 'to', 'him', '.']}, {'string': ' He seemed to be hot from the heat of the day.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD seemed) (S (VP (TO to) (VP (VB be) (ADJP (JJ hot) (PP (IN from) (NP (NP (DT the) (NN heat)) (PP (IN of) (NP (DT the) (NN day)))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'seemed', u'seem', u'VBD'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'hot', u'hot', u'JJ'), (u'from', u'from', u'IN'), (u'the', u'the', u'DT'), (u'heat', u'heat', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'seemed', 'to', 'be', 'hot', 'from', 'the', 'heat', 'of', 'the', 'day', '.']}, {'string': ' I then headed to the store because I needed to buy some food and other things that were needed.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (ADVP (RB then)) (VP (VBD headed) (PP (TO to) (NP (DT the) (NN store))) (SBAR (IN because) (S (NP (PRP I)) (VP (VBD needed) (S (VP (TO to) (VP (VB buy) (NP (NP (DT some) (NN food)) (CC and) (NP (NP (JJ other) (NNS things)) (SBAR (WHNP (WDT that)) (S (VP (VBD were) (VP (VBN needed)))))))))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'then', u'then', u'RB'), (u'headed', u'head', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'because', u'because', u'IN'), (u'I', u'I', u'PRP'), (u'needed', u'need', u'VBD'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'some', u'some', u'DT'), (u'food', u'food', u'NN'), (u'and', u'and', u'CC'), (u'other', u'other', u'JJ'), (u'things', u'thing', u'NNS'), (u'that', u'that', u'WDT'), (u'were', u'be', u'VBD'), (u'needed', u'need', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'then', 'headed', 'to', 'the', 'store', 'because', 'I', 'needed', 'to', 'buy', 'some', 'food', 'and', 'other', 'things', 'that', 'were', 'needed', '.']}, {'string': ' I entered the store and said hi to Mr. Jones.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VP (VBD entered) (NP (DT the) (NN store))) (CC and) (VP (VBD said) (ADVP (RB hi)) (PP (TO to) (NP (NNP Mr.) (NNP Jones))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'entered', u'enter', u'VBD'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'and', u'and', u'CC'), (u'said', u'say', u'VBD'), (u'hi', u'hi', u'RB'), (u'to', u'to', u'TO'), (u'Mr.', u'Mr.', u'NNP'), (u'Jones', u'Jones', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'entered', 'the', 'store', 'and', 'said', 'hi', 'to', 'Mr.', 'Jones', '.']}, {'string': ' He had been working at the store for a long time.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (VP (VBN been) (VP (VBG working) (PP (IN at) (NP (NP (DT the) (NN store)) (PP (IN for) (NP (DT a) (JJ long) (NN time)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'working', u'work', u'VBG'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'long', u'long', u'JJ'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'been', 'working', 'at', 'the', 'store', 'for', 'a', 'long', 'time', '.']}, {'string': ' I walked to the back of the store and picked up some cold sodas and a bottle of orange juice.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VP (VBD walked) (PP (TO to) (NP (NP (DT the) (NN back)) (PP (IN of) (NP (DT the) (NN store)))))) (CC and) (VP (VBD picked) (PRT (RP up)) (NP (NP (DT some) (JJ cold) (NNS sodas)) (CC and) (NP (NP (DT a) (NN bottle)) (PP (IN of) (NP (JJ orange) (NN juice))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'walked', u'walk', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'back', u'back', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'and', u'and', u'CC'), (u'picked', u'pick', u'VBD'), (u'up', u'up', u'RP'), (u'some', u'some', u'DT'), (u'cold', u'cold', u'JJ'), (u'sodas', u'soda', u'NNS'), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'bottle', u'bottle', u'NN'), (u'of', u'of', u'IN'), (u'orange', u'orange', u'JJ'), (u'juice', u'juice', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'walked', 'to', 'the', 'back', 'of', 'the', 'store', 'and', 'picked', 'up', 'some', 'cold', 'sodas', 'and', 'a', 'bottle', 'of', 'orange', 'juice', '.']}, {'string': ' I then went and picked up some popcorn.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (ADVP (RB then)) (VP (VBD went) (CC and) (VBD picked) (PRT (RP up)) (NP (DT some) (NN popcorn))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'then', u'then', u'RB'), (u'went', u'go', u'VBD'), (u'and', u'and', u'CC'), (u'picked', u'pick', u'VBD'), (u'up', u'up', u'RP'), (u'some', u'some', u'DT'), (u'popcorn', u'popcorn', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'then', 'went', 'and', 'picked', 'up', 'some', 'popcorn', '.']}, {'string': ' This would be good for eating later while watching tv.', 'parse': {'tree': '(ROOT (S (NP (DT This)) (VP (MD would) (VP (VB be) (ADJP (JJ good) (PP (IN for) (S (VP (VBG eating) (ADVP (RB later)) (PP (IN while) (S (VP (VBG watching) (NP (NN tv))))))))))) (. .)))', 'lemma': [(u'This', u'this', u'DT'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'good', u'good', u'JJ'), (u'for', u'for', u'IN'), (u'eating', u'eat', u'VBG'), (u'later', u'later', u'RB'), (u'while', u'while', u'IN'), (u'watching', u'watch', u'VBG'), (u'tv', u'tv', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['This', 'would', 'be', 'good', 'for', 'eating', 'later', 'while', 'watching', 'tv', '.']}, {'string': ' I then went to the dog food section and picked a meat treat for the dog.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (ADVP (RB then)) (VP (VP (VBD went) (PP (TO to) (NP (DT the) (NN dog) (NN food) (NN section)))) (CC and) (VP (VBD picked) (NP (DT a) (NN meat) (NN treat)) (PP (IN for) (NP (DT the) (NN dog))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'then', u'then', u'RB'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'food', u'food', u'NN'), (u'section', u'section', u'NN'), (u'and', u'and', u'CC'), (u'picked', u'pick', u'VBD'), (u'a', u'a', u'DT'), (u'meat', u'meat', u'NN'), (u'treat', u'treat', u'NN'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'then', 'went', 'to', 'the', 'dog', 'food', 'section', 'and', 'picked', 'a', 'meat', 'treat', 'for', 'the', 'dog', '.']}, {'string': ' I then went up to the front of the store and paid Mr. Jones.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (ADVP (RB then)) (VP (VP (VBD went) (PRT (RP up)) (PP (TO to) (NP (NP (DT the) (NN front)) (PP (IN of) (NP (DT the) (NN store)))))) (CC and) (VP (VBD paid) (NP (NNP Mr.) (NNP Jones)))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'then', u'then', u'RB'), (u'went', u'go', u'VBD'), (u'up', u'up', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'front', u'front', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'and', u'and', u'CC'), (u'paid', u'pay', u'VBD'), (u'Mr.', u'Mr.', u'NNP'), (u'Jones', u'Jones', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'then', 'went', 'up', 'to', 'the', 'front', 'of', 'the', 'store', 'and', 'paid', 'Mr.', 'Jones', '.']}, {'string': ' He smiled and thanked me for shopping at his store.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD smiled)) (CC and) (VP (VBD thanked) (NP (PRP me)) (PP (IN for) (NP (NN shopping))) (PP (IN at) (NP (PRP$ his) (NN store))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'smiled', u'smile', u'VBD'), (u'and', u'and', u'CC'), (u'thanked', u'thank', u'VBD'), (u'me', u'I', u'PRP'), (u'for', u'for', u'IN'), (u'shopping', u'shopping', u'NN'), (u'at', u'at', u'IN'), (u'his', u'he', u'PRP$'), (u'store', u'store', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'smiled', 'and', 'thanked', 'me', 'for', 'shopping', 'at', 'his', 'store', '.']}, {'string': ' Then I walked back to my house and looked at the dog.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP I)) (VP (VP (VBD walked) (PRT (RP back)) (PP (TO to) (NP (PRP$ my) (NN house)))) (CC and) (VP (VBD looked) (PP (IN at) (NP (DT the) (NN dog))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'I', u'I', u'PRP'), (u'walked', u'walk', u'VBD'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'my', u'my', u'PRP$'), (u'house', u'house', u'NN'), (u'and', u'and', u'CC'), (u'looked', u'look', u'VBD'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'I', 'walked', 'back', 'to', 'my', 'house', 'and', 'looked', 'at', 'the', 'dog', '.']}, {'string': ' His name was Rex and had lived with us for around four years.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN name)) (VP (VP (VBD was) (ADJP (JJ Rex))) (CC and) (VP (VBD had) (VP (VBN lived) (PP (IN with) (NP (PRP us))) (PP (IN for) (NP (IN around) (CD four) (NNS years)))))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'name', u'name', u'NN'), (u'was', u'be', u'VBD'), (u'Rex', u'rex', u'JJ'), (u'and', u'and', u'CC'), (u'had', u'have', u'VBD'), (u'lived', u'live', u'VBN'), (u'with', u'with', u'IN'), (u'us', u'we', u'PRP'), (u'for', u'for', u'IN'), (u'around', u'around', u'IN'), (u'four', u'four', u'CD'), (u'years', u'year', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'name', 'was', 'Rex', 'and', 'had', 'lived', 'with', 'us', 'for', 'around', 'four', 'years', '.']}, {'string': ' His coat was brown and white.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN coat)) (VP (VBD was) (ADJP (JJ brown) (CC and) (JJ white))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'coat', u'coat', u'NN'), (u'was', u'be', u'VBD'), (u'brown', u'brown', u'JJ'), (u'and', u'and', u'CC'), (u'white', u'white', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'coat', 'was', 'brown', 'and', 'white', '.']}, {'string': ' I unwrapped the dog treat and gave it to him.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBD unwrapped) (SBAR (S (NP (DT the) (NN dog)) (VP (VP (VBP treat)) (CC and) (VP (VBD gave) (NP (PRP it)) (PP (TO to) (NP (PRP him)))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'unwrapped', u'unwrap', u'VBD'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'treat', u'treat', u'VBP'), (u'and', u'and', u'CC'), (u'gave', u'give', u'VBD'), (u'it', u'it', u'PRP'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'unwrapped', 'the', 'dog', 'treat', 'and', 'gave', 'it', 'to', 'him', '.']}, {'string': ' Rex seemed happy and started to lick my hand in happiness.', 'parse': {'tree': '(ROOT (S (NP (NNP Rex)) (VP (VP (VBD seemed) (S (ADJP (JJ happy)))) (CC and) (VP (VBD started) (S (VP (TO to) (VP (VB lick) (NP (PRP$ my) (NN hand)) (PP (IN in) (NP (NN happiness)))))))) (. .)))', 'lemma': [(u'Rex', u'Rex', u'NNP'), (u'seemed', u'seem', u'VBD'), (u'happy', u'happy', u'JJ'), (u'and', u'and', u'CC'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'lick', u'lick', u'VB'), (u'my', u'my', u'PRP$'), (u'hand', u'hand', u'NN'), (u'in', u'in', u'IN'), (u'happiness', u'happiness', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rex', 'seemed', 'happy', 'and', 'started', 'to', 'lick', 'my', 'hand', 'in', 'happiness', '.']}, {'string': ' He was a good dog and it made me feel good that he was happy.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBD was) (NP (DT a) (JJ good) (NN dog)))) (CC and) (S (NP (PRP it)) (VP (VBD made) (SBAR (S (NP (PRP me)) (VP (VBP feel) (ADJP (JJ good) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD was) (ADJP (JJ happy))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'dog', u'dog', u'NN'), (u'and', u'and', u'CC'), (u'it', u'it', u'PRP'), (u'made', u'make', u'VBD'), (u'me', u'I', u'PRP'), (u'feel', u'feel', u'VBP'), (u'good', u'good', u'JJ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'a', 'good', 'dog', 'and', 'it', 'made', 'me', 'feel', 'good', 'that', 'he', 'was', 'happy', '.']}], 'questions': [{'question': {'string': ' what did I buy in the store', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP what)) (SQ (VBD did) (NP (PRP I)) (VP (VB buy) (PP (IN in) (NP (DT the) (NN store)))))))', 'lemma': [(u'what', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'I', u'I', u'PRP'), (u'buy', u'buy', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN')]}, 'tokens': ['what', 'did', 'I', 'buy', 'in', 'the', 'store']}, 'answers': [{'string': ' a meat pie', 'parse': {'tree': '(ROOT (NP (DT a) (NN meat) (NN pie)))', 'lemma': [(u'a', u'a', u'DT'), (u'meat', u'meat', u'NN'), (u'pie', u'pie', u'NN')]}, 'tokens': ['a', 'meat', 'pie']}, {'string': ' hot dogs and soda', 'parse': {'tree': '(ROOT (NP (NP (JJ hot) (NNS dogs)) (CC and) (NP (NN soda))))', 'lemma': [(u'hot', u'hot', u'JJ'), (u'dogs', u'dog', u'NNS'), (u'and', u'and', u'CC'), (u'soda', u'soda', u'NN')]}, 'tokens': ['hot', 'dogs', 'and', 'soda']}, {'string': ' a ball', 'parse': {'tree': '(ROOT (FRAG (NP (DT a) (NN ball))))', 'lemma': [(u'a', u'a', u'DT'), (u'ball', u'ball', u'NN')]}, 'tokens': ['a', 'ball']}, {'string': ' popcorn, soda, juice, and dog treat', 'parse': {'tree': '(ROOT (NP (NP (NN popcorn) (, ,) (NN soda) (, ,) (NN juice) (, ,) (CC and) (NN dog)) (NP (NN treat))))', 'lemma': [(u'popcorn', u'popcorn', u'NN'), (u',', u',', u','), (u'soda', u'soda', u'NN'), (u',', u',', u','), (u'juice', u'juice', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'dog', u'dog', u'NN'), (u'treat', u'treat', u'NN')]}, 'tokens': ['popcorn', ',', 'soda', ',', 'juice', ',', 'and', 'dog', 'treat']}], 'mode': 0}, {'question': {'string': ' what color was the dog', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT what) (NN color)) (SQ (VBD was) (NP (DT the) (NN dog)))))', 'lemma': [(u'what', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN')]}, 'tokens': ['what', 'color', 'was', 'the', 'dog']}, 'answers': [{'string': ' brown and white', 'parse': {'tree': '(ROOT (ADJP (JJ brown) (CC and) (JJ white)))', 'lemma': [(u'brown', u'brown', u'JJ'), (u'and', u'and', u'CC'), (u'white', u'white', u'JJ')]}, 'tokens': ['brown', 'and', 'white']}, {'string': ' pure white', 'parse': {'tree': '(ROOT (NP (JJ pure) (NNS white)))', 'lemma': [(u'pure', u'pure', u'JJ'), (u'white', u'white', u'NNS')]}, 'tokens': ['pure', 'white']}, {'string': ' he was a good dog', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBD was) (NP (DT a) (JJ good) (NN dog)))))', 'lemma': [(u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'dog', u'dog', u'NN')]}, 'tokens': ['he', 'was', 'a', 'good', 'dog']}, {'string': ' he licked my hand', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBD licked) (NP (PRP$ my) (NN hand)))))', 'lemma': [(u'he', u'he', u'PRP'), (u'licked', u'lick', u'VBD'), (u'my', u'my', u'PRP$'), (u'hand', u'hand', u'NN')]}, 'tokens': ['he', 'licked', 'my', 'hand']}], 'mode': 1}, {'question': {'string': ' what is the name of the dog', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP what)) (SQ (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (DT the) (NN dog)))))))', 'lemma': [(u'what', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'name', u'name', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'dog', u'dog', u'NN')]}, 'tokens': ['what', 'is', 'the', 'name', 'of', 'the', 'dog']}, 'answers': [{'string': ' Jones', 'parse': {'tree': '(ROOT (NP (NNP Jones)))', 'lemma': [(u'Jones', u'Jones', u'NNP')]}, 'tokens': ['Jones']}, {'string': ' Rin tin tin', 'parse': {'tree': '(ROOT (S (VP (VB Rin) (NP (NN tin) (NN tin)))))', 'lemma': [(u'Rin', u'rin', u'VB'), (u'tin', u'tin', u'NN'), (u'tin', u'tin', u'NN')]}, 'tokens': ['Rin', 'tin', 'tin']}, {'string': ' Rex', 'parse': {'tree': '(ROOT (NP (NNP Rex)))', 'lemma': [(u'Rex', u'Rex', u'NNP')]}, 'tokens': ['Rex']}, {'string': ' Hazel', 'parse': {'tree': '(ROOT (NP (NNP Hazel)))', 'lemma': [(u'Hazel', u'Hazel', u'NNP')]}, 'tokens': ['Hazel']}], 'mode': 1}, {'question': {'string': ' What did Mr. Jones do', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Mr.) (NNP Jones)) (VP (VB do)))))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Mr.', u'Mr.', u'NNP'), (u'Jones', u'Jones', u'NNP'), (u'do', u'do', u'VB')]}, 'tokens': ['What', 'did', 'Mr.', 'Jones', 'do']}, 'answers': [{'string': " he asked, `` what are you doing here? ''", 'parse': {'tree': "(ROOT (S (NP (PRP he)) (VP (VBD asked) (, ,) (`` ``) (SBARQ (WHNP (WP what)) (SQ (VBP are) (NP (PRP you)) (VP (VBG doing) (ADVP (RB here)))) (. ?)) ('' ''))))", 'lemma': [(u'he', u'he', u'PRP'), (u'asked', u'ask', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'what', u'what', u'WP'), (u'are', u'be', u'VBP'), (u'you', u'you', u'PRP'), (u'doing', u'do', u'VBG'), (u'here', u'here', u'RB'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['he', 'asked', ',', '``', 'what', 'are', 'you', 'doing', 'here', '?', "''"]}, {'string': ' he picked out a treat', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBD picked) (PRT (RP out)) (NP (DT a) (NN treat)))))', 'lemma': [(u'he', u'he', u'PRP'), (u'picked', u'pick', u'VBD'), (u'out', u'out', u'RP'), (u'a', u'a', u'DT'), (u'treat', u'treat', u'NN')]}, 'tokens': ['he', 'picked', 'out', 'a', 'treat']}, {'string': " he said, `` we are closed ''", 'parse': {'tree': "(ROOT (S (NP (PRP he)) (VP (VBD said) (, ,) (S (`` ``) (NP (PRP we)) (VP (VBP are) (ADJP (JJ closed))) ('' '')))))", 'lemma': [(u'he', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'we', u'we', u'PRP'), (u'are', u'be', u'VBP'), (u'closed', u'closed', u'JJ'), (u"''", u"''", u"''")]}, 'tokens': ['he', 'said', ',', '``', 'we', 'are', 'closed', "''"]}, {'string': ' he smiled and thanked me for shopping at his store', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VP (VBD smiled)) (CC and) (VP (VBD thanked) (NP (PRP me)) (PP (IN for) (NP (NN shopping))) (PP (IN at) (NP (PRP$ his) (NN store)))))))', 'lemma': [(u'he', u'he', u'PRP'), (u'smiled', u'smile', u'VBD'), (u'and', u'and', u'CC'), (u'thanked', u'thank', u'VBD'), (u'me', u'I', u'PRP'), (u'for', u'for', u'IN'), (u'shopping', u'shopping', u'NN'), (u'at', u'at', u'IN'), (u'his', u'he', u'PRP$'), (u'store', u'store', u'NN')]}, 'tokens': ['he', 'smiled', 'and', 'thanked', 'me', 'for', 'shopping', 'at', 'his', 'store']}], 'mode': 0}]}
{'sentences': [{'string': ' Tim Goes To The Beach Today was exciting.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Tim) (NNP Goes)) (PP (TO To) (NP (DT The) (NNP Beach) (NNP Today)))) (VP (VBD was) (ADJP (JJ exciting))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'Goes', u'Goes', u'NNP'), (u'To', u'to', u'TO'), (u'The', u'the', u'DT'), (u'Beach', u'Beach', u'NNP'), (u'Today', u'Today', u'NNP'), (u'was', u'be', u'VBD'), (u'exciting', u'exciting', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'Goes', 'To', 'The', 'Beach', 'Today', 'was', 'exciting', '.']}, {'string': " Tim 's mom was taking him and his little sisters, Rebecca and Georgia, to the beach!", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Tim) (POS 's)) (NN mom)) (VP (VBD was) (VP (VBG taking) (NP (NP (PRP him)) (CC and) (NP (NP (PRP$ his) (JJ little) (NNS sisters)) (, ,) (NP (NNP Rebecca)) (CC and) (NP (NNP Georgia)))) (, ,) (PP (TO to) (NP (DT the) (NN beach))))) (. !)))", 'lemma': [(u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'was', u'be', u'VBD'), (u'taking', u'take', u'VBG'), (u'him', u'he', u'PRP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'little', u'little', u'JJ'), (u'sisters', u'sister', u'NNS'), (u',', u',', u','), (u'Rebecca', u'Rebecca', u'NNP'), (u'and', u'and', u'CC'), (u'Georgia', u'Georgia', u'NNP'), (u',', u',', u','), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['Tim', "'s", 'mom', 'was', 'taking', 'him', 'and', 'his', 'little', 'sisters', ',', 'Rebecca', 'and', 'Georgia', ',', 'to', 'the', 'beach', '!']}, {'string': ' They were going to go swimming.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (VP (VBG going) (S (VP (TO to) (VP (VB go) (NP (NN swimming))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'swimming', u'swimming', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'going', 'to', 'go', 'swimming', '.']}, {'string': ' Then they were also going to have a picnic lunch on the beach.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VBD were) (ADVP (RB also)) (VP (VBG going) (S (VP (TO to) (VP (VB have) (NP (NP (DT a) (NN picnic) (NN lunch)) (PP (IN on) (NP (DT the) (NN beach))))))))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'also', u'also', u'RB'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'have', u'have', u'VB'), (u'a', u'a', u'DT'), (u'picnic', u'picnic', u'NN'), (u'lunch', u'lunch', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'were', 'also', 'going', 'to', 'have', 'a', 'picnic', 'lunch', 'on', 'the', 'beach', '.']}, {'string': " After their picnic lunch, Tim 's mom was going to light a campfire and they were going to eat toasted marshmallows.", 'parse': {'tree': "(ROOT (S (PP (IN After) (NP (PRP$ their) (NN picnic) (NN lunch))) (, ,) (S (NP (NP (NNP Tim) (POS 's)) (NN mom)) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB light) (NP (DT a) (NN campfire)))))))) (CC and) (S (NP (PRP they)) (VP (VBD were) (VP (VBG going) (S (VP (TO to) (VP (VB eat) (NP (JJ toasted) (NNS marshmallows)))))))) (. .)))", 'lemma': [(u'After', u'after', u'IN'), (u'their', u'they', u'PRP$'), (u'picnic', u'picnic', u'NN'), (u'lunch', u'lunch', u'NN'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'light', u'light', u'VB'), (u'a', u'a', u'DT'), (u'campfire', u'campfire', u'NN'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'toasted', u'toasted', u'JJ'), (u'marshmallows', u'marshmallow', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'their', 'picnic', 'lunch', ',', 'Tim', "'s", 'mom', 'was', 'going', 'to', 'light', 'a', 'campfire', 'and', 'they', 'were', 'going', 'to', 'eat', 'toasted', 'marshmallows', '.']}, {'string': ' Tim and his mom and his two little sisters hopped into the van.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Tim)) (CC and) (NP (NP (PRP$ his) (NN mom)) (CC and) (NP (PRP$ his) (CD two) (JJ little) (NNS sisters)))) (VP (VBD hopped) (PP (IN into) (NP (DT the) (NN van)))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'two', u'two', u'CD'), (u'little', u'little', u'JJ'), (u'sisters', u'sister', u'NNS'), (u'hopped', u'hop', u'VBD'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'van', u'van', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'and', 'his', 'mom', 'and', 'his', 'two', 'little', 'sisters', 'hopped', 'into', 'the', 'van', '.']}, {'string': ' His little sisters were both very blonde and pretty little girls.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (JJ little) (NNS sisters)) (VP (VBD were) (NP (ADJP (DT both) (ADJP (RB very) (JJ blonde)) (CC and) (ADJP (RB pretty) (JJ little))) (NNS girls))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'little', u'little', u'JJ'), (u'sisters', u'sister', u'NNS'), (u'were', u'be', u'VBD'), (u'both', u'both', u'DT'), (u'very', u'very', u'RB'), (u'blonde', u'blonde', u'JJ'), (u'and', u'and', u'CC'), (u'pretty', u'pretty', u'RB'), (u'little', u'little', u'JJ'), (u'girls', u'girl', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'little', 'sisters', 'were', 'both', 'very', 'blonde', 'and', 'pretty', 'little', 'girls', '.']}, {'string': ' They were only 4 years old.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (ADJP (NP (QP (RB only) (CD 4)) (NNS years)) (JJ old))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'only', u'only', u'RB'), (u'4', u'4', u'CD'), (u'years', u'year', u'NNS'), (u'old', u'old', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'only', '4', 'years', 'old', '.']}, {'string': ' Because they lived in the city, they had a short drive to get to the beach.', 'parse': {'tree': '(ROOT (S (SBAR (IN Because) (S (NP (PRP they)) (VP (VBD lived) (PP (IN in) (NP (DT the) (NN city)))))) (, ,) (NP (PRP they)) (VP (VBD had) (NP (DT a) (JJ short) (NN drive) (S (VP (TO to) (VP (VB get) (PP (TO to) (NP (DT the) (NN beach)))))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'lived', u'live', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'city', u'city', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'short', u'short', u'JJ'), (u'drive', u'drive', u'NN'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'they', 'lived', 'in', 'the', 'city', ',', 'they', 'had', 'a', 'short', 'drive', 'to', 'get', 'to', 'the', 'beach', '.']}, {'string': ' To pass the time, Tim played Eye Spy with his mother as they drove for a bit.', 'parse': {'tree': '(ROOT (S (S (VP (TO To) (VP (VB pass) (NP (DT the) (NN time))))) (, ,) (NP (NNP Tim)) (VP (VBD played) (NP (NP (NNP Eye) (NNP Spy)) (PP (IN with) (NP (PRP$ his) (NN mother)))) (SBAR (IN as) (S (NP (PRP they)) (VP (VBD drove) (PP (IN for) (NP (DT a) (NN bit))))))) (. .)))', 'lemma': [(u'To', u'to', u'TO'), (u'pass', u'pass', u'VB'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u'played', u'play', u'VBD'), (u'Eye', u'Eye', u'NNP'), (u'Spy', u'Spy', u'NNP'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'as', u'as', u'IN'), (u'they', u'they', u'PRP'), (u'drove', u'drive', u'VBD'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'bit', u'bit', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['To', 'pass', 'the', 'time', ',', 'Tim', 'played', 'Eye', 'Spy', 'with', 'his', 'mother', 'as', 'they', 'drove', 'for', 'a', 'bit', '.']}, {'string': ' Once they had gotten bored with Eye Spy, they played 20 Questions.', 'parse': {'tree': '(ROOT (S (SBAR (IN Once) (S (NP (PRP they)) (VP (VBD had) (VP (VBN gotten) (ADJP (JJ bored)) (PP (IN with) (NP (NNP Eye) (NNP Spy))))))) (, ,) (NP (PRP they)) (VP (VBD played) (NP (CD 20) (NNS Questions))) (. .)))', 'lemma': [(u'Once', u'once', u'IN'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'gotten', u'get', u'VBN'), (u'bored', u'bored', u'JJ'), (u'with', u'with', u'IN'), (u'Eye', u'Eye', u'NNP'), (u'Spy', u'Spy', u'NNP'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'played', u'play', u'VBD'), (u'20', u'20', u'CD'), (u'Questions', u'question', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Once', 'they', 'had', 'gotten', 'bored', 'with', 'Eye', 'Spy', ',', 'they', 'played', '20', 'Questions', '.']}, {'string': ' Tim would think of something, and his mother would ask him questions to try and guess what it was.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Tim)) (VP (MD would) (VP (VB think) (PP (IN of) (NP (NN something)))))) (, ,) (CC and) (S (NP (PRP$ his) (NN mother)) (VP (MD would) (VP (VB ask) (SBAR (S (NP (PRP him)) (VP (VBZ questions) (S (VP (TO to) (VP (VB try) (CC and) (VB guess) (SBAR (WHNP (WP what)) (S (NP (PRP it)) (VP (VBD was))))))))))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'would', u'would', u'MD'), (u'think', u'think', u'VB'), (u'of', u'of', u'IN'), (u'something', u'something', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'would', u'would', u'MD'), (u'ask', u'ask', u'VB'), (u'him', u'he', u'PRP'), (u'questions', u'question', u'VBZ'), (u'to', u'to', u'TO'), (u'try', u'try', u'VB'), (u'and', u'and', u'CC'), (u'guess', u'guess', u'VB'), (u'what', u'what', u'WP'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'would', 'think', 'of', 'something', ',', 'and', 'his', 'mother', 'would', 'ask', 'him', 'questions', 'to', 'try', 'and', 'guess', 'what', 'it', 'was', '.']}, {'string': ' When they got to the beach, it was warm, and sunny.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP they)) (VP (VBD got) (PP (TO to) (NP (DT the) (NN beach)))))) (, ,) (NP (PRP it)) (VP (VP (VBD was) (ADJP (JJ warm))) (, ,) (CC and) (VP (VBZ sunny))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'got', u'get', u'VBD'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u',', u',', u','), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'warm', u'warm', u'JJ'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'sunny', u'sunny', u'VBZ'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'they', 'got', 'to', 'the', 'beach', ',', 'it', 'was', 'warm', ',', 'and', 'sunny', '.']}, {'string': ' The salt water was warm, and the waves lapped up on the shore.', 'parse': {'tree': '(ROOT (S (S (NP (DT The) (NN salt) (NN water)) (VP (VBD was) (ADJP (JJ warm)))) (, ,) (CC and) (S (NP (DT the) (NNS waves)) (VP (VBD lapped) (PRT (RP up)) (PP (IN on) (NP (DT the) (NN shore))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'salt', u'salt', u'NN'), (u'water', u'water', u'NN'), (u'was', u'be', u'VBD'), (u'warm', u'warm', u'JJ'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'waves', u'wave', u'NNS'), (u'lapped', u'lap', u'VBD'), (u'up', u'up', u'RP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'shore', u'shore', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'salt', 'water', 'was', 'warm', ',', 'and', 'the', 'waves', 'lapped', 'up', 'on', 'the', 'shore', '.']}, {'string': ' It made a lovely noise.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD made) (NP (DT a) (JJ lovely) (NN noise))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'made', u'make', u'VBD'), (u'a', u'a', u'DT'), (u'lovely', u'lovely', u'JJ'), (u'noise', u'noise', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'made', 'a', 'lovely', 'noise', '.']}, {'string': " It also felt great on Tim 's toes, and his little sisters giggled when the waves hit them.", 'parse': {'tree': "(ROOT (S (S (NP (PRP It)) (ADVP (RB also)) (VP (VBD felt) (ADJP (JJ great)) (PP (IN on) (NP (NP (NNP Tim) (POS 's)) (NNS toes))))) (, ,) (CC and) (S (NP (PRP$ his) (JJ little) (NNS sisters)) (VP (VBD giggled) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NNS waves)) (VP (VBD hit) (NP (PRP them))))))) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u'also', u'also', u'RB'), (u'felt', u'feel', u'VBD'), (u'great', u'great', u'JJ'), (u'on', u'on', u'IN'), (u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'toes', u'toe', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'little', u'little', u'JJ'), (u'sisters', u'sister', u'NNS'), (u'giggled', u'giggle', u'VBD'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'waves', u'wave', u'NNS'), (u'hit', u'hit', u'VBD'), (u'them', u'they', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'also', 'felt', 'great', 'on', 'Tim', "'s", 'toes', ',', 'and', 'his', 'little', 'sisters', 'giggled', 'when', 'the', 'waves', 'hit', 'them', '.']}, {'string': " When they had had their fill of swimming, Tim 's mom had them sit down to a nice dinner.", 'parse': {'tree': "(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP they)) (VP (VBD had) (VP (VBN had) (NP (NP (PRP$ their) (NN fill)) (PP (IN of) (NP (NN swimming)))))))) (, ,) (NP (NP (NNP Tim) (POS 's)) (NN mom)) (VP (VBD had) (S (NP (PRP them)) (VP (VB sit) (PRT (RP down)) (PP (TO to) (NP (DT a) (JJ nice) (NN dinner)))))) (. .)))", 'lemma': [(u'When', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'had', u'have', u'VBN'), (u'their', u'they', u'PRP$'), (u'fill', u'fill', u'NN'), (u'of', u'of', u'IN'), (u'swimming', u'swimming', u'NN'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'had', u'have', u'VBD'), (u'them', u'they', u'PRP'), (u'sit', u'sit', u'VB'), (u'down', u'down', u'RP'), (u'to', u'to', u'TO'), (u'a', u'a', u'DT'), (u'nice', u'nice', u'JJ'), (u'dinner', u'dinner', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'they', 'had', 'had', 'their', 'fill', 'of', 'swimming', ',', 'Tim', "'s", 'mom', 'had', 'them', 'sit', 'down', 'to', 'a', 'nice', 'dinner', '.']}, {'string': ' They ate and ate.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD ate)) (CC and) (VP (VBD ate))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'ate', u'eat', u'VBD'), (u'and', u'and', u'CC'), (u'ate', u'eat', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'ate', 'and', 'ate', '.']}, {'string': ' They ate macaroni salad.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD ate) (NP (JJ macaroni) (NN salad))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'ate', u'eat', u'VBD'), (u'macaroni', u'macaroni', u'JJ'), (u'salad', u'salad', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'ate', 'macaroni', 'salad', '.']}, {'string': ' Then they ate some cold chicken.', 'parse': {'tree': '(ROOT (S (RB Then) (NP (PRP they)) (VP (VBD ate) (NP (DT some) (JJ cold) (NN chicken))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u'they', u'they', u'PRP'), (u'ate', u'eat', u'VBD'), (u'some', u'some', u'DT'), (u'cold', u'cold', u'JJ'), (u'chicken', u'chicken', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', 'they', 'ate', 'some', 'cold', 'chicken', '.']}, {'string': ' They also had lemon pie for dessert.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (RB also)) (VP (VBD had) (NP (NP (JJ lemon) (NN pie)) (PP (IN for) (NP (NN dessert))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'also', u'also', u'RB'), (u'had', u'have', u'VBD'), (u'lemon', u'lemon', u'JJ'), (u'pie', u'pie', u'NN'), (u'for', u'for', u'IN'), (u'dessert', u'dessert', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'also', 'had', 'lemon', 'pie', 'for', 'dessert', '.']}, {'string': " Tim 's mom started a fire, and they spent the rest of the evening as the sun set eating toasted marshmallows and singing campfire songs.", 'parse': {'tree': "(ROOT (S (S (NP (NP (NNP Tim) (POS 's)) (NN mom)) (VP (VBD started) (NP (DT a) (NN fire)))) (, ,) (CC and) (S (NP (PRP they)) (VP (VBD spent) (NP (NP (DT the) (NN rest)) (PP (IN of) (NP (DT the) (NN evening)))) (PP (IN as) (NP (NP (DT the) (NN sun)) (VP (VBN set) (S (VP (VP (VBG eating) (NP (JJ toasted) (NNS marshmallows))) (CC and) (VP (VBG singing) (NP (JJ campfire) (NNS songs)))))))))) (. .)))", 'lemma': [(u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'started', u'start', u'VBD'), (u'a', u'a', u'DT'), (u'fire', u'fire', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'spent', u'spend', u'VBD'), (u'the', u'the', u'DT'), (u'rest', u'rest', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'evening', u'evening', u'NN'), (u'as', u'as', u'IN'), (u'the', u'the', u'DT'), (u'sun', u'sun', u'NN'), (u'set', u'set', u'VBN'), (u'eating', u'eat', u'VBG'), (u'toasted', u'toasted', u'JJ'), (u'marshmallows', u'marshmallow', u'NNS'), (u'and', u'and', u'CC'), (u'singing', u'sing', u'VBG'), (u'campfire', u'campfire', u'JJ'), (u'songs', u'song', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', "'s", 'mom', 'started', 'a', 'fire', ',', 'and', 'they', 'spent', 'the', 'rest', 'of', 'the', 'evening', 'as', 'the', 'sun', 'set', 'eating', 'toasted', 'marshmallows', 'and', 'singing', 'campfire', 'songs', '.']}, {'string': ' Tim thought it was a very good day.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD thought) (SBAR (S (NP (PRP it)) (VP (VBD was) (NP (DT a) (ADJP (RB very) (JJ good)) (NN day)))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'thought', u'think', u'VBD'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'very', u'very', u'RB'), (u'good', u'good', u'JJ'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'thought', 'it', 'was', 'a', 'very', 'good', 'day', '.']}], 'questions': [{'question': {'string': " Why was Tim 's day exciting?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD was) (NP (NP (NNP Tim) (POS 's)) (NN day) (NN exciting))) (. ?)))", 'lemma': [(u'Why', u'why', u'WRB'), (u'was', u'be', u'VBD'), (u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'day', u'day', u'NN'), (u'exciting', u'exciting', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'was', 'Tim', "'s", 'day', 'exciting', '?']}, 'answers': [{'string': ' Tim and his mother and two little sisters were going to the beach.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Tim)) (CC and) (NP (NP (PRP$ his) (NN mother)) (CC and) (NP (CD two) (JJ little) (NNS sisters)))) (VP (VBD were) (VP (VBG going) (PP (TO to) (NP (DT the) (NN beach))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'and', u'and', u'CC'), (u'two', u'two', u'CD'), (u'little', u'little', u'JJ'), (u'sisters', u'sister', u'NNS'), (u'were', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'and', 'his', 'mother', 'and', 'two', 'little', 'sisters', 'were', 'going', 'to', 'the', 'beach', '.']}, {'string': ' Tim and his little sisters were going to have a campfire in the backyard.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Tim)) (CC and) (NP (PRP$ his) (JJ little) (NNS sisters))) (VP (VBD were) (VP (VBG going) (S (VP (TO to) (VP (VB have) (NP (NP (DT a) (NN campfire)) (PP (IN in) (NP (DT the) (NN backyard))))))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'little', u'little', u'JJ'), (u'sisters', u'sister', u'NNS'), (u'were', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'have', u'have', u'VB'), (u'a', u'a', u'DT'), (u'campfire', u'campfire', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'backyard', u'backyard', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'and', 'his', 'little', 'sisters', 'were', 'going', 'to', 'have', 'a', 'campfire', 'in', 'the', 'backyard', '.']}, {'string': ' Tim and his mother were going to the swimming pool.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Tim)) (CC and) (NP (PRP$ his) (NN mother))) (VP (VBD were) (VP (VBG going) (PP (TO to) (NP (DT the) (NN swimming) (NN pool))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'were', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'swimming', u'swimming', u'NN'), (u'pool', u'pool', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'and', 'his', 'mother', 'were', 'going', 'to', 'the', 'swimming', 'pool', '.']}, {'string': " Rebecca and Georgia, Tim 's sisters, were taking him to the beach.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Rebecca) (CC and) (NNP Georgia)) (, ,) (NP (NP (NNP Tim) (POS 's)) (NNS sisters)) (, ,)) (VP (VBD were) (VP (VBG taking) (NP (PRP him)) (PP (TO to) (NP (DT the) (NN beach))))) (. .)))", 'lemma': [(u'Rebecca', u'Rebecca', u'NNP'), (u'and', u'and', u'CC'), (u'Georgia', u'Georgia', u'NNP'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'sisters', u'sister', u'NNS'), (u',', u',', u','), (u'were', u'be', u'VBD'), (u'taking', u'take', u'VBG'), (u'him', u'he', u'PRP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Rebecca', 'and', 'Georgia', ',', 'Tim', "'s", 'sisters', ',', 'were', 'taking', 'him', 'to', 'the', 'beach', '.']}], 'mode': 1}, {'question': {'string': ' Did Tim do anything to pass the time in the van during the trip?', 'parse': {'tree': '(ROOT (SQ (VBD Did) (NP (NNP Tim)) (VP (VB do) (NP (NN anything)) (S (VP (TO to) (VP (VB pass) (NP (NP (DT the) (NN time)) (PP (IN in) (NP (DT the) (NN van)))) (PP (IN during) (NP (DT the) (NN trip))))))) (. ?)))', 'lemma': [(u'Did', u'do', u'VBD'), (u'Tim', u'Tim', u'NNP'), (u'do', u'do', u'VB'), (u'anything', u'anything', u'NN'), (u'to', u'to', u'TO'), (u'pass', u'pass', u'VB'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'van', u'van', u'NN'), (u'during', u'during', u'IN'), (u'the', u'the', u'DT'), (u'trip', u'trip', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Did', 'Tim', 'do', 'anything', 'to', 'pass', 'the', 'time', 'in', 'the', 'van', 'during', 'the', 'trip', '?']}, 'answers': [{'string': ' Tim asked his sisters questions in the van.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD asked) (NP (PRP$ his) (NNS sisters) (NNS questions)) (PP (IN in) (NP (DT the) (NN van)))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'asked', u'ask', u'VBD'), (u'his', u'he', u'PRP$'), (u'sisters', u'sister', u'NNS'), (u'questions', u'question', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'van', u'van', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'asked', 'his', 'sisters', 'questions', 'in', 'the', 'van', '.']}, {'string': ' Tim played Eye Spy, and 20 Questions with his mother in the van.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD played) (NP (NP (NNP Eye) (NNP Spy)) (, ,) (CC and) (NP (NP (CD 20) (NNS Questions)) (PP (IN with) (NP (PRP$ his) (NN mother))))) (PP (IN in) (NP (DT the) (NN van)))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'played', u'play', u'VBD'), (u'Eye', u'Eye', u'NNP'), (u'Spy', u'Spy', u'NNP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'20', u'20', u'CD'), (u'Questions', u'question', u'NNS'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'mother', u'mother', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'van', u'van', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'played', 'Eye', 'Spy', ',', 'and', '20', 'Questions', 'with', 'his', 'mother', 'in', 'the', 'van', '.']}, {'string': ' Tim did not do anything to pass the time.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD did) (RB not) (VP (VB do) (NP (NN anything)) (S (VP (TO to) (VP (VB pass) (NP (DT the) (NN time))))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'do', u'do', u'VB'), (u'anything', u'anything', u'NN'), (u'to', u'to', u'TO'), (u'pass', u'pass', u'VB'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'did', 'not', 'do', 'anything', 'to', 'pass', 'the', 'time', '.']}, {'string': ' Tim played Eye Spy with his sisters in the van.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD played) (NP (NNP Eye) (NNP Spy)) (PP (IN with) (NP (PRP$ his) (NNS sisters))) (PP (IN in) (NP (DT the) (NN van)))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'played', u'play', u'VBD'), (u'Eye', u'Eye', u'NNP'), (u'Spy', u'Spy', u'NNP'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'sisters', u'sister', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'van', u'van', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'played', 'Eye', 'Spy', 'with', 'his', 'sisters', 'in', 'the', 'van', '.']}], 'mode': 0}, {'question': {'string': " What did Tim 's family have for a picnic on the beach?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NP (NNP Tim) (POS 's)) (NN family)) (VP (VB have) (PP (IN for) (NP (NP (DT a) (NN picnic)) (PP (IN on) (NP (DT the) (NN beach))))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'family', u'family', u'NN'), (u'have', u'have', u'VB'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'picnic', u'picnic', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Tim', "'s", 'family', 'have', 'for', 'a', 'picnic', 'on', 'the', 'beach', '?']}, 'answers': [{'string': " Tim 's family had lemon chicken, macaroni, and a pie for dessert.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Tim) (POS 's)) (NN family)) (VP (VBD had) (NP (NP (JJ lemon) (NN chicken)) (, ,) (NP (NNS macaroni)) (, ,) (CC and) (NP (NP (DT a) (NN pie)) (PP (IN for) (NP (NN dessert)))))) (. .)))", 'lemma': [(u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'family', u'family', u'NN'), (u'had', u'have', u'VBD'), (u'lemon', u'lemon', u'JJ'), (u'chicken', u'chicken', u'NN'), (u',', u',', u','), (u'macaroni', u'macaroni', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'pie', u'pie', u'NN'), (u'for', u'for', u'IN'), (u'dessert', u'dessert', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', "'s", 'family', 'had', 'lemon', 'chicken', ',', 'macaroni', ',', 'and', 'a', 'pie', 'for', 'dessert', '.']}, {'string': " Tim 's family had cold chicken, macaroni salad, and lemon pie for dessert.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Tim) (POS 's)) (NN family)) (VP (VBD had) (NP (NP (JJ cold) (NN chicken)) (, ,) (NP (NN macaroni) (NN salad)) (, ,) (CC and) (NP (NP (JJ lemon) (NN pie)) (PP (IN for) (NP (NN dessert)))))) (. .)))", 'lemma': [(u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'family', u'family', u'NN'), (u'had', u'have', u'VBD'), (u'cold', u'cold', u'JJ'), (u'chicken', u'chicken', u'NN'), (u',', u',', u','), (u'macaroni', u'macaroni', u'NN'), (u'salad', u'salad', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'lemon', u'lemon', u'JJ'), (u'pie', u'pie', u'NN'), (u'for', u'for', u'IN'), (u'dessert', u'dessert', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', "'s", 'family', 'had', 'cold', 'chicken', ',', 'macaroni', 'salad', ',', 'and', 'lemon', 'pie', 'for', 'dessert', '.']}, {'string': " Tim 's family had macaroni and cheese, chicken, and a lemon pie for dessert.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Tim) (POS 's)) (NN family)) (VP (VBD had) (NP (NP (NN macaroni) (CC and) (NN cheese)) (, ,) (NP (NN chicken)) (, ,) (CC and) (NP (NP (DT a) (JJ lemon) (NN pie)) (PP (IN for) (NP (NN dessert)))))) (. .)))", 'lemma': [(u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'family', u'family', u'NN'), (u'had', u'have', u'VBD'), (u'macaroni', u'macaroni', u'NN'), (u'and', u'and', u'CC'), (u'cheese', u'cheese', u'NN'), (u',', u',', u','), (u'chicken', u'chicken', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'a', u'a', u'DT'), (u'lemon', u'lemon', u'JJ'), (u'pie', u'pie', u'NN'), (u'for', u'for', u'IN'), (u'dessert', u'dessert', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', "'s", 'family', 'had', 'macaroni', 'and', 'cheese', ',', 'chicken', ',', 'and', 'a', 'lemon', 'pie', 'for', 'dessert', '.']}, {'string': " Tim 's family had chicken salad, and lemon pie for dessert.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Tim) (POS 's)) (NN family)) (VP (VBD had) (NP (NP (NN chicken) (NN salad)) (, ,) (CC and) (NP (NP (JJ lemon) (NN pie)) (PP (IN for) (NP (NN dessert)))))) (. .)))", 'lemma': [(u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'family', u'family', u'NN'), (u'had', u'have', u'VBD'), (u'chicken', u'chicken', u'NN'), (u'salad', u'salad', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'lemon', u'lemon', u'JJ'), (u'pie', u'pie', u'NN'), (u'for', u'for', u'IN'), (u'dessert', u'dessert', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', "'s", 'family', 'had', 'chicken', 'salad', ',', 'and', 'lemon', 'pie', 'for', 'dessert', '.']}], 'mode': 0}, {'question': {'string': ' What was the water like when the family reached the beach?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (DT the) (NN water)) (PP (IN like) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN family)) (VP (VBD reached) (NP (DT the) (NN beach)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'water', u'water', u'NN'), (u'like', u'like', u'IN'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'family', u'family', u'NN'), (u'reached', u'reach', u'VBD'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'water', 'like', 'when', 'the', 'family', 'reached', 'the', 'beach', '?']}, 'answers': [{'string': " The water was warm, and made a lovely sound when it lapped up on the shore, and it also felt great on Tim 's toes.", 'parse': {'tree': "(ROOT (S (S (NP (DT The) (NN water)) (VP (VP (VBD was) (ADJP (JJ warm))) (, ,) (CC and) (VP (VBD made) (NP (DT a) (JJ lovely) (NN sound)) (SBAR (WHADVP (WRB when)) (S (NP (PRP it)) (VP (VBD lapped) (PRT (RP up)) (PP (IN on) (NP (DT the) (NN shore))))))))) (, ,) (CC and) (S (NP (PRP it)) (ADVP (RB also)) (VP (VBD felt) (ADJP (JJ great)) (PP (IN on) (NP (NP (NNP Tim) (POS 's)) (NNS toes))))) (. .)))", 'lemma': [(u'The', u'the', u'DT'), (u'water', u'water', u'NN'), (u'was', u'be', u'VBD'), (u'warm', u'warm', u'JJ'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'made', u'make', u'VBD'), (u'a', u'a', u'DT'), (u'lovely', u'lovely', u'JJ'), (u'sound', u'sound', u'NN'), (u'when', u'when', u'WRB'), (u'it', u'it', u'PRP'), (u'lapped', u'lap', u'VBD'), (u'up', u'up', u'RP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'shore', u'shore', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'it', u'it', u'PRP'), (u'also', u'also', u'RB'), (u'felt', u'feel', u'VBD'), (u'great', u'great', u'JJ'), (u'on', u'on', u'IN'), (u'Tim', u'Tim', u'NNP'), (u"'s", u"'s", u'POS'), (u'toes', u'toe', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'water', 'was', 'warm', ',', 'and', 'made', 'a', 'lovely', 'sound', 'when', 'it', 'lapped', 'up', 'on', 'the', 'shore', ',', 'and', 'it', 'also', 'felt', 'great', 'on', 'Tim', "'s", 'toes', '.']}, {'string': ' The water was hot when they went swimming.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN water)) (VP (VBD was) (ADJP (JJ hot)) (SBAR (WHADVP (WRB when)) (S (NP (PRP they)) (VP (VBD went) (NP (NN swimming)))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'water', u'water', u'NN'), (u'was', u'be', u'VBD'), (u'hot', u'hot', u'JJ'), (u'when', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'went', u'go', u'VBD'), (u'swimming', u'swimming', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'water', 'was', 'hot', 'when', 'they', 'went', 'swimming', '.']}, {'string': ' The water was full of seaweed.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN water)) (VP (VBD was) (ADJP (JJ full) (PP (IN of) (NP (NN seaweed))))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'water', u'water', u'NN'), (u'was', u'be', u'VBD'), (u'full', u'full', u'JJ'), (u'of', u'of', u'IN'), (u'seaweed', u'seaweed', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'water', 'was', 'full', 'of', 'seaweed', '.']}, {'string': ' The water was cold.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN water)) (VP (VBD was) (ADJP (JJ cold))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'water', u'water', u'NN'), (u'was', u'be', u'VBD'), (u'cold', u'cold', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'water', 'was', 'cold', '.']}], 'mode': 0}]}
{'sentences': [{'string': ' Molly likes animals.', 'parse': {'tree': '(ROOT (S (NP (NNP Molly)) (VP (VBZ likes) (NP (NNS animals))) (. .)))', 'lemma': [(u'Molly', u'Molly', u'NNP'), (u'likes', u'like', u'VBZ'), (u'animals', u'animal', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Molly', 'likes', 'animals', '.']}, {'string': ' She has a cat.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (DT a) (NN cat))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'cat', u'cat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'a', 'cat', '.']}, {'string': ' She has a dog.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (DT a) (NN dog))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'a', 'dog', '.']}, {'string': ' She has a bird.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (DT a) (NN bird))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'bird', u'bird', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'a', 'bird', '.']}, {'string': ' She has a hamster.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (DT a) (NN hamster))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'hamster', u'hamster', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'a', 'hamster', '.']}, {'string': ' She has a bunny.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ has) (NP (DT a) (NN bunny))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'bunny', u'bunny', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'has', 'a', 'bunny', '.']}, {'string': " Her cat 's name is Kitty.", 'parse': {'tree': "(ROOT (S (NP (NP (PRP$ Her) (NN cat) (POS 's)) (NN name)) (VP (VBZ is) (ADJP (JJ Kitty))) (. .)))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'cat', u'cat', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'Kitty', u'kitty', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'cat', "'s", 'name', 'is', 'Kitty', '.']}, {'string': " Her dog 's name is Spike.", 'parse': {'tree': "(ROOT (S (NP (NP (PRP$ Her) (NN dog) (POS 's)) (NN name)) (VP (VBZ is) (ADJP (JJ Spike))) (. .)))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'dog', u'dog', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'Spike', u'spike', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'dog', "'s", 'name', 'is', 'Spike', '.']}, {'string': " Her bird 's name is Polly.", 'parse': {'tree': "(ROOT (S (NP (NP (PRP$ Her) (NN bird) (POS 's)) (NN name)) (VP (VBZ is) (NP (NNP Polly))) (. .)))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'bird', u'bird', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'Polly', u'Polly', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'bird', "'s", 'name', 'is', 'Polly', '.']}, {'string': " Her hamster 's name is Barry.", 'parse': {'tree': "(ROOT (S (NP (NP (PRP$ Her) (NN hamster) (POS 's)) (NN name)) (VP (VBZ is) (NP (NNP Barry))) (. .)))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'hamster', u'hamster', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'Barry', u'Barry', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'hamster', "'s", 'name', 'is', 'Barry', '.']}, {'string': " Her bunny 's name is Snowball.", 'parse': {'tree': "(ROOT (S (NP (NP (PRP$ Her) (NN bunny) (POS 's)) (NN name)) (VP (VBZ is) (NP (NNP Snowball))) (. .)))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'bunny', u'bunny', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'is', u'be', u'VBZ'), (u'Snowball', u'Snowball', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'bunny', "'s", 'name', 'is', 'Snowball', '.']}, {'string': ' Kitty plays with yarn.', 'parse': {'tree': '(ROOT (S (NP (NNP Kitty)) (VP (VBZ plays) (PP (IN with) (NP (NN yarn)))) (. .)))', 'lemma': [(u'Kitty', u'Kitty', u'NNP'), (u'plays', u'play', u'VBZ'), (u'with', u'with', u'IN'), (u'yarn', u'yarn', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Kitty', 'plays', 'with', 'yarn', '.']}, {'string': ' Spike plays with a ball.', 'parse': {'tree': '(ROOT (S (NP (NNP Spike)) (VP (VBZ plays) (PP (IN with) (NP (DT a) (NN ball)))) (. .)))', 'lemma': [(u'Spike', u'Spike', u'NNP'), (u'plays', u'play', u'VBZ'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'ball', u'ball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Spike', 'plays', 'with', 'a', 'ball', '.']}, {'string': ' Polly plays in her cage.', 'parse': {'tree': '(ROOT (S (NP (NNP Polly)) (VP (VBZ plays) (PP (IN in) (NP (PRP$ her) (NN cage)))) (. .)))', 'lemma': [(u'Polly', u'Polly', u'NNP'), (u'plays', u'play', u'VBZ'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'cage', u'cage', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Polly', 'plays', 'in', 'her', 'cage', '.']}, {'string': ' Barry runs on his wheel.', 'parse': {'tree': '(ROOT (S (NP (NNP Barry)) (VP (VBZ runs) (PP (IN on) (NP (PRP$ his) (NN wheel)))) (. .)))', 'lemma': [(u'Barry', u'Barry', u'NNP'), (u'runs', u'run', u'VBZ'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'wheel', u'wheel', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Barry', 'runs', 'on', 'his', 'wheel', '.']}, {'string': ' Snowball eats carrots.', 'parse': {'tree': '(ROOT (S (NP (NNP Snowball)) (VP (VBZ eats) (NP (NNS carrots))) (. .)))', 'lemma': [(u'Snowball', u'Snowball', u'NNP'), (u'eats', u'eat', u'VBZ'), (u'carrots', u'carrot', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Snowball', 'eats', 'carrots', '.']}], 'questions': [{'question': {'string': " What does Molly 's cat play with?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NP (NNP Molly) (POS 's)) (NN cat)) (VP (VB play) (PP (IN with)))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Molly', u'Molly', u'NNP'), (u"'s", u"'s", u'POS'), (u'cat', u'cat', u'NN'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Molly', "'s", 'cat', 'play', 'with', '?']}, 'answers': [{'string': ' yarn', 'parse': {'tree': '(ROOT (NP (NN yarn)))', 'lemma': [(u'yarn', u'yarn', u'NN')]}, 'tokens': ['yarn']}, {'string': ' cage', 'parse': {'tree': '(ROOT (NP (NN cage)))', 'lemma': [(u'cage', u'cage', u'NN')]}, 'tokens': ['cage']}, {'string': ' wheel', 'parse': {'tree': '(ROOT (NP (NN wheel)))', 'lemma': [(u'wheel', u'wheel', u'NN')]}, 'tokens': ['wheel']}, {'string': ' ball', 'parse': {'tree': '(ROOT (NP (NN ball)))', 'lemma': [(u'ball', u'ball', u'NN')]}, 'tokens': ['ball']}], 'mode': 0}, {'question': {'string': ' What does Molly like?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Molly)) (VP (VB like))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Molly', u'Molly', u'NNP'), (u'like', u'like', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Molly', 'like', '?']}, 'answers': [{'string': ' animals', 'parse': {'tree': '(ROOT (NP (NNS animals)))', 'lemma': [(u'animals', u'animal', u'NNS')]}, 'tokens': ['animals']}, {'string': ' baseball', 'parse': {'tree': '(ROOT (NP (NN baseball)))', 'lemma': [(u'baseball', u'baseball', u'NN')]}, 'tokens': ['baseball']}, {'string': ' skating', 'parse': {'tree': '(ROOT (NP (NN skating)))', 'lemma': [(u'skating', u'skating', u'NN')]}, 'tokens': ['skating']}, {'string': ' singing', 'parse': {'tree': '(ROOT (NP (NN singing)))', 'lemma': [(u'singing', u'singing', u'NN')]}, 'tokens': ['singing']}], 'mode': 1}, {'question': {'string': " What is Molly 's dog 's name?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (NNP Molly) (POS 's)) (NN dog) (POS 's)) (NN name))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'Molly', u'Molly', u'NNP'), (u"'s", u"'s", u'POS'), (u'dog', u'dog', u'NN'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'Molly', "'s", 'dog', "'s", 'name', '?']}, 'answers': [{'string': ' Spot', 'parse': {'tree': '(ROOT (NP (NNP Spot)))', 'lemma': [(u'Spot', u'Spot', u'NNP')]}, 'tokens': ['Spot']}, {'string': ' Spike', 'parse': {'tree': '(ROOT (NP (NNP Spike)))', 'lemma': [(u'Spike', u'Spike', u'NNP')]}, 'tokens': ['Spike']}, {'string': ' Tom', 'parse': {'tree': '(ROOT (NP (NNP Tom)))', 'lemma': [(u'Tom', u'Tom', u'NNP')]}, 'tokens': ['Tom']}, {'string': ' Tiger', 'parse': {'tree': '(ROOT (NP (NNP Tiger)))', 'lemma': [(u'Tiger', u'Tiger', u'NNP')]}, 'tokens': ['Tiger']}], 'mode': 1}, {'question': {'string': " What does Molly 's dog play with?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NP (NNP Molly) (POS 's)) (NN dog)) (VP (VB play) (PP (IN with)))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Molly', u'Molly', u'NNP'), (u"'s", u"'s", u'POS'), (u'dog', u'dog', u'NN'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Molly', "'s", 'dog', 'play', 'with', '?']}, 'answers': [{'string': ' ball', 'parse': {'tree': '(ROOT (NP (NN ball)))', 'lemma': [(u'ball', u'ball', u'NN')]}, 'tokens': ['ball']}, {'string': ' fish', 'parse': {'tree': '(ROOT (NP (NN fish)))', 'lemma': [(u'fish', u'fish', u'NN')]}, 'tokens': ['fish']}, {'string': ' mouse', 'parse': {'tree': '(ROOT (NP (NN mouse)))', 'lemma': [(u'mouse', u'mouse', u'NN')]}, 'tokens': ['mouse']}, {'string': ' paper', 'parse': {'tree': '(ROOT (NP (NN paper)))', 'lemma': [(u'paper', u'paper', u'NN')]}, 'tokens': ['paper']}], 'mode': 0}]}
{'sentences': [{'string': ' Joey got a German Shepherd for his birthday present.', 'parse': {'tree': '(ROOT (S (NP (NNP Joey)) (VP (VBD got) (NP (DT a) (JJ German) (NN Shepherd)) (PP (IN for) (NP (PRP$ his) (NN birthday) (NN present)))) (. .)))', 'lemma': [(u'Joey', u'Joey', u'NNP'), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'German', u'german', u'JJ'), (u'Shepherd', u'shepherd', u'NN'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'birthday', u'birthday', u'NN'), (u'present', u'present', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Joey', 'got', 'a', 'German', 'Shepherd', 'for', 'his', 'birthday', 'present', '.']}, {'string': ' He had never had any pets before, but was always excited to see the other dogs and cats in his neighborhood.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD had) (ADVP (RB never)) (VP (VBN had) (NP (DT any) (NNS pets)) (ADVP (RB before)))) (, ,) (CC but) (VP (VBD was) (ADVP (RB always)) (VP (VBN excited) (S (VP (TO to) (VP (VB see) (NP (DT the) (JJ other) (NNS dogs) (CC and) (NNS cats)) (PP (IN in) (NP (PRP$ his) (NN neighborhood))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'never', u'never', u'RB'), (u'had', u'have', u'VBN'), (u'any', u'any', u'DT'), (u'pets', u'pet', u'NNS'), (u'before', u'before', u'RB'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'was', u'be', u'VBD'), (u'always', u'always', u'RB'), (u'excited', u'excite', u'VBN'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'the', u'the', u'DT'), (u'other', u'other', u'JJ'), (u'dogs', u'dog', u'NNS'), (u'and', u'and', u'CC'), (u'cats', u'cat', u'NNS'), (u'in', u'in', u'IN'), (u'his', u'he', u'PRP$'), (u'neighborhood', u'neighborhood', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'never', 'had', 'any', 'pets', 'before', ',', 'but', 'was', 'always', 'excited', 'to', 'see', 'the', 'other', 'dogs', 'and', 'cats', 'in', 'his', 'neighborhood', '.']}, {'string': ' Since his birthday was in June, he spent a lot of time playing outside with his new puppy, which he named Max.', 'parse': {'tree': '(ROOT (S (SBAR (IN Since) (S (NP (PRP$ his) (NN birthday)) (VP (VBD was) (PP (IN in) (NP (NNP June)))))) (, ,) (NP (PRP he)) (VP (VBD spent) (NP (NP (DT a) (NN lot)) (PP (IN of) (NP (NN time) (NN playing)))) (PP (IN outside) (IN with) (NP (NP (PRP$ his) (JJ new) (NN puppy)) (, ,) (SBAR (WHNP (WDT which)) (S (NP (PRP he)) (VP (VBD named) (NP (NNP Max)))))))) (. .)))', 'lemma': [(u'Since', u'since', u'IN'), (u'his', u'he', u'PRP$'), (u'birthday', u'birthday', u'NN'), (u'was', u'be', u'VBD'), (u'in', u'in', u'IN'), (u'June', u'June', u'NNP'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'spent', u'spend', u'VBD'), (u'a', u'a', u'DT'), (u'lot', u'lot', u'NN'), (u'of', u'of', u'IN'), (u'time', u'time', u'NN'), (u'playing', u'playing', u'NN'), (u'outside', u'outside', u'IN'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'new', u'new', u'JJ'), (u'puppy', u'puppy', u'NN'), (u',', u',', u','), (u'which', u'which', u'WDT'), (u'he', u'he', u'PRP'), (u'named', u'name', u'VBD'), (u'Max', u'Max', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Since', 'his', 'birthday', 'was', 'in', 'June', ',', 'he', 'spent', 'a', 'lot', 'of', 'time', 'playing', 'outside', 'with', 'his', 'new', 'puppy', ',', 'which', 'he', 'named', 'Max', '.']}, {'string': ' Max and Joey would often run through fields in a game of chase.', 'parse': {'tree': '(ROOT (S (NP (NNP Max) (CC and) (NNP Joey)) (VP (MD would) (ADVP (RB often)) (VP (VB run) (PP (IN through) (NP (NP (NNS fields)) (PP (IN in) (NP (NP (DT a) (NN game)) (PP (IN of) (NP (NN chase))))))))) (. .)))', 'lemma': [(u'Max', u'Max', u'NNP'), (u'and', u'and', u'CC'), (u'Joey', u'Joey', u'NNP'), (u'would', u'would', u'MD'), (u'often', u'often', u'RB'), (u'run', u'run', u'VB'), (u'through', u'through', u'IN'), (u'fields', u'field', u'NNS'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'game', u'game', u'NN'), (u'of', u'of', u'IN'), (u'chase', u'chase', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Max', 'and', 'Joey', 'would', 'often', 'run', 'through', 'fields', 'in', 'a', 'game', 'of', 'chase', '.']}, {'string': ' They also liked to go through the small forest behind the house, making a game of hide and seek.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (RB also)) (VP (VBD liked) (S (VP (TO to) (VP (VB go) (PP (IN through) (NP (NP (DT the) (JJ small) (NN forest)) (PP (IN behind) (NP (DT the) (NN house)))))))) (, ,) (S (VP (VBG making) (NP (NP (DT a) (NN game)) (PP (IN of) (S (VP (VB hide) (CC and) (VB seek)))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'also', u'also', u'RB'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'through', u'through', u'IN'), (u'the', u'the', u'DT'), (u'small', u'small', u'JJ'), (u'forest', u'forest', u'NN'), (u'behind', u'behind', u'IN'), (u'the', u'the', u'DT'), (u'house', u'house', u'NN'), (u',', u',', u','), (u'making', u'make', u'VBG'), (u'a', u'a', u'DT'), (u'game', u'game', u'NN'), (u'of', u'of', u'IN'), (u'hide', u'hide', u'VB'), (u'and', u'and', u'CC'), (u'seek', u'seek', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'also', 'liked', 'to', 'go', 'through', 'the', 'small', 'forest', 'behind', 'the', 'house', ',', 'making', 'a', 'game', 'of', 'hide', 'and', 'seek', '.']}, {'string': ' They never went near the lake because Joey was afraid of water.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (RB never)) (VP (VBD went) (PP (IN near) (NP (DT the) (NN lake))) (SBAR (IN because) (S (NP (NNP Joey)) (VP (VBD was) (ADJP (JJ afraid) (PP (IN of) (NP (NN water)))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'never', u'never', u'RB'), (u'went', u'go', u'VBD'), (u'near', u'near', u'IN'), (u'the', u'the', u'DT'), (u'lake', u'lake', u'NN'), (u'because', u'because', u'IN'), (u'Joey', u'Joey', u'NNP'), (u'was', u'be', u'VBD'), (u'afraid', u'afraid', u'JJ'), (u'of', u'of', u'IN'), (u'water', u'water', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'never', 'went', 'near', 'the', 'lake', 'because', 'Joey', 'was', 'afraid', 'of', 'water', '.']}, {'string': " One day, Max hid a little too well and Joey could n't find him.", 'parse': {'tree': "(ROOT (S (S (NP (CD One) (NN day)) (, ,) (NP (NNP Max)) (VP (VBP hid) (NP (DT a) (JJ little)) (ADVP (RB too) (RB well)))) (CC and) (S (NP (NNP Joey)) (VP (MD could) (RB n't) (VP (VB find) (NP (PRP him))))) (. .)))", 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'Max', u'Max', u'NNP'), (u'hid', u'hide', u'VBP'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'too', u'too', u'RB'), (u'well', u'well', u'RB'), (u'and', u'and', u'CC'), (u'Joey', u'Joey', u'NNP'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'find', u'find', u'VB'), (u'him', u'he', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', ',', 'Max', 'hid', 'a', 'little', 'too', 'well', 'and', 'Joey', 'could', "n't", 'find', 'him', '.']}, {'string': ' Joey spent the afternoon looking for his German Shepherd where they often played, like the field and forest.', 'parse': {'tree': '(ROOT (S (NP (NNP Joey)) (VP (VBD spent) (NP (NP (DT the) (NN afternoon)) (VP (VBG looking) (PP (IN for) (NP (PRP$ his) (JJ German) (NN Shepherd))) (SBAR (WHADVP (WRB where)) (S (NP (PRP they)) (ADVP (RB often)) (VP (VBD played)))) (, ,) (PP (IN like) (NP (DT the) (NN field) (CC and) (NN forest)))))) (. .)))', 'lemma': [(u'Joey', u'Joey', u'NNP'), (u'spent', u'spend', u'VBD'), (u'the', u'the', u'DT'), (u'afternoon', u'afternoon', u'NN'), (u'looking', u'look', u'VBG'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'German', u'german', u'JJ'), (u'Shepherd', u'shepherd', u'NN'), (u'where', u'where', u'WRB'), (u'they', u'they', u'PRP'), (u'often', u'often', u'RB'), (u'played', u'play', u'VBD'), (u',', u',', u','), (u'like', u'like', u'IN'), (u'the', u'the', u'DT'), (u'field', u'field', u'NN'), (u'and', u'and', u'CC'), (u'forest', u'forest', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Joey', 'spent', 'the', 'afternoon', 'looking', 'for', 'his', 'German', 'Shepherd', 'where', 'they', 'often', 'played', ',', 'like', 'the', 'field', 'and', 'forest', '.']}, {'string': ' Joey was a shy boy who often read by himself, and Max was his best friend.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Joey)) (VP (VBD was) (NP (NP (DT a) (ADJP (JJ shy)) (NN boy)) (SBAR (WHNP (WP who)) (S (ADVP (RB often)) (VP (VBN read) (PP (IN by) (NP (PRP himself))))))))) (, ,) (CC and) (S (NP (NNP Max)) (VP (VBD was) (NP (PRP$ his) (JJS best) (NN friend)))) (. .)))', 'lemma': [(u'Joey', u'Joey', u'NNP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'shy', u'shy', u'JJ'), (u'boy', u'boy', u'NN'), (u'who', u'who', u'WP'), (u'often', u'often', u'RB'), (u'read', u'read', u'VBN'), (u'by', u'by', u'IN'), (u'himself', u'himself', u'PRP'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Max', u'Max', u'NNP'), (u'was', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Joey', 'was', 'a', 'shy', 'boy', 'who', 'often', 'read', 'by', 'himself', ',', 'and', 'Max', 'was', 'his', 'best', 'friend', '.']}, {'string': ' After dinner, he went to look for Max one last time before he had to take a bath and go to bed.', 'parse': {'tree': '(ROOT (S (PP (IN After) (NP (NN dinner))) (, ,) (NP (PRP he)) (VP (VBD went) (S (VP (TO to) (VP (VB look) (PP (IN for) (NP (NNP Max) (CD one))) (NP (JJ last) (NN time)) (SBAR (IN before) (S (NP (PRP he)) (VP (VBD had) (S (VP (TO to) (VP (VP (VB take) (NP (DT a) (NN bath))) (CC and) (VP (VB go) (PP (TO to) (NP (NN bed)))))))))))))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'dinner', u'dinner', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'look', u'look', u'VB'), (u'for', u'for', u'IN'), (u'Max', u'Max', u'NNP'), (u'one', u'one', u'CD'), (u'last', u'last', u'JJ'), (u'time', u'time', u'NN'), (u'before', u'before', u'IN'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'to', u'to', u'TO'), (u'take', u'take', u'VB'), (u'a', u'a', u'DT'), (u'bath', u'bath', u'NN'), (u'and', u'and', u'CC'), (u'go', u'go', u'VB'), (u'to', u'to', u'TO'), (u'bed', u'bed', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'dinner', ',', 'he', 'went', 'to', 'look', 'for', 'Max', 'one', 'last', 'time', 'before', 'he', 'had', 'to', 'take', 'a', 'bath', 'and', 'go', 'to', 'bed', '.']}, {'string': ' He heard some barking on the next street, so he ran to see if it was his puppy.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBD heard) (NP (DT some) (NN barking)) (PP (IN on) (NP (DT the) (JJ next) (NN street))))) (, ,) (IN so) (S (NP (PRP he)) (VP (VBD ran) (S (VP (TO to) (VP (VB see) (SBAR (IN if) (S (NP (PRP it)) (VP (VBD was) (NP (PRP$ his) (NN puppy)))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'heard', u'hear', u'VBD'), (u'some', u'some', u'DT'), (u'barking', u'barking', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'street', u'street', u'NN'), (u',', u',', u','), (u'so', u'so', u'IN'), (u'he', u'he', u'PRP'), (u'ran', u'run', u'VBD'), (u'to', u'to', u'TO'), (u'see', u'see', u'VB'), (u'if', u'if', u'IN'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'puppy', u'puppy', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'heard', 'some', 'barking', 'on', 'the', 'next', 'street', ',', 'so', 'he', 'ran', 'to', 'see', 'if', 'it', 'was', 'his', 'puppy', '.']}, {'string': ' Sure enough, he saw Max playing with a poodle.', 'parse': {'tree': '(ROOT (S (ADVP (RB Sure) (RB enough)) (, ,) (NP (PRP he)) (VP (VBD saw) (NP (NP (NNP Max)) (VP (VBG playing) (PP (IN with) (NP (DT a) (NN poodle)))))) (. .)))', 'lemma': [(u'Sure', u'sure', u'RB'), (u'enough', u'enough', u'RB'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'saw', u'see', u'VBD'), (u'Max', u'Max', u'NNP'), (u'playing', u'play', u'VBG'), (u'with', u'with', u'IN'), (u'a', u'a', u'DT'), (u'poodle', u'poodle', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sure', 'enough', ',', 'he', 'saw', 'Max', 'playing', 'with', 'a', 'poodle', '.']}, {'string': ' The dogs were having so much fun.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS dogs)) (VP (VBD were) (VP (VBG having) (NP (ADJP (RB so) (JJ much)) (NN fun)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'dogs', u'dog', u'NNS'), (u'were', u'be', u'VBD'), (u'having', u'have', u'VBG'), (u'so', u'so', u'RB'), (u'much', u'much', u'JJ'), (u'fun', u'fun', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'dogs', 'were', 'having', 'so', 'much', 'fun', '.']}, {'string': ' Joey brought Max home, happy that he had his puppy back.', 'parse': {'tree': '(ROOT (S (NP (NNP Joey)) (VP (VBD brought) (NP (NNP Max) (NN home)) (, ,) (S (ADJP (JJ happy) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD had) (NP (PRP$ his) (NN puppy)) (ADVP (RB back)))))))) (. .)))', 'lemma': [(u'Joey', u'Joey', u'NNP'), (u'brought', u'bring', u'VBD'), (u'Max', u'Max', u'NNP'), (u'home', u'home', u'NN'), (u',', u',', u','), (u'happy', u'happy', u'JJ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'his', u'he', u'PRP$'), (u'puppy', u'puppy', u'NN'), (u'back', u'back', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Joey', 'brought', 'Max', 'home', ',', 'happy', 'that', 'he', 'had', 'his', 'puppy', 'back', '.']}, {'string': ' Max seemed to be happy to have his human by his side as well as a new doggy friend.', 'parse': {'tree': '(ROOT (S (NP (NNP Max)) (VP (VBD seemed) (S (VP (TO to) (VP (VB be) (ADJP (JJ happy) (S (VP (TO to) (VP (VB have) (NP (PRP$ his) (NN human)) (PP (IN by) (NP (NP (PRP$ his) (NN side)) (CONJP (RB as) (RB well) (IN as)) (NP (DT a) (JJ new) (NN doggy) (NN friend)))))))))))) (. .)))', 'lemma': [(u'Max', u'Max', u'NNP'), (u'seemed', u'seem', u'VBD'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'happy', u'happy', u'JJ'), (u'to', u'to', u'TO'), (u'have', u'have', u'VB'), (u'his', u'he', u'PRP$'), (u'human', u'human', u'NN'), (u'by', u'by', u'IN'), (u'his', u'he', u'PRP$'), (u'side', u'side', u'NN'), (u'as', u'as', u'RB'), (u'well', u'well', u'RB'), (u'as', u'as', u'IN'), (u'a', u'a', u'DT'), (u'new', u'new', u'JJ'), (u'doggy', u'doggy', u'NN'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Max', 'seemed', 'to', 'be', 'happy', 'to', 'have', 'his', 'human', 'by', 'his', 'side', 'as', 'well', 'as', 'a', 'new', 'doggy', 'friend', '.']}, {'string': " All summer long, Joey took Max to the poodle 's house so they could play without having to worry about losing his present.", 'parse': {'tree': "(ROOT (S (NP (DT All) (NN summer) (RB long)) (, ,) (NP (NNP Joey)) (VP (VBD took) (NP (NNP Max)) (PP (TO to) (NP (NP (DT the) (NN poodle) (POS 's)) (NN house))) (SBAR (IN so) (S (NP (PRP they)) (VP (MD could) (VP (VB play) (PP (IN without) (S (VP (VBG having) (S (VP (TO to) (VP (VB worry) (PP (IN about) (S (VP (VBG losing) (NP (PRP$ his) (NN present)))))))))))))))) (. .)))", 'lemma': [(u'All', u'all', u'DT'), (u'summer', u'summer', u'NN'), (u'long', u'long', u'RB'), (u',', u',', u','), (u'Joey', u'Joey', u'NNP'), (u'took', u'take', u'VBD'), (u'Max', u'Max', u'NNP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'poodle', u'poodle', u'NN'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN'), (u'so', u'so', u'IN'), (u'they', u'they', u'PRP'), (u'could', u'could', u'MD'), (u'play', u'play', u'VB'), (u'without', u'without', u'IN'), (u'having', u'have', u'VBG'), (u'to', u'to', u'TO'), (u'worry', u'worry', u'VB'), (u'about', u'about', u'IN'), (u'losing', u'lose', u'VBG'), (u'his', u'he', u'PRP$'), (u'present', u'present', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['All', 'summer', 'long', ',', 'Joey', 'took', 'Max', 'to', 'the', 'poodle', "'s", 'house', 'so', 'they', 'could', 'play', 'without', 'having', 'to', 'worry', 'about', 'losing', 'his', 'present', '.']}], 'questions': [{'question': {'string': ' Where did Joey look for his dog?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBD did) (NP (NNP Joey)) (VP (VB look) (PP (IN for) (NP (PRP$ his) (NN dog))))) (. ?)))', 'lemma': [(u'Where', u'where', u'WRB'), (u'did', u'do', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u'look', u'look', u'VB'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'dog', u'dog', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'did', 'Joey', 'look', 'for', 'his', 'dog', '?']}, 'answers': [{'string': " At his friend 's house", 'parse': {'tree': "(ROOT (PP (IN At) (NP (NP (PRP$ his) (NN friend) (POS 's)) (NN house))))", 'lemma': [(u'At', u'at', u'IN'), (u'his', u'he', u'PRP$'), (u'friend', u'friend', u'NN'), (u"'s", u"'s", u'POS'), (u'house', u'house', u'NN')]}, 'tokens': ['At', 'his', 'friend', "'s", 'house']}, {'string': ' The field, forest and neighborhood', 'parse': {'tree': '(ROOT (NP (NP (DT The) (NN field)) (, ,) (NP (NN forest) (CC and) (NN neighborhood))))', 'lemma': [(u'The', u'the', u'DT'), (u'field', u'field', u'NN'), (u',', u',', u','), (u'forest', u'forest', u'NN'), (u'and', u'and', u'CC'), (u'neighborhood', u'neighborhood', u'NN')]}, 'tokens': ['The', 'field', ',', 'forest', 'and', 'neighborhood']}, {'string': ' In the garage', 'parse': {'tree': '(ROOT (PP (IN In) (NP (DT the) (NN garage))))', 'lemma': [(u'In', u'in', u'IN'), (u'the', u'the', u'DT'), (u'garage', u'garage', u'NN')]}, 'tokens': ['In', 'the', 'garage']}, {'string': ' By the lake', 'parse': {'tree': '(ROOT (PP (IN By) (NP (DT the) (NN lake))))', 'lemma': [(u'By', u'by', u'IN'), (u'the', u'the', u'DT'), (u'lake', u'lake', u'NN')]}, 'tokens': ['By', 'the', 'lake']}], 'mode': 0}, {'question': {'string': ' Was Max happy after he was found?', 'parse': {'tree': '(ROOT (SQ (VBD Was) (NP (NNP Max) (NNP happy)) (SBAR (IN after) (S (NP (PRP he)) (VP (VBD was) (VP (VBN found))))) (. ?)))', 'lemma': [(u'Was', u'be', u'VBD'), (u'Max', u'Max', u'NNP'), (u'happy', u'happy', u'NNP'), (u'after', u'after', u'IN'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'found', u'find', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['Was', 'Max', 'happy', 'after', 'he', 'was', 'found', '?']}, 'answers': [{'string': ' Yes, he had his human friend back and made a dog friend.', 'parse': {'tree': '(ROOT (S (INTJ (UH Yes)) (, ,) (NP (PRP he)) (VP (VP (VBD had) (NP (PRP$ his) (JJ human) (NN friend)) (ADVP (RB back))) (CC and) (VP (VBD made) (NP (DT a) (NN dog) (NN friend)))) (. .)))', 'lemma': [(u'Yes', u'yes', u'UH'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'his', u'he', u'PRP$'), (u'human', u'human', u'JJ'), (u'friend', u'friend', u'NN'), (u'back', u'back', u'RB'), (u'and', u'and', u'CC'), (u'made', u'make', u'VBD'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'friend', u'friend', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Yes', ',', 'he', 'had', 'his', 'human', 'friend', 'back', 'and', 'made', 'a', 'dog', 'friend', '.']}, {'string': ' Yes, he was lost and glad to be home', 'parse': {'tree': '(ROOT (S (ADVP (RB Yes)) (, ,) (NP (PRP he)) (VP (VBD was) (UCP (VP (VBN lost)) (CC and) (ADJP (JJ glad) (S (VP (TO to) (VP (VB be) (NP (NN home))))))))))', 'lemma': [(u'Yes', u'yes', u'RB'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'lost', u'lose', u'VBN'), (u'and', u'and', u'CC'), (u'glad', u'glad', u'JJ'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'home', u'home', u'NN')]}, 'tokens': ['Yes', ',', 'he', 'was', 'lost', 'and', 'glad', 'to', 'be', 'home']}, {'string': ' Yes, because he could go swimming with Joey again', 'parse': {'tree': '(ROOT (PRN (ADVP (RB Yes)) (, ,) (SBAR (IN because) (S (NP (PRP he)) (VP (MD could) (VP (VB go) (NP (NN swimming)) (PP (IN with) (NP (NNP Joey))) (ADVP (RB again))))))))', 'lemma': [(u'Yes', u'yes', u'RB'), (u',', u',', u','), (u'because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'go', u'go', u'VB'), (u'swimming', u'swimming', u'NN'), (u'with', u'with', u'IN'), (u'Joey', u'Joey', u'NNP'), (u'again', u'again', u'RB')]}, 'tokens': ['Yes', ',', 'because', 'he', 'could', 'go', 'swimming', 'with', 'Joey', 'again']}, {'string': " No, he did n't like Joey so he ran away", 'parse': {'tree': "(ROOT (S (ADVP (RB No)) (, ,) (NP (PRP he)) (VP (VBD did) (RB n't) (VP (VB like) (NP (NNP Joey)) (SBAR (IN so) (S (NP (PRP he)) (VP (VBD ran) (PRT (RP away)))))))))", 'lemma': [(u'No', u'no', u'RB'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'Joey', u'Joey', u'NNP'), (u'so', u'so', u'IN'), (u'he', u'he', u'PRP'), (u'ran', u'run', u'VBD'), (u'away', u'away', u'RP')]}, 'tokens': ['No', ',', 'he', 'did', "n't", 'like', 'Joey', 'so', 'he', 'ran', 'away']}], 'mode': 0}, {'question': {'string': " When was Joey 's birthday?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB When)) (SQ (VBD was) (NP (NP (NNP Joey) (POS 's)) (NN birthday))) (. ?)))", 'lemma': [(u'When', u'when', u'WRB'), (u'was', u'be', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u"'s", u"'s", u'POS'), (u'birthday', u'birthday', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['When', 'was', 'Joey', "'s", 'birthday', '?']}, 'answers': [{'string': ' Summer', 'parse': {'tree': '(ROOT (NP (NNP Summer)))', 'lemma': [(u'Summer', u'Summer', u'NNP')]}, 'tokens': ['Summer']}, {'string': ' Winter', 'parse': {'tree': '(ROOT (NP (NNP Winter)))', 'lemma': [(u'Winter', u'Winter', u'NNP')]}, 'tokens': ['Winter']}, {'string': ' Fall', 'parse': {'tree': '(ROOT (NP (NN Fall)))', 'lemma': [(u'Fall', u'fall', u'NN')]}, 'tokens': ['Fall']}, {'string': ' Spring', 'parse': {'tree': '(ROOT (NP (NNP Spring)))', 'lemma': [(u'Spring', u'Spring', u'NNP')]}, 'tokens': ['Spring']}], 'mode': 1}, {'question': {'string': " What was Joey 's birthday present?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (NNP Joey) (POS 's)) (NN birthday) (NN present))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'Joey', u'Joey', u'NNP'), (u"'s", u"'s", u'POS'), (u'birthday', u'birthday', u'NN'), (u'present', u'present', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'Joey', "'s", 'birthday', 'present', '?']}, 'answers': [{'string': ' A German Shepherd', 'parse': {'tree': '(ROOT (NP (DT A) (NNP German) (NNP Shepherd)))', 'lemma': [(u'A', u'a', u'DT'), (u'German', u'German', u'NNP'), (u'Shepherd', u'Shepherd', u'NNP')]}, 'tokens': ['A', 'German', 'Shepherd']}, {'string': ' Books', 'parse': {'tree': '(ROOT (NP (NNP Books)))', 'lemma': [(u'Books', u'Books', u'NNP')]}, 'tokens': ['Books']}, {'string': ' A Cat', 'parse': {'tree': '(ROOT (NP (NNP A) (NNP Cat)))', 'lemma': [(u'A', u'A', u'NNP'), (u'Cat', u'Cat', u'NNP')]}, 'tokens': ['A', 'Cat']}, {'string': ' A Poodle', 'parse': {'tree': '(ROOT (NP (NNP A) (NNP Poodle)))', 'lemma': [(u'A', u'A', u'NNP'), (u'Poodle', u'Poodle', u'NNP')]}, 'tokens': ['A', 'Poodle']}], 'mode': 1}]}
{'sentences': [{'string': ' Luke takes his dog for a walk.', 'parse': {'tree': '(ROOT (S (NP (NNP Luke)) (VP (VBZ takes) (NP (PRP$ his) (NN dog)) (PP (IN for) (NP (DT a) (NN walk)))) (. .)))', 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'takes', u'take', u'VBZ'), (u'his', u'he', u'PRP$'), (u'dog', u'dog', u'NN'), (u'for', u'for', u'IN'), (u'a', u'a', u'DT'), (u'walk', u'walk', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'takes', 'his', 'dog', 'for', 'a', 'walk', '.']}, {'string': ' Luke has many pets.', 'parse': {'tree': '(ROOT (S (NP (NNP Luke)) (VP (VBZ has) (NP (JJ many) (NNS pets))) (. .)))', 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'has', u'have', u'VBZ'), (u'many', u'many', u'JJ'), (u'pets', u'pet', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'has', 'many', 'pets', '.']}, {'string': ' He has a turtle named Bob.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (NP (NP (DT a) (NN turtle)) (VP (VBN named) (NP (NNP Bob))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'turtle', u'turtle', u'NN'), (u'named', u'name', u'VBN'), (u'Bob', u'Bob', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'a', 'turtle', 'named', 'Bob', '.']}, {'string': ' He has a cat named Freckles.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (NP (NP (DT a) (NN cat)) (VP (VBN named) (NP (NNS Freckles))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'cat', u'cat', u'NN'), (u'named', u'name', u'VBN'), (u'Freckles', u'freckle', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'a', 'cat', 'named', 'Freckles', '.']}, {'string': ' He has a bird named squeaky.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (NP (NP (DT a) (NN bird)) (VP (VBN named) (S (ADJP (JJ squeaky)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'bird', u'bird', u'NN'), (u'named', u'name', u'VBN'), (u'squeaky', u'squeaky', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'a', 'bird', 'named', 'squeaky', '.']}, {'string': ' The dog is named Sparky.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN dog)) (VP (VBZ is) (VP (VBN named) (ADVP (RB Sparky)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'dog', u'dog', u'NN'), (u'is', u'be', u'VBZ'), (u'named', u'name', u'VBN'), (u'Sparky', u'sparky', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'dog', 'is', 'named', 'Sparky', '.']}, {'string': ' Sparky loves to go on walks with Luke.', 'parse': {'tree': '(ROOT (S (NP (NNP Sparky)) (VP (VBZ loves) (S (VP (TO to) (VP (VB go) (PP (IN on) (NP (NNP walks))) (PP (IN with) (NP (NNP Luke))))))) (. .)))', 'lemma': [(u'Sparky', u'Sparky', u'NNP'), (u'loves', u'love', u'VBZ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'on', u'on', u'IN'), (u'walks', u'walks', u'NNP'), (u'with', u'with', u'IN'), (u'Luke', u'Luke', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Sparky', 'loves', 'to', 'go', 'on', 'walks', 'with', 'Luke', '.']}, {'string': ' Sparky jumps around in front of the doorway.', 'parse': {'tree': '(ROOT (S (NP (NNP Sparky)) (VP (VBZ jumps) (PRT (RP around)) (PP (IN in) (NP (NP (NN front)) (PP (IN of) (NP (DT the) (NN doorway)))))) (. .)))', 'lemma': [(u'Sparky', u'Sparky', u'NNP'), (u'jumps', u'jump', u'VBZ'), (u'around', u'around', u'RP'), (u'in', u'in', u'IN'), (u'front', u'front', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'doorway', u'doorway', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sparky', 'jumps', 'around', 'in', 'front', 'of', 'the', 'doorway', '.']}, {'string': ' Luke puts on his hat, coat, and gloves because it is chilly outside.', 'parse': {'tree': '(ROOT (S (NP (NNP Luke)) (VP (VBZ puts) (PP (IN on) (NP (NP (PRP$ his) (NN hat)) (, ,) (NP (NN coat)) (, ,) (CC and) (NP (NNS gloves)))) (SBAR (IN because) (S (NP (PRP it)) (VP (VBZ is) (NP (JJ chilly) (NN outside)))))) (. .)))', 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'puts', u'put', u'VBZ'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'hat', u'hat', u'NN'), (u',', u',', u','), (u'coat', u'coat', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'gloves', u'glove', u'NNS'), (u'because', u'because', u'IN'), (u'it', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'chilly', u'chilly', u'JJ'), (u'outside', u'outside', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'puts', 'on', 'his', 'hat', ',', 'coat', ',', 'and', 'gloves', 'because', 'it', 'is', 'chilly', 'outside', '.']}, {'string': " Luke puts a leash around Sparky 's neck.", 'parse': {'tree': "(ROOT (S (NP (NNP Luke)) (VP (VBZ puts) (NP (NP (DT a) (NN leash)) (PP (IN around) (NP (NP (NNP Sparky) (POS 's)) (NN neck))))) (. .)))", 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'puts', u'put', u'VBZ'), (u'a', u'a', u'DT'), (u'leash', u'leash', u'NN'), (u'around', u'around', u'IN'), (u'Sparky', u'Sparky', u'NNP'), (u"'s", u"'s", u'POS'), (u'neck', u'neck', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'puts', 'a', 'leash', 'around', 'Sparky', "'s", 'neck', '.']}, {'string': ' Luke opens the door and they are ready to go.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Luke)) (VP (VBZ opens) (NP (DT the) (NN door)))) (CC and) (S (NP (PRP they)) (VP (VBP are) (ADJP (JJ ready) (S (VP (TO to) (VP (VB go))))))) (. .)))', 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'opens', u'open', u'VBZ'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'and', u'and', u'CC'), (u'they', u'they', u'PRP'), (u'are', u'be', u'VBP'), (u'ready', u'ready', u'JJ'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'opens', 'the', 'door', 'and', 'they', 'are', 'ready', 'to', 'go', '.']}, {'string': ' Luke walks up Vine Street to the stop sign.', 'parse': {'tree': '(ROOT (S (NP (NNP Luke)) (VP (VBZ walks) (PRT (RP up)) (NP (NP (NNP Vine) (NNP Street)) (PP (TO to) (NP (DT the) (NN stop) (NN sign))))) (. .)))', 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'walks', u'walk', u'VBZ'), (u'up', u'up', u'RP'), (u'Vine', u'Vine', u'NNP'), (u'Street', u'Street', u'NNP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'stop', u'stop', u'NN'), (u'sign', u'sign', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'walks', 'up', 'Vine', 'Street', 'to', 'the', 'stop', 'sign', '.']}, {'string': ' The stop sign is red.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN stop) (NN sign)) (VP (VBZ is) (ADJP (JJ red))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'stop', u'stop', u'NN'), (u'sign', u'sign', u'NN'), (u'is', u'be', u'VBZ'), (u'red', u'red', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'stop', 'sign', 'is', 'red', '.']}, {'string': ' Luke looks both ways and then walks across Willow street with Sparky.', 'parse': {'tree': '(ROOT (S (NP (NNP Luke)) (VP (VP (VBZ looks) (NP (DT both) (NNS ways))) (CC and) (VP (ADVP (RB then)) (VBZ walks) (PP (IN across) (NP (NNP Willow) (NN street))) (PP (IN with) (NP (NNP Sparky))))) (. .)))', 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'looks', u'look', u'VBZ'), (u'both', u'both', u'DT'), (u'ways', u'way', u'NNS'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'walks', u'walk', u'VBZ'), (u'across', u'across', u'IN'), (u'Willow', u'Willow', u'NNP'), (u'street', u'street', u'NN'), (u'with', u'with', u'IN'), (u'Sparky', u'Sparky', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'looks', 'both', 'ways', 'and', 'then', 'walks', 'across', 'Willow', 'street', 'with', 'Sparky', '.']}, {'string': ' Luke and Sparky walk up the hill.', 'parse': {'tree': '(ROOT (S (NP (NNP Luke) (CC and) (NNP Sparky)) (VP (VBP walk) (PRT (RP up)) (NP (DT the) (NN hill))) (. .)))', 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'and', u'and', u'CC'), (u'Sparky', u'Sparky', u'NNP'), (u'walk', u'walk', u'VBP'), (u'up', u'up', u'RP'), (u'the', u'the', u'DT'), (u'hill', u'hill', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'and', 'Sparky', 'walk', 'up', 'the', 'hill', '.']}, {'string': ' At the top of the hill, Luke and Sparky turn left.', 'parse': {'tree': '(ROOT (S (PP (IN At) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT the) (NN hill))))) (, ,) (NP (NNP Luke) (CC and) (NNP Sparky)) (VP (VBP turn) (ADVP (RB left))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'the', u'the', u'DT'), (u'top', u'top', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'hill', u'hill', u'NN'), (u',', u',', u','), (u'Luke', u'Luke', u'NNP'), (u'and', u'and', u'CC'), (u'Sparky', u'Sparky', u'NNP'), (u'turn', u'turn', u'VBP'), (u'left', u'left', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'the', 'top', 'of', 'the', 'hill', ',', 'Luke', 'and', 'Sparky', 'turn', 'left', '.']}, {'string': ' They walk downhill on First Street.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP walk) (ADVP (RB downhill)) (PP (IN on) (NP (NNP First) (NNP Street)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'walk', u'walk', u'VBP'), (u'downhill', u'downhill', u'RB'), (u'on', u'on', u'IN'), (u'First', u'First', u'NNP'), (u'Street', u'Street', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'walk', 'downhill', 'on', 'First', 'Street', '.']}, {'string': ' At the bottom of the hill, they see a small pond.', 'parse': {'tree': '(ROOT (S (PP (IN At) (NP (NP (DT the) (NN bottom)) (PP (IN of) (NP (DT the) (NN hill))))) (, ,) (NP (PRP they)) (VP (VBP see) (NP (DT a) (JJ small) (NN pond))) (. .)))', 'lemma': [(u'At', u'at', u'IN'), (u'the', u'the', u'DT'), (u'bottom', u'bottom', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'hill', u'hill', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'see', u'see', u'VBP'), (u'a', u'a', u'DT'), (u'small', u'small', u'JJ'), (u'pond', u'pond', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['At', 'the', 'bottom', 'of', 'the', 'hill', ',', 'they', 'see', 'a', 'small', 'pond', '.']}, {'string': ' The pond is on Elm Street.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN pond)) (VP (VBZ is) (PP (IN on) (NP (NNP Elm) (NNP Street)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'is', u'be', u'VBZ'), (u'on', u'on', u'IN'), (u'Elm', u'Elm', u'NNP'), (u'Street', u'Street', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'pond', 'is', 'on', 'Elm', 'Street', '.']}, {'string': ' Sparky is very happy.', 'parse': {'tree': '(ROOT (S (NP (NNP Sparky)) (VP (VBZ is) (ADJP (RB very) (JJ happy))) (. .)))', 'lemma': [(u'Sparky', u'Sparky', u'NNP'), (u'is', u'be', u'VBZ'), (u'very', u'very', u'RB'), (u'happy', u'happy', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Sparky', 'is', 'very', 'happy', '.']}, {'string': ' Swimming in the pond are ducks.', 'parse': {'tree': '(ROOT (S (NP (NP (NN Swimming)) (PP (IN in) (NP (DT the) (NN pond)))) (VP (VBP are) (NP (NNS ducks))) (. .)))', 'lemma': [(u'Swimming', u'swimming', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'are', u'be', u'VBP'), (u'ducks', u'duck', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Swimming', 'in', 'the', 'pond', 'are', 'ducks', '.']}, {'string': ' There are white ducks and brown ducks.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBP are) (NP (NP (JJ white) (NNS ducks)) (CC and) (NP (JJ brown) (NNS ducks)))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'are', u'be', u'VBP'), (u'white', u'white', u'JJ'), (u'ducks', u'duck', u'NNS'), (u'and', u'and', u'CC'), (u'brown', u'brown', u'JJ'), (u'ducks', u'duck', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'are', 'white', 'ducks', 'and', 'brown', 'ducks', '.']}, {'string': ' There are baby ducks, too.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBP are) (NP (NN baby) (NNS ducks)) (, ,) (ADVP (RB too))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'are', u'be', u'VBP'), (u'baby', u'baby', u'NN'), (u'ducks', u'duck', u'NNS'), (u',', u',', u','), (u'too', u'too', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'are', 'baby', 'ducks', ',', 'too', '.']}, {'string': ' Sparky walks all around the pond.', 'parse': {'tree': '(ROOT (S (NP (NNP Sparky)) (VP (VBZ walks) (NP (NP (DT all)) (PP (IN around) (NP (DT the) (NN pond))))) (. .)))', 'lemma': [(u'Sparky', u'Sparky', u'NNP'), (u'walks', u'walk', u'VBZ'), (u'all', u'all', u'DT'), (u'around', u'around', u'IN'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sparky', 'walks', 'all', 'around', 'the', 'pond', '.']}, {'string': ' Luke watches the ducks as they swim around the pond.', 'parse': {'tree': '(ROOT (S (NP (NNP Luke)) (VP (VBZ watches) (NP (DT the) (NNS ducks)) (SBAR (IN as) (S (NP (PRP they)) (VP (VBP swim) (PP (IN around) (NP (DT the) (NN pond))))))) (. .)))', 'lemma': [(u'Luke', u'Luke', u'NNP'), (u'watches', u'watch', u'VBZ'), (u'the', u'the', u'DT'), (u'ducks', u'duck', u'NNS'), (u'as', u'as', u'IN'), (u'they', u'they', u'PRP'), (u'swim', u'swim', u'VBP'), (u'around', u'around', u'IN'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Luke', 'watches', 'the', 'ducks', 'as', 'they', 'swim', 'around', 'the', 'pond', '.']}, {'string': ' When it is time to go, Luke leads Sparky back to the sidewalk.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP it)) (VP (VBZ is) (NP (NN time) (S (VP (TO to) (VP (VB go)))))))) (, ,) (NP (NNP Luke)) (VP (VBZ leads) (NP (NNP Sparky)) (PRT (RP back)) (PP (TO to) (NP (DT the) (NN sidewalk)))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'it', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'time', u'time', u'NN'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u',', u',', u','), (u'Luke', u'Luke', u'NNP'), (u'leads', u'lead', u'VBZ'), (u'Sparky', u'Sparky', u'NNP'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'sidewalk', u'sidewalk', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'it', 'is', 'time', 'to', 'go', ',', 'Luke', 'leads', 'Sparky', 'back', 'to', 'the', 'sidewalk', '.']}, {'string': ' It is warmer and Luke takes off his hat and coat.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBZ is) (NP (JJR warmer)))) (CC and) (S (NP (NNP Luke)) (VP (VBZ takes) (PRT (RP off)) (NP (PRP$ his) (NN hat) (CC and) (NN coat)))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'warmer', u'warmer', u'JJR'), (u'and', u'and', u'CC'), (u'Luke', u'Luke', u'NNP'), (u'takes', u'take', u'VBZ'), (u'off', u'off', u'RP'), (u'his', u'he', u'PRP$'), (u'hat', u'hat', u'NN'), (u'and', u'and', u'CC'), (u'coat', u'coat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'is', 'warmer', 'and', 'Luke', 'takes', 'off', 'his', 'hat', 'and', 'coat', '.']}, {'string': ' They walk home.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP walk) (NP (NN home))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'walk', u'walk', u'VBP'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'walk', 'home', '.']}], 'questions': [{'question': {'string': " What is Luke 's dog named?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NNP Luke) (POS 's)) (NN dog)) (VP (VBN named))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'Luke', u'Luke', u'NNP'), (u"'s", u"'s", u'POS'), (u'dog', u'dog', u'NN'), (u'named', u'name', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'Luke', "'s", 'dog', 'named', '?']}, 'answers': [{'string': ' Squeaky', 'parse': {'tree': '(ROOT (ADVP (RB Squeaky)))', 'lemma': [(u'Squeaky', u'squeaky', u'RB')]}, 'tokens': ['Squeaky']}, {'string': ' Bob', 'parse': {'tree': '(ROOT (NP (NNP Bob)))', 'lemma': [(u'Bob', u'Bob', u'NNP')]}, 'tokens': ['Bob']}, {'string': ' Sparky', 'parse': {'tree': '(ROOT (ADVP (RB Sparky)))', 'lemma': [(u'Sparky', u'sparky', u'RB')]}, 'tokens': ['Sparky']}, {'string': ' Freckles', 'parse': {'tree': '(ROOT (NP (NNS Freckles)))', 'lemma': [(u'Freckles', u'freckle', u'NNS')]}, 'tokens': ['Freckles']}], 'mode': 1}, {'question': {'string': ' The pond is on which street?', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN pond)) (VP (VBZ is) (WHPP (IN on) (WHNP (WDT which) (NN street)))) (. ?)))', 'lemma': [(u'The', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'is', u'be', u'VBZ'), (u'on', u'on', u'IN'), (u'which', u'which', u'WDT'), (u'street', u'street', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['The', 'pond', 'is', 'on', 'which', 'street', '?']}, 'answers': [{'string': ' First', 'parse': {'tree': '(ROOT (NP (NNP First)))', 'lemma': [(u'First', u'First', u'NNP')]}, 'tokens': ['First']}, {'string': ' Willow', 'parse': {'tree': '(ROOT (NP (NNP Willow)))', 'lemma': [(u'Willow', u'Willow', u'NNP')]}, 'tokens': ['Willow']}, {'string': ' Elm', 'parse': {'tree': '(ROOT (NP (NNP Elm)))', 'lemma': [(u'Elm', u'Elm', u'NNP')]}, 'tokens': ['Elm']}, {'string': ' Vine', 'parse': {'tree': '(ROOT (NP (NNP Vine)))', 'lemma': [(u'Vine', u'Vine', u'NNP')]}, 'tokens': ['Vine']}], 'mode': 1}, {'question': {'string': ' What actions does Luke take in this story?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN actions)) (SQ (VBZ does) (NP (NNP Luke)) (VP (VB take) (PP (IN in) (NP (DT this) (NN story))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'actions', u'action', u'NN'), (u'does', u'do', u'VBZ'), (u'Luke', u'Luke', u'NNP'), (u'take', u'take', u'VB'), (u'in', u'in', u'IN'), (u'this', u'this', u'DT'), (u'story', u'story', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'actions', 'does', 'Luke', 'take', 'in', 'this', 'story', '?']}, 'answers': [{'string': ' He puts on his hat, coat and gloves, and leaves all of them on through the whole story.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ puts) (PP (IN on) (NP (NP (PRP$ his) (NN hat)) (, ,) (NP (NN coat)) (CC and) (NP (NNS gloves))))) (, ,) (CC and) (VP (VBZ leaves) (NP (NP (DT all)) (PP (IN of) (NP (PRP them)))) (PP (IN on) (PP (IN through) (NP (DT the) (JJ whole) (NN story)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'puts', u'put', u'VBZ'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'hat', u'hat', u'NN'), (u',', u',', u','), (u'coat', u'coat', u'NN'), (u'and', u'and', u'CC'), (u'gloves', u'glove', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'leaves', u'leave', u'VBZ'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'on', u'on', u'IN'), (u'through', u'through', u'IN'), (u'the', u'the', u'DT'), (u'whole', u'whole', u'JJ'), (u'story', u'story', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'puts', 'on', 'his', 'hat', ',', 'coat', 'and', 'gloves', ',', 'and', 'leaves', 'all', 'of', 'them', 'on', 'through', 'the', 'whole', 'story', '.']}, {'string': ' He puts on his hat, coat, and gloves, but takes them off before going to the pond.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ puts) (PP (IN on) (NP (NP (PRP$ his) (NN hat)) (, ,) (NP (NN coat)) (, ,) (CC and) (NP (NNS gloves))))) (, ,) (CC but) (VP (VBZ takes) (NP (PRP them)) (PP (RB off) (IN before) (S (VP (VBG going) (PP (TO to) (NP (DT the) (NN pond)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'puts', u'put', u'VBZ'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'hat', u'hat', u'NN'), (u',', u',', u','), (u'coat', u'coat', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'gloves', u'glove', u'NNS'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'takes', u'take', u'VBZ'), (u'them', u'they', u'PRP'), (u'off', u'off', u'RB'), (u'before', u'before', u'IN'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'puts', 'on', 'his', 'hat', ',', 'coat', ',', 'and', 'gloves', ',', 'but', 'takes', 'them', 'off', 'before', 'going', 'to', 'the', 'pond', '.']}, {'string': ' He put on his hat, coat and gloves, but later takes off his hat and coat.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBD put) (PP (IN on) (NP (NP (PRP$ his) (NN hat)) (, ,) (NP (NN coat)) (CC and) (NP (NNS gloves))))) (, ,) (CC but) (ADVP (RB later)) (VP (VBZ takes) (PRT (RP off)) (NP (PRP$ his) (NN hat) (CC and) (NN coat)))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'put', u'put', u'VBD'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'hat', u'hat', u'NN'), (u',', u',', u','), (u'coat', u'coat', u'NN'), (u'and', u'and', u'CC'), (u'gloves', u'glove', u'NNS'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'later', u'later', u'RB'), (u'takes', u'take', u'VBZ'), (u'off', u'off', u'RP'), (u'his', u'he', u'PRP$'), (u'hat', u'hat', u'NN'), (u'and', u'and', u'CC'), (u'coat', u'coat', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'put', 'on', 'his', 'hat', ',', 'coat', 'and', 'gloves', ',', 'but', 'later', 'takes', 'off', 'his', 'hat', 'and', 'coat', '.']}, {'string': ' He puts on his hat, coat, and gloves, but later takes off only his gloves.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VP (VBZ puts) (PP (IN on) (NP (NP (PRP$ his) (NN hat)) (, ,) (NP (NN coat)) (, ,) (CC and) (NP (NNS gloves))))) (, ,) (CC but) (VP (ADVP (RB later)) (VBZ takes) (PP (IN off) (NP (RB only) (PRP$ his) (NNS gloves))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'puts', u'put', u'VBZ'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'hat', u'hat', u'NN'), (u',', u',', u','), (u'coat', u'coat', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'gloves', u'glove', u'NNS'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'later', u'later', u'RB'), (u'takes', u'take', u'VBZ'), (u'off', u'off', u'IN'), (u'only', u'only', u'RB'), (u'his', u'he', u'PRP$'), (u'gloves', u'glove', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'puts', 'on', 'his', 'hat', ',', 'coat', ',', 'and', 'gloves', ',', 'but', 'later', 'takes', 'off', 'only', 'his', 'gloves', '.']}], 'mode': 0}, {'question': {'string': ' What path do Luke and Sparky take to the pond?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN path)) (SQ (VBP do) (NP (NNP Luke) (CC and) (NNP Sparky)) (VP (VB take) (PP (TO to) (NP (DT the) (NN pond))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'path', u'path', u'NN'), (u'do', u'do', u'VBP'), (u'Luke', u'Luke', u'NNP'), (u'and', u'and', u'CC'), (u'Sparky', u'Sparky', u'NNP'), (u'take', u'take', u'VB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'pond', u'pond', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'path', 'do', 'Luke', 'and', 'Sparky', 'take', 'to', 'the', 'pond', '?']}, 'answers': [{'string': ' They stay on Vine Street the whole way.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP stay) (PP (IN on) (NP (NP (NNP Vine) (NNP Street)) (NP (DT the) (JJ whole) (NN way))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'stay', u'stay', u'VBP'), (u'on', u'on', u'IN'), (u'Vine', u'Vine', u'NNP'), (u'Street', u'Street', u'NNP'), (u'the', u'the', u'DT'), (u'whole', u'whole', u'JJ'), (u'way', u'way', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'stay', 'on', 'Vine', 'Street', 'the', 'whole', 'way', '.']}, {'string': ' Across First Street and taking a left turn to Elm Street.', 'parse': {'tree': '(ROOT (S (PP (IN Across) (NP (NP (NNP First) (NNP Street)) (CC and) (NP (NN taking)))) (NP (DT a) (NN left)) (VP (VBP turn) (PP (TO to) (NP (NNP Elm) (NNP Street)))) (. .)))', 'lemma': [(u'Across', u'across', u'IN'), (u'First', u'First', u'NNP'), (u'Street', u'Street', u'NNP'), (u'and', u'and', u'CC'), (u'taking', u'taking', u'NN'), (u'a', u'a', u'DT'), (u'left', u'left', u'NN'), (u'turn', u'turn', u'VBP'), (u'to', u'to', u'TO'), (u'Elm', u'Elm', u'NNP'), (u'Street', u'Street', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Across', 'First', 'Street', 'and', 'taking', 'a', 'left', 'turn', 'to', 'Elm', 'Street', '.']}, {'string': ' Down Vine Street, across Willow Street, turning on First Street to Elm Street.', 'parse': {'tree': '(ROOT (FRAG (ADVP (RB Down)) (NP (NNP Vine) (NNP Street)) (, ,) (PP (IN across) (NP (NP (NNP Willow) (NNP Street)) (, ,) (VP (VBG turning) (PP (IN on) (NP (NP (NNP First) (NNP Street)) (PP (TO to) (NP (NNP Elm) (NNP Street)))))))) (. .)))', 'lemma': [(u'Down', u'down', u'RB'), (u'Vine', u'Vine', u'NNP'), (u'Street', u'Street', u'NNP'), (u',', u',', u','), (u'across', u'across', u'IN'), (u'Willow', u'Willow', u'NNP'), (u'Street', u'Street', u'NNP'), (u',', u',', u','), (u'turning', u'turn', u'VBG'), (u'on', u'on', u'IN'), (u'First', u'First', u'NNP'), (u'Street', u'Street', u'NNP'), (u'to', u'to', u'TO'), (u'Elm', u'Elm', u'NNP'), (u'Street', u'Street', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Down', 'Vine', 'Street', ',', 'across', 'Willow', 'Street', ',', 'turning', 'on', 'First', 'Street', 'to', 'Elm', 'Street', '.']}, {'string': ' Down Elm Street, to Willow Street, Turning on Vine Street, to First Street.', 'parse': {'tree': '(ROOT (S (PP (IN Down) (NP (NNP Elm) (NNP Street))) (, ,) (PP (TO to) (NP (NNP Willow) (NNP Street))) (, ,) (VP (VBD Turning) (PP (IN on) (NP (NNP Vine) (NNP Street))) (, ,) (PP (TO to) (NP (NNP First) (NNP Street)))) (. .)))', 'lemma': [(u'Down', u'down', u'IN'), (u'Elm', u'Elm', u'NNP'), (u'Street', u'Street', u'NNP'), (u',', u',', u','), (u'to', u'to', u'TO'), (u'Willow', u'Willow', u'NNP'), (u'Street', u'Street', u'NNP'), (u',', u',', u','), (u'Turning', u'turn', u'VBD'), (u'on', u'on', u'IN'), (u'Vine', u'Vine', u'NNP'), (u'Street', u'Street', u'NNP'), (u',', u',', u','), (u'to', u'to', u'TO'), (u'First', u'First', u'NNP'), (u'Street', u'Street', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Down', 'Elm', 'Street', ',', 'to', 'Willow', 'Street', ',', 'Turning', 'on', 'Vine', 'Street', ',', 'to', 'First', 'Street', '.']}], 'mode': 0}]}
{'sentences': [{'string': ' Tim had always a red bike.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD had) (NP (RB always) (DT a) (JJ red) (NN bike))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'had', u'have', u'VBD'), (u'always', u'always', u'RB'), (u'a', u'a', u'DT'), (u'red', u'red', u'JJ'), (u'bike', u'bike', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'had', 'always', 'a', 'red', 'bike', '.']}, {'string': ' His birthday party was coming up and he hoped that his parents would finally get him the bike.', 'parse': {'tree': '(ROOT (S (S (NP (PRP$ His) (NN birthday) (NN party)) (VP (VBD was) (VP (VBG coming) (PRT (RP up))))) (CC and) (S (NP (PRP he)) (VP (VBD hoped) (SBAR (IN that) (S (NP (PRP$ his) (NNS parents)) (VP (MD would) (ADVP (RB finally)) (VP (VB get) (S (NP (PRP him)) (NP (DT the) (NN bike))))))))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'birthday', u'birthday', u'NN'), (u'party', u'party', u'NN'), (u'was', u'be', u'VBD'), (u'coming', u'come', u'VBG'), (u'up', u'up', u'RP'), (u'and', u'and', u'CC'), (u'he', u'he', u'PRP'), (u'hoped', u'hope', u'VBD'), (u'that', u'that', u'IN'), (u'his', u'he', u'PRP$'), (u'parents', u'parent', u'NNS'), (u'would', u'would', u'MD'), (u'finally', u'finally', u'RB'), (u'get', u'get', u'VB'), (u'him', u'he', u'PRP'), (u'the', u'the', u'DT'), (u'bike', u'bike', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'birthday', 'party', 'was', 'coming', 'up', 'and', 'he', 'hoped', 'that', 'his', 'parents', 'would', 'finally', 'get', 'him', 'the', 'bike', '.']}, {'string': " When his friends came over for the party, Tim was very worried that he would n't get the bike.", 'parse': {'tree': "(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP$ his) (NNS friends)) (VP (VBD came) (PRT (RP over)) (PP (IN for) (NP (DT the) (NN party)))))) (, ,) (NP (NNP Tim)) (VP (VBD was) (ADJP (RB very) (JJ worried)) (SBAR (IN that) (S (NP (PRP he)) (VP (MD would) (RB n't) (VP (VB get) (NP (DT the) (NN bike))))))) (. .)))", 'lemma': [(u'When', u'when', u'WRB'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'came', u'come', u'VBD'), (u'over', u'over', u'RP'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'party', u'party', u'NN'), (u',', u',', u','), (u'Tim', u'Tim', u'NNP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'worried', u'worried', u'JJ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'would', u'would', u'MD'), (u"n't", u'not', u'RB'), (u'get', u'get', u'VB'), (u'the', u'the', u'DT'), (u'bike', u'bike', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'his', 'friends', 'came', 'over', 'for', 'the', 'party', ',', 'Tim', 'was', 'very', 'worried', 'that', 'he', 'would', "n't", 'get', 'the', 'bike', '.']}, {'string': ' He looked at all the presents and none of them seemed big enough to have a bike in them.', 'parse': {'tree': '(ROOT (S (S (NP (PRP He)) (VP (VBD looked) (PP (IN at) (NP (PDT all) (DT the) (NNS presents))))) (CC and) (S (NP (NP (NN none)) (PP (IN of) (NP (PRP them)))) (VP (VBD seemed) (ADJP (JJ big) (RB enough) (S (VP (TO to) (VP (VB have) (NP (NP (DT a) (NN bike)) (PP (IN in) (NP (PRP them)))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'looked', u'look', u'VBD'), (u'at', u'at', u'IN'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'presents', u'present', u'NNS'), (u'and', u'and', u'CC'), (u'none', u'none', u'NN'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'seemed', u'seem', u'VBD'), (u'big', u'big', u'JJ'), (u'enough', u'enough', u'RB'), (u'to', u'to', u'TO'), (u'have', u'have', u'VB'), (u'a', u'a', u'DT'), (u'bike', u'bike', u'NN'), (u'in', u'in', u'IN'), (u'them', u'they', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'looked', 'at', 'all', 'the', 'presents', 'and', 'none', 'of', 'them', 'seemed', 'big', 'enough', 'to', 'have', 'a', 'bike', 'in', 'them', '.']}, {'string': ' Tim was sad.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD was) (ADJP (JJ sad))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'was', u'be', u'VBD'), (u'sad', u'sad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'was', 'sad', '.']}, {'string': ' When it was time to open the presents he opened them one at a time.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (PRP it)) (VP (VBD was) (VP (NN time) (S (VP (TO to) (VP (VB open) (NP (DT the) (NNS presents))))))))) (NP (PRP he)) (VP (VBD opened) (S (NP (PRP them)) (NP (NP (CD one)) (PP (IN at) (NP (DT a) (NN time)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'time', u'time', u'NN'), (u'to', u'to', u'TO'), (u'open', u'open', u'VB'), (u'the', u'the', u'DT'), (u'presents', u'present', u'NNS'), (u'he', u'he', u'PRP'), (u'opened', u'open', u'VBD'), (u'them', u'they', u'PRP'), (u'one', u'one', u'CD'), (u'at', u'at', u'IN'), (u'a', u'a', u'DT'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'it', 'was', 'time', 'to', 'open', 'the', 'presents', 'he', 'opened', 'them', 'one', 'at', 'a', 'time', '.']}, {'string': ' The first present was not a bike.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ first) (NN present)) (VP (VBD was) (RB not) (NP (DT a) (NN bike))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'first', u'first', u'JJ'), (u'present', u'present', u'NN'), (u'was', u'be', u'VBD'), (u'not', u'not', u'RB'), (u'a', u'a', u'DT'), (u'bike', u'bike', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'first', 'present', 'was', 'not', 'a', 'bike', '.']}, {'string': ' The second present was not a bike.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ second) (NN present)) (VP (VBD was) (RB not) (NP (DT a) (NN bike))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'second', u'second', u'JJ'), (u'present', u'present', u'NN'), (u'was', u'be', u'VBD'), (u'not', u'not', u'RB'), (u'a', u'a', u'DT'), (u'bike', u'bike', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'second', 'present', 'was', 'not', 'a', 'bike', '.']}, {'string': ' The third present was the biggest one.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ third) (NN present)) (VP (VBD was) (NP (DT the) (JJS biggest) (NN one))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'third', u'third', u'JJ'), (u'present', u'present', u'NN'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'biggest', u'biggest', u'JJS'), (u'one', u'one', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'third', 'present', 'was', 'the', 'biggest', 'one', '.']}, {'string': ' Tim knew if the bike was going to be in any of the presents it was going to be in this box.', 'parse': {'tree': '(ROOT (S (NP (NNP Tim)) (VP (VBD knew) (SBAR (S (SBAR (IN if) (S (NP (DT the) (NN bike)) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB be) (PP (IN in) (NP (NP (DT any)) (PP (IN of) (NP (DT the) (NNS presents)))))))))))) (NP (PRP it)) (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB be) (PP (IN in) (NP (DT this) (NN box))))))))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'knew', u'know', u'VBD'), (u'if', u'if', u'IN'), (u'the', u'the', u'DT'), (u'bike', u'bike', u'NN'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'in', u'in', u'IN'), (u'any', u'any', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'presents', u'present', u'NNS'), (u'it', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'in', u'in', u'IN'), (u'this', u'this', u'DT'), (u'box', u'box', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'knew', 'if', 'the', 'bike', 'was', 'going', 'to', 'be', 'in', 'any', 'of', 'the', 'presents', 'it', 'was', 'going', 'to', 'be', 'in', 'this', 'box', '.']}, {'string': ' Tim opened it and there was no bike inside.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Tim)) (VP (VBD opened) (NP (PRP it)))) (CC and) (S (NP (EX there)) (VP (VBD was) (ADVP (NP (DT no) (NN bike)) (RB inside)))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'opened', u'open', u'VBD'), (u'it', u'it', u'PRP'), (u'and', u'and', u'CC'), (u'there', u'there', u'EX'), (u'was', u'be', u'VBD'), (u'no', u'no', u'DT'), (u'bike', u'bike', u'NN'), (u'inside', u'inside', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'opened', 'it', 'and', 'there', 'was', 'no', 'bike', 'inside', '.']}, {'string': ' Just as Tim tried not to look too upset, his Dad brought in the biggest present of them all.', 'parse': {'tree': '(ROOT (S (SBAR (RB Just) (IN as) (S (NP (NNP Tim)) (VP (VBD tried) (S (RB not) (VP (TO to) (VP (VB look) (ADJP (RB too) (JJ upset)))))))) (, ,) (NP (PRP$ his) (NN Dad)) (VP (VBD brought) (PP (IN in) (NP (NP (DT the) (JJS biggest) (NN present)) (PP (IN of) (NP (PRP them) (DT all)))))) (. .)))', 'lemma': [(u'Just', u'just', u'RB'), (u'as', u'as', u'IN'), (u'Tim', u'Tim', u'NNP'), (u'tried', u'try', u'VBD'), (u'not', u'not', u'RB'), (u'to', u'to', u'TO'), (u'look', u'look', u'VB'), (u'too', u'too', u'RB'), (u'upset', u'upset', u'JJ'), (u',', u',', u','), (u'his', u'he', u'PRP$'), (u'Dad', u'dad', u'NN'), (u'brought', u'bring', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'biggest', u'biggest', u'JJS'), (u'present', u'present', u'NN'), (u'of', u'of', u'IN'), (u'them', u'they', u'PRP'), (u'all', u'all', u'DT'), (u'.', u'.', u'.')]}, 'tokens': ['Just', 'as', 'Tim', 'tried', 'not', 'to', 'look', 'too', 'upset', ',', 'his', 'Dad', 'brought', 'in', 'the', 'biggest', 'present', 'of', 'them', 'all', '.']}, {'string': ' His Dad had been hiding the present all along.', 'parse': {'tree': '(ROOT (S (NP (PRP$ His) (NN Dad)) (VP (VBD had) (VP (VBN been) (VP (VBG hiding) (NP (DT the) (NN present)) (ADVP (DT all) (IN along))))) (. .)))', 'lemma': [(u'His', u'he', u'PRP$'), (u'Dad', u'dad', u'NN'), (u'had', u'have', u'VBD'), (u'been', u'be', u'VBN'), (u'hiding', u'hide', u'VBG'), (u'the', u'the', u'DT'), (u'present', u'present', u'NN'), (u'all', u'all', u'DT'), (u'along', u'along', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['His', 'Dad', 'had', 'been', 'hiding', 'the', 'present', 'all', 'along', '.']}, {'string': ' Tim opened it and his new bike was inside the box.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Tim)) (VP (VBD opened) (NP (PRP it)))) (CC and) (S (NP (PRP$ his) (JJ new) (NN bike)) (VP (VBD was) (PP (IN inside) (NP (DT the) (NN box))))) (. .)))', 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'opened', u'open', u'VBD'), (u'it', u'it', u'PRP'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'new', u'new', u'JJ'), (u'bike', u'bike', u'NN'), (u'was', u'be', u'VBD'), (u'inside', u'inside', u'IN'), (u'the', u'the', u'DT'), (u'box', u'box', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'opened', 'it', 'and', 'his', 'new', 'bike', 'was', 'inside', 'the', 'box', '.']}, {'string': " Tim put the bike together with his Dad 's help.", 'parse': {'tree': "(ROOT (S (NP (NNP Tim)) (VP (VBD put) (NP (DT the) (NN bike)) (ADVP (RB together)) (PP (IN with) (NP (NP (PRP$ his) (NN Dad) (POS 's)) (NN help)))) (. .)))", 'lemma': [(u'Tim', u'Tim', u'NNP'), (u'put', u'put', u'VBD'), (u'the', u'the', u'DT'), (u'bike', u'bike', u'NN'), (u'together', u'together', u'RB'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'Dad', u'dad', u'NN'), (u"'s", u"'s", u'POS'), (u'help', u'help', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Tim', 'put', 'the', 'bike', 'together', 'with', 'his', 'Dad', "'s", 'help', '.']}], 'questions': [{'question': {'string': ' Who did Tim hope was going to get him the bike?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (NNP Tim)) (VP (VB hope) (SBAR (S (VP (VBD was) (VP (VBG going) (S (VP (TO to) (VP (VB get) (S (NP (PRP him)) (NP (DT the) (NN bike)))))))))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'did', u'do', u'VBD'), (u'Tim', u'Tim', u'NNP'), (u'hope', u'hope', u'VB'), (u'was', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'him', u'he', u'PRP'), (u'the', u'the', u'DT'), (u'bike', u'bike', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'did', 'Tim', 'hope', 'was', 'going', 'to', 'get', 'him', 'the', 'bike', '?']}, 'answers': [{'string': ' His friends', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN friends))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'friends', u'friend', u'NN')]}, 'tokens': ['His', 'friends']}, {'string': ' His teacher', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN teacher))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'teacher', u'teacher', u'NN')]}, 'tokens': ['His', 'teacher']}, {'string': ' His parents', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN parents))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'parents', u'parent', u'NN')]}, 'tokens': ['His', 'parents']}, {'string': ' His brother', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN brother))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'brother', u'brother', u'NN')]}, 'tokens': ['His', 'brother']}], 'mode': 1}, {'question': {'string': ' Why was Tim opening presents?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD was) (NP (NNP Tim)) (VP (VBG opening) (NP (NNS presents)))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'was', u'be', u'VBD'), (u'Tim', u'Tim', u'NNP'), (u'opening', u'open', u'VBG'), (u'presents', u'present', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'was', 'Tim', 'opening', 'presents', '?']}, 'answers': [{'string': " He did n't open any presents", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD did) (RB n't) (VP (VB open) (NP (DT any) (NNS presents))))))", 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'open', u'open', u'VB'), (u'any', u'any', u'DT'), (u'presents', u'present', u'NNS')]}, 'tokens': ['He', 'did', "n't", 'open', 'any', 'presents']}, {'string': ' It was his birthday', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (PRP$ his) (NN birthday)))))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'his', u'he', u'PRP$'), (u'birthday', u'birthday', u'NN')]}, 'tokens': ['It', 'was', 'his', 'birthday']}, {'string': ' He was the best kid in class', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (NP (NP (DT the) (JJS best) (NN kid)) (PP (IN in) (NP (NN class)))))))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'best', u'best', u'JJS'), (u'kid', u'kid', u'NN'), (u'in', u'in', u'IN'), (u'class', u'class', u'NN')]}, 'tokens': ['He', 'was', 'the', 'best', 'kid', 'in', 'class']}, {'string': ' he won them in a game', 'parse': {'tree': '(ROOT (S (NP (PRP he)) (VP (VBD won) (NP (PRP them)) (PP (IN in) (NP (DT a) (NN game))))))', 'lemma': [(u'he', u'he', u'PRP'), (u'won', u'win', u'VBD'), (u'them', u'they', u'PRP'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'game', u'game', u'NN')]}, 'tokens': ['he', 'won', 'them', 'in', 'a', 'game']}], 'mode': 0}, {'question': {'string': ' What color was the bike Tim always wanted?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN color)) (SQ (VBD was) (NP (DT the) (NN bike) (NNP Tim)) (VP (ADVP (RB always)) (VBN wanted))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'color', u'color', u'NN'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'bike', u'bike', u'NN'), (u'Tim', u'Tim', u'NNP'), (u'always', u'always', u'RB'), (u'wanted', u'want', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'color', 'was', 'the', 'bike', 'Tim', 'always', 'wanted', '?']}, 'answers': [{'string': ' Yellow', 'parse': {'tree': '(ROOT (NP (NNP Yellow)))', 'lemma': [(u'Yellow', u'Yellow', u'NNP')]}, 'tokens': ['Yellow']}, {'string': ' Green', 'parse': {'tree': '(ROOT (NP (NNP Green)))', 'lemma': [(u'Green', u'Green', u'NNP')]}, 'tokens': ['Green']}, {'string': ' Red', 'parse': {'tree': '(ROOT (NP (NNP Red)))', 'lemma': [(u'Red', u'Red', u'NNP')]}, 'tokens': ['Red']}, {'string': ' Blue', 'parse': {'tree': '(ROOT (NP (NNP Blue)))', 'lemma': [(u'Blue', u'Blue', u'NNP')]}, 'tokens': ['Blue']}], 'mode': 1}, {'question': {'string': ' Who hid the bike from Tim?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VP (VBP hid) (NP (DT the) (NN bike)) (PP (IN from) (NP (NNP Tim))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'hid', u'hide', u'VBP'), (u'the', u'the', u'DT'), (u'bike', u'bike', u'NN'), (u'from', u'from', u'IN'), (u'Tim', u'Tim', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'hid', 'the', 'bike', 'from', 'Tim', '?']}, 'answers': [{'string': ' His Sister', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN Sister))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'Sister', u'sister', u'NN')]}, 'tokens': ['His', 'Sister']}, {'string': ' His Friend', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN Friend))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'Friend', u'friend', u'NN')]}, 'tokens': ['His', 'Friend']}, {'string': ' His Mom', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN Mom))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'Mom', u'mom', u'NN')]}, 'tokens': ['His', 'Mom']}, {'string': ' His Dad', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ His) (NN Dad))))', 'lemma': [(u'His', u'he', u'PRP$'), (u'Dad', u'dad', u'NN')]}, 'tokens': ['His', 'Dad']}], 'mode': 0}]}
{'sentences': [{'string': " On Saturday, Amy and Joe baked a whole chicken for their family 's dinner.", 'parse': {'tree': "(ROOT (S (PP (IN On) (NP (NNP Saturday))) (, ,) (NP (NNP Amy) (CC and) (NNP Joe)) (VP (VBZ baked) (NP (NP (DT a) (JJ whole) (NN chicken)) (PP (IN for) (NP (NP (PRP$ their) (NN family) (POS 's)) (NN dinner))))) (. .)))", 'lemma': [(u'On', u'on', u'IN'), (u'Saturday', u'Saturday', u'NNP'), (u',', u',', u','), (u'Amy', u'Amy', u'NNP'), (u'and', u'and', u'CC'), (u'Joe', u'Joe', u'NNP'), (u'baked', u'bake', u'VBZ'), (u'a', u'a', u'DT'), (u'whole', u'whole', u'JJ'), (u'chicken', u'chicken', u'NN'), (u'for', u'for', u'IN'), (u'their', u'they', u'PRP$'), (u'family', u'family', u'NN'), (u"'s", u"'s", u'POS'), (u'dinner', u'dinner', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['On', 'Saturday', ',', 'Amy', 'and', 'Joe', 'baked', 'a', 'whole', 'chicken', 'for', 'their', 'family', "'s", 'dinner', '.']}, {'string': ' They rinsed it in cold water, rubbed it with spices, and put it into a pan.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VP (VBD rinsed) (NP (PRP it)) (PP (IN in) (NP (JJ cold) (NN water)))) (, ,) (VP (VBD rubbed) (NP (PRP it)) (PP (IN with) (NP (NNS spices)))) (, ,) (CC and) (VP (VBD put) (NP (PRP it)) (PP (IN into) (NP (DT a) (NN pan))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'rinsed', u'rinse', u'VBD'), (u'it', u'it', u'PRP'), (u'in', u'in', u'IN'), (u'cold', u'cold', u'JJ'), (u'water', u'water', u'NN'), (u',', u',', u','), (u'rubbed', u'rub', u'VBD'), (u'it', u'it', u'PRP'), (u'with', u'with', u'IN'), (u'spices', u'spice', u'NNS'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'put', u'put', u'VBD'), (u'it', u'it', u'PRP'), (u'into', u'into', u'IN'), (u'a', u'a', u'DT'), (u'pan', u'pan', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'rinsed', 'it', 'in', 'cold', 'water', ',', 'rubbed', 'it', 'with', 'spices', ',', 'and', 'put', 'it', 'into', 'a', 'pan', '.']}, {'string': ' After they had heated up the oven, they put the chicken and the pan on the center oven rack and set the timer.', 'parse': {'tree': '(ROOT (S (SBAR (IN After) (S (NP (PRP they)) (VP (VBD had) (VP (VBN heated) (PRT (RP up)) (NP (DT the) (NN oven)))))) (, ,) (NP (PRP they)) (VP (VP (VBD put) (NP (NP (DT the) (NN chicken)) (CC and) (NP (DT the) (NN pan))) (PP (IN on) (NP (DT the) (NN center) (NN oven) (NN rack)))) (CC and) (VP (VBD set) (NP (DT the) (NN timer)))) (. .)))', 'lemma': [(u'After', u'after', u'IN'), (u'they', u'they', u'PRP'), (u'had', u'have', u'VBD'), (u'heated', u'heat', u'VBN'), (u'up', u'up', u'RP'), (u'the', u'the', u'DT'), (u'oven', u'oven', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'put', u'put', u'VBD'), (u'the', u'the', u'DT'), (u'chicken', u'chicken', u'NN'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'pan', u'pan', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'center', u'center', u'NN'), (u'oven', u'oven', u'NN'), (u'rack', u'rack', u'NN'), (u'and', u'and', u'CC'), (u'set', u'set', u'VBD'), (u'the', u'the', u'DT'), (u'timer', u'timer', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['After', 'they', 'had', 'heated', 'up', 'the', 'oven', ',', 'they', 'put', 'the', 'chicken', 'and', 'the', 'pan', 'on', 'the', 'center', 'oven', 'rack', 'and', 'set', 'the', 'timer', '.']}, {'string': ' Then, as they peeled potatoes and carrots to go with the chicken, Amy, Joe and Cindy talked about dinner.', 'parse': {'tree': '(ROOT (S (RB Then) (, ,) (SBAR (IN as) (S (NP (PRP they)) (VP (VBN peeled) (S (NP (NNS potatoes) (CC and) (NNS carrots)) (VP (TO to) (VP (VB go) (PP (IN with) (NP (DT the) (NN chicken))))))))) (, ,) (NP (NNP Amy) (, ,) (NNP Joe) (CC and) (NNP Cindy)) (VP (VBD talked) (PP (IN about) (NP (NN dinner)))) (. .)))', 'lemma': [(u'Then', u'then', u'RB'), (u',', u',', u','), (u'as', u'as', u'IN'), (u'they', u'they', u'PRP'), (u'peeled', u'peel', u'VBN'), (u'potatoes', u'potato', u'NNS'), (u'and', u'and', u'CC'), (u'carrots', u'carrot', u'NNS'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'chicken', u'chicken', u'NN'), (u',', u',', u','), (u'Amy', u'Amy', u'NNP'), (u',', u',', u','), (u'Joe', u'Joe', u'NNP'), (u'and', u'and', u'CC'), (u'Cindy', u'Cindy', u'NNP'), (u'talked', u'talk', u'VBD'), (u'about', u'about', u'IN'), (u'dinner', u'dinner', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Then', ',', 'as', 'they', 'peeled', 'potatoes', 'and', 'carrots', 'to', 'go', 'with', 'the', 'chicken', ',', 'Amy', ',', 'Joe', 'and', 'Cindy', 'talked', 'about', 'dinner', '.']}, {'string': ' Amy said, `` Joe, this is too much food for you, me and little Cindy to eat in one night.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Amy)) (VP (VBD said) (, ,) (`` ``) (INTJ (UH Joe)))) (, ,) (NP (DT this)) (VP (VBZ is) (ADVP (RB too) (RB much)) (NP (NP (NN food)) (PP (IN for) (NP (NP (PRP you)) (, ,) (NP (PRP me)) (CC and) (RB little) (NP (NNP Cindy))))) (S (VP (TO to) (VP (VB eat) (PP (IN in) (NP (CD one))) (NP (NN night)))))) (. .)))', 'lemma': [(u'Amy', u'Amy', u'NNP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'Joe', u'joe', u'UH'), (u',', u',', u','), (u'this', u'this', u'DT'), (u'is', u'be', u'VBZ'), (u'too', u'too', u'RB'), (u'much', u'much', u'RB'), (u'food', u'food', u'NN'), (u'for', u'for', u'IN'), (u'you', u'you', u'PRP'), (u',', u',', u','), (u'me', u'I', u'PRP'), (u'and', u'and', u'CC'), (u'little', u'little', u'RB'), (u'Cindy', u'Cindy', u'NNP'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'in', u'in', u'IN'), (u'one', u'one', u'CD'), (u'night', u'night', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Amy', 'said', ',', '``', 'Joe', ',', 'this', 'is', 'too', 'much', 'food', 'for', 'you', ',', 'me', 'and', 'little', 'Cindy', 'to', 'eat', 'in', 'one', 'night', '.']}, {'string': " We 'll have leftovers.", 'parse': {'tree': "(ROOT (S (NP (PRP We)) (VP (MD 'll) (VP (VB have) (NP (NNS leftovers)))) (. .)))", 'lemma': [(u'We', u'we', u'PRP'), (u"'ll", u"'ll", u'MD'), (u'have', u'have', u'VB'), (u'leftovers', u'leftovers', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['We', "'ll", 'have', 'leftovers', '.']}, {'string': " What can we do with the leftover chicken? ''", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (MD can) (NP (PRP we)) (VP (VB do) (PP (IN with) (NP (DT the) (NN leftover) (NN chicken))))) (. ?) ('' '')))", 'lemma': [(u'What', u'what', u'WP'), (u'can', u'can', u'MD'), (u'we', u'we', u'PRP'), (u'do', u'do', u'VB'), (u'with', u'with', u'IN'), (u'the', u'the', u'DT'), (u'leftover', u'leftover', u'NN'), (u'chicken', u'chicken', u'NN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['What', 'can', 'we', 'do', 'with', 'the', 'leftover', 'chicken', '?', "''"]}, {'string': " Joe said, `` We could make chicken sandwiches or chicken and rice. ''", 'parse': {'tree': "(ROOT (S (NP (NNP Joe)) (VP (VBD said) (, ,) (`` ``) (S (NP (PRP We)) (VP (MD could) (VP (VB make) (NP (NP (NN chicken) (NNS sandwiches)) (CC or) (NP (NN chicken) (CC and) (NN rice))))))) (. .) ('' '')))", 'lemma': [(u'Joe', u'Joe', u'NNP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'We', u'we', u'PRP'), (u'could', u'could', u'MD'), (u'make', u'make', u'VB'), (u'chicken', u'chicken', u'NN'), (u'sandwiches', u'sandwich', u'NNS'), (u'or', u'or', u'CC'), (u'chicken', u'chicken', u'NN'), (u'and', u'and', u'CC'), (u'rice', u'rice', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Joe', 'said', ',', '``', 'We', 'could', 'make', 'chicken', 'sandwiches', 'or', 'chicken', 'and', 'rice', '.', "''"]}, {'string': " Amy said, `` How about chicken soup? ''", 'parse': {'tree': "(ROOT (S (NP (NNP Amy)) (VP (VBD said) (, ,) (`` ``) (SBARQ (WHNP (WHADJP (WRB How) (ADJP (IN about))) (NNS chicken)) (SQ (VP (VBZ soup))) (. ?)) ('' ''))))", 'lemma': [(u'Amy', u'Amy', u'NNP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'How', u'how', u'WRB'), (u'about', u'about', u'IN'), (u'chicken', u'chicken', u'NNS'), (u'soup', u'soup', u'VBZ'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Amy', 'said', ',', '``', 'How', 'about', 'chicken', 'soup', '?', "''"]}, {'string': ' Cindy said, `` I like chicken with Thai noodles with red peppers.', 'parse': {'tree': '(ROOT (S (NP (NNP Cindy)) (VP (VBD said) (, ,) (`` ``) (S (NP (PRP I)) (VP (VB like) (NP (NN chicken)) (PP (IN with) (NP (NP (NNP Thai) (NNP noodles)) (PP (IN with) (NP (JJ red) (NNS peppers)))))))) (. .)))', 'lemma': [(u'Cindy', u'Cindy', u'NNP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'like', u'like', u'VB'), (u'chicken', u'chicken', u'NN'), (u'with', u'with', u'IN'), (u'Thai', u'Thai', u'NNP'), (u'noodles', u'noodles', u'NNP'), (u'with', u'with', u'IN'), (u'red', u'red', u'JJ'), (u'peppers', u'pepper', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Cindy', 'said', ',', '``', 'I', 'like', 'chicken', 'with', 'Thai', 'noodles', 'with', 'red', 'peppers', '.']}, {'string': " We have n't made those in a long time. ''", 'parse': {'tree': "(ROOT (S (NP (PRP We)) (VP (VBP have) (RB n't) (VP (VBN made) (NP (NP (DT those)) (PP (IN in) (NP (DT a) (JJ long) (NN time)))))) (. .) ('' '')))", 'lemma': [(u'We', u'we', u'PRP'), (u'have', u'have', u'VBP'), (u"n't", u'not', u'RB'), (u'made', u'make', u'VBN'), (u'those', u'those', u'DT'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'long', u'long', u'JJ'), (u'time', u'time', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['We', 'have', "n't", 'made', 'those', 'in', 'a', 'long', 'time', '.', "''"]}, {'string': " `` That sounds good, '' said Amy.", 'parse': {'tree': "(ROOT (SINV (`` ``) (S (NP (DT That)) (VP (VBZ sounds) (ADJP (JJ good)))) (, ,) ('' '') (VP (VBD said)) (NP (NNP Amy)) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'That', u'that', u'DT'), (u'sounds', u'sound', u'VBZ'), (u'good', u'good', u'JJ'), (u',', u',', u','), (u"''", u"''", u"''"), (u'said', u'say', u'VBD'), (u'Amy', u'Amy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'That', 'sounds', 'good', ',', "''", 'said', 'Amy', '.']}, {'string': " `` We 'll make that for dinner tomorrow. ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP We)) (VP (MD 'll) (VP (VB make) (NP (NP (DT that)) (PP (IN for) (NP (NN dinner)))) (NP (NN tomorrow)))) (. .) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'We', u'we', u'PRP'), (u"'ll", u"'ll", u'MD'), (u'make', u'make', u'VB'), (u'that', u'that', u'DT'), (u'for', u'for', u'IN'), (u'dinner', u'dinner', u'NN'), (u'tomorrow', u'tomorrow', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'We', "'ll", 'make', 'that', 'for', 'dinner', 'tomorrow', '.', "''"]}, {'string': " `` Yum! ''", 'parse': {'tree': "(ROOT (S (`` ``) (VP (VB Yum)) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Yum', u'yum', u'VB'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Yum', '!', "''"]}, {'string': ' said Joe.', 'parse': {'tree': '(ROOT (S (VP (VBD said) (NP (NNP Joe))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Joe', u'Joe', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Joe', '.']}, {'string': " `` That 's a great idea.", 'parse': {'tree': "(ROOT (S (`` ``) (NP (DT That)) (VP (VBZ 's) (NP (DT a) (JJ great) (NN idea))) (. .)))", 'lemma': [(u'``', u'``', u'``'), (u'That', u'that', u'DT'), (u"'s", u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'idea', u'idea', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['``', 'That', "'s", 'a', 'great', 'idea', '.']}, {'string': " I love Thai noodles. ''", 'parse': {'tree': "(ROOT (S (NP (PRP I)) (VP (VBP love) (NP (NNP Thai) (NNS noodles))) (. .) ('' '')))", 'lemma': [(u'I', u'I', u'PRP'), (u'love', u'love', u'VBP'), (u'Thai', u'Thai', u'NNP'), (u'noodles', u'noodle', u'NNS'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['I', 'love', 'Thai', 'noodles', '.', "''"]}, {'string': ' Later, Joe, Amy and Cindy had finished eating dinner, and Cindy asked Amy for help with her homework.', 'parse': {'tree': '(ROOT (S (ADVP (RB Later)) (, ,) (S (NP (NNP Joe) (, ,) (NNP Amy) (CC and) (NNP Cindy)) (VP (VBD had) (VP (VBN finished) (S (VP (VBG eating) (NP (NN dinner))))))) (, ,) (CC and) (S (NP (NNP Cindy)) (VP (VBD asked) (NP (NNP Amy)) (PP (IN for) (NP (NN help))) (PP (IN with) (NP (PRP$ her) (NN homework))))) (. .)))', 'lemma': [(u'Later', u'later', u'RB'), (u',', u',', u','), (u'Joe', u'Joe', u'NNP'), (u',', u',', u','), (u'Amy', u'Amy', u'NNP'), (u'and', u'and', u'CC'), (u'Cindy', u'Cindy', u'NNP'), (u'had', u'have', u'VBD'), (u'finished', u'finish', u'VBN'), (u'eating', u'eat', u'VBG'), (u'dinner', u'dinner', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Cindy', u'Cindy', u'NNP'), (u'asked', u'ask', u'VBD'), (u'Amy', u'Amy', u'NNP'), (u'for', u'for', u'IN'), (u'help', u'help', u'NN'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'homework', u'homework', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Later', ',', 'Joe', ',', 'Amy', 'and', 'Cindy', 'had', 'finished', 'eating', 'dinner', ',', 'and', 'Cindy', 'asked', 'Amy', 'for', 'help', 'with', 'her', 'homework', '.']}, {'string': " `` I do n't understand how to do these math problems! ''", 'parse': {'tree': "(ROOT (S (`` ``) (NP (PRP I)) (VP (VBP do) (RB n't) (VP (VB understand) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (VB do) (NP (DT these) (NN math) (NNS problems)))))))) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u'do', u'do', u'VBP'), (u"n't", u'not', u'RB'), (u'understand', u'understand', u'VB'), (u'how', u'how', u'WRB'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'these', u'these', u'DT'), (u'math', u'math', u'NN'), (u'problems', u'problem', u'NNS'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'I', 'do', "n't", 'understand', 'how', 'to', 'do', 'these', 'math', 'problems', '!', "''"]}, {'string': ' Joe said, `` You two go ahead.', 'parse': {'tree': '(ROOT (S (NP (NNP Joe)) (VP (VBD said) (, ,) (`` ``) (S (NP (PRP You)) (NP (CD two)) (S (VP (VB go) (ADVP (RB ahead)))))) (. .)))', 'lemma': [(u'Joe', u'Joe', u'NNP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'You', u'you', u'PRP'), (u'two', u'two', u'CD'), (u'go', u'go', u'VB'), (u'ahead', u'ahead', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Joe', 'said', ',', '``', 'You', 'two', 'go', 'ahead', '.']}, {'string': " I 'll do the dishes and put away the leftovers. ''", 'parse': {'tree': "(ROOT (S (NP (PRP I)) (VP (MD 'll) (VP (VP (VB do) (NP (DT the) (NNS dishes))) (CC and) (VP (VB put) (PRT (RP away)) (NP (DT the) (NNS leftovers))))) (. .) ('' '')))", 'lemma': [(u'I', u'I', u'PRP'), (u"'ll", u"'ll", u'MD'), (u'do', u'do', u'VB'), (u'the', u'the', u'DT'), (u'dishes', u'dish', u'NNS'), (u'and', u'and', u'CC'), (u'put', u'put', u'VB'), (u'away', u'away', u'RP'), (u'the', u'the', u'DT'), (u'leftovers', u'leftovers', u'NNS'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['I', "'ll", 'do', 'the', 'dishes', 'and', 'put', 'away', 'the', 'leftovers', '.', "''"]}, {'string': ' Soon, Cindy went into the kitchen to get a glass of water.', 'parse': {'tree': '(ROOT (S (ADVP (RB Soon)) (, ,) (NP (NNP Cindy)) (VP (VBD went) (PP (IN into) (NP (DT the) (NN kitchen))) (S (VP (TO to) (VP (VB get) (NP (NP (DT a) (NN glass)) (PP (IN of) (NP (NN water)))))))) (. .)))', 'lemma': [(u'Soon', u'soon', u'RB'), (u',', u',', u','), (u'Cindy', u'Cindy', u'NNP'), (u'went', u'go', u'VBD'), (u'into', u'into', u'IN'), (u'the', u'the', u'DT'), (u'kitchen', u'kitchen', u'NN'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'a', u'a', u'DT'), (u'glass', u'glass', u'NN'), (u'of', u'of', u'IN'), (u'water', u'water', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Soon', ',', 'Cindy', 'went', 'into', 'the', 'kitchen', 'to', 'get', 'a', 'glass', 'of', 'water', '.']}, {'string': ' Joe was eating the chicken.', 'parse': {'tree': '(ROOT (S (NP (NNP Joe)) (VP (VBD was) (VP (VBG eating) (NP (DT the) (NN chicken)))) (. .)))', 'lemma': [(u'Joe', u'Joe', u'NNP'), (u'was', u'be', u'VBD'), (u'eating', u'eat', u'VBG'), (u'the', u'the', u'DT'), (u'chicken', u'chicken', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Joe', 'was', 'eating', 'the', 'chicken', '.']}, {'string': ' It was almost gone!', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD was) (ADJP (RB almost) (VBN gone))) (. !)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'almost', u'almost', u'RB'), (u'gone', u'go', u'VBN'), (u'!', u'!', u'.')]}, 'tokens': ['It', 'was', 'almost', 'gone', '!']}, {'string': " `` Dad! ''", 'parse': {'tree': "(ROOT (INTJ (`` ``) (UH Dad) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Dad', u'dad', u'UH'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Dad', '!', "''"]}, {'string': ' said Cindy, `` You have eaten almost all of the leftover chicken.', 'parse': {'tree': '(ROOT (SINV (VP (VBD said)) (NP (NNP Cindy)) (, ,) (`` ``) (S (NP (PRP You)) (VP (VBP have) (VP (VBN eaten) (NP (NP (QP (RB almost) (DT all))) (PP (IN of) (NP (DT the) (NN leftover) (NN chicken))))))) (. .)))', 'lemma': [(u'said', u'say', u'VBD'), (u'Cindy', u'Cindy', u'NNP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'You', u'you', u'PRP'), (u'have', u'have', u'VBP'), (u'eaten', u'eat', u'VBN'), (u'almost', u'almost', u'RB'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'leftover', u'leftover', u'NN'), (u'chicken', u'chicken', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['said', 'Cindy', ',', '``', 'You', 'have', 'eaten', 'almost', 'all', 'of', 'the', 'leftover', 'chicken', '.']}, {'string': " We ca n't have Thai noodles with chicken tomorrow. ''", 'parse': {'tree': "(ROOT (S (NP (PRP We)) (VP (MD ca) (RB n't) (VP (VB have) (NP (NNP Thai) (NNS noodles)) (PP (IN with) (NP (NN chicken))) (NP (NN tomorrow)))) (. .) ('' '')))", 'lemma': [(u'We', u'we', u'PRP'), (u'ca', u'can', u'MD'), (u"n't", u'not', u'RB'), (u'have', u'have', u'VB'), (u'Thai', u'Thai', u'NNP'), (u'noodles', u'noodle', u'NNS'), (u'with', u'with', u'IN'), (u'chicken', u'chicken', u'NN'), (u'tomorrow', u'tomorrow', u'NN'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['We', 'ca', "n't", 'have', 'Thai', 'noodles', 'with', 'chicken', 'tomorrow', '.', "''"]}, {'string': ' Joe looked very sad.', 'parse': {'tree': '(ROOT (S (NP (NNP Joe)) (VP (VBD looked) (ADJP (RB very) (JJ sad))) (. .)))', 'lemma': [(u'Joe', u'Joe', u'NNP'), (u'looked', u'look', u'VBD'), (u'very', u'very', u'RB'), (u'sad', u'sad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Joe', 'looked', 'very', 'sad', '.']}, {'string': " He said `` I 'm sorry.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD said) (S (`` ``) (NP (PRP I)) (VP (VBP 'm) (ADJP (JJ sorry))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'said', u'say', u'VBD'), (u'``', u'``', u'``'), (u'I', u'I', u'PRP'), (u"'m", u'be', u'VBP'), (u'sorry', u'sorry', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'said', '``', 'I', "'m", 'sorry', '.']}, {'string': ' I have been a bad dad.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBP have) (VP (VBN been) (NP (DT a) (JJ bad) (NN dad)))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'have', u'have', u'VBP'), (u'been', u'be', u'VBN'), (u'a', u'a', u'DT'), (u'bad', u'bad', u'JJ'), (u'dad', u'dad', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'have', 'been', 'a', 'bad', 'dad', '.']}, {'string': ' I have to buy more chicken so that we can still have noodles.', 'parse': {'tree': '(ROOT (S (NP (PRP I)) (VP (VBP have) (S (VP (TO to) (VP (VB buy) (NP (JJR more) (NN chicken)) (SBAR (RB so) (IN that) (S (NP (PRP we)) (VP (MD can) (ADVP (RB still)) (VP (VB have) (NP (NNS noodles)))))))))) (. .)))', 'lemma': [(u'I', u'I', u'PRP'), (u'have', u'have', u'VBP'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'more', u'more', u'JJR'), (u'chicken', u'chicken', u'NN'), (u'so', u'so', u'RB'), (u'that', u'that', u'IN'), (u'we', u'we', u'PRP'), (u'can', u'can', u'MD'), (u'still', u'still', u'RB'), (u'have', u'have', u'VB'), (u'noodles', u'noodle', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['I', 'have', 'to', 'buy', 'more', 'chicken', 'so', 'that', 'we', 'can', 'still', 'have', 'noodles', '.']}, {'string': " Would you like a piece of chicken? ''", 'parse': {'tree': "(ROOT (SQ (MD Would) (NP (PRP you)) (VP (VBP like) (NP (NP (DT a) (NN piece)) (PP (IN of) (NP (NN chicken))))) (. ?) ('' '')))", 'lemma': [(u'Would', u'would', u'MD'), (u'you', u'you', u'PRP'), (u'like', u'like', u'VBP'), (u'a', u'a', u'DT'), (u'piece', u'piece', u'NN'), (u'of', u'of', u'IN'), (u'chicken', u'chicken', u'NN'), (u'?', u'?', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Would', 'you', 'like', 'a', 'piece', 'of', 'chicken', '?', "''"]}], 'questions': [{'question': {'string': ' What is the family planning to have for dinner tomorrow?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (NN family)) (VP (VBG planning) (S (VP (TO to) (VP (VB have) (PP (IN for) (NP (NN dinner) (NN tomorrow)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'family', u'family', u'NN'), (u'planning', u'plan', u'VBG'), (u'to', u'to', u'TO'), (u'have', u'have', u'VB'), (u'for', u'for', u'IN'), (u'dinner', u'dinner', u'NN'), (u'tomorrow', u'tomorrow', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'is', 'the', 'family', 'planning', 'to', 'have', 'for', 'dinner', 'tomorrow', '?']}, 'answers': [{'string': ' chicken and rice', 'parse': {'tree': '(ROOT (NP (NN chicken) (CC and) (NN rice)))', 'lemma': [(u'chicken', u'chicken', u'NN'), (u'and', u'and', u'CC'), (u'rice', u'rice', u'NN')]}, 'tokens': ['chicken', 'and', 'rice']}, {'string': ' chicken, carrots and potatoes', 'parse': {'tree': '(ROOT (NP (NP (NN chicken)) (, ,) (NP (NNS carrots) (CC and) (NNS potatoes))))', 'lemma': [(u'chicken', u'chicken', u'NN'), (u',', u',', u','), (u'carrots', u'carrot', u'NNS'), (u'and', u'and', u'CC'), (u'potatoes', u'potato', u'NNS')]}, 'tokens': ['chicken', ',', 'carrots', 'and', 'potatoes']}, {'string': ' chicken soup', 'parse': {'tree': '(ROOT (NP (NN chicken) (NN soup)))', 'lemma': [(u'chicken', u'chicken', u'NN'), (u'soup', u'soup', u'NN')]}, 'tokens': ['chicken', 'soup']}, {'string': ' Thai noodles with chicken and red peppers', 'parse': {'tree': '(ROOT (NP (NP (NNP Thai)) (NP (NP (NNS noodles)) (PP (IN with) (NP (NN chicken) (CC and) (NN red) (NNS peppers))))))', 'lemma': [(u'Thai', u'Thai', u'NNP'), (u'noodles', u'noodle', u'NNS'), (u'with', u'with', u'IN'), (u'chicken', u'chicken', u'NN'), (u'and', u'and', u'CC'), (u'red', u'red', u'NN'), (u'peppers', u'pepper', u'NNS')]}, 'tokens': ['Thai', 'noodles', 'with', 'chicken', 'and', 'red', 'peppers']}], 'mode': 0}, {'question': {'string': ' What kind of homework does Amy need help with?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (NN homework)))) (SQ (VBZ does) (NP (NNP Amy) (NN need)) (VP (VB help) (PP (IN with)))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'kind', u'kind', u'NN'), (u'of', u'of', u'IN'), (u'homework', u'homework', u'NN'), (u'does', u'do', u'VBZ'), (u'Amy', u'Amy', u'NNP'), (u'need', u'need', u'NN'), (u'help', u'help', u'VB'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'kind', 'of', 'homework', 'does', 'Amy', 'need', 'help', 'with', '?']}, 'answers': [{'string': ' English', 'parse': {'tree': '(ROOT (NP (NNP English)))', 'lemma': [(u'English', u'English', u'NNP')]}, 'tokens': ['English']}, {'string': ' Math', 'parse': {'tree': '(ROOT (NP (NNP Math)))', 'lemma': [(u'Math', u'Math', u'NNP')]}, 'tokens': ['Math']}, {'string': ' Art', 'parse': {'tree': '(ROOT (NP (NNP Art)))', 'lemma': [(u'Art', u'Art', u'NNP')]}, 'tokens': ['Art']}, {'string': ' Social studies', 'parse': {'tree': '(ROOT (NP (NNP Social) (NNS studies)))', 'lemma': [(u'Social', u'Social', u'NNP'), (u'studies', u'study', u'NNS')]}, 'tokens': ['Social', 'studies']}], 'mode': 1}, {'question': {'string': ' Why did Joe feel sad?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NNP Joe)) (VP (VB feel) (ADJP (JJ sad)))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'Joe', u'Joe', u'NNP'), (u'feel', u'feel', u'VB'), (u'sad', u'sad', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'Joe', 'feel', 'sad', '?']}, 'answers': [{'string': ' Because Cindy wanted Amy to help her with her homework', 'parse': {'tree': '(ROOT (SBAR (IN Because) (S (NP (NNP Cindy)) (VP (VBD wanted) (S (NP (NNP Amy)) (VP (TO to) (VP (VB help) (NP (PRP her)) (PP (IN with) (NP (PRP$ her) (NN homework))))))))))', 'lemma': [(u'Because', u'because', u'IN'), (u'Cindy', u'Cindy', u'NNP'), (u'wanted', u'want', u'VBD'), (u'Amy', u'Amy', u'NNP'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'her', u'she', u'PRP'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'homework', u'homework', u'NN')]}, 'tokens': ['Because', 'Cindy', 'wanted', 'Amy', 'to', 'help', 'her', 'with', 'her', 'homework']}, {'string': ' Because the chicken was no good', 'parse': {'tree': '(ROOT (SBAR (IN Because) (S (NP (DT the) (NN chicken)) (VP (VBD was) (ADJP (RB no) (JJ good))))))', 'lemma': [(u'Because', u'because', u'IN'), (u'the', u'the', u'DT'), (u'chicken', u'chicken', u'NN'), (u'was', u'be', u'VBD'), (u'no', u'no', u'RB'), (u'good', u'good', u'JJ')]}, 'tokens': ['Because', 'the', 'chicken', 'was', 'no', 'good']}, {'string': " Because he ate an ingredient needed for tomorrow 's dinner", 'parse': {'tree': "(ROOT (SBAR (IN Because) (S (NP (PRP he)) (VP (VBD ate) (NP (NP (DT an) (NN ingredient)) (VP (VBN needed) (PP (IN for) (NP (NP (NN tomorrow) (POS 's)) (NN dinner)))))))))", 'lemma': [(u'Because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'ate', u'eat', u'VBD'), (u'an', u'a', u'DT'), (u'ingredient', u'ingredient', u'NN'), (u'needed', u'need', u'VBN'), (u'for', u'for', u'IN'), (u'tomorrow', u'tomorrow', u'NN'), (u"'s", u"'s", u'POS'), (u'dinner', u'dinner', u'NN')]}, 'tokens': ['Because', 'he', 'ate', 'an', 'ingredient', 'needed', 'for', 'tomorrow', "'s", 'dinner']}, {'string': ' Because Cindy went to get a glass of water', 'parse': {'tree': '(ROOT (SBAR (IN Because) (S (NP (NNP Cindy)) (VP (VBD went) (S (VP (TO to) (VP (VB get) (NP (NP (DT a) (NN glass)) (PP (IN of) (NP (NN water)))))))))))', 'lemma': [(u'Because', u'because', u'IN'), (u'Cindy', u'Cindy', u'NNP'), (u'went', u'go', u'VBD'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'a', u'a', u'DT'), (u'glass', u'glass', u'NN'), (u'of', u'of', u'IN'), (u'water', u'water', u'NN')]}, 'tokens': ['Because', 'Cindy', 'went', 'to', 'get', 'a', 'glass', 'of', 'water']}], 'mode': 0}, {'question': {'string': ' What did Amy, Joe and Cindy have for dinner?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBD did) (SBAR (S (NP (NNP Amy) (, ,) (NNP Joe) (CC and) (NNP Cindy)) (VP (VBP have) (VP (PP (IN for) (NP (NN dinner))))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Amy', u'Amy', u'NNP'), (u',', u',', u','), (u'Joe', u'Joe', u'NNP'), (u'and', u'and', u'CC'), (u'Cindy', u'Cindy', u'NNP'), (u'have', u'have', u'VBP'), (u'for', u'for', u'IN'), (u'dinner', u'dinner', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Amy', ',', 'Joe', 'and', 'Cindy', 'have', 'for', 'dinner', '?']}, 'answers': [{'string': ' only chicken', 'parse': {'tree': '(ROOT (NP (JJ only) (NN chicken)))', 'lemma': [(u'only', u'only', u'JJ'), (u'chicken', u'chicken', u'NN')]}, 'tokens': ['only', 'chicken']}, {'string': ' Chicken soup', 'parse': {'tree': '(ROOT (NP (NNP Chicken) (NNP soup)))', 'lemma': [(u'Chicken', u'Chicken', u'NNP'), (u'soup', u'soup', u'NNP')]}, 'tokens': ['Chicken', 'soup']}, {'string': ' chicken, carrots and potatoes', 'parse': {'tree': '(ROOT (NP (NP (NN chicken)) (, ,) (NP (NNS carrots) (CC and) (NNS potatoes))))', 'lemma': [(u'chicken', u'chicken', u'NN'), (u',', u',', u','), (u'carrots', u'carrot', u'NNS'), (u'and', u'and', u'CC'), (u'potatoes', u'potato', u'NNS')]}, 'tokens': ['chicken', ',', 'carrots', 'and', 'potatoes']}, {'string': ' Thai noodles with chicken', 'parse': {'tree': '(ROOT (NP (NP (NNP Thai)) (NP (NP (NNS noodles)) (PP (IN with) (NP (NN chicken))))))', 'lemma': [(u'Thai', u'Thai', u'NNP'), (u'noodles', u'noodle', u'NNS'), (u'with', u'with', u'IN'), (u'chicken', u'chicken', u'NN')]}, 'tokens': ['Thai', 'noodles', 'with', 'chicken']}], 'mode': 1}]}
{'sentences': [{'string': ' A dancer named Eliza was part of the New York Ballet Performance and Arts Company.', 'parse': {'tree': '(ROOT (S (NP (DT A) (NN dancer)) (VP (VBD named) (SBAR (S (NP (NNP Eliza)) (VP (VBD was) (NP (NP (NN part)) (PP (IN of) (NP (DT the) (NNP New) (NNP York) (NNP Ballet) (NNP Performance) (CC and) (NNP Arts) (NNP Company)))))))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'dancer', u'dancer', u'NN'), (u'named', u'name', u'VBD'), (u'Eliza', u'Eliza', u'NNP'), (u'was', u'be', u'VBD'), (u'part', u'part', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'New', u'New', u'NNP'), (u'York', u'York', u'NNP'), (u'Ballet', u'Ballet', u'NNP'), (u'Performance', u'Performance', u'NNP'), (u'and', u'and', u'CC'), (u'Arts', u'Arts', u'NNP'), (u'Company', u'Company', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'dancer', 'named', 'Eliza', 'was', 'part', 'of', 'the', 'New', 'York', 'Ballet', 'Performance', 'and', 'Arts', 'Company', '.']}, {'string': ' She spent all hours of the day practicing for her recital.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD spent) (NP (NP (DT all) (NNS hours)) (PP (IN of) (NP (NP (DT the) (NN day)) (VP (VBG practicing) (PP (IN for) (NP (PRP$ her) (NN recital)))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'spent', u'spend', u'VBD'), (u'all', u'all', u'DT'), (u'hours', u'hour', u'NNS'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'day', u'day', u'NN'), (u'practicing', u'practice', u'VBG'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'recital', u'recital', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'spent', 'all', 'hours', 'of', 'the', 'day', 'practicing', 'for', 'her', 'recital', '.']}, {'string': ' Eliza had difficulties doing both her schoolwork and her dancing; she often fell behind in math.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Eliza)) (VP (VBD had) (NP (NP (NNS difficulties)) (VP (VBG doing) (NP (PDT both) (NP (PRP$ her) (NN schoolwork)) (CC and) (NP (PRP$ her) (NN dancing))))))) (: ;) (S (NP (PRP she)) (ADVP (RB often)) (VP (VBD fell) (PRT (RP behind)) (PP (IN in) (NP (NN math))))) (. .)))', 'lemma': [(u'Eliza', u'Eliza', u'NNP'), (u'had', u'have', u'VBD'), (u'difficulties', u'difficulty', u'NNS'), (u'doing', u'do', u'VBG'), (u'both', u'both', u'PDT'), (u'her', u'she', u'PRP$'), (u'schoolwork', u'schoolwork', u'NN'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'dancing', u'dancing', u'NN'), (u';', u';', u':'), (u'she', u'she', u'PRP'), (u'often', u'often', u'RB'), (u'fell', u'fall', u'VBD'), (u'behind', u'behind', u'RP'), (u'in', u'in', u'IN'), (u'math', u'math', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Eliza', 'had', 'difficulties', 'doing', 'both', 'her', 'schoolwork', 'and', 'her', 'dancing', ';', 'she', 'often', 'fell', 'behind', 'in', 'math', '.']}, {'string': ' Her best friend Maddy was also a dancer; they often competed with each other to get the top parts in the dances.', 'parse': {'tree': '(ROOT (S (S (NP (PRP$ Her) (JJS best) (NN friend) (NN Maddy)) (VP (VBD was) (ADVP (RB also)) (NP (DT a) (NN dancer)))) (: ;) (S (NP (PRP they)) (ADVP (RB often)) (VP (VBD competed) (PP (IN with) (NP (DT each) (JJ other))) (S (VP (TO to) (VP (VB get) (NP (NP (DT the) (JJ top) (NNS parts)) (PP (IN in) (NP (DT the) (NNS dances))))))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'best', u'best', u'JJS'), (u'friend', u'friend', u'NN'), (u'Maddy', u'maddy', u'NN'), (u'was', u'be', u'VBD'), (u'also', u'also', u'RB'), (u'a', u'a', u'DT'), (u'dancer', u'dancer', u'NN'), (u';', u';', u':'), (u'they', u'they', u'PRP'), (u'often', u'often', u'RB'), (u'competed', u'compete', u'VBD'), (u'with', u'with', u'IN'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'to', u'to', u'TO'), (u'get', u'get', u'VB'), (u'the', u'the', u'DT'), (u'top', u'top', u'JJ'), (u'parts', u'part', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'dances', u'dance', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'best', 'friend', 'Maddy', 'was', 'also', 'a', 'dancer', ';', 'they', 'often', 'competed', 'with', 'each', 'other', 'to', 'get', 'the', 'top', 'parts', 'in', 'the', 'dances', '.']}, {'string': ' Their moms thought that because they competed with each other they might become mean towards one another but they did not let that get in the way of their friendship.', 'parse': {'tree': '(ROOT (S (S (NP (PRP$ Their) (NNS moms)) (VP (VBD thought) (SBAR (IN that) (S (SBAR (IN because) (S (NP (PRP they)) (VP (VBD competed) (PP (IN with) (NP (DT each) (JJ other)))))) (NP (PRP they)) (VP (MD might) (VP (VB become) (VP (VB mean) (PP (IN towards) (NP (CD one) (DT another)))))))))) (CC but) (S (NP (PRP they)) (VP (VBD did) (RB not) (VP (VB let) (S (NP (DT that)) (VP (VB get) (PP (IN in) (NP (NP (DT the) (NN way)) (PP (IN of) (NP (PRP$ their) (NN friendship)))))))))) (. .)))', 'lemma': [(u'Their', u'they', u'PRP$'), (u'moms', u'mom', u'NNS'), (u'thought', u'think', u'VBD'), (u'that', u'that', u'IN'), (u'because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'competed', u'compete', u'VBD'), (u'with', u'with', u'IN'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'they', u'they', u'PRP'), (u'might', u'might', u'MD'), (u'become', u'become', u'VB'), (u'mean', u'mean', u'VB'), (u'towards', u'towards', u'IN'), (u'one', u'one', u'CD'), (u'another', u'another', u'DT'), (u'but', u'but', u'CC'), (u'they', u'they', u'PRP'), (u'did', u'do', u'VBD'), (u'not', u'not', u'RB'), (u'let', u'let', u'VB'), (u'that', u'that', u'DT'), (u'get', u'get', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'way', u'way', u'NN'), (u'of', u'of', u'IN'), (u'their', u'they', u'PRP$'), (u'friendship', u'friendship', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Their', 'moms', 'thought', 'that', 'because', 'they', 'competed', 'with', 'each', 'other', 'they', 'might', 'become', 'mean', 'towards', 'one', 'another', 'but', 'they', 'did', 'not', 'let', 'that', 'get', 'in', 'the', 'way', 'of', 'their', 'friendship', '.']}, {'string': " In their latest recital Eliza had got the top part in the dance called `` The Beauty and the Rain ''.", 'parse': {'tree': "(ROOT (S (PP (IN In) (NP (PRP$ their) (JJS latest) (NN recital))) (NP (NNP Eliza)) (VP (VBD had) (VP (VBN got) (NP (DT the) (JJ top) (NN part)) (PP (IN in) (NP (NP (DT the) (NN dance)) (VP (VBN called) (`` ``) (NP (NP (DT The) (NN Beauty)) (CC and) (NP (DT the) (NN Rain))) ('' '')))))) (. .)))", 'lemma': [(u'In', u'in', u'IN'), (u'their', u'they', u'PRP$'), (u'latest', u'latest', u'JJS'), (u'recital', u'recital', u'NN'), (u'Eliza', u'Eliza', u'NNP'), (u'had', u'have', u'VBD'), (u'got', u'get', u'VBN'), (u'the', u'the', u'DT'), (u'top', u'top', u'JJ'), (u'part', u'part', u'NN'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'dance', u'dance', u'NN'), (u'called', u'call', u'VBN'), (u'``', u'``', u'``'), (u'The', u'the', u'DT'), (u'Beauty', u'beauty', u'NN'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'Rain', u'rain', u'NN'), (u"''", u"''", u"''"), (u'.', u'.', u'.')]}, 'tokens': ['In', 'their', 'latest', 'recital', 'Eliza', 'had', 'got', 'the', 'top', 'part', 'in', 'the', 'dance', 'called', '``', 'The', 'Beauty', 'and', 'the', 'Rain', "''", '.']}, {'string': ' The hours were long and draining on their bodies.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NNS hours)) (VP (VBD were) (ADJP (RB long) (CC and) (VBG draining)) (PP (IN on) (NP (PRP$ their) (NNS bodies)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'hours', u'hour', u'NNS'), (u'were', u'be', u'VBD'), (u'long', u'long', u'RB'), (u'and', u'and', u'CC'), (u'draining', u'drain', u'VBG'), (u'on', u'on', u'IN'), (u'their', u'they', u'PRP$'), (u'bodies', u'body', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'hours', 'were', 'long', 'and', 'draining', 'on', 'their', 'bodies', '.']}, {'string': ' All the girls and boys who left the performance center looked so tired.', 'parse': {'tree': '(ROOT (S (NP (NP (PDT All) (DT the) (NNS girls) (CC and) (NNS boys)) (SBAR (WHNP (WP who)) (S (VP (VBD left) (NP (DT the) (NN performance) (NN center)))))) (VP (VBD looked) (ADJP (RB so) (JJ tired))) (. .)))', 'lemma': [(u'All', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'girls', u'girl', u'NNS'), (u'and', u'and', u'CC'), (u'boys', u'boy', u'NNS'), (u'who', u'who', u'WP'), (u'left', u'leave', u'VBD'), (u'the', u'the', u'DT'), (u'performance', u'performance', u'NN'), (u'center', u'center', u'NN'), (u'looked', u'look', u'VBD'), (u'so', u'so', u'RB'), (u'tired', u'tired', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['All', 'the', 'girls', 'and', 'boys', 'who', 'left', 'the', 'performance', 'center', 'looked', 'so', 'tired', '.']}, {'string': " They could n't pick up their practice bags off of the floor as they walked to their parents to go home and their eyelids were droopy.", 'parse': {'tree': "(ROOT (S (S (NP (PRP They)) (VP (MD could) (RB n't) (VP (VB pick) (PRT (RP up)) (NP (PRP$ their) (NN practice) (NNS bags)) (ADVP (ADVP (RB off) (PP (IN of) (NP (DT the) (NN floor)))) (SBAR (IN as) (S (NP (PRP they)) (VP (VBD walked) (PP (TO to) (NP (PRP$ their) (NNS parents))))))) (S (VP (TO to) (VP (VB go) (NP (NN home)))))))) (CC and) (S (NP (PRP$ their) (NNS eyelids)) (VP (VBD were) (ADVP (RB droopy)))) (. .)))", 'lemma': [(u'They', u'they', u'PRP'), (u'could', u'could', u'MD'), (u"n't", u'not', u'RB'), (u'pick', u'pick', u'VB'), (u'up', u'up', u'RP'), (u'their', u'they', u'PRP$'), (u'practice', u'practice', u'NN'), (u'bags', u'bag', u'NNS'), (u'off', u'off', u'RB'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'floor', u'floor', u'NN'), (u'as', u'as', u'IN'), (u'they', u'they', u'PRP'), (u'walked', u'walk', u'VBD'), (u'to', u'to', u'TO'), (u'their', u'they', u'PRP$'), (u'parents', u'parent', u'NNS'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'home', u'home', u'NN'), (u'and', u'and', u'CC'), (u'their', u'they', u'PRP$'), (u'eyelids', u'eyelid', u'NNS'), (u'were', u'be', u'VBD'), (u'droopy', u'droopy', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'could', "n't", 'pick', 'up', 'their', 'practice', 'bags', 'off', 'of', 'the', 'floor', 'as', 'they', 'walked', 'to', 'their', 'parents', 'to', 'go', 'home', 'and', 'their', 'eyelids', 'were', 'droopy', '.']}, {'string': ' When Eliza got home, the last thing on her mind was her math problems.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Eliza)) (VP (VBD got) (NP (NN home))))) (, ,) (NP (NP (DT the) (JJ last) (NN thing)) (PP (IN on) (NP (PRP$ her) (NN mind)))) (VP (VBD was) (NP (PRP$ her) (NN math) (NNS problems))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Eliza', u'Eliza', u'NNP'), (u'got', u'get', u'VBD'), (u'home', u'home', u'NN'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'last', u'last', u'JJ'), (u'thing', u'thing', u'NN'), (u'on', u'on', u'IN'), (u'her', u'she', u'PRP$'), (u'mind', u'mind', u'NN'), (u'was', u'be', u'VBD'), (u'her', u'she', u'PRP$'), (u'math', u'math', u'NN'), (u'problems', u'problem', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Eliza', 'got', 'home', ',', 'the', 'last', 'thing', 'on', 'her', 'mind', 'was', 'her', 'math', 'problems', '.']}, {'string': ' All she could think of was bathing her sore feet and her head hitting her soft fluffy pillow.', 'parse': {'tree': '(ROOT (S (NP (NP (DT All)) (SBAR (S (NP (PRP she)) (VP (MD could) (VP (VB think) (PP (IN of))))))) (VP (VBD was) (VP (VBN bathing) (S (NP (NP (PRP$ her) (JJ sore) (NNS feet)) (CC and) (NP (PRP$ her) (NN head))) (VP (VBG hitting) (NP (PRP$ her) (JJ soft) (JJ fluffy) (NN pillow)))))) (. .)))', 'lemma': [(u'All', u'all', u'DT'), (u'she', u'she', u'PRP'), (u'could', u'could', u'MD'), (u'think', u'think', u'VB'), (u'of', u'of', u'IN'), (u'was', u'be', u'VBD'), (u'bathing', u'bath', u'VBN'), (u'her', u'she', u'PRP$'), (u'sore', u'sore', u'JJ'), (u'feet', u'foot', u'NNS'), (u'and', u'and', u'CC'), (u'her', u'she', u'PRP$'), (u'head', u'head', u'NN'), (u'hitting', u'hit', u'VBG'), (u'her', u'she', u'PRP$'), (u'soft', u'soft', u'JJ'), (u'fluffy', u'fluffy', u'JJ'), (u'pillow', u'pillow', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['All', 'she', 'could', 'think', 'of', 'was', 'bathing', 'her', 'sore', 'feet', 'and', 'her', 'head', 'hitting', 'her', 'soft', 'fluffy', 'pillow', '.']}, {'string': " Her teachers started to become aware of Eliza 's problems in the classroom and called her parents into school to talk to her teachers.", 'parse': {'tree': "(ROOT (S (NP (PRP$ Her) (NNS teachers)) (VP (VP (VBD started) (S (VP (TO to) (VP (VB become) (ADJP (JJ aware) (PP (IN of) (NP (NP (NNP Eliza) (POS 's)) (NNS problems)))) (PP (IN in) (NP (DT the) (NN classroom))))))) (CC and) (VP (VBD called) (NP (PRP$ her) (NNS parents)) (PP (IN into) (NP (NN school))) (S (VP (TO to) (VP (VB talk) (PP (TO to) (NP (PRP$ her) (NNS teachers)))))))) (. .)))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'teachers', u'teacher', u'NNS'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'become', u'become', u'VB'), (u'aware', u'aware', u'JJ'), (u'of', u'of', u'IN'), (u'Eliza', u'Eliza', u'NNP'), (u"'s", u"'s", u'POS'), (u'problems', u'problem', u'NNS'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'classroom', u'classroom', u'NN'), (u'and', u'and', u'CC'), (u'called', u'call', u'VBD'), (u'her', u'she', u'PRP$'), (u'parents', u'parent', u'NNS'), (u'into', u'into', u'IN'), (u'school', u'school', u'NN'), (u'to', u'to', u'TO'), (u'talk', u'talk', u'VB'), (u'to', u'to', u'TO'), (u'her', u'she', u'PRP$'), (u'teachers', u'teacher', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'teachers', 'started', 'to', 'become', 'aware', 'of', 'Eliza', "'s", 'problems', 'in', 'the', 'classroom', 'and', 'called', 'her', 'parents', 'into', 'school', 'to', 'talk', 'to', 'her', 'teachers', '.']}, {'string': " Her parents knew that dancing was Eliza 's dream and would not let anything get in the way of her performances.", 'parse': {'tree': "(ROOT (S (NP (PRP$ Her) (NNS parents)) (VP (VP (VBD knew) (SBAR (IN that) (S (NP (NN dancing)) (VP (VBD was) (NP (NP (NNP Eliza) (POS 's)) (NN dream)))))) (CC and) (VP (MD would) (RB not) (VP (VB let) (S (NP (NN anything)) (VP (VB get) (PP (IN in) (NP (NP (DT the) (NN way)) (PP (IN of) (NP (PRP$ her) (NNS performances)))))))))) (. .)))", 'lemma': [(u'Her', u'she', u'PRP$'), (u'parents', u'parent', u'NNS'), (u'knew', u'know', u'VBD'), (u'that', u'that', u'IN'), (u'dancing', u'dancing', u'NN'), (u'was', u'be', u'VBD'), (u'Eliza', u'Eliza', u'NNP'), (u"'s", u"'s", u'POS'), (u'dream', u'dream', u'NN'), (u'and', u'and', u'CC'), (u'would', u'would', u'MD'), (u'not', u'not', u'RB'), (u'let', u'let', u'VB'), (u'anything', u'anything', u'NN'), (u'get', u'get', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'way', u'way', u'NN'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'performances', u'performance', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'parents', 'knew', 'that', 'dancing', 'was', 'Eliza', "'s", 'dream', 'and', 'would', 'not', 'let', 'anything', 'get', 'in', 'the', 'way', 'of', 'her', 'performances', '.']}, {'string': ' It was important for her parents for Eliza to do well in all parts of her life, but her dancing is what lit a fire in her eyes.', 'parse': {'tree': '(ROOT (S (S (NP (PRP It)) (VP (VBD was) (ADJP (JJ important) (PP (IN for) (NP (PRP$ her) (NNS parents)))) (PP (IN for) (NP (NNP Eliza))) (S (VP (TO to) (VP (VB do) (ADVP (RB well)) (PP (IN in) (NP (NP (DT all) (NNS parts)) (PP (IN of) (NP (PRP$ her) (NN life)))))))))) (, ,) (CC but) (S (NP (PRP$ her) (NN dancing)) (VP (VBZ is) (SBAR (WHNP (WP what)) (S (VP (VBD lit) (NP (DT a) (NN fire)) (PP (IN in) (NP (PRP$ her) (NNS eyes)))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'important', u'important', u'JJ'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'parents', u'parent', u'NNS'), (u'for', u'for', u'IN'), (u'Eliza', u'Eliza', u'NNP'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'well', u'well', u'RB'), (u'in', u'in', u'IN'), (u'all', u'all', u'DT'), (u'parts', u'part', u'NNS'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'life', u'life', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'her', u'she', u'PRP$'), (u'dancing', u'dancing', u'NN'), (u'is', u'be', u'VBZ'), (u'what', u'what', u'WP'), (u'lit', u'light', u'VBD'), (u'a', u'a', u'DT'), (u'fire', u'fire', u'NN'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'eyes', u'eye', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'important', 'for', 'her', 'parents', 'for', 'Eliza', 'to', 'do', 'well', 'in', 'all', 'parts', 'of', 'her', 'life', ',', 'but', 'her', 'dancing', 'is', 'what', 'lit', 'a', 'fire', 'in', 'her', 'eyes', '.']}, {'string': ' Her parents got her extra help to help with her homework, which helped Eliza keep track of all parts of her life.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (NNS parents)) (VP (VBD got) (NP (PRP$ her) (JJ extra) (NN help)) (S (VP (TO to) (VP (VB help) (PP (IN with) (NP (NP (PRP$ her) (NN homework)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBD helped) (SBAR (S (NP (NNP Eliza)) (VP (VBP keep) (NP (NP (NN track)) (PP (IN of) (NP (NP (DT all) (NNS parts)) (PP (IN of) (NP (PRP$ her) (NN life)))))))))))))))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'parents', u'parent', u'NNS'), (u'got', u'get', u'VBD'), (u'her', u'she', u'PRP$'), (u'extra', u'extra', u'JJ'), (u'help', u'help', u'NN'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'homework', u'homework', u'NN'), (u',', u',', u','), (u'which', u'which', u'WDT'), (u'helped', u'help', u'VBD'), (u'Eliza', u'Eliza', u'NNP'), (u'keep', u'keep', u'VBP'), (u'track', u'track', u'NN'), (u'of', u'of', u'IN'), (u'all', u'all', u'DT'), (u'parts', u'part', u'NNS'), (u'of', u'of', u'IN'), (u'her', u'she', u'PRP$'), (u'life', u'life', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'parents', 'got', 'her', 'extra', 'help', 'to', 'help', 'with', 'her', 'homework', ',', 'which', 'helped', 'Eliza', 'keep', 'track', 'of', 'all', 'parts', 'of', 'her', 'life', '.']}], 'questions': [{'question': {'string': " What was Eliza 's favorite sport that she did?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NP (NP (NNP Eliza) (POS 's)) (JJ favorite) (NN sport)) (SBAR (IN that) (S (NP (PRP she)) (VP (VBD did)))))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'Eliza', u'Eliza', u'NNP'), (u"'s", u"'s", u'POS'), (u'favorite', u'favorite', u'JJ'), (u'sport', u'sport', u'NN'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'did', u'do', u'VBD'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'Eliza', "'s", 'favorite', 'sport', 'that', 'she', 'did', '?']}, 'answers': [{'string': ' Gymnastics', 'parse': {'tree': '(ROOT (NP (NNS Gymnastics)))', 'lemma': [(u'Gymnastics', u'gymnastics', u'NNS')]}, 'tokens': ['Gymnastics']}, {'string': ' Basketball', 'parse': {'tree': '(ROOT (NP (NNP Basketball)))', 'lemma': [(u'Basketball', u'Basketball', u'NNP')]}, 'tokens': ['Basketball']}, {'string': ' Dance', 'parse': {'tree': '(ROOT (NP (NNP Dance)))', 'lemma': [(u'Dance', u'Dance', u'NNP')]}, 'tokens': ['Dance']}, {'string': ' Soccer', 'parse': {'tree': '(ROOT (NP (NNP Soccer)))', 'lemma': [(u'Soccer', u'Soccer', u'NNP')]}, 'tokens': ['Soccer']}], 'mode': 0}, {'question': {'string': ' How did her parents help Eliza with her school work she was having problems with?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (PRP$ her) (NNS parents)) (VP (VB help) (NP (NP (NNP Eliza)) (PP (IN with) (NP (PRP$ her) (NN school) (NN work))) (SBAR (S (NP (PRP she)) (VP (VBD was) (VP (VBG having) (NP (NNS problems)) (PP (IN with))))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'did', u'do', u'VBD'), (u'her', u'she', u'PRP$'), (u'parents', u'parent', u'NNS'), (u'help', u'help', u'VB'), (u'Eliza', u'Eliza', u'NNP'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'school', u'school', u'NN'), (u'work', u'work', u'NN'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'having', u'have', u'VBG'), (u'problems', u'problem', u'NNS'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'did', 'her', 'parents', 'help', 'Eliza', 'with', 'her', 'school', 'work', 'she', 'was', 'having', 'problems', 'with', '?']}, 'answers': [{'string': ' Focus on dance and not do her schoolwork', 'parse': {'tree': '(ROOT (UCP (PP (ADVP (RB Focus)) (IN on) (NP (NN dance))) (CC and) (RB not) (SBAR (S (VP (VBP do) (NP (PRP$ her) (NN schoolwork)))))))', 'lemma': [(u'Focus', u'focus', u'RB'), (u'on', u'on', u'IN'), (u'dance', u'dance', u'NN'), (u'and', u'and', u'CC'), (u'not', u'not', u'RB'), (u'do', u'do', u'VBP'), (u'her', u'she', u'PRP$'), (u'schoolwork', u'schoolwork', u'NN')]}, 'tokens': ['Focus', 'on', 'dance', 'and', 'not', 'do', 'her', 'schoolwork']}, {'string': ' Let her friends do her homework', 'parse': {'tree': '(ROOT (S (VP (VB Let) (SBAR (S (NP (PRP$ her) (NNS friends)) (VP (VBP do) (NP (PRP$ her) (NN homework))))))))', 'lemma': [(u'Let', u'let', u'VB'), (u'her', u'she', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'do', u'do', u'VBP'), (u'her', u'she', u'PRP$'), (u'homework', u'homework', u'NN')]}, 'tokens': ['Let', 'her', 'friends', 'do', 'her', 'homework']}, {'string': ' Stayed at school longer hours', 'parse': {'tree': '(ROOT (VP (VBN Stayed) (PP (IN at) (S (VP (NN school) (NP (JJR longer) (NNS hours)))))))', 'lemma': [(u'Stayed', u'stay', u'VBN'), (u'at', u'at', u'IN'), (u'school', u'school', u'NN'), (u'longer', u'longer', u'JJR'), (u'hours', u'hour', u'NNS')]}, 'tokens': ['Stayed', 'at', 'school', 'longer', 'hours']}, {'string': ' Got her extra help outside of the classroom', 'parse': {'tree': '(ROOT (SINV (VP (VBD Got)) (NP (NP (PRP$ her) (JJ extra) (NN help) (NN outside)) (PP (IN of) (NP (DT the) (NN classroom))))))', 'lemma': [(u'Got', u'get', u'VBD'), (u'her', u'she', u'PRP$'), (u'extra', u'extra', u'JJ'), (u'help', u'help', u'NN'), (u'outside', u'outside', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'classroom', u'classroom', u'NN')]}, 'tokens': ['Got', 'her', 'extra', 'help', 'outside', 'of', 'the', 'classroom']}], 'mode': 0}, {'question': {'string': ' What part of school was Eliza having problems with?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN part)) (PP (IN of) (NP (NN school)))) (SQ (VBD was) (NP (NNP Eliza)) (VP (VBG having) (NP (NNS problems)) (PP (IN with)))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'part', u'part', u'NN'), (u'of', u'of', u'IN'), (u'school', u'school', u'NN'), (u'was', u'be', u'VBD'), (u'Eliza', u'Eliza', u'NNP'), (u'having', u'have', u'VBG'), (u'problems', u'problem', u'NNS'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'part', 'of', 'school', 'was', 'Eliza', 'having', 'problems', 'with', '?']}, 'answers': [{'string': ' English', 'parse': {'tree': '(ROOT (NP (NNP English)))', 'lemma': [(u'English', u'English', u'NNP')]}, 'tokens': ['English']}, {'string': ' History', 'parse': {'tree': '(ROOT (NP (NN History)))', 'lemma': [(u'History', u'history', u'NN')]}, 'tokens': ['History']}, {'string': ' Science', 'parse': {'tree': '(ROOT (NP (NNP Science)))', 'lemma': [(u'Science', u'Science', u'NNP')]}, 'tokens': ['Science']}, {'string': ' Math', 'parse': {'tree': '(ROOT (NP (NNP Math)))', 'lemma': [(u'Math', u'Math', u'NNP')]}, 'tokens': ['Math']}], 'mode': 1}, {'question': {'string': ' What was the recital that Eliza and Maddy were practicing for?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (DT the) (NN recital)) (SBAR (IN that) (S (NP (NNP Eliza) (CC and) (NNP Maddy)) (VP (VBD were) (VP (VBG practicing) (PP (IN for))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'recital', u'recital', u'NN'), (u'that', u'that', u'IN'), (u'Eliza', u'Eliza', u'NNP'), (u'and', u'and', u'CC'), (u'Maddy', u'Maddy', u'NNP'), (u'were', u'be', u'VBD'), (u'practicing', u'practice', u'VBG'), (u'for', u'for', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'the', 'recital', 'that', 'Eliza', 'and', 'Maddy', 'were', 'practicing', 'for', '?']}, 'answers': [{'string': ' Beauty and the Beast', 'parse': {'tree': '(ROOT (NP (NP (NN Beauty)) (CC and) (NP (DT the) (NN Beast))))', 'lemma': [(u'Beauty', u'beauty', u'NN'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'Beast', u'beast', u'NN')]}, 'tokens': ['Beauty', 'and', 'the', 'Beast']}, {'string': ' The Beauty and the Rain', 'parse': {'tree': '(ROOT (NP (NP (DT The) (NN Beauty)) (CC and) (NP (DT the) (NN Rain))))', 'lemma': [(u'The', u'the', u'DT'), (u'Beauty', u'beauty', u'NN'), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'Rain', u'rain', u'NN')]}, 'tokens': ['The', 'Beauty', 'and', 'the', 'Rain']}, {'string': ' Beauty is inside our Hearts', 'parse': {'tree': '(ROOT (S (NP (NNP Beauty)) (VP (VBZ is) (ADVP (RB inside)) (NP (PRP$ our) (NN Hearts)))))', 'lemma': [(u'Beauty', u'Beauty', u'NNP'), (u'is', u'be', u'VBZ'), (u'inside', u'inside', u'RB'), (u'our', u'we', u'PRP$'), (u'Hearts', u'heart', u'NN')]}, 'tokens': ['Beauty', 'is', 'inside', 'our', 'Hearts']}, {'string': ' We are all Beautiful', 'parse': {'tree': '(ROOT (S (NP (PRP We)) (VP (VBP are) (NP (DT all) (NN Beautiful)))))', 'lemma': [(u'We', u'we', u'PRP'), (u'are', u'be', u'VBP'), (u'all', u'all', u'DT'), (u'Beautiful', u'beautiful', u'NN')]}, 'tokens': ['We', 'are', 'all', 'Beautiful']}], 'mode': 1}]}
{'sentences': [{'string': ' A day at the beach.', 'parse': {'tree': '(ROOT (NP (NP (DT A) (NN day)) (PP (IN at) (NP (DT the) (NN beach))) (. .)))', 'lemma': [(u'A', u'a', u'DT'), (u'day', u'day', u'NN'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['A', 'day', 'at', 'the', 'beach', '.']}, {'string': ' When Sam woke in the morning, he was super excited!', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Sam)) (VP (VBD woke) (PP (IN in) (NP (DT the) (NN morning)))))) (, ,) (NP (PRP he)) (VP (VBD was) (ADJP (RB super) (JJ excited))) (. !)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Sam', u'Sam', u'NNP'), (u'woke', u'wake', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'morning', u'morning', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'super', u'super', u'RB'), (u'excited', u'excited', u'JJ'), (u'!', u'!', u'.')]}, 'tokens': ['When', 'Sam', 'woke', 'in', 'the', 'morning', ',', 'he', 'was', 'super', 'excited', '!']}, {'string': ' Today was the day!', 'parse': {'tree': '(ROOT (S (NP (NNP Today)) (VP (VBD was) (NP (DT the) (NN day))) (. !)))', 'lemma': [(u'Today', u'Today', u'NNP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'day', u'day', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['Today', 'was', 'the', 'day', '!']}, {'string': " It was Sunday, the day that Sam 's mom and dad had promised to take Sam to the beach.", 'parse': {'tree': "(ROOT (S (NP (PRP It)) (VP (VBD was) (NP (NNP Sunday)) (, ,) (SBAR (NP (DT the) (NN day)) (IN that) (S (NP (NP (NNP Sam) (POS 's)) (NN mom) (CC and) (NN dad)) (VP (VBD had) (VP (VBN promised) (S (VP (TO to) (VP (VB take) (NP (NNP Sam)) (PP (TO to) (NP (DT the) (NN beach))))))))))) (. .)))", 'lemma': [(u'It', u'it', u'PRP'), (u'was', u'be', u'VBD'), (u'Sunday', u'Sunday', u'NNP'), (u',', u',', u','), (u'the', u'the', u'DT'), (u'day', u'day', u'NN'), (u'that', u'that', u'IN'), (u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'and', u'and', u'CC'), (u'dad', u'dad', u'NN'), (u'had', u'have', u'VBD'), (u'promised', u'promise', u'VBN'), (u'to', u'to', u'TO'), (u'take', u'take', u'VB'), (u'Sam', u'Sam', u'NNP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'was', 'Sunday', ',', 'the', 'day', 'that', 'Sam', "'s", 'mom', 'and', 'dad', 'had', 'promised', 'to', 'take', 'Sam', 'to', 'the', 'beach', '.']}, {'string': " Sam 's grandma had given a pail and shovel to Sam to use in the sand.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Sam) (POS 's)) (NN grandma)) (VP (VBD had) (VP (VBN given) (NP (DT a) (NN pail) (CC and) (NN shovel)) (PP (TO to) (NP (NNP Sam))) (S (VP (TO to) (VP (VB use) (PP (IN in) (NP (DT the) (NN sand)))))))) (. .)))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandma', u'grandma', u'NN'), (u'had', u'have', u'VBD'), (u'given', u'give', u'VBN'), (u'a', u'a', u'DT'), (u'pail', u'pail', u'NN'), (u'and', u'and', u'CC'), (u'shovel', u'shovel', u'NN'), (u'to', u'to', u'TO'), (u'Sam', u'Sam', u'NNP'), (u'to', u'to', u'TO'), (u'use', u'use', u'VB'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'sand', u'sand', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', "'s", 'grandma', 'had', 'given', 'a', 'pail', 'and', 'shovel', 'to', 'Sam', 'to', 'use', 'in', 'the', 'sand', '.']}, {'string': ' At breakfast Sam was so excited he was wiggling in his seat!', 'parse': {'tree': '(ROOT (S (PP (IN At) (NP (NN breakfast))) (NP (NNP Sam)) (VP (VBD was) (ADJP (RB so) (JJ excited) (SBAR (S (NP (PRP he)) (VP (VBD was) (ADJP (VBG wiggling) (PP (IN in) (NP (PRP$ his) (NN seat))))))))) (. !)))', 'lemma': [(u'At', u'at', u'IN'), (u'breakfast', u'breakfast', u'NN'), (u'Sam', u'Sam', u'NNP'), (u'was', u'be', u'VBD'), (u'so', u'so', u'RB'), (u'excited', u'excited', u'JJ'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'wiggling', u'wiggle', u'VBG'), (u'in', u'in', u'IN'), (u'his', u'he', u'PRP$'), (u'seat', u'seat', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['At', 'breakfast', 'Sam', 'was', 'so', 'excited', 'he', 'was', 'wiggling', 'in', 'his', 'seat', '!']}, {'string': ' Mom told Sam that they would leave when the big hand on the clock was pointing to the 10, and the little had was pointing to the 12.', 'parse': {'tree': '(ROOT (S (S (NP (NN Mom)) (VP (VBD told) (NP (NNP Sam)) (SBAR (IN that) (S (NP (PRP they)) (VP (MD would) (VP (VB leave) (SBAR (WHADVP (WRB when)) (S (NP (NP (DT the) (JJ big) (NN hand)) (PP (IN on) (NP (DT the) (NN clock)))) (VP (VBD was) (VP (VBG pointing) (PP (TO to) (NP (DT the) (CD 10))))))))))))) (, ,) (CC and) (S (NP (DT the) (JJ little)) (VP (VBD had) (VP (VBD was) (VP (VBG pointing) (PP (TO to) (NP (DT the) (CD 12))))))) (. .)))', 'lemma': [(u'Mom', u'mom', u'NN'), (u'told', u'tell', u'VBD'), (u'Sam', u'Sam', u'NNP'), (u'that', u'that', u'IN'), (u'they', u'they', u'PRP'), (u'would', u'would', u'MD'), (u'leave', u'leave', u'VB'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'big', u'big', u'JJ'), (u'hand', u'hand', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'clock', u'clock', u'NN'), (u'was', u'be', u'VBD'), (u'pointing', u'point', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'10', u'10', u'CD'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'the', u'the', u'DT'), (u'little', u'little', u'JJ'), (u'had', u'have', u'VBD'), (u'was', u'be', u'VBD'), (u'pointing', u'point', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'12', u'12', u'CD'), (u'.', u'.', u'.')]}, 'tokens': ['Mom', 'told', 'Sam', 'that', 'they', 'would', 'leave', 'when', 'the', 'big', 'hand', 'on', 'the', 'clock', 'was', 'pointing', 'to', 'the', '10', ',', 'and', 'the', 'little', 'had', 'was', 'pointing', 'to', 'the', '12', '.']}, {'string': ' Mom asked Sam if he would like to help make sandwiches for the trip, and Sam said that he wanted to help.', 'parse': {'tree': '(ROOT (S (S (NP (NN Mom)) (VP (VBD asked) (NP (NNP Sam)) (SBAR (IN if) (S (NP (PRP he)) (VP (MD would) (VP (VB like) (S (VP (TO to) (VP (VB help) (VP (VB make) (NP (NP (NNS sandwiches)) (PP (IN for) (NP (DT the) (NN trip)))))))))))))) (, ,) (CC and) (S (NP (NNP Sam)) (VP (VBD said) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD wanted) (S (VP (TO to) (VP (VB help))))))))) (. .)))', 'lemma': [(u'Mom', u'mom', u'NN'), (u'asked', u'ask', u'VBD'), (u'Sam', u'Sam', u'NNP'), (u'if', u'if', u'IN'), (u'he', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'make', u'make', u'VB'), (u'sandwiches', u'sandwich', u'NNS'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'trip', u'trip', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'Sam', u'Sam', u'NNP'), (u'said', u'say', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'to', u'to', u'TO'), (u'help', u'help', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Mom', 'asked', 'Sam', 'if', 'he', 'would', 'like', 'to', 'help', 'make', 'sandwiches', 'for', 'the', 'trip', ',', 'and', 'Sam', 'said', 'that', 'he', 'wanted', 'to', 'help', '.']}, {'string': " Dad said, `` let 's make a game of it, we need to make a sandwich for each of us.", 'parse': {'tree': "(ROOT (S (S (NP (NNP Dad)) (VP (VBD said) (, ,) (`` ``) (S (NP (NNP let) (POS 's)) (VP (VB make) (NP (NP (DT a) (NN game)) (PP (IN of) (NP (PRP it)))))))) (, ,) (NP (PRP we)) (VP (VBP need) (S (VP (TO to) (VP (VB make) (NP (DT a) (NN sandwich)) (PP (IN for) (NP (NP (DT each)) (PP (IN of) (NP (PRP us))))))))) (. .)))", 'lemma': [(u'Dad', u'Dad', u'NNP'), (u'said', u'say', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'let', u'let', u'NNP'), (u"'s", u"'s", u'POS'), (u'make', u'make', u'VB'), (u'a', u'a', u'DT'), (u'game', u'game', u'NN'), (u'of', u'of', u'IN'), (u'it', u'it', u'PRP'), (u',', u',', u','), (u'we', u'we', u'PRP'), (u'need', u'need', u'VBP'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'a', u'a', u'DT'), (u'sandwich', u'sandwich', u'NN'), (u'for', u'for', u'IN'), (u'each', u'each', u'DT'), (u'of', u'of', u'IN'), (u'us', u'we', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Dad', 'said', ',', '``', 'let', "'s", 'make', 'a', 'game', 'of', 'it', ',', 'we', 'need', 'to', 'make', 'a', 'sandwich', 'for', 'each', 'of', 'us', '.']}, {'string': ' There are three of us, so we need three sandwiches.', 'parse': {'tree': '(ROOT (S (S (NP (EX There)) (VP (VBP are) (NP (NP (CD three)) (PP (IN of) (NP (PRP us)))))) (, ,) (IN so) (S (NP (PRP we)) (VP (VBP need) (NP (CD three) (NNS sandwiches)))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'are', u'be', u'VBP'), (u'three', u'three', u'CD'), (u'of', u'of', u'IN'), (u'us', u'we', u'PRP'), (u',', u',', u','), (u'so', u'so', u'IN'), (u'we', u'we', u'PRP'), (u'need', u'need', u'VBP'), (u'three', u'three', u'CD'), (u'sandwiches', u'sandwich', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'are', 'three', 'of', 'us', ',', 'so', 'we', 'need', 'three', 'sandwiches', '.']}, {'string': " Let 's count as we make the sandwiches! ''", 'parse': {'tree': "(ROOT (S (NP (NNP Let) (POS 's)) (VP (VBP count) (SBAR (IN as) (S (NP (PRP we)) (VP (VBP make) (NP (DT the) (NNS sandwiches)))))) (. !) ('' '')))", 'lemma': [(u'Let', u'Let', u'NNP'), (u"'s", u"'s", u'POS'), (u'count', u'count', u'VBP'), (u'as', u'as', u'IN'), (u'we', u'we', u'PRP'), (u'make', u'make', u'VBP'), (u'the', u'the', u'DT'), (u'sandwiches', u'sandwich', u'NNS'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Let', "'s", 'count', 'as', 'we', 'make', 'the', 'sandwiches', '!', "''"]}, {'string': ' Sam counted as mom made the sandwiches, one for dad, one for mom and one for Sam.', 'parse': {'tree': '(ROOT (S (NP (NP (NNP Sam)) (VP (VBN counted) (PP (IN as) (NP (NN mom))))) (VP (VBD made) (NP (NP (NP (DT the) (NNS sandwiches)) (, ,) (NP (NP (CD one)) (PP (IN for) (NP (NN dad))))) (, ,) (NP (NP (CD one)) (PP (IN for) (NP (NN mom)))) (CC and) (NP (NP (CD one)) (PP (IN for) (NP (NNP Sam)))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'counted', u'count', u'VBN'), (u'as', u'as', u'IN'), (u'mom', u'mom', u'NN'), (u'made', u'make', u'VBD'), (u'the', u'the', u'DT'), (u'sandwiches', u'sandwich', u'NNS'), (u',', u',', u','), (u'one', u'one', u'CD'), (u'for', u'for', u'IN'), (u'dad', u'dad', u'NN'), (u',', u',', u','), (u'one', u'one', u'CD'), (u'for', u'for', u'IN'), (u'mom', u'mom', u'NN'), (u'and', u'and', u'CC'), (u'one', u'one', u'CD'), (u'for', u'for', u'IN'), (u'Sam', u'Sam', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'counted', 'as', 'mom', 'made', 'the', 'sandwiches', ',', 'one', 'for', 'dad', ',', 'one', 'for', 'mom', 'and', 'one', 'for', 'Sam', '.']}, {'string': ' Then mom started to make another sandwich!', 'parse': {'tree': '(ROOT (S (RB Then) (NP (NN mom)) (VP (VBD started) (S (VP (TO to) (VP (VB make) (NP (DT another) (NN sandwich)))))) (. !)))', 'lemma': [(u'Then', u'then', u'RB'), (u'mom', u'mom', u'NN'), (u'started', u'start', u'VBD'), (u'to', u'to', u'TO'), (u'make', u'make', u'VB'), (u'another', u'another', u'DT'), (u'sandwich', u'sandwich', u'NN'), (u'!', u'!', u'.')]}, 'tokens': ['Then', 'mom', 'started', 'to', 'make', 'another', 'sandwich', '!']}, {'string': " `` Mom! ''", 'parse': {'tree': "(ROOT (INTJ (`` ``) (UH Mom) (. !) ('' '')))", 'lemma': [(u'``', u'``', u'``'), (u'Mom', u'mom', u'UH'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['``', 'Mom', '!', "''"]}, {'string': " said Sam, `` we have three sandwiches and that makes one sandwich for each of us. ''", 'parse': {'tree': "(ROOT (SINV (VP (VBD said)) (NP (NNP Sam)) (, ,) (`` ``) (S (S (NP (PRP we)) (VP (VBP have) (NP (CD three) (NNS sandwiches)))) (CC and) (S (NP (DT that)) (VP (VBZ makes) (NP (NP (CD one) (NN sandwich)) (PP (IN for) (NP (NP (DT each)) (PP (IN of) (NP (PRP us))))))))) (. .) ('' '')))", 'lemma': [(u'said', u'say', u'VBD'), (u'Sam', u'Sam', u'NNP'), (u',', u',', u','), (u'``', u'``', u'``'), (u'we', u'we', u'PRP'), (u'have', u'have', u'VBP'), (u'three', u'three', u'CD'), (u'sandwiches', u'sandwich', u'NNS'), (u'and', u'and', u'CC'), (u'that', u'that', u'DT'), (u'makes', u'make', u'VBZ'), (u'one', u'one', u'CD'), (u'sandwich', u'sandwich', u'NN'), (u'for', u'for', u'IN'), (u'each', u'each', u'DT'), (u'of', u'of', u'IN'), (u'us', u'we', u'PRP'), (u'.', u'.', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['said', 'Sam', ',', '``', 'we', 'have', 'three', 'sandwiches', 'and', 'that', 'makes', 'one', 'sandwich', 'for', 'each', 'of', 'us', '.', "''"]}, {'string': " Sam 's mom laughed, `` You 're right Sam! ''", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Sam) (POS 's)) (NN mom)) (VP (VBD laughed) (, ,) (`` ``) (S (NP (PRP You)) (VP (VBP 're) (ADVP (RB right)) (NP (NNP Sam))))) (. !) ('' '')))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'laughed', u'laugh', u'VBD'), (u',', u',', u','), (u'``', u'``', u'``'), (u'You', u'you', u'PRP'), (u"'re", u'be', u'VBP'), (u'right', u'right', u'RB'), (u'Sam', u'Sam', u'NNP'), (u'!', u'!', u'.'), (u"''", u"''", u"''")]}, 'tokens': ['Sam', "'s", 'mom', 'laughed', ',', '``', 'You', "'re", 'right', 'Sam', '!', "''"]}, {'string': " Sam 's mom said she was being silly.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Sam) (POS 's)) (NN mom)) (VP (VBD said) (SBAR (S (NP (PRP she)) (VP (VBD was) (VP (VBG being) (ADJP (JJ silly))))))) (. .)))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN'), (u'said', u'say', u'VBD'), (u'she', u'she', u'PRP'), (u'was', u'be', u'VBD'), (u'being', u'be', u'VBG'), (u'silly', u'silly', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', "'s", 'mom', 'said', 'she', 'was', 'being', 'silly', '.']}], 'questions': [{'question': {'string': ' How many people were going to the beach?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHADJP (WRB How) (JJ many)) (NNS people)) (SQ (VP (VBD were) (VP (VBG going) (PP (TO to) (NP (DT the) (NN beach)))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'many', u'many', u'JJ'), (u'people', u'people', u'NNS'), (u'were', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'many', 'people', 'were', 'going', 'to', 'the', 'beach', '?']}, 'answers': [{'string': ' To many people to count!', 'parse': {'tree': '(ROOT (FRAG (PP (TO To) (NP (JJ many) (NNS people) (S (VP (TO to) (VP (VB count)))))) (. !)))', 'lemma': [(u'To', u'to', u'TO'), (u'many', u'many', u'JJ'), (u'people', u'people', u'NNS'), (u'to', u'to', u'TO'), (u'count', u'count', u'VB'), (u'!', u'!', u'.')]}, 'tokens': ['To', 'many', 'people', 'to', 'count', '!']}, {'string': ' Five people.', 'parse': {'tree': '(ROOT (NP (CD Five) (NNS people) (. .)))', 'lemma': [(u'Five', u'five', u'CD'), (u'people', u'people', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Five', 'people', '.']}, {'string': ' Sam was the only one going to the beach.', 'parse': {'tree': '(ROOT (S (NP (NNP Sam)) (VP (VBD was) (NP (NP (DT the) (JJ only) (NN one)) (VP (VBG going) (PP (TO to) (NP (DT the) (NN beach)))))) (. .)))', 'lemma': [(u'Sam', u'Sam', u'NNP'), (u'was', u'be', u'VBD'), (u'the', u'the', u'DT'), (u'only', u'only', u'JJ'), (u'one', u'one', u'NN'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', 'was', 'the', 'only', 'one', 'going', 'to', 'the', 'beach', '.']}, {'string': ' Three, Sam his mom and his dad.', 'parse': {'tree': '(ROOT (NP (NP (NNP Three) (, ,) (NNP Sam)) (NP (NP (PRP$ his) (NN mom)) (CC and) (NP (PRP$ his) (NN dad))) (. .)))', 'lemma': [(u'Three', u'Three', u'NNP'), (u',', u',', u','), (u'Sam', u'Sam', u'NNP'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u'and', u'and', u'CC'), (u'his', u'he', u'PRP$'), (u'dad', u'dad', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Three', ',', 'Sam', 'his', 'mom', 'and', 'his', 'dad', '.']}], 'mode': 1}, {'question': {'string': ' Why was Sam excited?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD was) (NP (NNP Sam)) (VP (VBN excited))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'was', u'be', u'VBD'), (u'Sam', u'Sam', u'NNP'), (u'excited', u'excite', u'VBN'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'was', 'Sam', 'excited', '?']}, 'answers': [{'string': ' Because his grandma gave him a pale.', 'parse': {'tree': '(ROOT (SINV (PP (IN Because) (NP (PRP$ his) (NN grandma))) (VP (VBD gave) (NP (PRP him))) (NP (DT a) (NN pale)) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'his', u'he', u'PRP$'), (u'grandma', u'grandma', u'NN'), (u'gave', u'give', u'VBD'), (u'him', u'he', u'PRP'), (u'a', u'a', u'DT'), (u'pale', u'pale', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'his', 'grandma', 'gave', 'him', 'a', 'pale', '.']}, {'string': ' Because he likes sandwiches.', 'parse': {'tree': '(ROOT (FRAG (SBAR (IN Because) (S (NP (PRP he)) (VP (VBZ likes) (NP (NNS sandwiches))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'likes', u'like', u'VBZ'), (u'sandwiches', u'sandwich', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'he', 'likes', 'sandwiches', '.']}, {'string': ' Because he could count.', 'parse': {'tree': '(ROOT (FRAG (SBAR (IN Because) (S (NP (PRP he)) (VP (MD could) (VP (VB count))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'count', u'count', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'he', 'could', 'count', '.']}, {'string': ' Because they were going to the beach.', 'parse': {'tree': '(ROOT (FRAG (SBAR (IN Because) (S (NP (PRP they)) (VP (VBD were) (VP (VBG going) (PP (TO to) (NP (DT the) (NN beach))))))) (. .)))', 'lemma': [(u'Because', u'because', u'IN'), (u'they', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'going', u'go', u'VBG'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Because', 'they', 'were', 'going', 'to', 'the', 'beach', '.']}], 'mode': 0}, {'question': {'string': " What did sam 's grandma give him?", 'parse': {'tree': "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NP (NNP sam) (POS 's)) (NN grandma)) (VP (VB give) (NP (PRP him)))) (. ?)))", 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'sam', u'sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandma', u'grandma', u'NN'), (u'give', u'give', u'VB'), (u'him', u'he', u'PRP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'sam', "'s", 'grandma', 'give', 'him', '?']}, 'answers': [{'string': " Sam 's grandma game him a pale.", 'parse': {'tree': "(ROOT (NP (NP (NP (NNP Sam) (POS 's)) (NN grandma) (NN game)) (NP (NP (PRP him)) (NP (DT a) (NN pale))) (. .)))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandma', u'grandma', u'NN'), (u'game', u'game', u'NN'), (u'him', u'he', u'PRP'), (u'a', u'a', u'DT'), (u'pale', u'pale', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', "'s", 'grandma', 'game', 'him', 'a', 'pale', '.']}, {'string': " Sam 's grandma gave him breakfast.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Sam) (POS 's)) (NN grandma)) (VP (VBD gave) (NP (PRP him)) (NP (NN breakfast))) (. .)))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandma', u'grandma', u'NN'), (u'gave', u'give', u'VBD'), (u'him', u'he', u'PRP'), (u'breakfast', u'breakfast', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', "'s", 'grandma', 'gave', 'him', 'breakfast', '.']}, {'string': " Sam 's grandma gave him a sandwich.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Sam) (POS 's)) (NN grandma)) (VP (VBD gave) (NP (PRP him)) (NP (DT a) (NN sandwich))) (. .)))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandma', u'grandma', u'NN'), (u'gave', u'give', u'VBD'), (u'him', u'he', u'PRP'), (u'a', u'a', u'DT'), (u'sandwich', u'sandwich', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', "'s", 'grandma', 'gave', 'him', 'a', 'sandwich', '.']}, {'string': " Sam 's grandma gave him a day at the beach.", 'parse': {'tree': "(ROOT (S (NP (NP (NNP Sam) (POS 's)) (NN grandma)) (VP (VBD gave) (NP (PRP him)) (NP (NP (DT a) (NN day)) (PP (IN at) (NP (DT the) (NN beach))))) (. .)))", 'lemma': [(u'Sam', u'Sam', u'NNP'), (u"'s", u"'s", u'POS'), (u'grandma', u'grandma', u'NN'), (u'gave', u'give', u'VBD'), (u'him', u'he', u'PRP'), (u'a', u'a', u'DT'), (u'day', u'day', u'NN'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Sam', "'s", 'grandma', 'gave', 'him', 'a', 'day', 'at', 'the', 'beach', '.']}], 'mode': 1}, {'question': {'string': ' What were they making?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD were) (NP (PRP they)) (VP (VBG making))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'were', u'be', u'VBD'), (u'they', u'they', u'PRP'), (u'making', u'make', u'VBG'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'were', 'they', 'making', '?']}, 'answers': [{'string': ' They were making a game.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (VP (VBG making) (NP (DT a) (NN game)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'making', u'make', u'VBG'), (u'a', u'a', u'DT'), (u'game', u'game', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'making', 'a', 'game', '.']}, {'string': ' They were making sandwiches.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (VP (VBG making) (NP (NNS sandwiches)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'making', u'make', u'VBG'), (u'sandwiches', u'sandwich', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'making', 'sandwiches', '.']}, {'string': ' They were making a pale.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBD were) (VP (VBG making) (NP (DT a) (NN pale)))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'were', u'be', u'VBD'), (u'making', u'make', u'VBG'), (u'a', u'a', u'DT'), (u'pale', u'pale', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'were', 'making', 'a', 'pale', '.']}, {'string': ' The were making the beach.', 'parse': {'tree': '(ROOT (S (NP (NNP The)) (VP (VBD were) (VP (VBG making) (NP (DT the) (NN beach)))) (. .)))', 'lemma': [(u'The', u'The', u'NNP'), (u'were', u'be', u'VBD'), (u'making', u'make', u'VBG'), (u'the', u'the', u'DT'), (u'beach', u'beach', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'were', 'making', 'the', 'beach', '.']}], 'mode': 0}]}
{'sentences': [{'string': ' Grace wants to play Frisbee.', 'parse': {'tree': '(ROOT (S (NP (NNP Grace)) (VP (VBZ wants) (S (VP (TO to) (VP (VB play) (NP (NNP Frisbee)))))) (. .)))', 'lemma': [(u'Grace', u'Grace', u'NNP'), (u'wants', u'want', u'VBZ'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'Frisbee', u'Frisbee', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Grace', 'wants', 'to', 'play', 'Frisbee', '.']}, {'string': ' She goes to her store to buy a Frisbee.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ goes) (PP (TO to) (NP (PRP$ her) (NN store) (S (VP (TO to) (VP (VB buy) (NP (DT a) (NNP Frisbee)))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'goes', u'go', u'VBZ'), (u'to', u'to', u'TO'), (u'her', u'she', u'PRP$'), (u'store', u'store', u'NN'), (u'to', u'to', u'TO'), (u'buy', u'buy', u'VB'), (u'a', u'a', u'DT'), (u'Frisbee', u'Frisbee', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'goes', 'to', 'her', 'store', 'to', 'buy', 'a', 'Frisbee', '.']}, {'string': ' She picks out a red Frisbee.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ picks) (PRT (RP out)) (NP (DT a) (JJ red) (NN Frisbee))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'picks', u'pick', u'VBZ'), (u'out', u'out', u'RP'), (u'a', u'a', u'DT'), (u'red', u'red', u'JJ'), (u'Frisbee', u'frisbee', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'picks', 'out', 'a', 'red', 'Frisbee', '.']}, {'string': ' It is small enough to fit in her hand.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBZ is) (ADJP (JJ small) (RB enough) (S (VP (TO to) (VP (VB fit) (PP (IN in) (NP (PRP$ her) (NN hand)))))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'is', u'be', u'VBZ'), (u'small', u'small', u'JJ'), (u'enough', u'enough', u'RB'), (u'to', u'to', u'TO'), (u'fit', u'fit', u'VB'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'hand', u'hand', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'is', 'small', 'enough', 'to', 'fit', 'in', 'her', 'hand', '.']}, {'string': ' It costs 75 cents.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBZ costs) (NP (CD 75) (NNS cents))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'costs', u'cost', u'VBZ'), (u'75', u'75', u'CD'), (u'cents', u'cent', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'costs', '75', 'cents', '.']}, {'string': ' She buys it.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ buys) (NP (PRP it))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'buys', u'buy', u'VBZ'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'buys', 'it', '.']}, {'string': ' She leaves the store.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ leaves) (NP (DT the) (NN store))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'leaves', u'leave', u'VBZ'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'leaves', 'the', 'store', '.']}, {'string': ' When Grace gets home, she has no one to play with.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Grace)) (VP (VBZ gets) (NP (NN home))))) (, ,) (NP (PRP she)) (VP (VBZ has) (NP (DT no) (NN one) (S (VP (TO to) (VP (VB play) (PP (IN with))))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Grace', u'Grace', u'NNP'), (u'gets', u'get', u'VBZ'), (u'home', u'home', u'NN'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'has', u'have', u'VBZ'), (u'no', u'no', u'DT'), (u'one', u'one', u'NN'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Grace', 'gets', 'home', ',', 'she', 'has', 'no', 'one', 'to', 'play', 'with', '.']}, {'string': ' She looks for her friend Susan.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ looks) (PP (IN for) (NP (PRP$ her) (NN friend) (NN Susan)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'looks', u'look', u'VBZ'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'friend', u'friend', u'NN'), (u'Susan', u'susan', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'looks', 'for', 'her', 'friend', 'Susan', '.']}, {'string': ' Susan is not at home.', 'parse': {'tree': '(ROOT (S (NP (NNP Susan)) (VP (VBZ is) (RB not) (PP (IN at) (NP (NN home)))) (. .)))', 'lemma': [(u'Susan', u'Susan', u'NNP'), (u'is', u'be', u'VBZ'), (u'not', u'not', u'RB'), (u'at', u'at', u'IN'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Susan', 'is', 'not', 'at', 'home', '.']}, {'string': ' She looks for her friend Jeff.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ looks) (PP (IN for) (NP (PRP$ her) (NN friend) (NN Jeff)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'looks', u'look', u'VBZ'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'friend', u'friend', u'NN'), (u'Jeff', u'jeff', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'looks', 'for', 'her', 'friend', 'Jeff', '.']}, {'string': ' Jeff is not allowed to go outside.', 'parse': {'tree': '(ROOT (S (NP (NNP Jeff)) (VP (VBZ is) (RB not) (VP (VBN allowed) (S (VP (TO to) (VP (VB go) (ADVP (RB outside))))))) (. .)))', 'lemma': [(u'Jeff', u'Jeff', u'NNP'), (u'is', u'be', u'VBZ'), (u'not', u'not', u'RB'), (u'allowed', u'allow', u'VBN'), (u'to', u'to', u'TO'), (u'go', u'go', u'VB'), (u'outside', u'outside', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Jeff', 'is', 'not', 'allowed', 'to', 'go', 'outside', '.']}, {'string': ' Grace finds a dog named Ginger.', 'parse': {'tree': '(ROOT (S (NP (NNP Grace)) (VP (VBZ finds) (NP (NP (DT a) (NN dog)) (VP (VBN named) (NP (NNP Ginger))))) (. .)))', 'lemma': [(u'Grace', u'Grace', u'NNP'), (u'finds', u'find', u'VBZ'), (u'a', u'a', u'DT'), (u'dog', u'dog', u'NN'), (u'named', u'name', u'VBN'), (u'Ginger', u'Ginger', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Grace', 'finds', 'a', 'dog', 'named', 'Ginger', '.']}, {'string': ' Ginger loves to play frisbee.', 'parse': {'tree': '(ROOT (S (NP (NNP Ginger)) (VP (VBZ loves) (S (VP (TO to) (VP (VB play) (NP (NN frisbee)))))) (. .)))', 'lemma': [(u'Ginger', u'Ginger', u'NNP'), (u'loves', u'love', u'VBZ'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'frisbee', u'frisbee', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ginger', 'loves', 'to', 'play', 'frisbee', '.']}, {'string': ' Grace tosses the frisbee to Ginger.', 'parse': {'tree': '(ROOT (S (NP (NNP Grace)) (VP (VBZ tosses) (NP (DT the) (NN frisbee)) (PP (TO to) (NP (NNP Ginger)))) (. .)))', 'lemma': [(u'Grace', u'Grace', u'NNP'), (u'tosses', u'toss', u'VBZ'), (u'the', u'the', u'DT'), (u'frisbee', u'frisbee', u'NN'), (u'to', u'to', u'TO'), (u'Ginger', u'Ginger', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Grace', 'tosses', 'the', 'frisbee', 'to', 'Ginger', '.']}, {'string': ' Ginger catches it in her mouth.', 'parse': {'tree': '(ROOT (S (NP (NNP Ginger)) (VP (VBZ catches) (NP (PRP it)) (PP (IN in) (NP (PRP$ her) (NN mouth)))) (. .)))', 'lemma': [(u'Ginger', u'Ginger', u'NNP'), (u'catches', u'catch', u'VBZ'), (u'it', u'it', u'PRP'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'mouth', u'mouth', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Ginger', 'catches', 'it', 'in', 'her', 'mouth', '.']}, {'string': ' Ginger brings the frisbee back to Grace.', 'parse': {'tree': '(ROOT (S (NP (NNP Ginger)) (VP (VBZ brings) (NP (DT the) (NN frisbee)) (PRT (RP back)) (PP (TO to) (NP (NNP Grace)))) (. .)))', 'lemma': [(u'Ginger', u'Ginger', u'NNP'), (u'brings', u'bring', u'VBZ'), (u'the', u'the', u'DT'), (u'frisbee', u'frisbee', u'NN'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'Grace', u'Grace', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Ginger', 'brings', 'the', 'frisbee', 'back', 'to', 'Grace', '.']}, {'string': ' Grace tosses the frisbee again.', 'parse': {'tree': '(ROOT (S (NP (NNP Grace)) (VP (VBZ tosses) (NP (DT the) (NN frisbee)) (ADVP (RB again))) (. .)))', 'lemma': [(u'Grace', u'Grace', u'NNP'), (u'tosses', u'toss', u'VBZ'), (u'the', u'the', u'DT'), (u'frisbee', u'frisbee', u'NN'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Grace', 'tosses', 'the', 'frisbee', 'again', '.']}, {'string': ' Ginger jumps up in the air and catches it.', 'parse': {'tree': '(ROOT (S (NP (NNP Ginger)) (VP (VP (VBZ jumps) (PRT (RP up)) (PP (IN in) (NP (DT the) (NN air)))) (CC and) (VP (VBZ catches) (NP (PRP it)))) (. .)))', 'lemma': [(u'Ginger', u'Ginger', u'NNP'), (u'jumps', u'jump', u'VBZ'), (u'up', u'up', u'RP'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'air', u'air', u'NN'), (u'and', u'and', u'CC'), (u'catches', u'catch', u'VBZ'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['Ginger', 'jumps', 'up', 'in', 'the', 'air', 'and', 'catches', 'it', '.']}, {'string': ' Grace throws the Frisbee one more time.', 'parse': {'tree': '(ROOT (S (NP (NNP Grace)) (VP (VBZ throws) (NP (DT the) (ADJP (JJ Frisbee) (NP (CD one))) (JJR more) (NN time))) (. .)))', 'lemma': [(u'Grace', u'Grace', u'NNP'), (u'throws', u'throw', u'VBZ'), (u'the', u'the', u'DT'), (u'Frisbee', u'frisbee', u'JJ'), (u'one', u'one', u'CD'), (u'more', u'more', u'JJR'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Grace', 'throws', 'the', 'Frisbee', 'one', 'more', 'time', '.']}, {'string': ' The Frisbee lands in a tree.', 'parse': {'tree': '(ROOT (NP (NP (DT The) (NNP Frisbee) (NNS lands)) (PP (IN in) (NP (DT a) (NN tree))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'Frisbee', u'Frisbee', u'NNP'), (u'lands', u'land', u'NNS'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'tree', u'tree', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'Frisbee', 'lands', 'in', 'a', 'tree', '.']}, {'string': ' Grace is too short to reach the Frisbee.', 'parse': {'tree': '(ROOT (S (NP (NNP Grace)) (VP (VBZ is) (ADJP (RB too) (JJ short)) (S (VP (TO to) (VP (VB reach) (NP (DT the) (NNP Frisbee)))))) (. .)))', 'lemma': [(u'Grace', u'Grace', u'NNP'), (u'is', u'be', u'VBZ'), (u'too', u'too', u'RB'), (u'short', u'short', u'JJ'), (u'to', u'to', u'TO'), (u'reach', u'reach', u'VB'), (u'the', u'the', u'DT'), (u'Frisbee', u'Frisbee', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Grace', 'is', 'too', 'short', 'to', 'reach', 'the', 'Frisbee', '.']}, {'string': ' Grace pets Ginger and tells her that she is a good girl.', 'parse': {'tree': '(ROOT (S (NP (NNP Grace) (NNS pets)) (VP (VBZ Ginger) (CC and) (VBZ tells) (NP (PRP her)) (SBAR (IN that) (S (NP (PRP she)) (VP (VBZ is) (NP (DT a) (JJ good) (NN girl)))))) (. .)))', 'lemma': [(u'Grace', u'Grace', u'NNP'), (u'pets', u'pet', u'NNS'), (u'Ginger', u'ginger', u'VBZ'), (u'and', u'and', u'CC'), (u'tells', u'tell', u'VBZ'), (u'her', u'she', u'PRP'), (u'that', u'that', u'IN'), (u'she', u'she', u'PRP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'girl', u'girl', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Grace', 'pets', 'Ginger', 'and', 'tells', 'her', 'that', 'she', 'is', 'a', 'good', 'girl', '.']}, {'string': ' Grace takes Ginger home.', 'parse': {'tree': '(ROOT (S (NP (NNP Grace)) (VP (VBZ takes) (NP (NNP Ginger) (NN home))) (. .)))', 'lemma': [(u'Grace', u'Grace', u'NNP'), (u'takes', u'take', u'VBZ'), (u'Ginger', u'Ginger', u'NNP'), (u'home', u'home', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Grace', 'takes', 'Ginger', 'home', '.']}, {'string': ' They eat cookies.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP eat) (NP (NNS cookies))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'eat', u'eat', u'VBP'), (u'cookies', u'cookie', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'eat', 'cookies', '.']}, {'string': ' The next day, they come back to the park.', 'parse': {'tree': '(ROOT (S (NP (DT The) (JJ next) (NN day)) (, ,) (NP (PRP they)) (VP (VBP come) (ADVP (RB back)) (PP (TO to) (NP (DT the) (NN park)))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'they', u'they', u'PRP'), (u'come', u'come', u'VBP'), (u'back', u'back', u'RB'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'next', 'day', ',', 'they', 'come', 'back', 'to', 'the', 'park', '.']}, {'string': ' They get their Frisbee back.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP get) (NP (PRP$ their) (NN Frisbee)) (ADVP (RB back))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'get', u'get', u'VBP'), (u'their', u'they', u'PRP$'), (u'Frisbee', u'frisbee', u'NN'), (u'back', u'back', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'get', 'their', 'Frisbee', 'back', '.']}, {'string': ' They play again.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (VP (VBP play) (ADVP (RB again))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'play', u'play', u'VBP'), (u'again', u'again', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'play', 'again', '.']}], 'questions': [{'question': {'string': ' What does the Frisbee cost?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (DT the) (NNP Frisbee)) (VP (VB cost))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'the', u'the', u'DT'), (u'Frisbee', u'Frisbee', u'NNP'), (u'cost', u'cost', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'the', 'Frisbee', 'cost', '?']}, 'answers': [{'string': ' 75 cents', 'parse': {'tree': '(ROOT (X (NP (CD 75) (NNS cents))))', 'lemma': [(u'75', u'75', u'CD'), (u'cents', u'cent', u'NNS')]}, 'tokens': ['75', 'cents']}, {'string': ' 75 dollars', 'parse': {'tree': '(ROOT (X (NP (CD 75) (NNS dollars))))', 'lemma': [(u'75', u'75', u'CD'), (u'dollars', u'dollar', u'NNS')]}, 'tokens': ['75', 'dollars']}, {'string': ' 25 cents', 'parse': {'tree': '(ROOT (X (NP (CD 25) (NNS cents))))', 'lemma': [(u'25', u'25', u'CD'), (u'cents', u'cent', u'NNS')]}, 'tokens': ['25', 'cents']}, {'string': ' 80 cents', 'parse': {'tree': '(ROOT (X (NP (CD 80) (NNS cents))))', 'lemma': [(u'80', u'80', u'CD'), (u'cents', u'cent', u'NNS')]}, 'tokens': ['80', 'cents']}], 'mode': 1}, {'question': {'string': ' Who did Grace look for when she left the store?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBD did) (NP (NNP Grace)) (VP (VB look) (PP (IN for) (SBAR (WHADVP (WRB when)) (S (NP (PRP she)) (VP (VBD left) (NP (DT the) (NN store)))))))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'did', u'do', u'VBD'), (u'Grace', u'Grace', u'NNP'), (u'look', u'look', u'VB'), (u'for', u'for', u'IN'), (u'when', u'when', u'WRB'), (u'she', u'she', u'PRP'), (u'left', u'leave', u'VBD'), (u'the', u'the', u'DT'), (u'store', u'store', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'did', 'Grace', 'look', 'for', 'when', 'she', 'left', 'the', 'store', '?']}, 'answers': [{'string': ' Susan and Jeff', 'parse': {'tree': '(ROOT (NP (NP (NNP Susan)) (CC and) (NP (NNP Jeff))))', 'lemma': [(u'Susan', u'Susan', u'NNP'), (u'and', u'and', u'CC'), (u'Jeff', u'Jeff', u'NNP')]}, 'tokens': ['Susan', 'and', 'Jeff']}, {'string': ' Jeff and Grace', 'parse': {'tree': '(ROOT (NP (NP (NNP Jeff)) (CC and) (NP (NNP Grace))))', 'lemma': [(u'Jeff', u'Jeff', u'NNP'), (u'and', u'and', u'CC'), (u'Grace', u'Grace', u'NNP')]}, 'tokens': ['Jeff', 'and', 'Grace']}, {'string': ' Susan and Ginger', 'parse': {'tree': '(ROOT (NP (NP (NNP Susan)) (CC and) (NP (NNP Ginger))))', 'lemma': [(u'Susan', u'Susan', u'NNP'), (u'and', u'and', u'CC'), (u'Ginger', u'Ginger', u'NNP')]}, 'tokens': ['Susan', 'and', 'Ginger']}, {'string': ' Ginger and Jeff', 'parse': {'tree': '(ROOT (NP (NP (NNP Ginger)) (CC and) (NP (NNP Jeff))))', 'lemma': [(u'Ginger', u'Ginger', u'NNP'), (u'and', u'and', u'CC'), (u'Jeff', u'Jeff', u'NNP')]}, 'tokens': ['Ginger', 'and', 'Jeff']}], 'mode': 0}, {'question': {'string': ' What happens to the Frisbee when Grace throws it for the last time?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VP (VBZ happens) (PP (TO to) (NP (DT the) (NNP Frisbee))) (SBAR (WHADVP (WRB when)) (S (NP (NNP Grace)) (VP (VBZ throws) (NP (PRP it)) (PP (IN for) (NP (DT the) (JJ last) (NN time)))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'happens', u'happen', u'VBZ'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'Frisbee', u'Frisbee', u'NNP'), (u'when', u'when', u'WRB'), (u'Grace', u'Grace', u'NNP'), (u'throws', u'throw', u'VBZ'), (u'it', u'it', u'PRP'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'last', u'last', u'JJ'), (u'time', u'time', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'happens', 'to', 'the', 'Frisbee', 'when', 'Grace', 'throws', 'it', 'for', 'the', 'last', 'time', '?']}, 'answers': [{'string': ' it lands in a tree', 'parse': {'tree': '(ROOT (NP (NP (PRP it)) (NP (NP (NNS lands)) (PP (IN in) (NP (DT a) (NN tree))))))', 'lemma': [(u'it', u'it', u'PRP'), (u'lands', u'land', u'NNS'), (u'in', u'in', u'IN'), (u'a', u'a', u'DT'), (u'tree', u'tree', u'NN')]}, 'tokens': ['it', 'lands', 'in', 'a', 'tree']}, {'string': ' it hits the ground', 'parse': {'tree': '(ROOT (S (NP (PRP it)) (VP (VBZ hits) (NP (DT the) (NN ground)))))', 'lemma': [(u'it', u'it', u'PRP'), (u'hits', u'hit', u'VBZ'), (u'the', u'the', u'DT'), (u'ground', u'ground', u'NN')]}, 'tokens': ['it', 'hits', 'the', 'ground']}, {'string': " it flies over Ginger 's head", 'parse': {'tree': "(ROOT (S (NP (PRP it)) (VP (VBZ flies) (PP (IN over) (NP (NP (NNP Ginger) (POS 's)) (NN head))))))", 'lemma': [(u'it', u'it', u'PRP'), (u'flies', u'fly', u'VBZ'), (u'over', u'over', u'IN'), (u'Ginger', u'Ginger', u'NNP'), (u"'s", u"'s", u'POS'), (u'head', u'head', u'NN')]}, 'tokens': ['it', 'flies', 'over', 'Ginger', "'s", 'head']}, {'string': ' Ginger catches it', 'parse': {'tree': '(ROOT (S (NP (NNP Ginger)) (VP (VBZ catches) (NP (PRP it)))))', 'lemma': [(u'Ginger', u'Ginger', u'NNP'), (u'catches', u'catch', u'VBZ'), (u'it', u'it', u'PRP')]}, 'tokens': ['Ginger', 'catches', 'it']}], 'mode': 1}, {'question': {'string': ' What did Ginger and Grace do the next day?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD did) (NP (NNP Ginger) (CC and) (NNP Grace)) (VP (VB do) (NP (DT the) (JJ next) (NN day)))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'did', u'do', u'VBD'), (u'Ginger', u'Ginger', u'NNP'), (u'and', u'and', u'CC'), (u'Grace', u'Grace', u'NNP'), (u'do', u'do', u'VB'), (u'the', u'the', u'DT'), (u'next', u'next', u'JJ'), (u'day', u'day', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'did', 'Ginger', 'and', 'Grace', 'do', 'the', 'next', 'day', '?']}, 'answers': [{'string': ' found Susan', 'parse': {'tree': '(ROOT (SINV (VP (VBD found)) (NP (NNP Susan))))', 'lemma': [(u'found', u'find', u'VBD'), (u'Susan', u'Susan', u'NNP')]}, 'tokens': ['found', 'Susan']}, {'string': ' ate cookies', 'parse': {'tree': '(ROOT (SINV (VP (VBD ate)) (NP (NNS cookies))))', 'lemma': [(u'ate', u'eat', u'VBD'), (u'cookies', u'cookie', u'NNS')]}, 'tokens': ['ate', 'cookies']}, {'string': ' went back to the park, got their Frisbee back, and played again', 'parse': {'tree': '(ROOT (FRAG (VP (VP (VBD went) (PRT (RP back)) (PP (TO to) (NP (DT the) (NN park)))) (, ,) (VP (VBD got) (NP (PRP$ their) (NN Frisbee)) (ADVP (RB back))) (, ,) (CC and) (VP (VBN played) (ADVP (RB again))))))', 'lemma': [(u'went', u'go', u'VBD'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u',', u',', u','), (u'got', u'get', u'VBD'), (u'their', u'they', u'PRP$'), (u'Frisbee', u'frisbee', u'NN'), (u'back', u'back', u'RB'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'played', u'play', u'VBN'), (u'again', u'again', u'RB')]}, 'tokens': ['went', 'back', 'to', 'the', 'park', ',', 'got', 'their', 'Frisbee', 'back', ',', 'and', 'played', 'again']}, {'string': ' talked to Jeff', 'parse': {'tree': '(ROOT (VP (VBN talked) (PP (TO to) (NP (NNP Jeff)))))', 'lemma': [(u'talked', u'talk', u'VBN'), (u'to', u'to', u'TO'), (u'Jeff', u'Jeff', u'NNP')]}, 'tokens': ['talked', 'to', 'Jeff']}], 'mode': 0}]}
{'sentences': [{'string': ' Lulu is a little dog.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ is) (NP (DT a) (JJ little) (NN dog))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'little', u'little', u'JJ'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'is', 'a', 'little', 'dog', '.']}, {'string': ' She likes to play with her toys.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ likes) (S (VP (TO to) (VP (VB play) (PP (IN with) (NP (PRP$ her) (NNS toys))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'toys', u'toy', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'likes', 'to', 'play', 'with', 'her', 'toys', '.']}, {'string': ' She really likes her little lamb.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (ADVP (RB really)) (VP (VBZ likes) (NP (PRP$ her) (JJ little) (NN lamb))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'really', u'really', u'RB'), (u'likes', u'like', u'VBZ'), (u'her', u'she', u'PRP$'), (u'little', u'little', u'JJ'), (u'lamb', u'lamb', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'really', 'likes', 'her', 'little', 'lamb', '.']}, {'string': ' She likes when Lauren throws her lamb.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ likes) (SBAR (WHADVP (WRB when)) (S (NP (NNP Lauren)) (VP (VBZ throws) (NP (PRP$ her) (NN lamb)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'likes', u'like', u'VBZ'), (u'when', u'when', u'WRB'), (u'Lauren', u'Lauren', u'NNP'), (u'throws', u'throw', u'VBZ'), (u'her', u'she', u'PRP$'), (u'lamb', u'lamb', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'likes', 'when', 'Lauren', 'throws', 'her', 'lamb', '.']}, {'string': ' Lulu likes to chases the lamb.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ likes) (S (VP (TO to) (VP (VB chases) (NP (DT the) (NN lamb)))))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'chases', u'chase', u'VB'), (u'the', u'the', u'DT'), (u'lamb', u'lamb', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'to', 'chases', 'the', 'lamb', '.']}, {'string': " Lulu does n't like to bring the lamb back to Lauren.", 'parse': {'tree': "(ROOT (S (NP (NNP Lulu)) (VP (VBZ does) (RB n't) (VP (VB like) (S (VP (TO to) (VP (VB bring) (NP (DT the) (NN lamb)) (PRT (RP back)) (PP (TO to) (NP (NNP Lauren)))))))) (. .)))", 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'does', u'do', u'VBZ'), (u"n't", u'not', u'RB'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'bring', u'bring', u'VB'), (u'the', u'the', u'DT'), (u'lamb', u'lamb', u'NN'), (u'back', u'back', u'RP'), (u'to', u'to', u'TO'), (u'Lauren', u'Lauren', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'does', "n't", 'like', 'to', 'bring', 'the', 'lamb', 'back', 'to', 'Lauren', '.']}, {'string': ' Lauren gets mad.', 'parse': {'tree': '(ROOT (S (NP (NNP Lauren)) (VP (VBZ gets) (ADJP (JJ mad))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'gets', u'get', u'VBZ'), (u'mad', u'mad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'gets', 'mad', '.']}, {'string': ' Lulu likes to bark.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ likes) (S (VP (TO to) (VP (VB bark))))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'bark', u'bark', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'to', 'bark', '.']}, {'string': ' She barks at the children outside.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ barks) (PP (IN at) (NP (DT the) (NNS children) (NN outside)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'barks', u'bark', u'VBZ'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'children', u'child', u'NNS'), (u'outside', u'outside', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'barks', 'at', 'the', 'children', 'outside', '.']}, {'string': ' She barks when the mailman comes to the door.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ barks) (SBAR (WHADVP (WRB when)) (S (NP (DT the) (NN mailman)) (VP (VBZ comes) (PP (TO to) (NP (DT the) (NN door))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'barks', u'bark', u'VBZ'), (u'when', u'when', u'WRB'), (u'the', u'the', u'DT'), (u'mailman', u'mailman', u'NN'), (u'comes', u'come', u'VBZ'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'door', u'door', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'barks', 'when', 'the', 'mailman', 'comes', 'to', 'the', 'door', '.']}, {'string': ' Lulu barks at everything.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ barks) (PP (IN at) (NP (NN everything)))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'barks', u'bark', u'VBZ'), (u'at', u'at', u'IN'), (u'everything', u'everything', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'barks', 'at', 'everything', '.']}, {'string': ' Lulu barks all the time.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ barks) (NP (PDT all) (DT the) (NN time))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'barks', u'bark', u'VBZ'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'barks', 'all', 'the', 'time', '.']}, {'string': ' Daddy gets mad.', 'parse': {'tree': '(ROOT (S (NP (NNP Daddy)) (VP (VBZ gets) (ADJP (JJ mad))) (. .)))', 'lemma': [(u'Daddy', u'Daddy', u'NNP'), (u'gets', u'get', u'VBZ'), (u'mad', u'mad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Daddy', 'gets', 'mad', '.']}, {'string': ' Lulu likes to eat.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ likes) (S (VP (TO to) (VP (VB eat))))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'to', 'eat', '.']}, {'string': ' She likes her dog food.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ likes) (NP (PRP$ her) (NN dog) (NN food))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'likes', u'like', u'VBZ'), (u'her', u'she', u'PRP$'), (u'dog', u'dog', u'NN'), (u'food', u'food', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'likes', 'her', 'dog', 'food', '.']}, {'string': ' Her dog food has a picture of dog that looks like her on the bag.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (NN dog) (NN food)) (VP (VBZ has) (NP (NP (DT a) (NN picture)) (PP (IN of) (NP (NN dog))) (SBAR (WHNP (WDT that)) (S (VP (VBZ looks) (PP (IN like) (NP (PRP her))) (PP (IN on) (NP (DT the) (NN bag)))))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'dog', u'dog', u'NN'), (u'food', u'food', u'NN'), (u'has', u'have', u'VBZ'), (u'a', u'a', u'DT'), (u'picture', u'picture', u'NN'), (u'of', u'of', u'IN'), (u'dog', u'dog', u'NN'), (u'that', u'that', u'WDT'), (u'looks', u'look', u'VBZ'), (u'like', u'like', u'IN'), (u'her', u'she', u'PRP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'bag', u'bag', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'dog', 'food', 'has', 'a', 'picture', 'of', 'dog', 'that', 'looks', 'like', 'her', 'on', 'the', 'bag', '.']}, {'string': " Lulu likes her food, but she likes the cat 's food better.", 'parse': {'tree': "(ROOT (S (S (NP (NNP Lulu)) (VP (VBZ likes) (NP (PRP$ her) (NN food)))) (, ,) (CC but) (S (NP (PRP she)) (VP (VBZ likes) (NP (NP (DT the) (NN cat) (POS 's)) (NN food)) (ADVP (RBR better)))) (. .)))", 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'her', u'she', u'PRP$'), (u'food', u'food', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'she', u'she', u'PRP'), (u'likes', u'like', u'VBZ'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u"'s", u"'s", u'POS'), (u'food', u'food', u'NN'), (u'better', u'better', u'RBR'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'her', 'food', ',', 'but', 'she', 'likes', 'the', 'cat', "'s", 'food', 'better', '.']}, {'string': ' The cat gets mad.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN cat)) (VP (VBZ gets) (ADJP (JJ mad))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'gets', u'get', u'VBZ'), (u'mad', u'mad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'cat', 'gets', 'mad', '.']}, {'string': ' Lulu likes to drink water.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ likes) (S (VP (TO to) (VP (VB drink) (NP (NN water)))))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'drink', u'drink', u'VB'), (u'water', u'water', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'to', 'drink', 'water', '.']}, {'string': ' Her favorite water bowl is in her cage.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (JJ favorite) (NN water) (NN bowl)) (VP (VBZ is) (PP (IN in) (NP (PRP$ her) (NN cage)))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'NN'), (u'is', u'be', u'VBZ'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'cage', u'cage', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'favorite', 'water', 'bowl', 'is', 'in', 'her', 'cage', '.']}, {'string': " Lulu likes that water bowl because it 's the right height.", 'parse': {'tree': "(ROOT (S (NP (NNP Lulu)) (VP (VBZ likes) (SBAR (IN that) (S (NP (NN water)) (VP (VBP bowl) (SBAR (IN because) (S (NP (PRP it)) (VP (VBZ 's) (NP (DT the) (JJ right) (NN height))))))))) (. .)))", 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'that', u'that', u'IN'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'VBP'), (u'because', u'because', u'IN'), (u'it', u'it', u'PRP'), (u"'s", u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'right', u'right', u'JJ'), (u'height', u'height', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'that', 'water', 'bowl', 'because', 'it', "'s", 'the', 'right', 'height', '.']}, {'string': " Lulu likes her water bowl, but she likes Heather 's glass of water better.", 'parse': {'tree': "(ROOT (S (S (NP (NNP Lulu)) (VP (VBZ likes) (NP (PRP$ her) (NN water) (NN bowl)))) (, ,) (CC but) (S (NP (PRP she)) (VP (VBZ likes) (NP (NP (NP (NNP Heather) (POS 's)) (NN glass)) (PP (IN of) (NP (NN water)))) (ADVP (RBR better)))) (. .)))", 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'her', u'she', u'PRP$'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'she', u'she', u'PRP'), (u'likes', u'like', u'VBZ'), (u'Heather', u'Heather', u'NNP'), (u"'s", u"'s", u'POS'), (u'glass', u'glass', u'NN'), (u'of', u'of', u'IN'), (u'water', u'water', u'NN'), (u'better', u'better', u'RBR'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'her', 'water', 'bowl', ',', 'but', 'she', 'likes', 'Heather', "'s", 'glass', 'of', 'water', 'better', '.']}, {'string': ' Heather gets mad.', 'parse': {'tree': '(ROOT (S (NP (NNP Heather)) (VP (VBZ gets) (ADJP (JJ mad))) (. .)))', 'lemma': [(u'Heather', u'Heather', u'NNP'), (u'gets', u'get', u'VBZ'), (u'mad', u'mad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Heather', 'gets', 'mad', '.']}, {'string': ' Lulu likes her bed.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ likes) (NP (PRP$ her) (NN bed))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'her', u'she', u'PRP$'), (u'bed', u'bed', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'her', 'bed', '.']}, {'string': ' She goes there to rest.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ goes) (S (NP (EX there)) (VP (TO to) (VP (VB rest))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'goes', u'go', u'VBZ'), (u'there', u'there', u'EX'), (u'to', u'to', u'TO'), (u'rest', u'rest', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'goes', 'there', 'to', 'rest', '.']}, {'string': ' She likes to sleep on the blanket there.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ likes) (S (VP (TO to) (VP (VB sleep) (PP (IN on) (NP (DT the) (NN blanket))) (ADVP (RB there)))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'blanket', u'blanket', u'NN'), (u'there', u'there', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'likes', 'to', 'sleep', 'on', 'the', 'blanket', 'there', '.']}, {'string': ' Her favorite blanket is from Grandma.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (JJ favorite) (NN blanket)) (VP (VBZ is) (PP (IN from) (NP (NNP Grandma)))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'blanket', u'blanket', u'NN'), (u'is', u'be', u'VBZ'), (u'from', u'from', u'IN'), (u'Grandma', u'Grandma', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'favorite', 'blanket', 'is', 'from', 'Grandma', '.']}, {'string': " Lulu likes Grandma 's blanket, but she likes Alan 's better.", 'parse': {'tree': "(ROOT (S (S (NP (NNP Lulu)) (VP (VBZ likes) (NP (NP (NNP Grandma) (POS 's)) (NN blanket)))) (, ,) (CC but) (S (NP (PRP she)) (VP (VBZ likes) (SBAR (S (NP (NNP Alan)) (VP (VBZ 's) (ADJP (JJR better))))))) (. .)))", 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'likes', u'like', u'VBZ'), (u'Grandma', u'Grandma', u'NNP'), (u"'s", u"'s", u'POS'), (u'blanket', u'blanket', u'NN'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'she', u'she', u'PRP'), (u'likes', u'like', u'VBZ'), (u'Alan', u'Alan', u'NNP'), (u"'s", u'be', u'VBZ'), (u'better', u'better', u'JJR'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'likes', 'Grandma', "'s", 'blanket', ',', 'but', 'she', 'likes', 'Alan', "'s", 'better', '.']}, {'string': ' Alan gets mad.', 'parse': {'tree': '(ROOT (S (NP (NNP Alan)) (VP (VBZ gets) (ADJP (JJ mad))) (. .)))', 'lemma': [(u'Alan', u'Alan', u'NNP'), (u'gets', u'get', u'VBZ'), (u'mad', u'mad', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Alan', 'gets', 'mad', '.']}, {'string': ' Lulu curls up on the blanket on the couch.', 'parse': {'tree': '(ROOT (S (NP (NNP Lulu)) (VP (VBZ curls) (PRT (RP up)) (PP (IN on) (NP (NP (DT the) (NN blanket)) (PP (IN on) (NP (DT the) (NN couch)))))) (. .)))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'curls', u'curl', u'VBZ'), (u'up', u'up', u'RP'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'blanket', u'blanket', u'NN'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'couch', u'couch', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Lulu', 'curls', 'up', 'on', 'the', 'blanket', 'on', 'the', 'couch', '.']}, {'string': ' Lauren gives Lulu her lamb to sleep with.', 'parse': {'tree': '(ROOT (S (NP (NNP Lauren)) (VP (VBZ gives) (NP (NNP Lulu)) (NP (PRP$ her) (NN lamb) (S (VP (TO to) (VP (VB sleep) (PP (IN with))))))) (. .)))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'gives', u'give', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u'her', u'she', u'PRP$'), (u'lamb', u'lamb', u'NN'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'with', u'with', u'IN'), (u'.', u'.', u'.')]}, 'tokens': ['Lauren', 'gives', 'Lulu', 'her', 'lamb', 'to', 'sleep', 'with', '.']}, {'string': ' Daddy pets Lulu.', 'parse': {'tree': '(ROOT (NP (NNP Daddy) (NNP pets) (NNP Lulu) (. .)))', 'lemma': [(u'Daddy', u'Daddy', u'NNP'), (u'pets', u'pets', u'NNP'), (u'Lulu', u'Lulu', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Daddy', 'pets', 'Lulu', '.']}, {'string': ' The cat licks Lulu.', 'parse': {'tree': '(ROOT (S (NP (DT The) (NN cat)) (VP (VBZ licks) (NP (NNP Lulu))) (. .)))', 'lemma': [(u'The', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u'licks', u'lick', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['The', 'cat', 'licks', 'Lulu', '.']}, {'string': ' Heather thinks Lulu looks sweet.', 'parse': {'tree': '(ROOT (S (NP (NNP Heather)) (VP (VBZ thinks) (SBAR (S (NP (NNP Lulu)) (VP (VBZ looks) (ADJP (JJ sweet)))))) (. .)))', 'lemma': [(u'Heather', u'Heather', u'NNP'), (u'thinks', u'think', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u'looks', u'look', u'VBZ'), (u'sweet', u'sweet', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['Heather', 'thinks', 'Lulu', 'looks', 'sweet', '.']}, {'string': ' Alan lets Lulu use his blanket.', 'parse': {'tree': '(ROOT (S (NP (NNP Alan)) (VP (VBZ lets) (S (NP (NNP Lulu)) (VP (VB use) (NP (PRP$ his) (NN blanket))))) (. .)))', 'lemma': [(u'Alan', u'Alan', u'NNP'), (u'lets', u'let', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u'use', u'use', u'VB'), (u'his', u'he', u'PRP$'), (u'blanket', u'blanket', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Alan', 'lets', 'Lulu', 'use', 'his', 'blanket', '.']}, {'string': ' No one gets mad at Lulu.', 'parse': {'tree': '(ROOT (S (NP (DT No) (NN one)) (VP (VBZ gets) (ADJP (JJ mad) (PP (IN at) (NP (NNP Lulu))))) (. .)))', 'lemma': [(u'No', u'no', u'DT'), (u'one', u'one', u'NN'), (u'gets', u'get', u'VBZ'), (u'mad', u'mad', u'JJ'), (u'at', u'at', u'IN'), (u'Lulu', u'Lulu', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['No', 'one', 'gets', 'mad', 'at', 'Lulu', '.']}], 'questions': [{'question': {'string': " Where is Lulu 's favorite water bowl?", 'parse': {'tree': "(ROOT (SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (NNP Lulu) (POS 's)) (JJ favorite) (NN water) (NN bowl))) (. ?)))", 'lemma': [(u'Where', u'where', u'WRB'), (u'is', u'be', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u"'s", u"'s", u'POS'), (u'favorite', u'favorite', u'JJ'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['Where', 'is', 'Lulu', "'s", 'favorite', 'water', 'bowl', '?']}, 'answers': [{'string': ' her favorite water bowl is the fish bowl', 'parse': {'tree': '(ROOT (S (NP (PRP$ her) (JJ favorite) (NN water) (NN bowl)) (VP (VBZ is) (NP (DT the) (NN fish) (NN bowl)))))', 'lemma': [(u'her', u'she', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'NN'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'fish', u'fish', u'NN'), (u'bowl', u'bowl', u'NN')]}, 'tokens': ['her', 'favorite', 'water', 'bowl', 'is', 'the', 'fish', 'bowl']}, {'string': ' her favorite water bowl is on the kitchen floor', 'parse': {'tree': '(ROOT (S (NP (PRP$ her) (JJ favorite) (NN water) (NN bowl)) (VP (VBZ is) (PP (IN on) (NP (DT the) (NN kitchen) (NN floor))))))', 'lemma': [(u'her', u'she', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'NN'), (u'is', u'be', u'VBZ'), (u'on', u'on', u'IN'), (u'the', u'the', u'DT'), (u'kitchen', u'kitchen', u'NN'), (u'floor', u'floor', u'NN')]}, 'tokens': ['her', 'favorite', 'water', 'bowl', 'is', 'on', 'the', 'kitchen', 'floor']}, {'string': ' her favorite water bowl is in her cage', 'parse': {'tree': '(ROOT (S (NP (PRP$ her) (JJ favorite) (NN water) (NN bowl)) (VP (VBZ is) (PP (IN in) (NP (PRP$ her) (NN cage))))))', 'lemma': [(u'her', u'she', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'NN'), (u'is', u'be', u'VBZ'), (u'in', u'in', u'IN'), (u'her', u'she', u'PRP$'), (u'cage', u'cage', u'NN')]}, 'tokens': ['her', 'favorite', 'water', 'bowl', 'is', 'in', 'her', 'cage']}, {'string': " her favorite water bowl is the cat 's water bowl", 'parse': {'tree': "(ROOT (S (NP (PRP$ her) (JJ favorite) (NN water) (NN bowl)) (VP (VBZ is) (NP (NP (DT the) (NN cat) (POS 's)) (NN water) (NN bowl)))))", 'lemma': [(u'her', u'she', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'NN'), (u'is', u'be', u'VBZ'), (u'the', u'the', u'DT'), (u'cat', u'cat', u'NN'), (u"'s", u"'s", u'POS'), (u'water', u'water', u'NN'), (u'bowl', u'bowl', u'NN')]}, 'tokens': ['her', 'favorite', 'water', 'bowl', 'is', 'the', 'cat', "'s", 'water', 'bowl']}], 'mode': 1}, {'question': {'string': ' Why does Daddy get mad?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBZ does) (NP (NNP Daddy)) (VP (VB get) (ADJP (JJ mad)))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'does', u'do', u'VBZ'), (u'Daddy', u'Daddy', u'NNP'), (u'get', u'get', u'VB'), (u'mad', u'mad', u'JJ'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'does', 'Daddy', 'get', 'mad', '?']}, 'answers': [{'string': ' Lulu never brings her lamb to him when they play fetch', 'parse': {'tree': '(ROOT (SINV (ADVP (RB Lulu)) (VP (ADVP (RB never)) (VBZ brings) (NP (PRP$ her) (NN lamb)) (PP (TO to) (NP (PRP him)))) (SBAR (WHADVP (WRB when)) (S (NP (PRP they)) (VP (VBP play) (VP (VB fetch)))))))', 'lemma': [(u'Lulu', u'lulu', u'RB'), (u'never', u'never', u'RB'), (u'brings', u'bring', u'VBZ'), (u'her', u'she', u'PRP$'), (u'lamb', u'lamb', u'NN'), (u'to', u'to', u'TO'), (u'him', u'he', u'PRP'), (u'when', u'when', u'WRB'), (u'they', u'they', u'PRP'), (u'play', u'play', u'VBP'), (u'fetch', u'fetch', u'VB')]}, 'tokens': ['Lulu', 'never', 'brings', 'her', 'lamb', 'to', 'him', 'when', 'they', 'play', 'fetch']}, {'string': " Lulu drinks from Daddy 's water glass", 'parse': {'tree': "(ROOT (S (NP (NNP Lulu)) (VP (VBZ drinks) (PP (IN from) (NP (NP (NNP Daddy) (POS 's)) (NN water) (NN glass))))))", 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'drinks', u'drink', u'VBZ'), (u'from', u'from', u'IN'), (u'Daddy', u'Daddy', u'NNP'), (u"'s", u"'s", u'POS'), (u'water', u'water', u'NN'), (u'glass', u'glass', u'NN')]}, 'tokens': ['Lulu', 'drinks', 'from', 'Daddy', "'s", 'water', 'glass']}, {'string': " Lulu steals Daddy 's blanket", 'parse': {'tree': "(ROOT (S (NP (NNP Lulu)) (VP (VBZ steals) (NP (NP (NNP Daddy) (POS 's)) (NN blanket)))))", 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'steals', u'steal', u'VBZ'), (u'Daddy', u'Daddy', u'NNP'), (u"'s", u"'s", u'POS'), (u'blanket', u'blanket', u'NN')]}, 'tokens': ['Lulu', 'steals', 'Daddy', "'s", 'blanket']}, {'string': ' Lulu barks at everything and she barks all the time', 'parse': {'tree': '(ROOT (NP (S (S (NP (NNP Lulu)) (VP (VBZ barks) (PP (IN at) (NP (NN everything))))) (CC and) (S (NP (PRP she)) (VP (VBZ barks) (NP (PDT all) (DT the) (NN time)))))))', 'lemma': [(u'Lulu', u'Lulu', u'NNP'), (u'barks', u'bark', u'VBZ'), (u'at', u'at', u'IN'), (u'everything', u'everything', u'NN'), (u'and', u'and', u'CC'), (u'she', u'she', u'PRP'), (u'barks', u'bark', u'VBZ'), (u'all', u'all', u'PDT'), (u'the', u'the', u'DT'), (u'time', u'time', u'NN')]}, 'tokens': ['Lulu', 'barks', 'at', 'everything', 'and', 'she', 'barks', 'all', 'the', 'time']}], 'mode': 0}, {'question': {'string': ' What do Lauren and Alan give to Lulu to sleep with?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBP do) (NP (NNP Lauren) (CC and) (NNP Alan)) (VP (VB give) (PP (TO to) (NP (NNP Lulu))) (S (VP (TO to) (VP (VB sleep) (PP (IN with))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'do', u'do', u'VBP'), (u'Lauren', u'Lauren', u'NNP'), (u'and', u'and', u'CC'), (u'Alan', u'Alan', u'NNP'), (u'give', u'give', u'VB'), (u'to', u'to', u'TO'), (u'Lulu', u'Lulu', u'NNP'), (u'to', u'to', u'TO'), (u'sleep', u'sleep', u'VB'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'do', 'Lauren', 'and', 'Alan', 'give', 'to', 'Lulu', 'to', 'sleep', 'with', '?']}, 'answers': [{'string': ' Lauren gives Lulu her doll and Alan gives Lulu his scarf', 'parse': {'tree': '(ROOT (NP (S (S (NP (NNP Lauren)) (VP (VBZ gives) (NP (NNP Lulu)) (NP (PRP$ her) (NN doll)))) (CC and) (S (NP (NNP Alan)) (VP (VBZ gives) (NP (NNP Lulu)) (NP (PRP$ his) (NN scarf)))))))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'gives', u'give', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u'her', u'she', u'PRP$'), (u'doll', u'doll', u'NN'), (u'and', u'and', u'CC'), (u'Alan', u'Alan', u'NNP'), (u'gives', u'give', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u'his', u'he', u'PRP$'), (u'scarf', u'scarf', u'NN')]}, 'tokens': ['Lauren', 'gives', 'Lulu', 'her', 'doll', 'and', 'Alan', 'gives', 'Lulu', 'his', 'scarf']}, {'string': " Lauren gives her a toy cat and Alan gives her Grandma 's blanket", 'parse': {'tree': "(ROOT (S (NP (NNP Lauren)) (VP (VBZ gives) (NP (PRP her)) (NP (NP (DT a) (NN toy)) (SBAR (S (NP (NNP cat) (CC and) (NNP Alan)) (VP (VBZ gives) (NP (PRP her)) (NP (NP (NNP Grandma) (POS 's)) (NN blanket)))))))))", 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'gives', u'give', u'VBZ'), (u'her', u'she', u'PRP'), (u'a', u'a', u'DT'), (u'toy', u'toy', u'NN'), (u'cat', u'cat', u'NNP'), (u'and', u'and', u'CC'), (u'Alan', u'Alan', u'NNP'), (u'gives', u'give', u'VBZ'), (u'her', u'she', u'PRP'), (u'Grandma', u'Grandma', u'NNP'), (u"'s", u"'s", u'POS'), (u'blanket', u'blanket', u'NN')]}, 'tokens': ['Lauren', 'gives', 'her', 'a', 'toy', 'cat', 'and', 'Alan', 'gives', 'her', 'Grandma', "'s", 'blanket']}, {'string': ' Lauren gives her the lamb and Alan gives her his blanket', 'parse': {'tree': '(ROOT (S (NP (NNP Lauren)) (VP (VBZ gives) (NP (PRP her)) (NP (NP (DT the) (NN lamb)) (CC and) (NP (NP (NNP Alan)) (VP (VBZ gives) (NP (PRP her)) (NP (PRP$ his) (NN blanket))))))))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'gives', u'give', u'VBZ'), (u'her', u'she', u'PRP'), (u'the', u'the', u'DT'), (u'lamb', u'lamb', u'NN'), (u'and', u'and', u'CC'), (u'Alan', u'Alan', u'NNP'), (u'gives', u'give', u'VBZ'), (u'her', u'she', u'PRP'), (u'his', u'he', u'PRP$'), (u'blanket', u'blanket', u'NN')]}, 'tokens': ['Lauren', 'gives', 'her', 'the', 'lamb', 'and', 'Alan', 'gives', 'her', 'his', 'blanket']}, {'string': ' Lauren gives Lulu her blanket and Alan gives her the lamb', 'parse': {'tree': '(ROOT (NP (S (S (NP (NNP Lauren)) (VP (VBZ gives) (NP (NNP Lulu)) (NP (PRP$ her) (NN blanket)))) (CC and) (S (NP (NNP Alan)) (VP (VBZ gives) (NP (PRP her)) (NP (DT the) (NN lamb)))))))', 'lemma': [(u'Lauren', u'Lauren', u'NNP'), (u'gives', u'give', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u'her', u'she', u'PRP$'), (u'blanket', u'blanket', u'NN'), (u'and', u'and', u'CC'), (u'Alan', u'Alan', u'NNP'), (u'gives', u'give', u'VBZ'), (u'her', u'she', u'PRP'), (u'the', u'the', u'DT'), (u'lamb', u'lamb', u'NN')]}, 'tokens': ['Lauren', 'gives', 'Lulu', 'her', 'blanket', 'and', 'Alan', 'gives', 'her', 'the', 'lamb']}], 'mode': 0}, {'question': {'string': ' What toy does Lulu like to play with?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WDT What) (NN toy)) (SQ (VBZ does) (NP (NNP Lulu)) (VP (VB like) (S (VP (TO to) (VP (VB play) (PP (IN with))))))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'toy', u'toy', u'NN'), (u'does', u'do', u'VBZ'), (u'Lulu', u'Lulu', u'NNP'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'with', u'with', u'IN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'toy', 'does', 'Lulu', 'like', 'to', 'play', 'with', '?']}, 'answers': [{'string': " Alan 's toy dog", 'parse': {'tree': "(ROOT (NP (NP (NNP Alan) (POS 's)) (NN toy) (NN dog)))", 'lemma': [(u'Alan', u'Alan', u'NNP'), (u"'s", u"'s", u'POS'), (u'toy', u'toy', u'NN'), (u'dog', u'dog', u'NN')]}, 'tokens': ['Alan', "'s", 'toy', 'dog']}, {'string': ' her ball', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ her) (NN ball))))', 'lemma': [(u'her', u'she', u'PRP$'), (u'ball', u'ball', u'NN')]}, 'tokens': ['her', 'ball']}, {'string': ' her blanket', 'parse': {'tree': '(ROOT (S (NP (PRP her)) (VP (VBP blanket))))', 'lemma': [(u'her', u'she', u'PRP'), (u'blanket', u'blanket', u'VBP')]}, 'tokens': ['her', 'blanket']}, {'string': ' her lamb', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ her) (NN lamb))))', 'lemma': [(u'her', u'she', u'PRP$'), (u'lamb', u'lamb', u'NN')]}, 'tokens': ['her', 'lamb']}], 'mode': 1}]}
{'sentences': [{'string': ' Timothy likes to play sports.', 'parse': {'tree': '(ROOT (S (NP (NNP Timothy)) (VP (VBZ likes) (S (VP (TO to) (VP (VB play) (NP (NNS sports)))))) (. .)))', 'lemma': [(u'Timothy', u'Timothy', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'play', u'play', u'VB'), (u'sports', u'sport', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Timothy', 'likes', 'to', 'play', 'sports', '.']}, {'string': ' He spends his time after school playing basketball and baseball.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ spends) (NP (PRP$ his) (NN time)) (PP (IN after) (NP (NP (NN school) (VBG playing) (NN basketball)) (CC and) (NP (NN baseball))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'spends', u'spend', u'VBZ'), (u'his', u'he', u'PRP$'), (u'time', u'time', u'NN'), (u'after', u'after', u'IN'), (u'school', u'school', u'NN'), (u'playing', u'play', u'VBG'), (u'basketball', u'basketball', u'NN'), (u'and', u'and', u'CC'), (u'baseball', u'baseball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'spends', 'his', 'time', 'after', 'school', 'playing', 'basketball', 'and', 'baseball', '.']}, {'string': ' Sometimes Timothy pretends he is a famous baseball pitcher for his favorite team with his friends.', 'parse': {'tree': '(ROOT (S (ADVP (RB Sometimes)) (NP (NNP Timothy)) (VP (VBZ pretends) (SBAR (S (NP (PRP he)) (VP (VBZ is) (NP (NP (DT a) (JJ famous) (NN baseball) (NN pitcher)) (PP (IN for) (NP (NP (PRP$ his) (JJ favorite) (NN team)) (PP (IN with) (NP (PRP$ his) (NNS friends)))))))))) (. .)))', 'lemma': [(u'Sometimes', u'sometimes', u'RB'), (u'Timothy', u'Timothy', u'NNP'), (u'pretends', u'pretend', u'VBZ'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'famous', u'famous', u'JJ'), (u'baseball', u'baseball', u'NN'), (u'pitcher', u'pitcher', u'NN'), (u'for', u'for', u'IN'), (u'his', u'he', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'team', u'team', u'NN'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Sometimes', 'Timothy', 'pretends', 'he', 'is', 'a', 'famous', 'baseball', 'pitcher', 'for', 'his', 'favorite', 'team', 'with', 'his', 'friends', '.']}, {'string': ' He plays with his friends Mandy and Andrew.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ plays) (PP (IN with) (NP (NP (PRP$ his) (NNS friends) (NN Mandy)) (CC and) (NP (NNP Andrew))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'plays', u'play', u'VBZ'), (u'with', u'with', u'IN'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u'Mandy', u'mandy', u'NN'), (u'and', u'and', u'CC'), (u'Andrew', u'Andrew', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'plays', 'with', 'his', 'friends', 'Mandy', 'and', 'Andrew', '.']}, {'string': ' Timothy also plays pretend when he is alone.', 'parse': {'tree': '(ROOT (S (NP (NNP Timothy)) (ADVP (RB also)) (VP (VBZ plays) (VP (VB pretend) (SBAR (WHADVP (WRB when)) (S (NP (PRP he)) (VP (VBZ is) (ADJP (RB alone))))))) (. .)))', 'lemma': [(u'Timothy', u'Timothy', u'NNP'), (u'also', u'also', u'RB'), (u'plays', u'play', u'VBZ'), (u'pretend', u'pretend', u'VB'), (u'when', u'when', u'WRB'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'alone', u'alone', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Timothy', 'also', 'plays', 'pretend', 'when', 'he', 'is', 'alone', '.']}, {'string': ' He has an imaginary friend named Sean.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ has) (NP (NP (DT an) (JJ imaginary) (NN friend)) (VP (VBN named) (NP (NNP Sean))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'has', u'have', u'VBZ'), (u'an', u'a', u'DT'), (u'imaginary', u'imaginary', u'JJ'), (u'friend', u'friend', u'NN'), (u'named', u'name', u'VBN'), (u'Sean', u'Sean', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'has', 'an', 'imaginary', 'friend', 'named', 'Sean', '.']}, {'string': ' Sean is an elephant who watches television with Timothy.', 'parse': {'tree': '(ROOT (S (NP (NNP Sean)) (VP (VBZ is) (NP (NP (DT an) (NN elephant)) (SBAR (WHNP (WP who)) (S (VP (VBZ watches) (NP (NN television)) (PP (IN with) (NP (NNP Timothy)))))))) (. .)))', 'lemma': [(u'Sean', u'Sean', u'NNP'), (u'is', u'be', u'VBZ'), (u'an', u'a', u'DT'), (u'elephant', u'elephant', u'NN'), (u'who', u'who', u'WP'), (u'watches', u'watch', u'VBZ'), (u'television', u'television', u'NN'), (u'with', u'with', u'IN'), (u'Timothy', u'Timothy', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Sean', 'is', 'an', 'elephant', 'who', 'watches', 'television', 'with', 'Timothy', '.']}, {'string': ' Mandy likes playing baseball but she also likes to paint.', 'parse': {'tree': '(ROOT (S (S (NP (NNP Mandy)) (VP (VBZ likes) (S (VP (VBG playing) (NP (NN baseball)))))) (CC but) (S (NP (PRP she)) (ADVP (RB also)) (VP (VBZ likes) (S (VP (TO to) (VP (VB paint)))))) (. .)))', 'lemma': [(u'Mandy', u'Mandy', u'NNP'), (u'likes', u'like', u'VBZ'), (u'playing', u'play', u'VBG'), (u'baseball', u'baseball', u'NN'), (u'but', u'but', u'CC'), (u'she', u'she', u'PRP'), (u'also', u'also', u'RB'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'paint', u'paint', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['Mandy', 'likes', 'playing', 'baseball', 'but', 'she', 'also', 'likes', 'to', 'paint', '.']}, {'string': " Mandy 's favorite class at school is art.", 'parse': {'tree': "(ROOT (S (NP (NP (NP (NNP Mandy) (POS 's)) (JJ favorite) (NN class)) (PP (IN at) (NP (NN school)))) (VP (VBZ is) (NP (NN art))) (. .)))", 'lemma': [(u'Mandy', u'Mandy', u'NNP'), (u"'s", u"'s", u'POS'), (u'favorite', u'favorite', u'JJ'), (u'class', u'class', u'NN'), (u'at', u'at', u'IN'), (u'school', u'school', u'NN'), (u'is', u'be', u'VBZ'), (u'art', u'art', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Mandy', "'s", 'favorite', 'class', 'at', 'school', 'is', 'art', '.']}, {'string': ' She likes making pictures of flowers.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBZ likes) (S (VP (VBG making) (NP (NP (NNS pictures)) (PP (IN of) (NP (NNS flowers))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'likes', u'like', u'VBZ'), (u'making', u'make', u'VBG'), (u'pictures', u'picture', u'NNS'), (u'of', u'of', u'IN'), (u'flowers', u'flower', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'likes', 'making', 'pictures', 'of', 'flowers', '.']}, {'string': ' Her teacher says she is a good artist.', 'parse': {'tree': '(ROOT (S (NP (PRP$ Her) (NN teacher)) (VP (VBZ says) (SBAR (S (NP (PRP she)) (VP (VBZ is) (NP (DT a) (JJ good) (NN artist)))))) (. .)))', 'lemma': [(u'Her', u'she', u'PRP$'), (u'teacher', u'teacher', u'NN'), (u'says', u'say', u'VBZ'), (u'she', u'she', u'PRP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'artist', u'artist', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Her', 'teacher', 'says', 'she', 'is', 'a', 'good', 'artist', '.']}, {'string': ' She painted a picture of a tree for her teacher.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD painted) (NP (NP (DT a) (NN picture)) (PP (IN of) (NP (DT a) (NN tree)))) (PP (IN for) (NP (PRP$ her) (NN teacher)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'painted', u'paint', u'VBD'), (u'a', u'a', u'DT'), (u'picture', u'picture', u'NN'), (u'of', u'of', u'IN'), (u'a', u'a', u'DT'), (u'tree', u'tree', u'NN'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'teacher', u'teacher', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'painted', 'a', 'picture', 'of', 'a', 'tree', 'for', 'her', 'teacher', '.']}, {'string': ' There were red and yellow leaves on it.', 'parse': {'tree': '(ROOT (S (NP (EX There)) (VP (VBD were) (NP (NP (JJ red) (CC and) (JJ yellow) (NNS leaves)) (PP (IN on) (NP (PRP it))))) (. .)))', 'lemma': [(u'There', u'there', u'EX'), (u'were', u'be', u'VBD'), (u'red', u'red', u'JJ'), (u'and', u'and', u'CC'), (u'yellow', u'yellow', u'JJ'), (u'leaves', u'leaf', u'NNS'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['There', 'were', 'red', 'and', 'yellow', 'leaves', 'on', 'it', '.']}, {'string': ' It had apples on it.', 'parse': {'tree': '(ROOT (S (NP (PRP It)) (VP (VBD had) (NP (NP (NNS apples)) (PP (IN on) (NP (PRP it))))) (. .)))', 'lemma': [(u'It', u'it', u'PRP'), (u'had', u'have', u'VBD'), (u'apples', u'apple', u'NNS'), (u'on', u'on', u'IN'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['It', 'had', 'apples', 'on', 'it', '.']}, {'string': ' When Andrew goes home after baseball, he likes to eat a snack.', 'parse': {'tree': '(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Andrew)) (VP (VBZ goes) (NP (NN home)) (PP (IN after) (NP (NN baseball)))))) (, ,) (NP (PRP he)) (VP (VBZ likes) (S (VP (TO to) (VP (VB eat) (NP (DT a) (NN snack)))))) (. .)))', 'lemma': [(u'When', u'when', u'WRB'), (u'Andrew', u'Andrew', u'NNP'), (u'goes', u'go', u'VBZ'), (u'home', u'home', u'NN'), (u'after', u'after', u'IN'), (u'baseball', u'baseball', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'eat', u'eat', u'VB'), (u'a', u'a', u'DT'), (u'snack', u'snack', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Andrew', 'goes', 'home', 'after', 'baseball', ',', 'he', 'likes', 'to', 'eat', 'a', 'snack', '.']}, {'string': ' He eats carrots and bananas.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBZ eats) (NP (NNS carrots) (CC and) (NNS bananas))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'eats', u'eat', u'VBZ'), (u'carrots', u'carrot', u'NNS'), (u'and', u'and', u'CC'), (u'bananas', u'banana', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'eats', 'carrots', 'and', 'bananas', '.']}, {'string': ' If he is a good boy his mom, Mrs. Smith, sometimes gives him milk and cookies.', 'parse': {'tree': '(ROOT (S (SBAR (IN If) (S (NP (PRP he)) (VP (VBZ is) (NP (DT a) (JJ good) (NN boy))))) (NP (NP (PRP$ his) (NN mom)) (, ,) (NP (NP (NNP Mrs.) (NNP Smith)) (, ,) (ADVP (RB sometimes)))) (VP (VBZ gives) (NP (PRP him)) (NP (NN milk) (CC and) (NNS cookies))) (. .)))', 'lemma': [(u'If', u'if', u'IN'), (u'he', u'he', u'PRP'), (u'is', u'be', u'VBZ'), (u'a', u'a', u'DT'), (u'good', u'good', u'JJ'), (u'boy', u'boy', u'NN'), (u'his', u'he', u'PRP$'), (u'mom', u'mom', u'NN'), (u',', u',', u','), (u'Mrs.', u'Mrs.', u'NNP'), (u'Smith', u'Smith', u'NNP'), (u',', u',', u','), (u'sometimes', u'sometimes', u'RB'), (u'gives', u'give', u'VBZ'), (u'him', u'he', u'PRP'), (u'milk', u'milk', u'NN'), (u'and', u'and', u'CC'), (u'cookies', u'cookie', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['If', 'he', 'is', 'a', 'good', 'boy', 'his', 'mom', ',', 'Mrs.', 'Smith', ',', 'sometimes', 'gives', 'him', 'milk', 'and', 'cookies', '.']}, {'string': ' Afterwards, Andrew finishes his homework.', 'parse': {'tree': '(ROOT (S (ADVP (RB Afterwards)) (, ,) (NP (NNP Andrew)) (VP (VBZ finishes) (NP (PRP$ his) (NN homework))) (. .)))', 'lemma': [(u'Afterwards', u'afterwards', u'RB'), (u',', u',', u','), (u'Andrew', u'Andrew', u'NNP'), (u'finishes', u'finish', u'VBZ'), (u'his', u'he', u'PRP$'), (u'homework', u'homework', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Afterwards', ',', 'Andrew', 'finishes', 'his', 'homework', '.']}], 'questions': [{'question': {'string': ' What does Mandy like to paint?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Mandy)) (VP (VB like) (S (VP (TO to) (VP (VB paint)))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Mandy', u'Mandy', u'NNP'), (u'like', u'like', u'VB'), (u'to', u'to', u'TO'), (u'paint', u'paint', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Mandy', 'like', 'to', 'paint', '?']}, 'answers': [{'string': ' flowers', 'parse': {'tree': '(ROOT (NP (NNS flowers)))', 'lemma': [(u'flowers', u'flower', u'NNS')]}, 'tokens': ['flowers']}, {'string': ' elephants', 'parse': {'tree': '(ROOT (NP (NNS elephants)))', 'lemma': [(u'elephants', u'elephant', u'NNS')]}, 'tokens': ['elephants']}, {'string': ' bugs', 'parse': {'tree': '(ROOT (NP (NNS bugs)))', 'lemma': [(u'bugs', u'bug', u'NNS')]}, 'tokens': ['bugs']}, {'string': ' trees', 'parse': {'tree': '(ROOT (NP (NNS trees)))', 'lemma': [(u'trees', u'tree', u'NNS')]}, 'tokens': ['trees']}], 'mode': 1}, {'question': {'string': ' What does Timothy do with Mandy and Andrew?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Timothy)) (VP (VB do) (PP (IN with) (NP (NNP Mandy) (CC and) (NNP Andrew))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Timothy', u'Timothy', u'NNP'), (u'do', u'do', u'VB'), (u'with', u'with', u'IN'), (u'Mandy', u'Mandy', u'NNP'), (u'and', u'and', u'CC'), (u'Andrew', u'Andrew', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Timothy', 'do', 'with', 'Mandy', 'and', 'Andrew', '?']}, 'answers': [{'string': ' watches television', 'parse': {'tree': '(ROOT (SINV (VP (VBZ watches)) (NP (NN television))))', 'lemma': [(u'watches', u'watch', u'VBZ'), (u'television', u'television', u'NN')]}, 'tokens': ['watches', 'television']}, {'string': ' plays baseball', 'parse': {'tree': '(ROOT (SINV (VP (VBZ plays)) (NP (NN baseball))))', 'lemma': [(u'plays', u'play', u'VBZ'), (u'baseball', u'baseball', u'NN')]}, 'tokens': ['plays', 'baseball']}, {'string': ' goes home', 'parse': {'tree': '(ROOT (SINV (VP (VBZ goes)) (NP (RB home))))', 'lemma': [(u'goes', u'go', u'VBZ'), (u'home', u'home', u'RB')]}, 'tokens': ['goes', 'home']}, {'string': ' paints', 'parse': {'tree': '(ROOT (NP (NNS paints)))', 'lemma': [(u'paints', u'paint', u'NNS')]}, 'tokens': ['paints']}], 'mode': 0}, {'question': {'string': ' Who is Sean?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP Who)) (SQ (VBZ is) (NP (NNP Sean))) (. ?)))', 'lemma': [(u'Who', u'who', u'WP'), (u'is', u'be', u'VBZ'), (u'Sean', u'Sean', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['Who', 'is', 'Sean', '?']}, 'answers': [{'string': " Mandy 's friend", 'parse': {'tree': "(ROOT (NP (NP (NNP Mandy) (POS 's)) (NN friend)))", 'lemma': [(u'Mandy', u'Mandy', u'NNP'), (u"'s", u"'s", u'POS'), (u'friend', u'friend', u'NN')]}, 'tokens': ['Mandy', "'s", 'friend']}, {'string': " Andrew 's mom", 'parse': {'tree': "(ROOT (NP (NP (NNP Andrew) (POS 's)) (NN mom)))", 'lemma': [(u'Andrew', u'Andrew', u'NNP'), (u"'s", u"'s", u'POS'), (u'mom', u'mom', u'NN')]}, 'tokens': ['Andrew', "'s", 'mom']}, {'string': " Timothy 's imaginary friend", 'parse': {'tree': "(ROOT (NP (NP (NNP Timothy) (POS 's)) (NN imaginary) (NN friend)))", 'lemma': [(u'Timothy', u'Timothy', u'NNP'), (u"'s", u"'s", u'POS'), (u'imaginary', u'imaginary', u'NN'), (u'friend', u'friend', u'NN')]}, 'tokens': ['Timothy', "'s", 'imaginary', 'friend']}, {'string': " Mandy 's teacher", 'parse': {'tree': "(ROOT (NP (NP (NNP Mandy) (POS 's)) (NN teacher)))", 'lemma': [(u'Mandy', u'Mandy', u'NNP'), (u"'s", u"'s", u'POS'), (u'teacher', u'teacher', u'NN')]}, 'tokens': ['Mandy', "'s", 'teacher']}], 'mode': 1}, {'question': {'string': ' What does Andrew eat after baseball?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ does) (NP (NNP Andrew)) (VP (VB eat) (PP (IN after) (NP (NN baseball))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'does', u'do', u'VBZ'), (u'Andrew', u'Andrew', u'NNP'), (u'eat', u'eat', u'VB'), (u'after', u'after', u'IN'), (u'baseball', u'baseball', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'does', 'Andrew', 'eat', 'after', 'baseball', '?']}, 'answers': [{'string': ' apples', 'parse': {'tree': '(ROOT (NP (NNS apples)))', 'lemma': [(u'apples', u'apple', u'NNS')]}, 'tokens': ['apples']}, {'string': ' his homework', 'parse': {'tree': '(ROOT (FRAG (NP (PRP$ his) (NN homework))))', 'lemma': [(u'his', u'he', u'PRP$'), (u'homework', u'homework', u'NN')]}, 'tokens': ['his', 'homework']}, {'string': ' carrots', 'parse': {'tree': '(ROOT (NP (NNS carrots)))', 'lemma': [(u'carrots', u'carrot', u'NNS')]}, 'tokens': ['carrots']}, {'string': ' cake', 'parse': {'tree': '(ROOT (NP (NN cake)))', 'lemma': [(u'cake', u'cake', u'NN')]}, 'tokens': ['cake']}], 'mode': 0}]}
{'sentences': [{'string': ' John thought about things that he liked to do.', 'parse': {'tree': '(ROOT (S (NP (NNP John)) (VP (VBD thought) (PP (IN about) (NP (NNS things))) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD liked) (S (VP (TO to) (VP (VB do)))))))) (. .)))', 'lemma': [(u'John', u'John', u'NNP'), (u'thought', u'think', u'VBD'), (u'about', u'about', u'IN'), (u'things', u'thing', u'NNS'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'liked', u'like', u'VBD'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u'.', u'.', u'.')]}, 'tokens': ['John', 'thought', 'about', 'things', 'that', 'he', 'liked', 'to', 'do', '.']}, {'string': ' Well, for one, he liked baseball.', 'parse': {'tree': '(ROOT (S (ADVP (RB Well)) (, ,) (PP (IN for) (NP (CD one))) (, ,) (NP (PRP he)) (VP (VBD liked) (NP (NN baseball))) (. .)))', 'lemma': [(u'Well', u'well', u'RB'), (u',', u',', u','), (u'for', u'for', u'IN'), (u'one', u'one', u'CD'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'liked', u'like', u'VBD'), (u'baseball', u'baseball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Well', ',', 'for', 'one', ',', 'he', 'liked', 'baseball', '.']}, {'string': ' Compared to his friends, he was very good at the sport.', 'parse': {'tree': '(ROOT (S (PP (VBN Compared) (PP (TO to) (NP (PRP$ his) (NNS friends)))) (, ,) (NP (PRP he)) (VP (VBD was) (ADJP (RB very) (JJ good)) (PP (IN at) (NP (DT the) (NN sport)))) (. .)))', 'lemma': [(u'Compared', u'compare', u'VBN'), (u'to', u'to', u'TO'), (u'his', u'he', u'PRP$'), (u'friends', u'friend', u'NNS'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'very', u'very', u'RB'), (u'good', u'good', u'JJ'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'sport', u'sport', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Compared', 'to', 'his', 'friends', ',', 'he', 'was', 'very', 'good', 'at', 'the', 'sport', '.']}, {'string': " He did n't even have to practice that much.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD did) (RB n't) (ADVP (RB even)) (VP (VB have) (S (VP (TO to) (VP (VB practice) (S (NP (DT that)) (ADJP (JJ much)))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'even', u'even', u'RB'), (u'have', u'have', u'VB'), (u'to', u'to', u'TO'), (u'practice', u'practice', u'VB'), (u'that', u'that', u'DT'), (u'much', u'much', u'JJ'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'did', "n't", 'even', 'have', 'to', 'practice', 'that', 'much', '.']}, {'string': ' He remembered that he once hit the ball so hard that it flew out of the park.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD remembered) (SBAR (IN that) (S (NP (PRP he)) (ADVP (RB once)) (VP (VBD hit) (NP (DT the) (NN ball)) (ADVP (ADVP (RB so) (JJ hard)) (SBAR (IN that) (S (NP (PRP it)) (VP (VBD flew) (PRT (RP out)) (PP (IN of) (NP (DT the) (NN park))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'remembered', u'remember', u'VBD'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'once', u'once', u'RB'), (u'hit', u'hit', u'VBD'), (u'the', u'the', u'DT'), (u'ball', u'ball', u'NN'), (u'so', u'so', u'RB'), (u'hard', u'hard', u'JJ'), (u'that', u'that', u'IN'), (u'it', u'it', u'PRP'), (u'flew', u'fly', u'VBD'), (u'out', u'out', u'RP'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'park', u'park', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'remembered', 'that', 'he', 'once', 'hit', 'the', 'ball', 'so', 'hard', 'that', 'it', 'flew', 'out', 'of', 'the', 'park', '.']}, {'string': ' Home run!', 'parse': {'tree': '(ROOT (S (NP (NNP Home)) (VP (VBP run)) (. !)))', 'lemma': [(u'Home', u'Home', u'NNP'), (u'run', u'run', u'VBP'), (u'!', u'!', u'.')]}, 'tokens': ['Home', 'run', '!']}, {'string': ' He was also a fan of basketball.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADVP (RB also)) (NP (NP (DT a) (NN fan)) (PP (IN of) (NP (NN basketball))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'also', u'also', u'RB'), (u'a', u'a', u'DT'), (u'fan', u'fan', u'NN'), (u'of', u'of', u'IN'), (u'basketball', u'basketball', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', 'also', 'a', 'fan', 'of', 'basketball', '.']}, {'string': " He enjoyed watching people on television pull off crazy tricks like slam dunking -LRB- but he did n't really like all of the passes -RRB-.", 'parse': {'tree': "(ROOT (S (NP (PRP He)) (VP (VBD enjoyed) (S (VP (VP (VBG watching) (S (NP (NP (NNS people)) (PP (IN on) (NP (NN television)))) (VP (VB pull) (PRT (RP off)) (NP (NP (JJ crazy) (NNS tricks)) (PP (IN like) (NP (NN slam) (NN dunking))))))) (-LRB- -LRB-) (SBAR (CC but) (S (NP (PRP he)) (VP (VBD did) (RB n't) (ADVP (RB really)) (VP (VB like) (NP (NP (DT all)) (PP (IN of) (NP (DT the) (NNS passes)))))))) (-RRB- -RRB-)))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'enjoyed', u'enjoy', u'VBD'), (u'watching', u'watch', u'VBG'), (u'people', u'people', u'NNS'), (u'on', u'on', u'IN'), (u'television', u'television', u'NN'), (u'pull', u'pull', u'VB'), (u'off', u'off', u'RP'), (u'crazy', u'crazy', u'JJ'), (u'tricks', u'trick', u'NNS'), (u'like', u'like', u'IN'), (u'slam', u'slam', u'NN'), (u'dunking', u'dunking', u'NN'), (u'-LRB-', u'-lrb-', u'-LRB-'), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'really', u'really', u'RB'), (u'like', u'like', u'VB'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'passes', u'pass', u'NNS'), (u'-RRB-', u'-rrb-', u'-RRB-'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'enjoyed', 'watching', 'people', 'on', 'television', 'pull', 'off', 'crazy', 'tricks', 'like', 'slam', 'dunking', '-LRB-', 'but', 'he', 'did', "n't", 'really', 'like', 'all', 'of', 'the', 'passes', '-RRB-', '.']}, {'string': " He was n't quite that good yet, but he was pretty good at making shots from the three point line.", 'parse': {'tree': "(ROOT (S (S (NP (PRP He)) (VP (VBD was) (RB n't) (ADJP (RB quite) (RB that) (JJ good))) (ADVP (RB yet))) (, ,) (CC but) (S (NP (PRP he)) (VP (VBD was) (ADJP (RB pretty) (JJ good) (PP (IN at) (S (VP (VBG making) (NP (NNS shots)) (PP (IN from) (NP (DT the) (CD three) (NN point) (NN line))))))))) (. .)))", 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u"n't", u'not', u'RB'), (u'quite', u'quite', u'RB'), (u'that', u'that', u'RB'), (u'good', u'good', u'JJ'), (u'yet', u'yet', u'RB'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'pretty', u'pretty', u'RB'), (u'good', u'good', u'JJ'), (u'at', u'at', u'IN'), (u'making', u'make', u'VBG'), (u'shots', u'shot', u'NNS'), (u'from', u'from', u'IN'), (u'the', u'the', u'DT'), (u'three', u'three', u'CD'), (u'point', u'point', u'NN'), (u'line', u'line', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'was', "n't", 'quite', 'that', 'good', 'yet', ',', 'but', 'he', 'was', 'pretty', 'good', 'at', 'making', 'shots', 'from', 'the', 'three', 'point', 'line', '.']}, {'string': ' He knew that if he kept practicing, he would be really great someday.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD knew) (SBAR (IN that) (S (SBAR (IN if) (S (NP (PRP he)) (VP (VBD kept) (S (VP (VBG practicing)))))) (, ,) (NP (PRP he)) (VP (MD would) (VP (VB be) (ADJP (RB really) (JJ great)) (ADVP (RB someday))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'knew', u'know', u'VBD'), (u'that', u'that', u'IN'), (u'if', u'if', u'IN'), (u'he', u'he', u'PRP'), (u'kept', u'keep', u'VBD'), (u'practicing', u'practice', u'VBG'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'would', u'would', u'MD'), (u'be', u'be', u'VB'), (u'really', u'really', u'RB'), (u'great', u'great', u'JJ'), (u'someday', u'someday', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'knew', 'that', 'if', 'he', 'kept', 'practicing', ',', 'he', 'would', 'be', 'really', 'great', 'someday', '.']}, {'string': ' Finally, he loved football.', 'parse': {'tree': '(ROOT (S (ADVP (RB Finally)) (, ,) (NP (PRP he)) (VP (VBD loved) (NP (NN football))) (. .)))', 'lemma': [(u'Finally', u'finally', u'RB'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'loved', u'love', u'VBD'), (u'football', u'football', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['Finally', ',', 'he', 'loved', 'football', '.']}, {'string': " Unlike baseball and basketball, he did n't play football himself, but he was drawn to the games.", 'parse': {'tree': "(ROOT (S (S (PP (IN Unlike) (NP (NN baseball) (CC and) (NN basketball))) (, ,) (NP (PRP he)) (VP (VBD did) (RB n't) (VP (VB play) (S (NP (NN football)) (NP (PRP himself)))))) (, ,) (CC but) (S (NP (PRP he)) (VP (VBD was) (VP (VBN drawn) (PP (TO to) (NP (DT the) (NNS games)))))) (. .)))", 'lemma': [(u'Unlike', u'unlike', u'IN'), (u'baseball', u'baseball', u'NN'), (u'and', u'and', u'CC'), (u'basketball', u'basketball', u'NN'), (u',', u',', u','), (u'he', u'he', u'PRP'), (u'did', u'do', u'VBD'), (u"n't", u'not', u'RB'), (u'play', u'play', u'VB'), (u'football', u'football', u'NN'), (u'himself', u'himself', u'PRP'), (u',', u',', u','), (u'but', u'but', u'CC'), (u'he', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'drawn', u'draw', u'VBN'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'games', u'game', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['Unlike', 'baseball', 'and', 'basketball', ',', 'he', 'did', "n't", 'play', 'football', 'himself', ',', 'but', 'he', 'was', 'drawn', 'to', 'the', 'games', '.']}, {'string': ' He got a kick out of sitting in the stands, cheering on his team and friends.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD got) (NP (NP (DT a) (NN kick)) (PP (RB out) (IN of) (S (VP (VBG sitting) (PP (IN in) (NP (DT the) (NNS stands))))))) (, ,) (S (VP (VBG cheering) (PP (IN on) (NP (PRP$ his) (NN team) (CC and) (NNS friends)))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'kick', u'kick', u'NN'), (u'out', u'out', u'RB'), (u'of', u'of', u'IN'), (u'sitting', u'sit', u'VBG'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'stands', u'stand', u'NNS'), (u',', u',', u','), (u'cheering', u'cheer', u'VBG'), (u'on', u'on', u'IN'), (u'his', u'he', u'PRP$'), (u'team', u'team', u'NN'), (u'and', u'and', u'CC'), (u'friends', u'friend', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'got', 'a', 'kick', 'out', 'of', 'sitting', 'in', 'the', 'stands', ',', 'cheering', 'on', 'his', 'team', 'and', 'friends', '.']}, {'string': ' He once cheered so loud that he could barely speak at all for the rest of the day.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (ADVP (RB once)) (VP (VBD cheered) (ADVP (ADVP (RB so) (JJ loud)) (SBAR (IN that) (S (NP (PRP he)) (VP (MD could) (ADVP (RB barely)) (VP (VB speak) (ADVP (IN at) (DT all)) (PP (IN for) (NP (NP (DT the) (NN rest)) (PP (IN of) (NP (DT the) (NN day))))))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'once', u'once', u'RB'), (u'cheered', u'cheer', u'VBD'), (u'so', u'so', u'RB'), (u'loud', u'loud', u'JJ'), (u'that', u'that', u'IN'), (u'he', u'he', u'PRP'), (u'could', u'could', u'MD'), (u'barely', u'barely', u'RB'), (u'speak', u'speak', u'VB'), (u'at', u'at', u'IN'), (u'all', u'all', u'DT'), (u'for', u'for', u'IN'), (u'the', u'the', u'DT'), (u'rest', u'rest', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'day', u'day', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'once', 'cheered', 'so', 'loud', 'that', 'he', 'could', 'barely', 'speak', 'at', 'all', 'for', 'the', 'rest', 'of', 'the', 'day', '.']}], 'questions': [{'question': {'string': ' Based on what John likes to do, what else do you think John would enjoy?', 'parse': {'tree': '(ROOT (SBARQ (S (VP (VBN Based) (PP (IN on) (SBAR (WHNP (WP what)) (S (NP (NNP John)) (VP (VBZ likes) (S (VP (TO to) (VP (VB do)))))))))) (, ,) (WHNP (WP what) (RB else)) (SQ (VBP do) (NP (PRP you)) (VP (VB think) (SBAR (S (NP (NNP John)) (VP (MD would) (VP (VB enjoy))))))) (. ?)))', 'lemma': [(u'Based', u'base', u'VBN'), (u'on', u'on', u'IN'), (u'what', u'what', u'WP'), (u'John', u'John', u'NNP'), (u'likes', u'like', u'VBZ'), (u'to', u'to', u'TO'), (u'do', u'do', u'VB'), (u',', u',', u','), (u'what', u'what', u'WP'), (u'else', u'else', u'RB'), (u'do', u'do', u'VBP'), (u'you', u'you', u'PRP'), (u'think', u'think', u'VB'), (u'John', u'John', u'NNP'), (u'would', u'would', u'MD'), (u'enjoy', u'enjoy', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['Based', 'on', 'what', 'John', 'likes', 'to', 'do', ',', 'what', 'else', 'do', 'you', 'think', 'John', 'would', 'enjoy', '?']}, 'answers': [{'string': ' Reading', 'parse': {'tree': '(ROOT (NP (NNP Reading)))', 'lemma': [(u'Reading', u'Reading', u'NNP')]}, 'tokens': ['Reading']}, {'string': ' Cooking', 'parse': {'tree': '(ROOT (NP (NN Cooking)))', 'lemma': [(u'Cooking', u'cooking', u'NN')]}, 'tokens': ['Cooking']}, {'string': ' Soccer', 'parse': {'tree': '(ROOT (NP (NNP Soccer)))', 'lemma': [(u'Soccer', u'Soccer', u'NNP')]}, 'tokens': ['Soccer']}, {'string': ' Watching television', 'parse': {'tree': '(ROOT (S (VP (VBG Watching) (NP (NN television)))))', 'lemma': [(u'Watching', u'watch', u'VBG'), (u'television', u'television', u'NN')]}, 'tokens': ['Watching', 'television']}], 'mode': 0}, {'question': {'string': ' What kind of crazy basketball tricks does John enjoy?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (JJ crazy) (NN basketball) (NNS tricks)))) (SQ (VBZ does) (NP (NNP John)) (VP (VB enjoy))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'kind', u'kind', u'NN'), (u'of', u'of', u'IN'), (u'crazy', u'crazy', u'JJ'), (u'basketball', u'basketball', u'NN'), (u'tricks', u'trick', u'NNS'), (u'does', u'do', u'VBZ'), (u'John', u'John', u'NNP'), (u'enjoy', u'enjoy', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'kind', 'of', 'crazy', 'basketball', 'tricks', 'does', 'John', 'enjoy', '?']}, 'answers': [{'string': ' Side passes', 'parse': {'tree': '(ROOT (NP (NNP Side) (NNS passes)))', 'lemma': [(u'Side', u'Side', u'NNP'), (u'passes', u'pass', u'NNS')]}, 'tokens': ['Side', 'passes']}, {'string': ' Bounce passes', 'parse': {'tree': '(ROOT (NP (JJ Bounce) (NNS passes)))', 'lemma': [(u'Bounce', u'bounce', u'JJ'), (u'passes', u'pass', u'NNS')]}, 'tokens': ['Bounce', 'passes']}, {'string': ' Slam dunks', 'parse': {'tree': '(ROOT (NP (JJ Slam) (NNS dunks)))', 'lemma': [(u'Slam', u'slam', u'JJ'), (u'dunks', u'dunk', u'NNS')]}, 'tokens': ['Slam', 'dunks']}, {'string': ' Overhead passes', 'parse': {'tree': '(ROOT (NP (NN Overhead) (NNS passes)))', 'lemma': [(u'Overhead', u'overhead', u'NN'), (u'passes', u'pass', u'NNS')]}, 'tokens': ['Overhead', 'passes']}], 'mode': 1}, {'question': {'string': ' Why is John proud of his baseball skills?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBZ is) (NP (NP (NNP John) (NNP proud)) (PP (IN of) (NP (PRP$ his) (NN baseball) (NNS skills))))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'is', u'be', u'VBZ'), (u'John', u'John', u'NNP'), (u'proud', u'proud', u'NNP'), (u'of', u'of', u'IN'), (u'his', u'he', u'PRP$'), (u'baseball', u'baseball', u'NN'), (u'skills', u'skill', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'is', 'John', 'proud', 'of', 'his', 'baseball', 'skills', '?']}, 'answers': [{'string': ' He had a special bat', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (NP (DT a) (JJ special) (NN bat)))))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'a', u'a', u'DT'), (u'special', u'special', u'JJ'), (u'bat', u'bat', u'NN')]}, 'tokens': ['He', 'had', 'a', 'special', 'bat']}, {'string': ' He once got a home run', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (ADVP (RB once)) (VBD got) (NP (DT a) (NN home) (NN run)))))', 'lemma': [(u'He', u'he', u'PRP'), (u'once', u'once', u'RB'), (u'got', u'get', u'VBD'), (u'a', u'a', u'DT'), (u'home', u'home', u'NN'), (u'run', u'run', u'NN')]}, 'tokens': ['He', 'once', 'got', 'a', 'home', 'run']}, {'string': ' He practiced every day and every night', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD practiced) (NP (NP (DT every) (NN day)) (CC and) (NP (DT every) (NN night))))))', 'lemma': [(u'He', u'he', u'PRP'), (u'practiced', u'practice', u'VBD'), (u'every', u'every', u'DT'), (u'day', u'day', u'NN'), (u'and', u'and', u'CC'), (u'every', u'every', u'DT'), (u'night', u'night', u'NN')]}, 'tokens': ['He', 'practiced', 'every', 'day', 'and', 'every', 'night']}, {'string': ' He was a great pitcher', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (NP (DT a) (JJ great) (NN pitcher)))))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'a', u'a', u'DT'), (u'great', u'great', u'JJ'), (u'pitcher', u'pitcher', u'NN')]}, 'tokens': ['He', 'was', 'a', 'great', 'pitcher']}], 'mode': 0}, {'question': {'string': ' What kind of things does John like?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (NNS things)))) (SQ (VBZ does) (NP (NNP John)) (VP (VB like))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'kind', u'kind', u'NN'), (u'of', u'of', u'IN'), (u'things', u'thing', u'NNS'), (u'does', u'do', u'VBZ'), (u'John', u'John', u'NNP'), (u'like', u'like', u'VB'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'kind', 'of', 'things', 'does', 'John', 'like', '?']}, 'answers': [{'string': ' Clothes', 'parse': {'tree': '(ROOT (INTJ (UH Clothes)))', 'lemma': [(u'Clothes', u'clothes', u'UH')]}, 'tokens': ['Clothes']}, {'string': ' Books', 'parse': {'tree': '(ROOT (NP (NNP Books)))', 'lemma': [(u'Books', u'Books', u'NNP')]}, 'tokens': ['Books']}, {'string': ' Sports', 'parse': {'tree': '(ROOT (NP (NNP Sports)))', 'lemma': [(u'Sports', u'Sports', u'NNP')]}, 'tokens': ['Sports']}, {'string': ' Video Games', 'parse': {'tree': '(ROOT (NP (NNP Video) (NNPS Games)))', 'lemma': [(u'Video', u'Video', u'NNP'), (u'Games', u'Games', u'NNPS')]}, 'tokens': ['Video', 'Games']}], 'mode': 0}]}
{'sentences': [{'string': ' Mary loved walking through the woods with her dog, Max.', 'parse': {'tree': '(ROOT (S (NP (NNP Mary)) (VP (VBD loved) (S (VP (VBG walking) (PP (IN through) (NP (DT the) (NNS woods))) (PP (IN with) (NP (NP (PRP$ her) (NN dog)) (, ,) (NP (NNP Max))))))) (. .)))', 'lemma': [(u'Mary', u'Mary', u'NNP'), (u'loved', u'love', u'VBD'), (u'walking', u'walk', u'VBG'), (u'through', u'through', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS'), (u'with', u'with', u'IN'), (u'her', u'she', u'PRP$'), (u'dog', u'dog', u'NN'), (u',', u',', u','), (u'Max', u'Max', u'NNP'), (u'.', u'.', u'.')]}, 'tokens': ['Mary', 'loved', 'walking', 'through', 'the', 'woods', 'with', 'her', 'dog', ',', 'Max', '.']}, {'string': ' Max and Mary would go on all sorts of adventures together.', 'parse': {'tree': '(ROOT (S (NP (NNP Max) (CC and) (NNP Mary)) (VP (MD would) (VP (VB go) (PP (IN on) (NP (NP (DT all) (NNS sorts)) (PP (IN of) (NP (NNS adventures))))) (ADVP (RB together)))) (. .)))', 'lemma': [(u'Max', u'Max', u'NNP'), (u'and', u'and', u'CC'), (u'Mary', u'Mary', u'NNP'), (u'would', u'would', u'MD'), (u'go', u'go', u'VB'), (u'on', u'on', u'IN'), (u'all', u'all', u'DT'), (u'sorts', u'sort', u'NNS'), (u'of', u'of', u'IN'), (u'adventures', u'adventure', u'NNS'), (u'together', u'together', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['Max', 'and', 'Mary', 'would', 'go', 'on', 'all', 'sorts', 'of', 'adventures', 'together', '.']}, {'string': ' They really loved looking for blueberries together and then falling asleep next to each other in the tall grass.', 'parse': {'tree': '(ROOT (S (NP (PRP They)) (ADVP (RB really)) (VP (VBD loved) (S (VP (VP (VBG looking) (PP (IN for) (NP (NNS blueberries))) (ADVP (RB together))) (CC and) (ADVP (RB then)) (VP (VBG falling) (ADJP (JJ asleep) (PP (RB next) (TO to) (NP (NP (DT each) (JJ other)) (PP (IN in) (NP (DT the) (JJ tall) (NN grass)))))))))) (. .)))', 'lemma': [(u'They', u'they', u'PRP'), (u'really', u'really', u'RB'), (u'loved', u'love', u'VBD'), (u'looking', u'look', u'VBG'), (u'for', u'for', u'IN'), (u'blueberries', u'blueberry', u'NNS'), (u'together', u'together', u'RB'), (u'and', u'and', u'CC'), (u'then', u'then', u'RB'), (u'falling', u'fall', u'VBG'), (u'asleep', u'asleep', u'JJ'), (u'next', u'next', u'RB'), (u'to', u'to', u'TO'), (u'each', u'each', u'DT'), (u'other', u'other', u'JJ'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'tall', u'tall', u'JJ'), (u'grass', u'grass', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['They', 'really', 'loved', 'looking', 'for', 'blueberries', 'together', 'and', 'then', 'falling', 'asleep', 'next', 'to', 'each', 'other', 'in', 'the', 'tall', 'grass', '.']}, {'string': ' One day, as Mary was picking the blueberries, she turned around to find that Max was not there.', 'parse': {'tree': '(ROOT (S (NP (CD One) (NN day)) (, ,) (SBAR (IN as) (S (NP (NNP Mary)) (VP (VBD was) (VP (VBG picking) (NP (DT the) (NNS blueberries)))))) (, ,) (NP (PRP she)) (VP (VBD turned) (PRT (RP around)) (S (VP (TO to) (VP (VB find) (SBAR (IN that) (S (NP (NNP Max)) (VP (VBD was) (RB not) (ADVP (RB there))))))))) (. .)))', 'lemma': [(u'One', u'one', u'CD'), (u'day', u'day', u'NN'), (u',', u',', u','), (u'as', u'as', u'IN'), (u'Mary', u'Mary', u'NNP'), (u'was', u'be', u'VBD'), (u'picking', u'pick', u'VBG'), (u'the', u'the', u'DT'), (u'blueberries', u'blueberry', u'NNS'), (u',', u',', u','), (u'she', u'she', u'PRP'), (u'turned', u'turn', u'VBD'), (u'around', u'around', u'RP'), (u'to', u'to', u'TO'), (u'find', u'find', u'VB'), (u'that', u'that', u'IN'), (u'Max', u'Max', u'NNP'), (u'was', u'be', u'VBD'), (u'not', u'not', u'RB'), (u'there', u'there', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['One', 'day', ',', 'as', 'Mary', 'was', 'picking', 'the', 'blueberries', ',', 'she', 'turned', 'around', 'to', 'find', 'that', 'Max', 'was', 'not', 'there', '.']}, {'string': ' She became worried and ran off to look for her dog.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VP (VBD became) (S (ADJP (JJ worried)))) (CC and) (VP (VBD ran) (PRT (RP off)) (S (VP (TO to) (VP (VB look) (PP (IN for) (NP (PRP$ her) (NN dog)))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'became', u'become', u'VBD'), (u'worried', u'worried', u'JJ'), (u'and', u'and', u'CC'), (u'ran', u'run', u'VBD'), (u'off', u'off', u'RP'), (u'to', u'to', u'TO'), (u'look', u'look', u'VB'), (u'for', u'for', u'IN'), (u'her', u'she', u'PRP$'), (u'dog', u'dog', u'NN'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'became', 'worried', 'and', 'ran', 'off', 'to', 'look', 'for', 'her', 'dog', '.']}, {'string': ' She looked in all of their favorite spots ... next to the stream, in their secret hiding place behind the raspberry bushes, and even inside the old cabin that sat in the woods.', 'parse': {'tree': '(ROOT (S (NP (PRP She)) (VP (VBD looked) (PP (PP (IN in) (NP (NP (DT all)) (PP (IN of) (NP (PRP$ their) (JJ favorite) (NNS spots))))) (: ...) (PP (ADVP (JJ next)) (TO to) (NP (DT the) (NN stream))) (, ,) (PP (IN in) (NP (NP (PRP$ their) (JJ secret) (NN hiding) (NN place)) (PP (IN behind) (NP (DT the) (JJ raspberry) (NN bushes))))) (, ,) (CC and) (PP (RB even) (IN inside) (NP (NP (DT the) (JJ old) (NN cabin)) (SBAR (WHNP (WDT that)) (S (VP (VBD sat) (PP (IN in) (NP (DT the) (NNS woods)))))))))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'looked', u'look', u'VBD'), (u'in', u'in', u'IN'), (u'all', u'all', u'DT'), (u'of', u'of', u'IN'), (u'their', u'they', u'PRP$'), (u'favorite', u'favorite', u'JJ'), (u'spots', u'spot', u'NNS'), (u'...', u'...', u':'), (u'next', u'next', u'JJ'), (u'to', u'to', u'TO'), (u'the', u'the', u'DT'), (u'stream', u'stream', u'NN'), (u',', u',', u','), (u'in', u'in', u'IN'), (u'their', u'they', u'PRP$'), (u'secret', u'secret', u'JJ'), (u'hiding', u'hiding', u'NN'), (u'place', u'place', u'NN'), (u'behind', u'behind', u'IN'), (u'the', u'the', u'DT'), (u'raspberry', u'raspberry', u'JJ'), (u'bushes', u'bush', u'NN'), (u',', u',', u','), (u'and', u'and', u'CC'), (u'even', u'even', u'RB'), (u'inside', u'inside', u'IN'), (u'the', u'the', u'DT'), (u'old', u'old', u'JJ'), (u'cabin', u'cabin', u'NN'), (u'that', u'that', u'WDT'), (u'sat', u'sit', u'VBD'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'looked', 'in', 'all', 'of', 'their', 'favorite', 'spots', '...', 'next', 'to', 'the', 'stream', ',', 'in', 'their', 'secret', 'hiding', 'place', 'behind', 'the', 'raspberry', 'bushes', ',', 'and', 'even', 'inside', 'the', 'old', 'cabin', 'that', 'sat', 'in', 'the', 'woods', '.']}, {'string': ' But poor Max was nowhere to be found.', 'parse': {'tree': '(ROOT (S (CC But) (NP (NNP poor) (NNP Max)) (VP (VBD was) (ADVP (RB nowhere)) (S (VP (TO to) (VP (VB be) (VP (VBN found)))))) (. .)))', 'lemma': [(u'But', u'but', u'CC'), (u'poor', u'poor', u'NNP'), (u'Max', u'Max', u'NNP'), (u'was', u'be', u'VBD'), (u'nowhere', u'nowhere', u'RB'), (u'to', u'to', u'TO'), (u'be', u'be', u'VB'), (u'found', u'find', u'VBN'), (u'.', u'.', u'.')]}, 'tokens': ['But', 'poor', 'Max', 'was', 'nowhere', 'to', 'be', 'found', '.']}, {'string': ' Nonetheless, Mary would not give up.', 'parse': {'tree': '(ROOT (S (ADVP (RB Nonetheless)) (, ,) (NP (NNP Mary)) (VP (MD would) (RB not) (VP (VB give) (PRT (RP up)))) (. .)))', 'lemma': [(u'Nonetheless', u'nonetheless', u'RB'), (u',', u',', u','), (u'Mary', u'Mary', u'NNP'), (u'would', u'would', u'MD'), (u'not', u'not', u'RB'), (u'give', u'give', u'VB'), (u'up', u'up', u'RP'), (u'.', u'.', u'.')]}, 'tokens': ['Nonetheless', ',', 'Mary', 'would', 'not', 'give', 'up', '.']}, {'string': ' She kept looking and she found him not very far away.', 'parse': {'tree': '(ROOT (S (S (NP (PRP She)) (VP (VBD kept) (S (VP (VBG looking))))) (CC and) (S (NP (PRP she)) (VP (VBD found) (NP (PRP him)) (ADVP (RB not) (RB very) (RB far) (RB away)))) (. .)))', 'lemma': [(u'She', u'she', u'PRP'), (u'kept', u'keep', u'VBD'), (u'looking', u'look', u'VBG'), (u'and', u'and', u'CC'), (u'she', u'she', u'PRP'), (u'found', u'find', u'VBD'), (u'him', u'he', u'PRP'), (u'not', u'not', u'RB'), (u'very', u'very', u'RB'), (u'far', u'far', u'RB'), (u'away', u'away', u'RB'), (u'.', u'.', u'.')]}, 'tokens': ['She', 'kept', 'looking', 'and', 'she', 'found', 'him', 'not', 'very', 'far', 'away', '.']}, {'string': ' He had seen a squirrel and run to chase it.', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD had) (VP (VP (VBN seen) (NP (DT a) (NN squirrel))) (CC and) (VP (VBN run) (S (VP (TO to) (VP (VB chase) (NP (PRP it)))))))) (. .)))', 'lemma': [(u'He', u'he', u'PRP'), (u'had', u'have', u'VBD'), (u'seen', u'see', u'VBN'), (u'a', u'a', u'DT'), (u'squirrel', u'squirrel', u'NN'), (u'and', u'and', u'CC'), (u'run', u'run', u'VBN'), (u'to', u'to', u'TO'), (u'chase', u'chase', u'VB'), (u'it', u'it', u'PRP'), (u'.', u'.', u'.')]}, 'tokens': ['He', 'had', 'seen', 'a', 'squirrel', 'and', 'run', 'to', 'chase', 'it', '.']}, {'string': " When Mary called Max 's name he left the squirrel and happily returned to Mary, wagging his tail as he went.", 'parse': {'tree': "(ROOT (S (SBAR (WHADVP (WRB When)) (S (NP (NNP Mary)) (VP (VBD called) (NP (NP (NNP Max) (POS 's)) (NN name))))) (NP (PRP he)) (VP (VP (VBD left) (NP (DT the) (NN squirrel))) (CC and) (VP (ADVP (RB happily)) (VBD returned) (PP (TO to) (NP (NNP Mary))) (, ,) (S (VP (VBG wagging) (NP (PRP$ his) (NN tail)) (SBAR (IN as) (S (NP (PRP he)) (VP (VBD went)))))))) (. .)))", 'lemma': [(u'When', u'when', u'WRB'), (u'Mary', u'Mary', u'NNP'), (u'called', u'call', u'VBD'), (u'Max', u'Max', u'NNP'), (u"'s", u"'s", u'POS'), (u'name', u'name', u'NN'), (u'he', u'he', u'PRP'), (u'left', u'leave', u'VBD'), (u'the', u'the', u'DT'), (u'squirrel', u'squirrel', u'NN'), (u'and', u'and', u'CC'), (u'happily', u'happily', u'RB'), (u'returned', u'return', u'VBD'), (u'to', u'to', u'TO'), (u'Mary', u'Mary', u'NNP'), (u',', u',', u','), (u'wagging', u'wag', u'VBG'), (u'his', u'he', u'PRP$'), (u'tail', u'tail', u'NN'), (u'as', u'as', u'IN'), (u'he', u'he', u'PRP'), (u'went', u'go', u'VBD'), (u'.', u'.', u'.')]}, 'tokens': ['When', 'Mary', 'called', 'Max', "'s", 'name', 'he', 'left', 'the', 'squirrel', 'and', 'happily', 'returned', 'to', 'Mary', ',', 'wagging', 'his', 'tail', 'as', 'he', 'went', '.']}], 'questions': [{'question': {'string': ' How did Max feel when Mary found him at the end of the story?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB How)) (SQ (VBD did) (NP (NNP Max)) (VP (VB feel) (SBAR (WHADVP (WRB when)) (S (NP (NNP Mary)) (VP (VBD found) (NP (PRP him)) (PP (IN at) (NP (NP (DT the) (NN end)) (PP (IN of) (NP (DT the) (NN story)))))))))) (. ?)))', 'lemma': [(u'How', u'how', u'WRB'), (u'did', u'do', u'VBD'), (u'Max', u'Max', u'NNP'), (u'feel', u'feel', u'VB'), (u'when', u'when', u'WRB'), (u'Mary', u'Mary', u'NNP'), (u'found', u'find', u'VBD'), (u'him', u'he', u'PRP'), (u'at', u'at', u'IN'), (u'the', u'the', u'DT'), (u'end', u'end', u'NN'), (u'of', u'of', u'IN'), (u'the', u'the', u'DT'), (u'story', u'story', u'NN'), (u'?', u'?', u'.')]}, 'tokens': ['How', 'did', 'Max', 'feel', 'when', 'Mary', 'found', 'him', 'at', 'the', 'end', 'of', 'the', 'story', '?']}, 'answers': [{'string': ' Happy', 'parse': {'tree': '(ROOT (ADJP (JJ Happy)))', 'lemma': [(u'Happy', u'happy', u'JJ')]}, 'tokens': ['Happy']}, {'string': ' Angry', 'parse': {'tree': '(ROOT (NP (NNP Angry)))', 'lemma': [(u'Angry', u'Angry', u'NNP')]}, 'tokens': ['Angry']}, {'string': ' Bored', 'parse': {'tree': '(ROOT (NP (NNP Bored)))', 'lemma': [(u'Bored', u'Bored', u'NNP')]}, 'tokens': ['Bored']}, {'string': ' Afraid', 'parse': {'tree': '(ROOT (NP (NNP Afraid)))', 'lemma': [(u'Afraid', u'Afraid', u'NNP')]}, 'tokens': ['Afraid']}], 'mode': 0}, {'question': {'string': ' What was Mary doing in the woods?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WP What)) (SQ (VBD was) (NP (NNP Mary)) (VP (VBG doing) (PP (IN in) (NP (DT the) (NNS woods))))) (. ?)))', 'lemma': [(u'What', u'what', u'WP'), (u'was', u'be', u'VBD'), (u'Mary', u'Mary', u'NNP'), (u'doing', u'do', u'VBG'), (u'in', u'in', u'IN'), (u'the', u'the', u'DT'), (u'woods', u'wood', u'NNS'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'was', 'Mary', 'doing', 'in', 'the', 'woods', '?']}, 'answers': [{'string': ' Picking blueberries', 'parse': {'tree': '(ROOT (NP (JJ Picking) (NNS blueberries)))', 'lemma': [(u'Picking', u'picking', u'JJ'), (u'blueberries', u'blueberry', u'NNS')]}, 'tokens': ['Picking', 'blueberries']}, {'string': ' Chasing squirrels', 'parse': {'tree': '(ROOT (NP (JJ Chasing) (NNS squirrels)))', 'lemma': [(u'Chasing', u'chasing', u'JJ'), (u'squirrels', u'squirrel', u'NNS')]}, 'tokens': ['Chasing', 'squirrels']}, {'string': ' Napping', 'parse': {'tree': '(ROOT (NP (NN Napping)))', 'lemma': [(u'Napping', u'napping', u'NN')]}, 'tokens': ['Napping']}, {'string': ' Visiting a cabin', 'parse': {'tree': '(ROOT (S (VP (VBG Visiting) (NP (DT a) (NN cabin)))))', 'lemma': [(u'Visiting', u'visit', u'VBG'), (u'a', u'a', u'DT'), (u'cabin', u'cabin', u'NN')]}, 'tokens': ['Visiting', 'a', 'cabin']}], 'mode': 1}, {'question': {'string': ' What kind of animal is Max?', 'parse': {'tree': '(ROOT (SBARQ (WHNP (WHNP (WDT What) (NN kind)) (PP (IN of) (NP (NN animal)))) (SQ (VBZ is) (NP (NNP Max))) (. ?)))', 'lemma': [(u'What', u'what', u'WDT'), (u'kind', u'kind', u'NN'), (u'of', u'of', u'IN'), (u'animal', u'animal', u'NN'), (u'is', u'be', u'VBZ'), (u'Max', u'Max', u'NNP'), (u'?', u'?', u'.')]}, 'tokens': ['What', 'kind', 'of', 'animal', 'is', 'Max', '?']}, 'answers': [{'string': ' Squirrel', 'parse': {'tree': '(ROOT (NP (NNP Squirrel)))', 'lemma': [(u'Squirrel', u'Squirrel', u'NNP')]}, 'tokens': ['Squirrel']}, {'string': ' Cat', 'parse': {'tree': '(ROOT (NP (NNP Cat)))', 'lemma': [(u'Cat', u'Cat', u'NNP')]}, 'tokens': ['Cat']}, {'string': ' Rabbit', 'parse': {'tree': '(ROOT (NP (NNP Rabbit)))', 'lemma': [(u'Rabbit', u'Rabbit', u'NNP')]}, 'tokens': ['Rabbit']}, {'string': ' Dog', 'parse': {'tree': '(ROOT (NP (NNP Dog)))', 'lemma': [(u'Dog', u'Dog', u'NNP')]}, 'tokens': ['Dog']}], 'mode': 1}, {'question': {'string': ' Why did Max run off?', 'parse': {'tree': '(ROOT (SBARQ (WHADVP (WRB Why)) (SQ (VBD did) (NP (NNP Max)) (VP (VB run) (PRT (RP off)))) (. ?)))', 'lemma': [(u'Why', u'why', u'WRB'), (u'did', u'do', u'VBD'), (u'Max', u'Max', u'NNP'), (u'run', u'run', u'VB'), (u'off', u'off', u'RP'), (u'?', u'?', u'.')]}, 'tokens': ['Why', 'did', 'Max', 'run', 'off', '?']}, 'answers': [{'string': ' He was afraid', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD was) (ADJP (JJ afraid)))))', 'lemma': [(u'He', u'he', u'PRP'), (u'was', u'be', u'VBD'), (u'afraid', u'afraid', u'JJ')]}, 'tokens': ['He', 'was', 'afraid']}, {'string': ' He heard a loud noise', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD heard) (NP (DT a) (JJ loud) (NN noise)))))', 'lemma': [(u'He', u'he', u'PRP'), (u'heard', u'hear', u'VBD'), (u'a', u'a', u'DT'), (u'loud', u'loud', u'JJ'), (u'noise', u'noise', u'NN')]}, 'tokens': ['He', 'heard', 'a', 'loud', 'noise']}, {'string': ' He wanted some water', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD wanted) (NP (DT some) (NN water)))))', 'lemma': [(u'He', u'he', u'PRP'), (u'wanted', u'want', u'VBD'), (u'some', u'some', u'DT'), (u'water', u'water', u'NN')]}, 'tokens': ['He', 'wanted', 'some', 'water']}, {'string': ' He chased a squirrel', 'parse': {'tree': '(ROOT (S (NP (PRP He)) (VP (VBD chased) (NP (DT a) (NN squirrel)))))', 'lemma': [(u'He', u'he', u'PRP'), (u'chased', u'chase', u'VBD'), (u'a', u'a', u'DT'), (u'squirrel', u'squirrel', u'NN')]}, 'tokens': ['He', 'chased', 'a', 'squirrel']}], 'mode': 0}]}